{"id"=>38, "name"=>"Web Developer Track", "slug"=>"web-developer-track", "channel"=>nil, "short_name"=>"Web", "version"=>"0.0", "projects"=>7, "sections"=>[{"id"=>181, "roadmap_id"=>38, "name"=>"Module 1: Programming Fundamentals Introduction", "time_estimate"=>"1 Hour", "point_ratio"=>0.0, "description"=>"", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"unlocked", "ref"=>"7594f259-17ad-4fd4-8176-4dd31fec7bf7|0", "section_type"=>"foundation", "checkpoints"=>[{"id"=>2265, "name"=>"Welcome to Module 1", "summary"=>"Learn about the Bloc experience, your mentor, the curriculum, and expectations", "body"=>"<!-- { ids:[2265], name:'Welcome to Phase 1', summary:'Learn about the Bloc experience, your mentor, the curriculum, and expectations' } -->\r\n<center>![journey](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-1.jpg)</center>\r\n\r\n<br>\r\n\r\nWelcome to Bloc! You're about to embark on an exciting, challenging, and rewarding journey. You have enrolled in an immersive program that will push you to your limits, but fear not, you will have an abundance of support! In this checkpoint we'll explain the structure and expectations of the Bloc experience. Know that at its core, Bloc is about **mentorship**. When you become frustrated, discouraged, or want to throw your laptop against a wall, remember that you have a dedicated mentor who invests in your success. Let's review Bloc's key features to make sure you start on a productive track.\r\n\r\n### Your Time Commitment\r\n\r\n<center>![time](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-2.jpg)</center>\r\n\r\n<br>\r\n\r\nBloc is an immersive experience, and requires a serious time commitment. Students spend approximately 540 hours in Bloc before graduating. You'll achieve the best results with disciplined time management; review the following time commitments, based on your pace:\r\n\r\n| Weekly Appointments | Weekly Time Commitment |\r\n|---------------------|------------------------|\r\n| 2 | 20 hours |\r\n| 1 | 12 hours |\r\n\r\nWe can't stress enough the importance of a disciplined schedule. Committing 12 or 20 hours a week is no easy task. You'll need to sacrifice TV, parties, video games, or even vacations. Remember that you'll maximize your results if you stay truly immersed throughout Bloc. You _must_ put in the time, or you will not achieve your desired results; there's too much to learn and build. We recommend that you schedule regular study times on your calendar, and diligently follow that schedule. Share this schedule with your mentor so they know when you'll be working.\r\n\r\n### Curriculum\r\n\r\nOur curriculum is built specifically for students and mentors to promote effective learning and collaboration. The curriculum is your roadmap through the Bloc experience; it defines the direction, topics, and sequence you'll need to learn and achieve your goals.\r\n\r\nThe curriculum consists of three phases. Each phase contains checkpoints with explicit assignments that you must complete to move on:\r\n\r\n- **Phase 1: Programming Fundamentals** – learn HTML, CSS, the command line, Git, GitHub, Ruby, and JavaScript. You'll use all of these tools extensively throughout Bloc as you build projects. Your mentor will be with you every step of the way, and will help you master these fundamental concepts.\r\n\r\n    > Bloc will provide you with a Code School subscription during Phase 1, which is required for some of the checkpoints. You'll receive an email on your first day with a link to sign up for Code School. Bloc will pay for your subscription until you complete Phase 1. If you have trouble signing up, [email help@bloc.io](mailto:help@bloc.io) immediately.\r\n\r\n- **Phase 2: Web Development Foundation** – apply your fundamental programming skills to web development as we guide you through two projects and help you build four others. We wrote this curriculum specifically for Bloc students.\r\n- **Phase 3: Specialization** – you'll work with your mentor and our Outcomes team to select at least two more projects based on your outcome goal. These projects will stand out in your portfolio and position you for interviews with companies.\r\n\r\nEach of the phases consists of checkpoints, assignments, and quizzes. You should discuss each checkpoint with your mentor and resolve any questions you have before progressing. After submitting a checkpoint assignment, your mentor will review your work and provide you with feedback. Quizzes will help us understand your strengths and weaknesses, and we may adjust your program based on your quiz results.\r\n\r\nThe curriculum is constantly assessed and improved. The technologies you're learning move fast, and thus, we must keep the curriculum current. We update the curriculum frequently, and will notify you when there are major changes.\r\n\r\nWe illustrate some tips for successful learning in the following video. We recommend that you come back to read this checkpoint and watch this video throughout Bloc:\r\n\r\n<center>\r\n  <iframe src=\"https://fast.wistia.net/embed/iframe/u53k9sb8uy\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\r\n</center>\r\n\r\n### Mentor Appointments\r\n\r\n<center>![appointment](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-4.jpg)</center>\r\n\r\n<br>\r\n\r\nAppointments are live, one-on-one meetings with your mentor. Each appointment is usually 30 minutes in length, though the actual duration will depend on the topic and your mentor's judgement.\r\n\r\nAppointments are virtual, and have software requirements:\r\n\r\n- [Google Chrome Web Browser](https://www.google.com/intl/en/chrome/browser/) - We think Chrome is the best browser for developers and designers, and we recommend using it in general.\r\n- __A screensharing application__ like Screenhero. Message your mentor to determine their preference, and download the software.\r\n- [Google Hangouts](https://www.google.com/hangouts/) or [Skype](https://www.skype.com) for video chat.\r\n\r\nIf you and your mentor prepare, have an agenda, and arrive on time, an appointment will be a high-leverage learning experience. Do not lose respect for your appointments; productive appointments are essential for a great experience. An appointment's agenda is not limited, but often includes:\r\n\r\n- checkpoint review\r\n- assignment review\r\n- project review\r\n- pair programming\r\n- code review\r\n- design critique\r\n- debugging and troubleshooting\r\n- best practice technique sharing\r\n\r\nYour mentor will often lead the appointment, but you should come with a list of questions and issues.\r\n\r\n### Communication\r\n\r\n<center>![communication](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-5.jpg)</center>\r\n\r\nMuch of your communication in Bloc will be asynchronous. You'll write a message, submit an assignment, or ask a question, and your mentor will respond. The recommended way to communicate asynchronously is to use our [messages feature](https://www.bloc.io/message_threads). You'll also have the ability to submit checkpoint-specific messages at the bottom of each checkpoint. (You'll see this in action below, in this checkpoint.)\r\n\r\nTo speak with someone at Bloc who is not your mentor, you can email [Bloc Help](mailto:help@bloc.io) anytime. You will **always** have someone to speak with at Bloc, no matter what the issue is.\r\n\r\nYou will establish other means of communication with your mentor, based on your mutual preferences. We encourage you to use the Bloc messages feature as much as possible, but realize that other communication tools may sometimes be necessary. The following section lists some alternative communication tools.\r\n\r\n### Ecosystem\r\n\r\nBloc's ecosystem includes tools that make it easier to collaborate and get help when you need it. The ecosystem is always evolving, and you should explore its tools. Review the [Ecosystem resource](https://www.bloc.io/resources/ecosystem) and ask your mentor which tools they use.\r\n\r\nSlack, in particular, is a tool Bloc students use to interact with each other, Bloc graduates, and employees of Bloc. [Download Slack](https://slack.com/downloads) and use the form below to request access to Bloc's private student Slack group. You will receive an email once your account is created, at which point you can [sign into the chat room](https://students-bloc.slack.com/).\r\n\r\n<iframe src=\"https://bloc-students-slack-invite.herokuapp.com\" scrolling=\"no\" frameborder=\"0\" width=\"100%\" height=\"410\"></iframe>\r\n\r\n### Expectations\r\n\r\n<center>![mentor-apprentice](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-6.jpg)</center>\r\n\r\n<br>\r\n\r\nYour expectations must align with your mentor's to be successful in Bloc. It's important to understand what's expected of you, and what you should expect of your mentor.\r\n\r\n### Mentor Expectations\r\n\r\nMentors will:\r\n\r\n* Inspire and lead students.\r\n* Prepare for appointments and arrive on time.\r\n* Hold students accountable.\r\n* Respond to all questions and issues.\r\n* Provide feedback on submitted checkpoints and assignments.\r\n\r\n### Student Expectations\r\n\r\nStudents will:\r\n\r\n* Commit the requisite time to Bloc.\r\n* Trust their mentor.\r\n* Accept the assignments and projects provided by Bloc.\r\n* Prepare for appointments and arrive on time.\r\n* Communicate openly with their mentor.\r\n\r\n### Succeeding in Bloc and Beyond\r\n\r\n<center>![success](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-7.jpg)</center>\r\n\r\n<br>\r\n\r\nMaintaining a healthy perspective on yourself and your work is crucial for getting a job, starting a company, building a product, or winning client work. Students who excel portray the following traits:\r\n\r\n* I am responsible for my own learning.\r\n* I embrace challenges.\r\n* I am focused and disciplined.\r\n* I share what I learn with the Bloc community.\r\n* I celebrate accomplishments.", "assignment"=>"Introduce yourself to your mentor by completing the following tasks:\r\n\r\n1. Upload a photo of yourself to your Bloc account.\r\n2. Complete your account and bio in Bloc.\r\n3. Briefly review [Markdown](http://guides.github.com/overviews/mastering-markdown/) syntax. You don't have to memorize all the syntax now, and you can certainly ask your mentor about common Markdown idioms. Try to get a feel for some of the basic syntax, like headings, links and code blocks.\r\n4. Send your mentor a Bloc message using some simple Markdown, and share something about yourself. For example, \"what inspired you to join Bloc?\" or \"what's the most valuable lesson you've learned in life?\".\r\n5. Find your mentor on Slack and send them a direct message. Also, introduce yourself to your course Slack channel.\r\n6. Write a list of goals in a message that you hope to achieve during Bloc. Discuss these goals with your mentor during your first meeting.", "roadmap_section_id"=>181, "roadmap_section_ref"=>"7594f259-17ad-4fd4-8176-4dd31fec7bf7|0", "default_student_access"=>"unlocked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"13ed9129-2e7e-4d69-9b57-747e9ed53898|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2265", "assessment"=>nil}]}, {"id"=>182, "roadmap_id"=>38, "name"=>"Frontend Programming Fundamentals", "time_estimate"=>"60 Hours", "point_ratio"=>0.0, "description"=>"", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"unlocked", "ref"=>"003bf7d7-a905-45bc-8246-82bae1d45044|0", "section_type"=>"foundation", "checkpoints"=>[{"id"=>2341, "name"=>"Frontend Foundations", "summary"=>"Learn the fundamentals of HTML and CSS while building a foundation for advanced frontend development.", "body"=>"## Overview and Purpose\r\n\r\nThis checkpoint teaches the fundamentals of HTML and CSS for frontend web development.\r\n\r\n## Objectives\r\n\r\nAfter this checkpoint, you should be able to:\r\n\r\n- Format text content and links with HTML.\r\n- Change how content is displayed with CSS.\r\n- Reuse CSS across multiple pages and arrange content in well-defined sections.\r\n- Add content and background images to your site.\r\n- Customize fonts and add forms that accept different types of user input.", "assignment"=>"Complete the [Frontend Foundations](https://www.codeschool.com/courses/front-end-foundations) course using your Code School account provided by Bloc. Submit a link to your public report card to your mentor. In your submission message, ask your mentor questions about specific exercises that you struggled with. Review [Writing the Perfect Question](https://codeblog.jonskeet.uk/2010/08/29/writing-the-perfect-question/) by the prolific Stack Overflow contributor [Jon Skeet](http://stackoverflow.com/users/22656/jon-skeet) as it will help you craft great questions.", "roadmap_section_id"=>182, "roadmap_section_ref"=>"003bf7d7-a905-45bc-8246-82bae1d45044|0", "default_student_access"=>"unlocked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"335bc342-14ce-4f2f-a177-c01ed454677f|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2341", "assessment"=>nil}, {"id"=>2342, "name"=>"Frontend Formations", "summary"=>"Learn the fundamentals of HTML and CSS while building a foundation for advanced frontend development.", "body"=>"## Overview and Purpose\r\n\r\nThis checkpoint teaches the latest versions of HTML and CSS including HTML5 tags, form elements, attributes, input types, and CSS styling.\r\n\r\n## Objectives\r\n\r\nAfter this checkpoint, you should be able to:\r\n\r\n- Understand which HTML elements have been updated in HTML5.\r\n- Understand section, article, header, footer, and time elements.\r\n- Use HTML5 form input types, elements, and attributes.\r\n- Use border radius, box shadow, text shadow, box sizing, multiple backgrounds, and gradients.\r\n- Explain the CSS principle of progressive enhancement.", "assignment"=>"Complete the [Frontend Formations](https://www.codeschool.com/courses/front-end-formations) course using your Code School account provided by Bloc. Submit a link to your public report card to your mentor. In your submission message, ask your mentor questions about specific exercises that you struggled with. Review [Writing the Perfect Question](https://codeblog.jonskeet.uk/2010/08/29/writing-the-perfect-question/) by the prolific Stack Overflow contributor [Jon Skeet](http://stackoverflow.com/users/22656/jon-skeet) as it will help you craft great questions.", "roadmap_section_id"=>182, "roadmap_section_ref"=>"003bf7d7-a905-45bc-8246-82bae1d45044|0", "default_student_access"=>"unlocked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"d379e95e-3717-44b4-93ce-9cebe2229d52|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2342", "assessment"=>nil}, {"id"=>2188, "name"=>"Command Line", "summary"=>"Learn how to use the command line to manipulate data and automate tasks", "body"=>"<!-- { ids:[2188], name:'Command Line', summary:'Learn how to use the command line to manipulate data and automate tasks' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Command Line Game](http://web.mit.edu/mprat/Public/web/Terminus/Web/main.html)\n* [Command Line Flashcards](https://quizlet.com/146644215/bloc-front-end-fundamentals-command-line-basics-flash-cards/)\n* [Mark Bates Conquering the Command Line](http://conqueringthecommandline.com/book)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint teaches you how to use the command line to manipulate data and automate tasks.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Describe the command line and what it's used for.\n- Navigate directories and files.\n- Copy, move, and delete files and directories.\n- Redirect input and output to and from files and programs.\n- Configure environment variables.", "assignment"=>"Complete the [Command Line](https://www.codecademy.com/learn/learn-the-command-line) course using your Codecademy account listed in your Bloc profile. Submit a link to your public profile to your mentor. In your submission message, ask your mentor questions about specific exercises that you struggled with.\n\n> **You don’t need a “pro” Codecademy membership**. There are quizzes and special projects in some of these courses which require a “pro” membership for Codecademy. You don’t need to complete them or pay any money. Completing the free lessons is adequate.\n\nReview [Writing the Perfect Question](https://codeblog.jonskeet.uk/2010/08/29/writing-the-perfect-question/) by the prolific Stack Overflow contributor [Jon Skeet](http://stackoverflow.com/users/22656/jon-skeet) as it will help you craft great questions.", "roadmap_section_id"=>182, "roadmap_section_ref"=>"003bf7d7-a905-45bc-8246-82bae1d45044|0", "default_student_access"=>"unlocked", "active_index"=>3, "checkpoint_type"=>"normal", "position"=>3, "points"=>1, "ref"=>"94798f1d-8769-4c20-bced-3dd9ab1ca329|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2188", "assessment"=>nil}, {"id"=>2189, "name"=>"Introduction to Git and GitHub", "summary"=>"Learn the basic concepts of Git version control", "body"=>"<!-- { ids:[2189], name:'Introduction to Git and GitHub', summary:'Learn the basic concepts of Git version control' } -->\n\n## Overview and Purpose\n\nThis checkpoint teaches you the basic concepts of Git version control.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Initialize a repository.\n- Commit code to your local repository.\n- Push code to a remote repository.", "assignment"=>"Complete the [Try Git](https://www.codeschool.com/courses/try-git) course using your Code School account provided by Bloc. Submit a link to your public report card to your mentor. In your submission message, ask your mentor questions about specific exercises that you struggled with. Review [Writing the Perfect Question](https://codeblog.jonskeet.uk/2010/08/29/writing-the-perfect-question/) by the prolific Stack Overflow contributor [Jon Skeet](http://stackoverflow.com/users/22656/jon-skeet) as it will help you craft great questions.", "roadmap_section_id"=>182, "roadmap_section_ref"=>"003bf7d7-a905-45bc-8246-82bae1d45044|0", "default_student_access"=>"unlocked", "active_index"=>4, "checkpoint_type"=>"normal", "position"=>4, "points"=>1, "ref"=>"57c54308-cca7-4841-8ef9-804cb7f4e14e|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2189", "assessment"=>nil}, {"id"=>2191, "name"=>"Git Essentials", "summary"=>"Learn advanced Git by practicing the concepts of Git version control", "body"=>"<!-- { ids:[2191], name:'Git Essentials', summary:'Learn advanced Git by practicing the concepts of Git version control' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Rewriting History](https://www.atlassian.com/git/tutorials/rewriting-history/)\n* [Mastercasts: Basic Git Theory](https://www.youtube.com/watch?v=0EEWvoYkcuI&index=1&list=PLKNtmMPU2nd4utl6V4RvkaeKgf5npaBad)\n* [Git Flashcards](https://quizlet.com/146321191/bloc-frontend-programming-fundamentals-git-flash-cards/)\n* [Git Terms](https://gist.github.com/barnes7td/04624e4a25751578662d6306b7cb8529)\n* [Code Your Face Off Beginners Guide to Git](http://codeyourfaceoff.net/courses/cyfo-beginners-guide-to-git)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint teaches you advanced Git by practicing the concepts of Git version control.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Add and remove changed files.\n- Explain the difference between local and remote repositories.\n- Understand how branching works in Git.\n- Fix merge conflicts.", "assignment"=>"Complete the [Git Real](https://www.codeschool.com/courses/git-real) course using your Code School account provided by Bloc. Submit a link to your public report card to your mentor. In your submission message, ask your mentor questions about specific exercises that you struggled with. Review [Writing the Perfect Question](https://codeblog.jonskeet.uk/2010/08/29/writing-the-perfect-question/) by the prolific Stack Overflow contributor [Jon Skeet](http://stackoverflow.com/users/22656/jon-skeet) as it will help you craft great questions.", "roadmap_section_id"=>182, "roadmap_section_ref"=>"003bf7d7-a905-45bc-8246-82bae1d45044|0", "default_student_access"=>"unlocked", "active_index"=>5, "checkpoint_type"=>"normal", "position"=>5, "points"=>1, "ref"=>"44780914-a8fc-4408-9af5-53247fcb7524|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2191", "assessment"=>nil}, {"id"=>2299, "name"=>"Quiz: HTML, CSS, and Git", "summary"=>"Quiz: HTML, CSS, and Git", "body"=>"", "assignment"=>"", "roadmap_section_id"=>182, "roadmap_section_ref"=>"003bf7d7-a905-45bc-8246-82bae1d45044|0", "default_student_access"=>"unlocked", "active_index"=>6, "checkpoint_type"=>"quiz", "position"=>6, "points"=>1, "ref"=>"95dc7941-c11a-4c83-8fed-a077e2cc2d8a|0", "exercises"=>false, "quiz_id"=>4, "path"=>"/checkpoints/2299", "assessment"=>nil}, {"id"=>2269, "name"=>"Prepare to Search", "summary"=>"Narrow your focus, shore up your skills, and prepare to look for opportunities", "body"=>"<!-- { ids:[1923,1931,2269], name:\"Prepare to Search\", summary:\"Narrow your focus, shore up your skills, and prepare to look for opportunities\" } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Cracking Coding Interview](https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850)\n* [Cracking the Coding Interview Video Tutorials](https://www.hackerrank.com/domains/tutorials/cracking-the-coding-interview)\n* [The Four Categories of Technical Interview](https://medium.com/@sax1johno/the-four-categories-of-technical-interview-question-and-how-to-ace-them-2c96678cdf79)\n</mentor-checkpoint-note>\n\n_Complete this checkpoint and the second Career Prep checkpoint (Networking) immediately after starting your Bloc program. Students who start their job search early have drastically better outcomes. The third Career Prep checkpoint (Career Marketing Documents) can be postponed until the last 25% of your program_.\n\n## Overview and Purpose\n\nStudents join Bloc to start a new career. After any structured educational program, including Bloc, many students become frustrated during the job hunt. Students don’t know how to effectively spend their time, find a job, or set themselves up for success. The most effective way to quickly find a job is to focus on a single industry vertical (also called a business model or industry) as early as possible.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Choose a single industry vertical to focus on during your Bloc program.\n- Know the industry's technologies and major companies.\n- Have a plan of how to incorporate this focus into the rest of your Bloc program.\n\n<a name=\"common-frustrations\"></a>\n## Common Frustrations\n\nStudents become frustrated during the job hunt for many reasons. Many students aren’t sure how to spend their time, they become demoralized when they start to feel like they’re moving away from a job instead of towards one, and ultimately get frustrated when they can’t find a job.\n\nThe first common frustration that students have is _not knowing how to spend their time_. Students know that they’re supposed to keep learning after Bloc, but what should they focus on? Interview questions? New technologies? Maybe a side-project? They know they should be networking, but how? Who should they network with? What should they talk about? They know they should be applying to jobs, but applying to every open position they see is daunting.\n\nAnother common frustration is that _many students move backwards during a job search_. Instead of continuing to grow and learn as developers, students forget the fundamentals and haphazardly learn trendy technologies that don’t help their resume. Instead of tactfully building a network of relationships, students weaken their existing network by asking everyone they know for a job. Instead of feeling confident after completing a difficult program, they begin to feel like they’re not worthy of an amazing job.\n\nThe most unfortunate frustration is the actual _difficulty in finding a job_. Job seeking students will constantly hear that they need more experience – if their applications even make it to the interview stage. Students who try to network will often find that no one is hiring. We’ve seen amazing students apply to 175 jobs and only hear back from 5 of them – all rejections.\n\nIn the end, graduates know they’re supposed to be improving their skills, networking, and applying for jobs, but they don’t have the time to do it all. After weeks or months, they lose their skills, their focus, and their hope.\n\n<a name=\"finding-focus\"></a>\n## Finding Focus\n\nTo streamline and ensure success in your job search, you should choose and focus on a single industry vertical. An industry vertical is a large group of companies that solve the same problem for a group of customers and share a common business model - think Facebook for social media, Bloc for education, or Amazon for e-commerce. Even with no prior work experience you can choose an industry vertical that is hiring and interesting to you by looking at job openings. This industry will then become the focus of research, networking, and your projects at Bloc.\n\nThe first step to focusing on an industry is choosing an industry by analyzing local jobs. By looking at a large number of local jobs that seem interesting, you can figure out what industries near you are hiring. In the assignment at the end of this checkpoint, we’ll build a spreadsheet to do this analysis.\n\nOnce you’ve chosen an industry, you’ll learn about the industry and focus on it throughout your time at Bloc. You’ll learn about the industry by researching its companies, products and trends. You’ll meet with professionals in the industry, learn about the problems they solve, and learn what a day in their shoes is like.\n\nThe industry you choose will be a focus throughout your time at Bloc. You’ll continue to build your professional network during your time at Bloc. Working with your mentor, you’ll discuss the technologies that the industry is using and whether there are ways that you can learn them at Bloc. You will build projects that focus on your industry as a way to immerse yourself in the industry.\n\n<a name=\"why-focus-helps\"></a>\n## Why Focus Helps\n\nThe many frustrations of an unsuccessful job search are mitigated by choosing an industry vertical to focus on. Students who focus on an industry vertical are better able to prioritize what they should learn, who they should meet, and what jobs to focus on. Every week is motivating because they feel themselves moving towards an attainable goal. Students who focus quickly differentiate themselves as job candidates and find jobs they like much faster than they would otherwise.\n\nManaging time becomes much easier once an industry vertical is chosen. Students create projects based on the industry using the technologies that the industry uses. Students are able to prioritize who to reach out to, who to meet, and have industry knowledge to discuss. They know which companies, products, jobs and people to focus on, and which to ignore.\n\nOne recent example is a student in Atlanta who chose to focus on Digital Marketing. She learned about digital marketing companies and products and reached out to friends in the digital marketing space. She built an app that helped her track email open-rate and talked about her new project with her friends. Within four weeks she had a paid internship at her dream company.\n\nWe’ve seen how motivating this focus can be and the momentum that it can generate. When students are focused on a single project and technology stack, their knowledge becomes representative of [T-shaped skills](https://en.wikipedia.org/wiki/T-shaped_skills). Every new connection is able to introduce them to more people in their industry vertical. The student’s project, networking, and job search all reinforce each other and are all focused on an industry that the student is interested in and that is hiring. It’s amazing to see how quickly this focus helps disheartened students become inspired.\n\nMost importantly, students who focus on an industry get better jobs faster. The student becomes familiar with the same technical challenges that engineers at the company face daily. It’s easier for these students to network inside of an industry because they know the same companies and trends as the people they're meeting with. They transform from \"just another junior engineer\" to a candidate that has relevant technical experience, is familiar with the customer, and is passionate about what the company is working on.\n\n<a name=\"common-concerns\"></a>\n## Common Concerns\n\n### What if I choose the wrong industry?\n\nWorst case scenario - you’ll have learned how to use web development as a tool for solving real-world problems. It is better to have experience in the wrong industry than no experience at all. Furthermore, this is not the only industry you should apply for at the end of Bloc. It’s a single industry to help you focus on technologies that are used in your geographic area during your time at Bloc.\n\n### What if I already know what company I want to work at?\n\nGreat - choose the industry that that company is in!\n\n### Does “full stack developer” count as an industry?\n\nNo! The point is to make sure you learn both the technical skills and practice applying them to real-world problems. Choosing “front-end” or “full-stack” is not an industry.\n\n### What about not-for-profits?\n\nNot-for-profits are not an industry, they are a sector of the economy just like for-profit companies. There are education not-for-profits, event-sales not-for-profits, and social media not-for-profits. All of these solve very different problems using different technologies for different customers.\n\n### Does this mean I’m not supposed to apply to any other jobs?\n\nOnce you apply for jobs at the end of the program - apply to every job you want! In our experience, students that follow this advice won’t be looking for jobs for very long, because they'll get hired.\n\n### I don’t care about the industry, I only care about a company that has great culture/where I can learn/where I get paid a lot etc.\n\nIn our experience, the best way to get the job of your dreams is to focus.\n\n<a name=\"list-of-industry-verticals\"></a>\n## List of Industry Verticals\n\nIndustry verticals group companies by the problems they solve and the way that they solve them. Industry verticals are closely related to business models and revenue models. Although there is no comprehensive list of industries, our favorite is the one below created by well-known venture capitalist [Fred Wilson](http://avc.com/2012/12/mba-mondays-revenue-models/).\n\n### Advertising\n\n* Display Ads - ex. Yahoo!\n* Search Ads - ex. Google\n* Text Ads - ex. Google\n* Video Ads - ex. Hulu\n* Audio Ads - ex. Pandora\n* Promoted Content - ex. Twitter, Tumblr\n* Paid content links - ex. Outbrain\n* Recruitment Ads - ex. LinkedIn\n* Lead Generation - ex. MoneySuperMarket, ZocDoc\n* Affiliate Fees - ex. Amazon Affiliate Program\n* Classifieds - ex. Craiglist\n* Featured listings - e.g. Yelp, Super Pages;\n* Email Ads - as done by Yahoo, MSN\n* Ad Retargeting - ex. Criteo\n* Real-time Intent Ad Delivery\n* Location-based offers - ex/ Foursquare\n* Sponsorships / Site Takeovers -  ex. Pandora\n\n### Commerce\n\n* Retailing - ex. Zappos\n* Marketplace - ex. Etsy\n* Crowdsourced Marketplace - ex. Threadless\n* Excess Capacity Markets - ex. Uber, AirBnB\n* Vertically Integrated Commerce - ex. Warby Parker\n* Aggregator - ex. Lastminute.com\n* Flash Sales – ex. Gilt Groupe, Vente Privee\n* Group buying - ex. Groupon\n* Digital goods / downloads - ex. iTunes\n* Virtual goods - ex. Zynga\n* Training - ex. Coursera\n* Pay what you want - ex. Radiohead\n* Commission - ex. SharesPost\n* Commission per order - ex. Seamless, GrubHub\n* Auction - ex. eBay\n* Reverse Auction - ex. Priceline\n* Barter for services ex. SwapRight\n\n### Subscription\n\n* Software as a Service (SAAS) - ex. Salesforce\n* Service as a Service - ex. Shopify\n* Content as a Service - ex: Spotify, Netflix\n* Infrastructure/Platform As A Service - ex. AWS\n* Freemium SAAS - ex. Dropbox\n* Donations - ex. Wikipedia\n* Sampling - ex Birchbox\n* Membership Services - ex. Amazon Prime\n* Support and Maintenance - ex. 10gen, Red Hat\n* Paywall - ex. NYTimes\n* Voice and video-conferencing - ex. Uberconference\n* Peer to Peer\n* Peer-to-Peer Lending - ex. Lending Club,\n* Peer-to-Peer Gambling - ex. BetFair\n* Peer-to-peer buying - ex. Etsy\n* Peer-to-peer insurance/home/car\n* Peer-to-peer computing – ex. CrasPlan storage, SETI@home\n* Peer-to-peer service - ex. Mechanical Turk, TaskRabbit\n* Peer-to-peer Mobile WiFi/Tethering\n\n### Transaction processing\n\n* Merchant Acquiring - ex. PayPal (Online / Offline), Stripe (Online), Square (Offline)\n* Intermediary - ex. IP Commerce (POS 2.0), CardSpring\n* Acquiring Processing - ex. Paymentech\n* Bank Transfer - ex. Dwolla\n* Bank Depository Offering - ex. Simple, Movenbank (spread on average deposits)\n* Bank Card Issuance - ex. Simple (interchange fee per transaction)\n* Fullfilment - ex. Amazon\n* Messaging - ex. Peer-to-Peer SMS, IM, Group Messaging\n* Telephony - ex. termination/origination in public telephony networks (skype out/in)\n* Telephony - ex. termination/origination within private telephony cloud (e.g. native skype)\n* Payment Gateways: Mobile - ex. Braintree\n* Platform Monetization (\"Tax\") - ex. Facebook Credits; iO6 30% cut.\n\n### Licensing\n\n* Per Seat License - ex. Sencha\n* Per Device/Server License - ex. QlikView\n* Per Application instance - ex. Adobe Photoshop\n* Per Site License - ex. Private cloud on internal infrastructure\n* Patent Licensing - ex. Qualcomm\n* Brand Licensing - ex. Sesame Street\n* Indirect Licensing - ex. Apple Volume Purchasing\n\n### Data\n\n* User data - ex. BlueKai\n* Business data - ex. Duedil\n* User intelligence - ex. Yougov\n* Search Data - ex. Chango\n* Real-time Consumer Intent Data - ex. Yieldbot\n* Benchmarking services - ex. Comscore\n* Market research - ex. GLG\n\n### Mobile\n\n* Paid App Downloads - ex. WhatsApp\n* In-app purchases - ex. Zynga Poker\n* In-app subscriptions - ex. NY Times app\n* Advertising - ex. Flurry, AdMob\n* Digital-to-physical - ex. Red Stamp, Postagram\n* Transactions - ex. Hailo\n\nGaming\n\n* Freemium - Free to play w/ virtual currency - ex. Zynga\n* Subscription-  ex. World of Warcraft\n* Premium - ex. xBox games\n* DLC - (Downloadable Content)  - ex. Call of Duty\n* Ad Supported - ex. addictinggames.co\n\n<a name=\"assignment\"></a>", "assignment"=>"Ignoring job titles, technologies, and experience required, your assignment is to find 30 jobs at companies that interest and excite you. Refer to our [Job Hunting Sites resource](https://www.bloc.io/resources/job-hunting-sites). Make sure these jobs and companies are in your area or an area you’d like to relocate to.\n\nYou’ll record these jobs in a spreadsheet that you’ll share with your mentor and the Outcomes Team (see sample image below).\n\n![sample job spreadsheet](https://bloc-global-assets.s3.amazonaws.com/images-misc/verticalsample.png)\n\nFor each position, you’ll need to list:\n   Company name\n   Job title\n   Link to position description\n   Technologies used\n   Your interest in the job (1-4, 1 being low and 4 being high)\n   Vertical (keep this empty for now)\n\nIf you use a Google Sheet, post its link in your assignment submission and set its permission such that anyone can access it.\n- Once you’ve added the 30 jobs to your list, look at our list of industry verticals and map each position to the vertical it fits under. If you think it fits into two verticals, list them both.\n- Looking at these 30 roles, what is the top industry that you can focus on?\n- Looking at this industry, do you see any technologies that you should focus on?\n- Can you explain in 3-5 sentences why you think the positions in this vertical appeal to you?\n- Talk to your mentor about incorporating these industries and technologies into projects throughout your Bloc curriculum.\n- The Outcomes Team will be able to help you more effectively if you provide us with feedback. In your assignment submission, note one thing you like about this checkpoint, and one thing you wish was different.", "roadmap_section_id"=>182, "roadmap_section_ref"=>"003bf7d7-a905-45bc-8246-82bae1d45044|0", "default_student_access"=>"unlocked", "active_index"=>6, "checkpoint_type"=>"career_prep", "position"=>6, "points"=>1, "ref"=>"94a8b893-09c2-480f-b5fa-915885e46f37|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2269", "assessment"=>nil}, {"id"=>2355, "name"=>"Introductory JavaScript", "summary"=>"An introduction to the basics of the JavaScript language.", "body"=>"<!-- { ids:['2354', '2355'], name:'Introductory JavaScript', summary:'An introduction to the basics of the JavaScript language.' } -->\n\n## Overview and Purpose\n\nThis checkpoint teaches a foundation of JavaScript syntax and how to use values, variables, and files.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Manipulate values on the console.\n- Store and use data with variables.\n- Create JS files and source them within HTML code.", "assignment"=>"Complete the [JavaScript Road Trip Part 1](https://www.codeschool.com/courses/javascript-road-trip-part-1) course using your Code School account provided by Bloc. Submit a link to your public report card to your mentor. In your submission message, ask your mentor questions about specific exercises that you struggled with. Review [Writing the Perfect Question](https://codeblog.jonskeet.uk/2010/08/29/writing-the-perfect-question/) by the prolific Stack Overflow contributor [Jon Skeet](http://stackoverflow.com/users/22656/jon-skeet) as it will help you craft great questions.", "roadmap_section_id"=>182, "roadmap_section_ref"=>"003bf7d7-a905-45bc-8246-82bae1d45044|0", "default_student_access"=>"unlocked", "active_index"=>6, "checkpoint_type"=>"normal", "position"=>6, "points"=>1, "ref"=>"a9c22758-861b-47ef-98be-c76333fe399b|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2355", "assessment"=>nil}, {"id"=>2193, "name"=>"Intermediate JavaScript", "summary"=>"Learn common programming mechanisms like loops, conditionals, functions, and arrays", "body"=>"<!-- { ids:[2193], name:'Intermediate JavaScript', summary:'Learn common programming mechanisms like loops, conditionals, functions, and arrays' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Arrays Exercise](https://gist.github.com/philspitler/8af4091bbeff223937c9f48902ff372b)\n* [Functions Exercise I](https://gist.github.com/philspitler/992d919e2834881e34d2e6754c586507)\n* [Functions Exercise II](https://gist.github.com/philspitler/a61506604a3356f4cd92252b8ebe6866)\n* [Looping Through an Array Exercise](https://gist.github.com/philspitler/7631b46b4375d38fa5c1f1fd83665352)\n* [JavaScript I Flashcards](https://quizlet.com/145588912/bloc-front-end-fundamentals-javascript-part-i-flash-cards/)\n* [Understanding Prototypical Inheritance](https://medium.com/@sax1johno/understanding-prototypical-inheritance-28ba065b8a90)\n* [Udemy: Understanding JavaScript](https://www.udemy.com/understand-javascript/)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint teaches you common programming mechanisms like loops, conditionals, functions, and arrays.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Build `for` and `while` loops.\n- Use conditionals to control the flow of your code with `if` and `else` statements.\n- Use dialog box functions.\n- Build and manipulate an array.", "assignment"=>"Complete the [JavaScript Road Trip Part 2](https://www.codeschool.com/courses/javascript-road-trip-part-2) course using your Code School account provided by Bloc. Submit a link to your public report card to your mentor. In your submission message, ask your mentor questions about specific exercises that you struggled with. Review [Writing the Perfect Question](https://codeblog.jonskeet.uk/2010/08/29/writing-the-perfect-question/) by the prolific Stack Overflow contributor [Jon Skeet](http://stackoverflow.com/users/22656/jon-skeet) as it will help you craft great questions.", "roadmap_section_id"=>182, "roadmap_section_ref"=>"003bf7d7-a905-45bc-8246-82bae1d45044|0", "default_student_access"=>"unlocked", "active_index"=>7, "checkpoint_type"=>"normal", "position"=>7, "points"=>1, "ref"=>"742ec515-ecef-42cd-ad68-c16bf8187a40|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2193", "assessment"=>nil}, {"id"=>2194, "name"=>"Advanced JavaScript", "summary"=>"Master function expressions, closures, hoisting, objects, and the use of prototypes.", "body"=>"<!-- { ids:[2194], name:'Advanced JavaScript', summary:'Master function expressions, closures, hoisting, objects, and the use of prototypes.' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [JavaScript Callbacks Explained Using Minions](https://medium.freecodecamp.com/javascript-callbacks-explained-using-minions-da272f4d9bcd#.xqxkk4s60)\n* [JavaScript II Flashcards](https://quizlet.com/145679105/bloc-front-end-fundamentals-javascript-part-ii-flash-cards/)\n* [Functions and Scope](http://eloquentjavascript.net/03_functions.html)\n* [Wat](https://www.destroyallsoftware.com/talks/wat)\n* [The Birth & Death of JavaScript](https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint teaches you function expressions, closures, hoisting, objects, and prototypes.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Use and manipulate functions as expressions.\n- Bind external variables into local scopes.\n- Explain the pitfalls of load order within a scope.\n- Explain closures.\n- Create, fill, and manipulate the generic JavaScript object literal.\n- Explain object inheritance, classes, constructors, prototypes, and properties.", "assignment"=>"Complete the [JavaScript Road Trip Part 3](https://www.codeschool.com/courses/javascript-road-trip-part-3) course using your Code School account provided by Bloc. Submit a link to your public report card to your mentor. In your submission message, ask your mentor questions about specific exercises that you struggled with. Review [Writing the Perfect Question](https://codeblog.jonskeet.uk/2010/08/29/writing-the-perfect-question/) by the prolific Stack Overflow contributor [Jon Skeet](http://stackoverflow.com/users/22656/jon-skeet) as it will help you craft great questions.", "roadmap_section_id"=>182, "roadmap_section_ref"=>"003bf7d7-a905-45bc-8246-82bae1d45044|0", "default_student_access"=>"unlocked", "active_index"=>8, "checkpoint_type"=>"normal", "position"=>8, "points"=>1, "ref"=>"1123ee7d-bace-4f34-9cad-f37648f099c4|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2194", "assessment"=>nil}, {"id"=>2300, "name"=>"Quiz: JavaScript Programming Fundamentals", "summary"=>"Quiz: JavaScript Programming Fundamentals", "body"=>"", "assignment"=>"", "roadmap_section_id"=>182, "roadmap_section_ref"=>"003bf7d7-a905-45bc-8246-82bae1d45044|0", "default_student_access"=>"unlocked", "active_index"=>9, "checkpoint_type"=>"quiz", "position"=>9, "points"=>1, "ref"=>"63a02ec8-94ba-4107-8e9d-072f81c47c88|0", "exercises"=>false, "quiz_id"=>7, "path"=>"/checkpoints/2300", "assessment"=>nil}]}, {"id"=>183, "roadmap_id"=>38, "name"=>"Module 2: Frontend Foundations", "time_estimate"=>"1 Hour", "point_ratio"=>0.0, "description"=>"", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"unlocked", "ref"=>"b6560cb0-83af-4480-96df-87b59a60c904|0", "section_type"=>"foundation", "checkpoints"=>[{"id"=>2298, "name"=>"Progress Assessment", "summary"=>"Before you continue, have an expert assess your skills!", "body"=>"<!-- { ids:[2298], name:'Progress Assessment', summary:'Before you continue, have an expert assess your skills!' } -->\r\n\r\n<mentor-checkpoint-note>\r\n###Suggested Student Resources\r\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\r\n* [Practice Sets](https://gist.github.com/Ingelheim)\r\n* [Phase 1 Practice Questions/Exercises](https://github.com/Bloc/mentor-exercises)\r\n</mentor-checkpoint-note>\r\n\r\n## Overview and Purpose\r\n\r\nTo maximize your chances of success, we will assess your skills before you move onto the next phase.\r\n\r\n## Objectives\r\n\r\nAfter this checkpoint, students should be able to:\r\n\r\n- Confidently proceed to the next Phase of the program.\r\n- Understand their strengths and weaknesses.\r\n- Answer technical interview questions.\r\n\r\n## Process\r\n\r\nEach assessment is an interview composed of personal, technical, and coding questions. We perform the assessments remotely over teleconference, much like mentor meetings. Your mentor is not responsible for your assessments, we've delegated that task to other Bloc representatives. Receiving an assessment from a stranger better replicates the job interview environment.\r\n\r\nWhich brings us to the next point: **treat each assessment with utmost seriousness**. The more you commit to the experience, the more you will take out of it. Technical interviews are high-pressure situations and your future employers won't give you a practice round.\r\n\r\n### Pass / Fail\r\n\r\nIf you score below the minimum acceptance level, you will schedule a retake with your mentor and make adjustments to improve your score, which may include dropping pace. Consecutive unsuccessful assessments will result in more impactful actions to ensure that you master early concepts.\r\n\r\n## Topics\r\n\r\nThe assessment can cover anything learned in the previous Phase of your track, that includes: Command Line, Git & GitHub, JavaScript, etc. **Pay special attention** to the objectives listed in each checkpoint of the previous Phase, including Career Preparation checkpoints.\r\n\r\nReview the exercises where you struggled most, as well as quiz questions you missed because those are more-than-likely to appear in the assessment.", "assignment"=>"", "roadmap_section_id"=>183, "roadmap_section_ref"=>"b6560cb0-83af-4480-96df-87b59a60c904|0", "default_student_access"=>"unlocked", "active_index"=>1, "checkpoint_type"=>"assessment", "position"=>1, "points"=>1, "ref"=>"5d5b0118-681f-420f-b9de-aaab9c3f05c8|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2298", "assessment"=>{"title"=>"WDT Phase 1 assessment", "scheduling_url"=>"https://calendly.com/bloc-assessments/wdt-phase-1-assessment/"}}, {"id"=>2266, "name"=>"Welcome to Module 2", "summary"=>"Introduction to Module 2: Frontend Foundations", "body"=>"<!-- { ids:[2266], name:'Welcome to Phase 2', summary:'Introduction to Phase 2: Web Development Foundation' } -->\r\n\r\n<mentor-checkpoint-note>\r\n###Suggested Student Resources\r\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\r\n* [Overcoming Impostor Syndrome](https://medium.com/@aliciatweet/overcoming-impostor-syndrome-bdae04e46ec5#.fbiad55kf)\r\n* [You Don’t Have Impostor Syndrome](https://medium.com/@aliciatweet/you-don-t-have-impostor-syndrome-126e4c4bdcc#.vhcpezeev)\r\n</mentor-checkpoint-note>\r\n\r\n> We've repeated some information in this checkpoint because it serves as a reminder of how to be successful in Bloc. Make sure you complete the assignment before moving on. This checkpoints marks the start of **Phase 2: Web Development Foundation**. During this phase you'll apply your fundamental programming skills to web development as we guide you through two projects and help you build four others. We wrote this curriculum specifically for Bloc students.\r\n\r\n### Your Time Commitment\r\n\r\n<center>![time](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-2.jpg)</center>\r\n\r\n<br>\r\n\r\nBloc is an immersive experience, and requires a serious time commitment. Students spend approximately 540 hours in Bloc before graduating. You'll achieve the best results with disciplined time management; review the following time commitments, based on your pace:\r\n\r\n| Weekly Appointments | Weekly Time Commitment |\r\n|---------------------|------------------------|\r\n| 2 | 20 hours |\r\n| 1 | 12 hours |\r\n\r\nWe can't stress enough the importance of a disciplined schedule. Committing 12 or 20 hours a week is no easy task. You'll need to sacrifice TV, parties, video games, or even vacations. Remember that you'll maximize your results if you stay truly immersed throughout Bloc. You _must_ put in the time, or you will not achieve your desired results; there's too much to learn and build. We recommend that you schedule regular study times on your calendar, and diligently follow that schedule. Share this schedule with your mentor so they know when you'll be working.\r\n\r\n### Curriculum\r\n\r\nOur curriculum is built specifically for students and mentors to promote effective learning and collaboration. The curriculum is your roadmap through the Bloc experience; it defines the direction, topics, and sequence you'll need to learn and achieve your goals.\r\n\r\nThe curriculum consists of three phases. Each phase contains checkpoints with explicit assignments that you must complete to move on:\r\n\r\n- **Phase 1: Programming Fundamentals** – learn HTML, CSS, the command line, Git, GitHub, Ruby, and JavaScript. You'll use all of these tools extensively throughout Bloc as you build projects. Your mentor will be with you every step of the way, and will help you master these fundamental concepts.\r\n- **Phase 2: Web Development Foundation** – apply your fundamental programming skills to web development as we guide you through two projects and help you build four others. We wrote this curriculum specifically for Bloc students.\r\n- **Phase 3: Specialization** – you'll work with your mentor and our Outcomes team to select at least two more projects based on your outcome goal. These projects will stand out in your portfolio and position you for interviews with companies.\r\n\r\nEach of the phases consists of checkpoints, assignments, and quizzes. You should discuss each checkpoint with your mentor and resolve any questions you have before progressing. After submitting a checkpoint assignment, your mentor will review your work and provide you with feedback. Quizzes will help us understand your strengths and weaknesses, and we may adjust your program based on your quiz results.\r\n\r\nThe curriculum is constantly assessed and improved. The technologies you're learning move fast, and thus, we must keep the curriculum current. We update the curriculum frequently, and will notify you when there are major changes.\r\n\r\nWe illustrate some tips for successful learning in the following video. We recommend that you come back to read this checkpoint and watch this video throughout Bloc:\r\n\r\n<center>\r\n  <iframe src=\"https://fast.wistia.net/embed/iframe/u53k9sb8uy\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\r\n</center>\r\n\r\n### Mentor Appointments\r\n\r\n<center>![appointment](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-4.jpg)</center>\r\n\r\n<br>\r\n\r\nAppointments are live, one-on-one meetings with your mentor. Each appointment is usually 30 minutes in length, though the actual duration will depend on the topic and your mentor's judgement.\r\n\r\nAppointments are virtual, and have software requirements:\r\n\r\n- [Google Chrome Web Browser](https://www.google.com/intl/en/chrome/browser/) - We think Chrome is the best browser for developers and designers, and we recommend using it in general.\r\n- __A screensharing application__ like Screenhero. Message your mentor to determine their preference, and download the software.\r\n- [Google Hangouts](https://www.google.com/hangouts/) or [Skype](https://www.skype.com) for video chat.\r\n\r\nIf you and your mentor prepare, have an agenda, and arrive on time, an appointment will be a high-leverage learning experience. Do not lose respect for your appointments; productive appointments are essential for a great experience. An appointment's agenda is not limited, but often includes:\r\n\r\n- checkpoint review\r\n- assignment review\r\n- project review\r\n- pair programming\r\n- code review\r\n- design critique\r\n- debugging and troubleshooting\r\n- best practice technique sharing\r\n\r\nYour mentor will often lead the appointment, but you should come with a list of questions and issues.\r\n\r\n### Communication\r\n\r\n<center>![communication](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-5.jpg)</center>\r\n\r\nMuch of your communication in Bloc will be asynchronous. You'll write a message, submit an assignment, or ask a question, and your mentor will respond. The recommended way to communicate asynchronously is to use our [messages feature](https://www.bloc.io/message_threads). You'll also have the ability to submit checkpoint-specific messages at the bottom of each checkpoint. (You'll see this in action below, in this checkpoint.)\r\n\r\nTo speak with someone at Bloc who is not your mentor, you can email [Bloc Help](mailto:help@bloc.io) anytime. You will **always** have someone to speak with at Bloc, no matter what the issue is.\r\n\r\nYou will establish other means of communication with your mentor, based on your mutual preferences. We encourage you to use the Bloc messages feature as much as possible, but realize that other communication tools may sometimes be necessary. The following section lists some alternative communication tools.\r\n\r\n### Ecosystem\r\n\r\nBloc's ecosystem includes tools that make it easier to collaborate and get help when you need it. The ecosystem is always evolving, and you should explore its tools. Review the [Ecosystem resource](https://www.bloc.io/resources/ecosystem) and ask your mentor which tools they use.\r\n\r\n### Expectations\r\n\r\n<center>![mentor-apprentice](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-6.jpg)</center>\r\n\r\n<br>\r\n\r\nYour expectations must align with your mentor's to be successful in Bloc. It's important to understand what's expected of you, and what you should expect of your mentor.\r\n\r\n### Mentor Expectations\r\n\r\nMentors will:\r\n\r\n* Inspire and lead students.\r\n* Prepare for appointments and arrive on time.\r\n* Hold students accountable.\r\n* Respond to all questions and issues.\r\n* Provide feedback on submitted checkpoints and assignments.\r\n\r\n### Student Expectations\r\n\r\nStudents will:\r\n\r\n* Commit the requisite time to Bloc.\r\n* Trust their mentor.\r\n* Accept the assignments and projects provided by Bloc.\r\n* Prepare for appointments and arrive on time.\r\n* Communicate openly with their mentor.\r\n\r\n### Succeeding in Bloc and Beyond\r\n\r\n<center>![success](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-7.jpg)</center>\r\n\r\n<br>\r\n\r\nMaintaining a healthy perspective on yourself and your work is crucial for getting a job, starting a company, building a product, or winning client work. Students who excel portray the following traits:\r\n\r\n* I am responsible for my own learning.\r\n* I embrace challenges.\r\n* I am focused and disciplined.\r\n* I share what I learn with the Bloc community.\r\n* I celebrate accomplishments.", "assignment"=>"Send a message to your mentor explaining what you think your strengths and weaknesses are, regarding the programming fundamentals you learned in Phase 1. Be verbose, the more insight the mentor has into your self-assessment, the better they will be to help you grow.", "roadmap_section_id"=>183, "roadmap_section_ref"=>"b6560cb0-83af-4480-96df-87b59a60c904|0", "default_student_access"=>"unlocked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"aaedb9f7-7f45-466d-a5a0-7e917dfbbd60|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2266", "assessment"=>nil}]}, {"id"=>184, "roadmap_id"=>38, "name"=>"Foundation: Frontend Web Development", "time_estimate"=>"60 Hours", "point_ratio"=>0.0, "description"=>"", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"locked", "ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "section_type"=>"foundation", "checkpoints"=>[{"id"=>2074, "name"=>"Brackets", "summary"=>"Brackets: a text editor for coding", "body"=>"<!-- { ids:[2074], name:'Brackets', summary:'Brackets: a text editor for coding' } -->\n\n## Overview and Purpose\n\nThis checkpoint introduces Brackets, a text editor we recommend for frontend development.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Use Brackets' Live Preview feature to view changes in real time.\n- Understand the relationship between Live Preview highlighting and the code.\n- Enable the Quick Edit feature for fast CSS styling.\n- Open projects in Brackets from the command line.\n\n![Brackets installation page](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/Brackets/brackets_install_page.png)\n\n## Why Brackets?\n\nBrackets is an open-source text editor maintained by Adobe (of Photoshop fame) that we recommend to Bloc's students. Brackets offers some unique features that make it good for efficient front-end development. We'll introduce these features in this checkpoint.\n\nStart by installing Brackets from [the home page](http://brackets.io/). If the site doesn't detect your operating system correctly, visit the [Other Downloads page](https://github.com/adobe/brackets/releases) and install the proper version.\n\n## Live Preview\n\nOpen the app, and a sample project will appear; this project is provided by Brackets by default. Brackets has a feature called __Live Preview__ that allows you to preview what you're working on in real time. To enable Live Preview, go to __File__ > __Live Preview__, or click on the lightning bolt icon, shown below. This opens an isolated instance of Google Chrome that's specifically allocated for development.\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Brackets/opening_live_preview_brackets.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Brackets/opening_live_preview_brackets.mp4) the preview directly.\n</video></center>  \n\nLive Preview is one of Brackets' most useful features. If you update the content, HTML, or CSS in the text editor, it is reflected immediately in the preview browser.\n\n## Live Preview Highlighting\n\nClick different blocks of text in the preview window while Live Preview is enabled, and you'll see blue boxes appear. Brackets highlights the HTML element that you're updating with a blue rectangle to show which element you are updating.\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Brackets/brackets_live_hightlighting.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Brackets/brackets_live_hightlighting.mp4) the preview directly.\n</video></center>\n\n>Note that Brackets may appear differently on your computer.\n\nLive Preview Highlighting is enabled by default. To toggle the functionality, go to __View__ > __Live Preview Highlight__.\n\n## Inline Editing\n\nMost text editors require users to switch between files to edit HTML and its associated CSS separately. Brackets offers a feature called __Quick Edit__, which allows you to edit CSS inline. Select the first `<h2>` in the document with the content \"This is your guide!\" and it should turn green. Enable Quick Edit by pressing <kbd>Cmd &#8984;</kbd> + <kbd>E</kbd> on a Mac or <kbd>Ctrl</kbd> + <kbd>E</kbd> on Windows.\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Brackets/brackets_quick_edit_demo.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Brackets/brackets_quick_edit_demo.mp4) the preview directly.\n</video></center>\n\n## Opening Projects from the Command Line\n\nBrackets has a command-line shortcut that allows you to open directories and files from your command-line application. Go to __File__ > __Install Command Line Shortcut__ to initiate the installation.\n\nLaunch your command-line application, and create a directory called `brackets_demo`:\n\n```bash(~/bloc/)\n$ mkdir brackets_demo\n```\n\nCreate an HTML file within it:\n\n```bash(~/bloc/)\n$ touch brackets_demo/index.html\n```\n\nRun `brackets` followed by a directory or a file to open either in Brackets. For example:\n\n```bash(~/bloc/)\n$ brackets brackets_demo/\n```\n\nwill open the entire directory and:\n\n```bash(~/bloc/)\n$ brackets brackets_demo/index.html\n```\n\nwill open just the file.\n\n## Recap\n\n| Feature | Description |\n| ------- | ----------- |\n| __Live Preview__ | Live Preview is a feature of Brackets that allows you to preview the result of your code in real time. |\n| __Live Preview Highlighting__ | Live Preview Highlighting adds a blue box around the content you're currently editing. |\n| __Quick Edit__ | Quick Edit allows you to edit CSS for an HTML element without having to switch between files. |\n| __Command Line Shortcut__ | Brackets' Command Line Shortcut allows you to open files and directories from your command line utility. |", "assignment"=>"1. Read through and bookmark these resources (or this checkpoint) for reference:\n    - [Brackets How-To Guide](https://github.com/adobe/brackets/wiki/How-to-Use-Brackets): an overview of Brackets' many features.\n    - [Brackets Course](http://css-snippets.com/brackets-course/): video demonstrations on how to use Brackets.", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"245cc11a-34e1-4c18-bdff-9d4469fd6cb6|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2074", "assessment"=>nil}, {"id"=>2075, "name"=>"HTML & CSS: Basic Structure", "summary"=>"Basic HTML: common HTML tags and the landing page for Bloc Jams", "body"=>"<!-- { ids:[2075], name:'HTML & CSS: Basic Structure', summary:'Basic HTML: common HTML tags and the landing page for Bloc Jams' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Learn Git Branching](http://learngitbranching.js.org/)\n* [How the Web Works: A Primer for Newcomers to Web Development](https://medium.freecodecamp.com/how-the-web-works-a-primer-for-newcomers-to-web-development-or-anyone-really-b4584e63585c#.b0l6spk6f)\n* [Tilt 3D DOM Visualizer](https://addons.mozilla.org/en-US/firefox/addon/tilt/)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint introduces basic HTML tags, the building blocks of any HTML document.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Recognize an HTML tag.\n- Understand and explain the purpose of essential HTML tags: `<html>`, `<head>`, `<body>`.\n- Identify HTML elements.\n- Discuss various HTML tags – such as `<title>`, `<div>`, `<h1>`, etc. – and their uses.\n- Explain why indenting is important in HTML files.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/ghvgc30b5s\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nWelcome to Bloc Jams, a digital music player like [Spotify](https://www.spotify.com/us/) that we'll use to learn frontend web development. We'll start by building the backbone of the application layout with HTML, add styling and responsiveness using CSS, and implement interactivity with JavaScript.\n\n## Create the Bloc Jams Directory and Initialize Git\n\nCreate a directory to hold the application.\n\n```bash(TerminalOrGitBash)\n$ pwd #=> you should be in `~/bloc`, if not, run cd ~/bloc\n$ mkdir bloc-jams\n```\n\n`cd` into `bloc-jams` and initialize it as a Git repository.\n\n```bash(TerminalOrGitBash)\n$ cd bloc-jams\n$ git init\n```\n\nCreate an `index.html` file, stage the file for commit using `git add`, and make your first commit.\n\n```bash(TerminalOrGitBash)\n$ touch index.html\n$ git add index.html # stages it for commit\n$ git commit -m \"first commit\" # commits it with the \"first commit\" message\n```\n\nCreate a corresponding repository on GitHub called `bloc-jams`, and add the remote location of the repo in the command line:\n\n```bash(TerminalOrGitBash)\n$ git remote add origin https://github.com/<your-username>/bloc-jams.git\n```\n\n## Work on a Feature Branch\n\nCreate a new Git feature branch for this checkpoint named `basic-html`. Review [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Add the Basic HTML Structure\n\nHTML, or HyperText Markup Language, supplies the basic structure of a web page using __tags__. Tags are enclosed by a less-than sign (`<`) and a greater-than sign (`>`) on either side, like `<tag-name>`. They represent HTML __elements__, or individual components that make up an HTML document. With few exceptions, HTML tags wrap content (like text or other HTML elements) and must be opened (`<tag>`) and closed (`</tag>`) on either side of that content.\n\nAdd the following to `index.html`:\n\n```html(~/bloc/bloc-jams/index.html)\n+<!DOCTYPE html>\n+<html>\n+    <head></head>\n+    <body></body>\n+</html>\n```\n\nLet's explore each of these tags:\n\n- `<!DOCTYPE html>` tells the browser that this file should be interpreted as HTML.\n- The `<html>` tags mark the beginning and end of the content on a page.\n- The `<head>` tag contains a set of information that won't be directly rendered by the page. From the Mozilla documentation:\n\n  > The HTML Head Element (`<head>`) provides general information (metadata) about the document, including its title and links to or definitions of scripts and style sheets\n  > ([source](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head))\n\n- The `<body>` element contains the content displayable in the browser.\n\nA `<title>` tag is _required_ to ensure that the HTML renders in all browsers. Some browsers may not render anything in the body without the closing `</title>` tag. Let's add one to the head with our application's name:\n\n```html(~/bloc/bloc-jams/index.html)\n <!DOCTYPE html>\n <html>\n     <head>\n+        <title>Bloc Jams</title>\n     </head>\n     <body></body>\n </html>\n```\n\nThe title is displayed at the top of the tab or window, depending on the browser. Here's where Chrome displays the title:\n\n<center>![title display screenshot](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/basic-html%20checkpoint/title_display_chrome.png)</center>\n\n## Add Content to the Body\n\nEnable Live Preview in Brackets by going to __File > Live Preview__. Our additions to the document's body will appear in the preview browser as we add them.\n\nAdd three main sections to `index.html`, which will be wrapped in `<div>` tags (short for \"division\"):\n\n```html(~/bloc/bloc-jams/index.html)\n <!DOCTYPE html>\n <html>\n     <head>\n         <title>Bloc Jams</title>\n     </head>\n     <body>\n+        <div> <!-- navigation bar -->\n+        </div>\n+        <div> <!-- hero content -->\n+        </div>\n+        <div> <!-- selling points -->\n+        </div>\n     </body>\n </html>\n```\n\nWe've annotated the purpose of each of these divisions using HTML comments, which are opened with the `<!--` characters and closed with `-->`. The browser will not render anything written as a comment.\n\n## Add a Hero Container\n\nAdd the content for the hero container, which will make the name and tagline of the application the focus of the document:\n\n```html(~/bloc/bloc-jams/index.html)\n <!DOCTYPE html>\n <html>\n     <head>\n     <title>Bloc Jams</title>\n     </head>\n     <body>\n         <div> <!-- navigation bar -->\n         </div>\n         <div> <!-- hero content -->\n+            <h1>Bloc Jams</h1>\n+            <h3>Turn the music up!</h3>\n         </div>\n         <div> <!-- selling points -->\n         </div>\n     </body>\n </html>\n```\n\nNotice that when we add content within a tag, we indent it four spaces (or one tab in Brackets). Putting tags within tags is known as __nesting__ tags. Indenting nested tags improves readability and visually establishes a hierarchy in the document.\n\nWe've nested an `<h1>` and `<h3>` in our hero `<div>`. `<h1>` and `<h3>` are both __heading tags__. Heading tags are generally used for titles, section names, or important text. They range from `<h1>` (the largest) to `<h6>` (the smallest), and are automatically rendered by browsers in different sizes. See how the browser differentiates between an `<h1>` and an `<h3>` in the screenshot below.\n\n<center>![h1 to h3 size difference](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/basic-html%20checkpoint/heading_tag_size_difference.png)</center>\n\nIn the following video, we walk through the basic HTML structure described so far:\n\n<center><iframe src=\"//fast.wistia.net/embed/iframe/ffx93wp29t\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe></center><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\n## Add Selling Points\n\nBloc Jams has a few selling points that visitors to the landing page should see, which we'll add to the corresponding `<div>`:\n\n```html(~/bloc/bloc-jams/index.html)\n <!DOCTYPE html>\n <html>\n     <head>\n         <title>Bloc Jams</title>\n     </head>\n     <body>\n         <div> <!-- navigation bar -->\n         </div>\n         <div> <!-- hero content -->\n             <h1>Bloc Jams</h1>\n             <h3>Turn the music up!</h3>\n         </div>\n         <div> <!-- selling points -->\n+            <div>\n+                <h5>Choose your music</h5>\n+                <p>The world is full of music; why should you have to listen to music that someone else chose?</p>\n+            </div>\n+            <div>\n+                <h5>Unlimited, streaming, ad-free</h5>\n+                <p>No arbitrary limits. No distractions.</p>\n+            </div>\n+            <div>\n+                <h5>Mobile enabled</h5>\n+                <p>Listen to your music on the go. This streaming service is available on all mobile platforms.</p>\n+            </div>\n         </div>\n     </body>\n </html>\n```\n\nThe `<p>` element is used for including paragraphs or longer blocks of text. We use it here for the description of each selling point.\n\nFor most HTML tags, text is rendered without regard to _whitespace_. __Whitespace__ is the term used to describe spaces, tabs, and new lines in formatted text. This can change with CSS, or it can be explicitly defined and rendered using a `<pre>` tag.\n\n## Recap\n\n| **Concept** | **Description** |\n| ----------- | --------------- |\n| [HTML](https://developer.mozilla.org/en-US/docs/Web/HTML) | HyperText Markup Language makes up the bulk of the Internet. All webpages, including this one, are built in HTML. Browsers render HTML text into a visual interface.<br><br>&bullet; [HTML comments](https://www.w3.org/TR/html4/intro/sgmltut.html#h-3.2.4) |\n| [Tags](http://www.w3schools.com/tags/) | An HTML tag names an element with angle brackets `<>`. An end tag closes an opening tag and has a forward slash after the first angle bracket (e.g. `</div>`).<br><br>&bullet; [`<title>`](http://www.w3schools.com/tags/tag_title.asp)<br>&bullet; [`<h1>` ... `<h6>`](http://www.w3schools.com/tags/tag_hn.asp)<br>&bullet; [`<p>`](http://www.w3schools.com/html/html_paragraphs.asp)<br>&bullet; [`<pre>`](http://www.w3schools.com/tags/tag_pre.asp)  |\n| [Elements](https://developer.mozilla.org/en-US/docs/Glossary/Element) | An HTML element is an individual component of a web page. |\n| Nesting | Place nested block elements on a new line and [indent the line](https://google.github.io/styleguide/htmlcssguide.xml#Indentation) for readability. [Nested inline tags](http://www.gazoo.net/htmhell/texttutor2.html) should not be placed on their own line. |\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"1. Read and follow the directions in the [\"Before Each Assignment\" section](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) in the Git Workflow Resource.\n2. Read the [W3Schools guide on HTML5 semantic elements](http://www.w3schools.com/html/html5_semantic_elements.asp).\n3. [__Refactor__](http://en.wikipedia.org/wiki/Code_refactoring) (or re-write) the Bloc Jams markup using semantic HTML. Change the following elements with a semantic equivalent:\n    - The _navigation_ `<div>`\n    - The hero content `<div>` _section_\n    - The selling points `<div>` _section_\n4. Follow the Git Workflow Resource instructions for [mergeable assignments](https://www.bloc.io/resources/git-checkpoint-workflow#mergeable-assignments).\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n- <a href=\"//fast.wistia.net/embed/iframe/q5p0f3qebf?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Semantic HTML Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"721d0e2a-0d86-462e-a495-31a815aa59ea|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2075", "assessment"=>nil}, {"id"=>2076, "name"=>"HTML & CSS: Styles", "summary"=>"CSS: add styles – colors, fonts, etc. – to the Bloc Jams landing page", "body"=>"<!-- { ids:[2076], name:'HTML & CSS: Styles', summary:'CSS: add styles – colors, fonts, etc. – to the Bloc Jams landing page' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [* { Box-sizing: Border-box } FTW](https://www.paulirish.com/2012/box-sizing-border-box-ftw/)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint introduces CSS (Cascading Style Sheets) and basic style properties.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Include CSS in an HTML document using external stylesheets.\n- Discuss other methods by which styles can be added to an HTML document.\n- Explain why resources such as `normalize.css` exist.\n- Add classes to HTML tags and use class names to style elements.\n- Identify selectors, properties, and values in a CSS file.\n- Recognize HTML attributes – such as `rel`, `type`, `href`, `src`, etc. – and discuss the purpose of common attributes.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/7tbqm3mwtz\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nWe left our landing page looking _really_ exciting at the end of the last checkpoint. To build on that excitement, we'll be adding styles to our landing page that will add color, placement, icons, and other visual modifications to give it a more modern appearance. Websites are styled using CSS (Cascading Style Sheets), which acts as a set of instructions for how a website should look based on the browser's interpretation.\n\nBefore styling Bloc Jams, create a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\nOpen Brackets and enable Live Preview. This will demonstrate how CSS affects the appearance of the page in real-time.\n\n## The `<link>` Tag and External Stylesheets\n\nStyles can be included in a web browser in a few ways:\n\n- in the `<head>` tag directly, delimited by `<style>` tags\n- in an external stylesheet, which is referenced by a `<link>` tag in the head\n- on an HTML element directly, using a `style` attribute\n- dynamically produced using JavaScript\n\nThe following video demonstrates the different ways to add styles:\n\n<center><iframe src=\"//fast.wistia.net/embed/iframe/o76ildfstz\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe></center><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nWe're going to start by creating and including an external stylesheet for the Bloc Jams landing page.\n\nCreate a directory to hold all of the Bloc Jams stylesheets and add our first CSS file, `main.css` to it:\n\n```bash(~/bloc/bloc-jams/)\n$ pwd #=> should be in the bloc-jams project folder\n$ mkdir styles\n$ touch styles/main.css\n```\n\n### Download and Include `normalize.css`\n\n<center>![peter griffin css](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/basic-css%20checkpoint/peter_griffin_css.gif)</center>\n> This is what working with CSS can feel like sometimes.\n\nApplying CSS may cause frustration because each browser renders certain styles differently. To minimize this problem, we're going to include `normalize.css`, which \"makes browsers render all elements more consistently and in line with modern standards\".\n\n![normalize.css homepage screenshot](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/basic-css%20checkpoint/normalize.css_homepage.png)\n\n[Download the `normalize.css` file](http://necolas.github.io/normalize.css/) and drag it into the `styles` directory using Finder (on Mac) or File Explorer (on Windows).\n\nApply its CSS rules to the index page using a `<link>` tag in the head:\n\n```html(~/bloc/bloc-jams/index.html)\n ...\n     <head>\n         <title>Bloc Jams</title>\n+        <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/normalize.css\">\n     </head>\n ...\n```\n\n> The ellipsis at the beginning or end of a code block signifies that more code has been written above or below the current code.\n\nThe `<link>` tag has some extra inline information: `rel`, `type`, and `href`. These are known as HTML __attributes__. The `rel` attribute defines the __relationship__ between the linked file and the HTML document. The `type` attribute lets the page know which __media type__ the linked document contains; the most common current media type is `text/css`, which indicates a Cascading Style Sheet format.\n\nThe `href` attribute provides a __hyperlink reference__ to the file, which is a fancy way of saying where the file is located. In this case, it's a relative file path for the stylesheet (`bloc-jams` > `styles` > `normalize.css`), but it could be a reference to a remote file. We'll show how to link to a remote file in the next section.\n\n### Include Other Linked Stylesheets\n\nWe'll also link to two remotely hosted CSS files. These files, found at\n\n`href=\"http://fonts.googleapis.com/css?family=Open+Sans:400,800,600,700,300\"`  \n\n and\n\n`href=\"http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css\"`\n\ninclude the fonts and icons, respectively, that we'll use on the homepage. Then link the `main.css` file, which will have our custom CSS:\n\n```html(~/bloc/bloc-jams/index.html)\n ...\n     <head>\n         <title>Bloc Jams</title>\n+        <link rel=\"stylesheet\" type=\"text/css\" href=\"http://fonts.googleapis.com/css?family=Open+Sans:400,800,600,700,300\">\n+        <link rel=\"stylesheet\" type=\"text/css\" href=\"http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css\">\n         <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/normalize.css\">\n+        <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/main.css\">\n     </head>\n ...\n```\n\nThe order of the CSS files is important. If there are any conflicting styles in the stylesheets listed, then the browser only pays attention to the bottommost definition. For example, if we applied styles to a `.my-div` selector in both `normalize.css` and `main.css`, the browser would render the definition found in `main.css`.\n\nFor Bloc Jams, we've opted to use the Open Sans font made available by Google Fonts. In the following video, we demonstrate how to find and include Google Fonts:\n\n<center><iframe src=\"//fast.wistia.net/embed/iframe/qa0v3sxqaz\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe></center><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\n## Style Bloc Jams\n\nCreate a new directory called \"assets\" and within that directory create another called \"images\".\n\n```bash(~/bloc/bloc-jams/)\n$ pwd #=> make sure you're in the base directory, ~/bloc/bloc-jams\n$ mkdir assets\n$ mkdir assets/images\n```\n\nDownload the [logo](https://bloc-global-assets.s3.amazonaws.com/images-frontend/Bloc%20Jams%20Assets/bloc_jams_logo.png) and the [background image](https://bloc-global-assets.s3.amazonaws.com/images-frontend/Bloc%20Jams%20Assets/bloc_jams_bg.jpg). Visit each of those links, right-click on the image, and select \"Download\" or \"Save as\" to save the images on your computer.\n\nMove the logo and background into the `images` directory.\n\n## Define Styles in `main.css`\n\nApply CSS to the body and nav bar of Bloc Jams. Update `index.html` with the following:\n\n```html(~/bloc/bloc-jams/index.html)\n ...\n     </head>\n-    <body>\n+    <body class=\"landing\">\n-        <nav> <!-- nav bar -->\n+        <nav class=\"navbar\"> <!-- nav bar -->\n+            <img src=\"assets/images/bloc_jams_logo.png\" alt=\"bloc jams logo\" class=\"logo\">\n         </nav>\n ...\n```\n\nWe've added __classes__ to our HTML elements on the `<body>` and `<nav>` tags. Classes are the most common way for CSS to apply styling to selected elements.\n\nWe've also added an `<img>` tag to our navigation for the Bloc Jams logo.\n\n| Attribute | Description |\n| :-- | :-- |\n| `src` | Like the `href` attribute, it links to the source of the image. In this case, the link is relative to the directory containing `index.html`. |\n| `alt` | Tells the browser what text to show if the image doesn't load. This also provides an alternate for visually-impared users. |\n| `class` | Assigns one or more names to this element. These names associate the element with styles defined in the CSS. |\n\nSwitch to `main.css` and add the following text to see how CSS is applied using __selectors__. We explain the styles using CSS comments, which are delimited by `/*` and `*/`.\n\n```css(~/bloc/bloc-jams/styles/main.css)\n+html {\n+    height: 100%; /* makes sure our HTML takes up 100% of the browser window */\n+    font-size: 100%;\n+}\n+\n+body {\n+    font-family: 'Open Sans'; /* sets our font to the \"Open Sans\" typeface */\n+    color: white;             /* sets the text color to white */\n+    min-height: 100%;         /* says the height of the body must be, at minimum, 100% of the window */\n+}\n+\n+body.landing {\n+    background-color: rgb(58,23,63); /* sets the background color to an RGB value (see below) */\n+}\n```\n\nSelecting elements with CSS can be done a number of ways. In this block of CSS, we've selected the `html` and `body` elements and applied styling using CSS _properties_. __Properties__, such as `height`, `color`, or `font-size` used above, define how a style should look on the page.\n\nA CSS __rule-set__ consists of a selector followed by a declaration block:\n\n| Selector | Declaration Block   |\n| -------: | :------------------ |\n| `body`   | `{ color: white; }` |\n\nThe declaration block, which starts with a `{` and ends with a `}`, can have any number of declarations, each of which contains a property-value pair that ends with a semicolon:\n\n| Property | Value    |\n| -------: | :------- |\n| `color:` | `white;` |\n\nWhen a selector consists of an HTML tag name immediately followed – as in, not separated by a space – by a class name, as with `body.landing`, the style which follows applies to any `body` tag which has a `landing` class. It's a more specific way of selecting an element and gives the styles attributed to that selector greater importance within the cascade; for example, if the `body` selector also had a `background-color` property applied to it, the `background-color` property of the `body.landing` selector would have greater importance and overrule it.\n\n> Class selectors are preceded by periods (`.landing`) while HTML element selectors are not (`html` and `body`).\n\nThe `background-color` property represents the color we've chosen using an __RGB value__, which is one of several ways to identify color in CSS. The RGB color model displays color by selecting the proportion of red, green, and blue, respectively, in a range from 0 to 255.\n\nThe table below shows equivalent CSS color values using color names, hexadecimals, and RGB values:\n\n| Color Name | Hex Code  | RGB Color Model    |\n| ---------- | --------- | ------------------ |\n| `white`    | `#FFFFFF` | `rgb(255,255,255)` |\n| `red`      | `#FF0000` | `rgb(255,0,0)`     |\n| `lime`     | `#00FF00` | `rgb(0,255,0)`     |\n| `blue`     | `#0000FF` | `rgb(0,0,255)`     |\n| `black`    | `#000000` | `rgb(0,0,0)`       |\n\n> The web color named \"lime\" actually corresponds to the green primary of an RGB display.\n\nAdd some more styles for the navigation bar:\n\n```css(~/bloc/bloc-jams/styles/main.css)\n ...\n body.landing {\n     background-color: rgb(58,23,63);\n }\n+\n+.navbar {\n+    padding: 0.5rem;\n+    background-color: rgb(101,18,95);\n+}\n+\n+.navbar .logo {\n+    position: relative; /* positioning will be explained in a resource */\n+    left: 2rem;\n+}\n```\n\nWe've used `padding` to provide some space on the _inside_ of the navigation bar. Watch the Live Preview while you delete and add the padding to see how it affects the placement of the logo.\n\nThe measurement we've used for padding is called a __root em__. An `em` is a relative unit for calculating the size of an element; it's called an `em` because it's defined to be the width of the letter \"m\" in a particular font and size of text. _Root_ `em`s (`rem`) represent the `font-size` of the root element, such as the `<html>` element. We've chosen this metric to make responsive sizing easier.\n\n> Note that we'll be explaining padding and its context in the CSS Box Model in an external resource.\n\nNotice that we've put `.logo` right after the `.navbar` class selector with a space separating them. This is called a __descendant selector__. The browser applies the style to elements of the `logo` class which are contained in elements of the `navbar` class..\n\nThis is different from `body.landing`, which selects the `body` element that has the `.landing` class applied to it, not to elements nested within it.\n\n![bloc jams with finished navigation bar](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/basic-css%20checkpoint/navbar_styled.png)\n\n> Bloc Jams should look like this after adding the navigation classes.\n\n### Hero Content\n\nA \"hero\" container derives its name from theater and film, where a hero prop (or \"hero\", for short) is intended to be seen more closely and in greater detail than the others.\n\nWe'll update the hero content with the following classes:\n\n```html(~/bloc/bloc-jams/index.html)\n ...\n         </nav>\n-        <section> <!-- hero content -->\n+        <section class=\"hero-content\"> <!-- hero content -->\n-            <h1>Bloc Jams</h1>\n-            <h3>Turn the music up!</h3>\n+            <h1 class=\"hero-title\">Turn the music up!</h1>\n         </section>\n         <section> <!-- selling points -->\n ...\n```\n\nand `main.css` with the following styles:\n\n```css(~/bloc/bloc-jams/styles/main.css)\n ...\n+.hero-content {\n+    position: relative; /* positioning will be explained in a resource */\n+    min-height: 600px;  /* hero content element must be _at least_ 600 pixels */\n+    background-image: url(../assets/images/bloc_jams_bg.jpg);\n+    background-repeat: no-repeat;\n+    background-position: center center;\n+    background-size: cover;\n+}\n```\n\nThe background-related properties tell our app that we want to use a specific image for the background. `background-image` specifies the image to use. The next property tells the browser not to repeat the image. We also tell the browser to center the image both horizontally (the first `center` in `background-position`) and vertically (the second). The `cover` value of the of `background-size` scales the image so the background is always covered by the image.\n\nAdd the styles for the hero content's title:\n\n```css(~/bloc/bloc-jams/styles/main.css)\n ...\n+.hero-content .hero-title {\n+    position: absolute;             /* positioning will be explained in a resource */\n+    top: 40%;                       /* positioning will be explained in a resource */\n+    -webkit-transform: translateY(-50%);\n+    -moz-transform: translateY(-50%);\n+    -ms-transform: translateY(-50%);\n+    transform: translateY(-50%);\n+    width: 100%;                    /* makes sure the title inhabits the full width of its container */\n+    text-align: center;             /* aligns text in the horizontal center of the element */\n+    font-size: 4rem;                /* specifies the size of the font in root em units */\n+    font-weight: 300;               /* makes the font thinner or lighter weight */\n+    text-transform: uppercase;      /* transforms the text to be all uppercase lettering */\n+    letter-spacing: 0.5rem;         /* puts 0.5 root ems worth of space between each letter */\n+    text-shadow: 1px 1px 0px rgb(58,23,63); /* creates a shadow underneath the text for readability over the image */\n+}\n```\n\nThe prefixes with names in dashes, like `-webkit-,` are known as __vendor prefixes__. Vendor prefixes are required for any CSS property that hasn't been officially adopted into the CSS3 specification. We're using the `transform` property and the `translateY` value to vertically center the text in the hero-content container. The three prefixes identify the transform property for the Webkit, Mozilla, and Microsoft-based browser, respectively.\n\n![finished hero content styles](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/basic-css%20checkpoint/hero_content_styled.png)\n\n> What the hero content should look like after you've added the CSS classes.\n\n### Selling Points\n\nAdd the CSS classes for the Bloc Jams selling points to the HTML:\n\n```html(~/bloc/bloc-jams/index.html)\n ...\n-        <section> <!-- selling points -->\n-            <div>\n-                <h5>Choose your music</h5>\n-                <p>The world is full of music; why should you have to listen to music that someone else chose?</p>\n+        <section class=\"selling-points\"> <!-- selling points -->\n+            <div class=\"point\">\n+                <span class=\"ion-music-note\"></span>\n+                <h5 class=\"point-title\">Choose your music</h5>\n+                <p class=\"point-description\">The world is full of music; why should you have to listen to music that someone else chose?</p>\n             </div>\n-            <div>\n-                <h5>Unlimited, streaming, ad-free</h5>\n-                <p>No arbitrary limits. No distractions.</p>\n+            <div class=\"point\">\n+                <span class=\"ion-radio-waves\"></span>\n+                <h5 class=\"point-title\">Unlimited, streaming, ad-free</h5>\n+                <p class=\"point-description\">No arbitrary limits. No distractions.</p>\n             </div>\n-            <div>\n-                <h5>Mobile enabled</h5>\n-                <p>Listen to your music on the go. This streaming service is available on all mobile platforms.</p>\n+            <div class=\"point\">\n+                <span class=\"ion-iphone\"></span>\n+                <h5 class=\"point-title\">Mobile enabled</h5>\n+                <p class=\"point-description\">Listen to your music on the go. This streaming service is available on all mobile platforms.</p>\n             </div>\n ...\n```\n\n> Note: we've added the icon elements that were provided by the [Ionicons font library](http://ionicons.com/) that we added to the header earlier.\n\nAdd the styles for the selling points:\n\n```css(~/bloc/bloc-jams/styles/main.css)\n ...\n+.selling-points {\n+    position: relative;\n+    display: table;\n+    width: 100%;\n+    -webkit-box-sizing: border-box;\n+    -moz-box-sizing: border-box;\n+    box-sizing: border-box; /* we'll explain this in a resource */\n+}\n+\n+.point {\n+    display: table-cell;\n+    position: relative;\n+    width: 33.3%;\n+    padding: 2rem;\n+    text-align: center;\n+}\n+\n+.point .point-title {\n+    font-size: 1.25rem;\n+}\n+\n+.ion-music-note,\n+.ion-radio-waves,\n+.ion-iphone {\n+    color: rgb(233,50,117);\n+    font-size: 5rem;\n+}\n```\n\nMost of the CSS above is familiar at this point. `display: table;` and its descendant `display: table-cell;` place the elements in a table-like layout (think of a spreadsheet), with each selling point sitting side-by-side in a grid.\n\n![completed bloc jams screenshot](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/basic-css%20checkpoint/bloc_jams_css_basics_completed.png)\n\n> The landing page after applying all the styles in this checkpoint.\n\n## Recap\n\n| **Concept** | **Description** |\n| ----------- | --------------- |\n| [CSS](http://en.wikipedia.org/wiki/Cascading_Style_Sheets) | Cascading Style Sheets control the look and formatting of a website. |\n| [Properties](http://www.w3schools.com/cssref/) | HTML elements are styled with CSS properties.<br><br>&bullet; [`background`](https://developer.mozilla.org/en-US/docs/Web/CSS/background)<br>&bullet; [`background-position`](http://www.w3schools.com/cssref/pr_background-position.asp) |\n| [RGB color model](https://en.wikipedia.org/wiki/RGB_color_model#Colors_in_web-page_design) | Colors can be displayed as hexadecimals (like `#FFFFFF`) or using `rgb(#,#,#)`, where # respectively represents red, green, and blue with a value range of 0-255. |\n| [CSS Units](https://developer.mozilla.org/en-US/docs/Web/CSS/length#Units) | We use font-relative length units, such as `em` and `rem`, to create scalable layouts. |\n| [Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors) | Selectors are patterns that reference HTML elements for styling. |\n| [Descendant Selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_selectors) | Combine two or more selectors with a space to create a descendant selector. A descendant selector references element(s) that exist within a specified ancestor element. |\n| [Vendor Prefixes](https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix) | Some browsers only support certain CSS properties with the use of a vendor prefix. |\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"1. Read these articles about [CSS Positioning](http://alistapart.com/article/css-positioning-101) and [Absolute Horizontal and Vertical Centering](http://www.smashingmagazine.com/2013/08/absolute-horizontal-vertical-centering-css/).\n2. Read our [resource on the CSS Box Model and `box-sizing`](https://www.bloc.io/resources/the-css-box-model).\n3. Read [this Google Developers resource](https://developers.google.com/web/tools/chrome-devtools/iterate/inspect-styles/) on using Dev Tools to debug CSS.\n4. Read our [Learning by Writing resource](https://www.bloc.io/resources/learning-by-writing).\n5. Submit two explanations to your mentor using Markdown formatting that reflect on the information above:\n    - Explain the difference between `absolute` and `relative` positioning.\n    - Explain how `box-sizing: border-box` treats contained content differently than the default browser `box-sizing`.", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>3, "checkpoint_type"=>"normal", "position"=>3, "points"=>1, "ref"=>"976b8e2b-dee4-494b-ab22-ae9686c65546|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2076", "assessment"=>nil}, {"id"=>2077, "name"=>"HTML & CSS: Responsiveness", "summary"=>"Media Queries: make pages respond to various device screen sizes", "body"=>"<!-- { ids:[2077], name:\"HTML & CSS: Responsiveness\", summary:\"Media Queries: make pages respond to various device screen sizes\" } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [CSS Positioning Explained By Building An Ice Cream Sundae](https://medium.freecodecamp.com/css-positioning-explained-by-building-an-ice-cream-sundae-831cb884bfa9#.ohxeq1f70)\n* [Learn Layout – CSS Fundamentals That Are Used in Any Website's Layout](http://learnlayout.com/)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint introduces media queries, a CSS technique used to apply styles based on specified conditions.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Explain what a viewport is and the purpose of a viewport meta tag.\n- Explain the use of and know which symbol represents the universal selector.\n- Recognize and understand the use of CSS pseudo-elements such as `::before` and `::after`.\n- Discuss the benefits of multiple CSS files for a single application.\n- Add media queries to a CSS file.\n- Discuss the benefits of a grid system.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/jpqvmfznik\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nThe Bloc Jams landing page looks nice on a desktop computer. However, we want it to look good on as many devices as possible. We will use the principles of __responsive web development__ to define how Bloc Jams should look and function on mobile devices. Responsive web development describes the process which requires us to apply styles that allow our website to adapt to a variety of screen dimensions.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Set the Viewport\n\nThe __viewport meta tag__ is an HTML tag that indicates how the browser should render the content of the page in a device's viewport. The __viewport__ is a virtual window, like a browser window, that contains the display of the browser's content. Since the viewport tag is a `<meta>` tag, it belongs inside the `<head>` tag:\n\n```html(~/bloc/bloc-jams/index.html)\n ...\n <head>\n     <title>Bloc Jams</title>\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n     <link rel=\"stylesheet\" type=\"text/css\" href=\"http://fonts.googleapis.com/css?family=Open+Sans:400,800,600,700,300\">\n     <link rel=\"stylesheet\" type=\"text/css\" href=\"http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css\">\n     <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/normalize.css\">\n     <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/main.css\">\n </head>\n ...\n```\n\nThe `content` attribute has properties with values, separated by a comma:\n\n| Property/Value       | Description |\n| -------------------- | ----------- |\n| `width=device-width` | Sets the width of the viewport to conform to the width of the device viewing the page. |\n| `initial-scale=1`    | Sets the zoom level of the page when it's loaded. With a value of 1, the content remains unscaled. It is rendered as is, based on the CSS rules. |\n\nThis is what Bloc Jams looks like on a mobile device _without_ a viewport tag:\n\n<center>![bloc jams without viewport tag mobile](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/responsive-landing-page%20checkpoint/bloc_jams_mobile_without_viewport.png)</center>\n\nand with a viewport tag:\n\n<center>![bloc jams with viewport tag](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/responsive-landing-page%20checkpoint/bloc_jams_mobile_with_viewport.png)</center>\n\nThis difference is the reason why viewport `<meta>` tag is required: to properly render the HTML and CSS for each device. The page scales to fit the width. The selling points exceed the width of the device, but we'll fix that with responsive CSS.\n\n## Add `box-sizing: border-box`\n\nWe discussed the `border-box` value in the [Box Model resource](https://www.bloc.io/resources/the-css-box-model); it's important that we use it here. We want to keep the 2rem padding that we applied to the `point` class. However, we don't want the padding to affect the width of the elements, so they will maintain a consistent ratio for both small and large screens.\n\nAdd the following to the top of `main.css`:\n\n```css(~/bloc/bloc-jams/styles/main.css)\n+*, *::before, *::after {\n+    -moz-box-sizing: border-box;\n+    -webkit-box-sizing: border-box;\n+    box-sizing: border-box;\n+}\n ...\n```\n\nThe `*` is known as the __universal selector__. It selects all of the elements on a page and applies styles to them. Generally, the universal selector performs poorly on larger web pages, so be careful with how and when you use it. We use it here to make sure all the elements in Bloc Jams are sized using `border-box`.\n\n`::before` and `::after` (sometimes written with only one colon, like `:before` and `:after`) create __pseudo-elements__ that are the first and last child of the matched element, respectively.\n\n## Create the `landing.css` File\n\nAs we add pages to Bloc Jams, styles become difficult to navigate when kept in a single file like `main.css`. It is common practice to organize styles into multiple files where each file serves a specific purpose. We want to keep the styles for `main.css` specifically for __global__ styles, or styles that apply to many pages in the application.\n\nCreate a new stylesheet called `landing.css`, and move the landing page styles into it by copying them from `main.css` and removing them afterward:\n\n```bash(~/bloc/bloc-jams/)\n$ pwd #=> should be in ~/bloc/bloc-jams\n$ touch styles/landing.css\n```\n\n```css(~/bloc/bloc-jams/styles/landing.css)\n+body.landing {\n+    background-color: rgb(58,23,63);\n+}\n+\n+.hero-content {\n+    position: relative;\n+    min-height: 600px;\n+    background-image: url(../assets/images/bloc_jams_bg.jpg);\n+    background-repeat: no-repeat;\n+    background-position: center center;\n+    background-size: cover;\n+}\n+\n+.hero-content .hero-title {\n+    position: absolute;\n+    top: 40%;\n+    -webkit-transform: translateY(-50%);\n+    -moz-transform: translateY(-50%);\n+    transform: translateY(-50%);\n+    width: 100%;\n+    text-align: center;\n+    font-size: 4rem;\n+    font-weight: 300;\n+    text-transform: uppercase;\n+    letter-spacing: 0.5rem;\n+    text-shadow: 1px 1px 0px rgb(58,23,63);\n+}\n+\n+.selling-points {\n+    position: relative;\n+    display: table;\n+    width: 100%;\n+    -webkit-box-sizing: border-box;\n+    -moz-box-sizing: border-box;\n+    box-sizing: border-box;\n+}\n+\n+.point {\n+    display: table-cell;\n+    position: relative;\n+    width: 33.3%;\n+    padding: 2rem;\n+    text-align: center;\n+}\n+\n+.point .point-title {\n+    font-size: 1.25rem;\n+}\n+\n+.ion-music-note,\n+.ion-radio-waves,\n+.ion-iphone {\n+    color: rgb(233,50,117);\n+    font-size: 5rem;\n+}\n```\n\nMake sure to remove these styles from `main.css`. Remove the `border-box` style from the `selling-points` class since we applied the style globally:\n\n```css(~/bloc/bloc-jams/styles/landing.css)\n .selling-points {\n     position: relative;\n     display: table;\n     width: 100%;\n-    -webkit-box-sizing: border-box;\n-    -moz-box-sizing: border-box;\n-    box-sizing: border-box;\n }\n```\n\nAnd add a `<link>` to `landing.css` in the `<head>` tag:\n\n```html(~/bloc/bloc-jams/index.html)\n ...\n <head>\n     <title>Bloc Jams</title>\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n     <link rel=\"stylesheet\" type=\"text/css\" href=\"http://fonts.googleapis.com/css?family=Open+Sans:400,800,600,700,300\">\n     <link rel=\"stylesheet\" type=\"text/css\" href=\"http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css\">\n     <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/normalize.css\">\n     <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/main.css\">\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/landing.css\">\n </head>\n ...\n```\n\nThe final `landing.css` file should look [like this](https://github.com/Bloc/curriculum-public/blob/master/web-development/frontend/foundation/08-html-css-responsiveness/landing.css) and the refactored `main.css` file should look [like this](https://github.com/Bloc/curriculum-public/blob/master/web-development/frontend/foundation/08-html-css-responsiveness/main.css).\n\n## Add Media Queries for Responsive Breakpoints\n\nA __responsive grid__ separates elements (or groups of elements) into columns and rows that collapse and expand based on device breakpoints. A __breakpoint__ is a measurement that corresponds to the width of a device's screen. It marks when certain mobile or desktop styles should be enabled or disabled. A common method for applying styles based on device breakpoints is CSS [media queries](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries).\n\nAdd our first media queries to `main.css`:\n\n```css(~/bloc/bloc-jams/styles/main.css)\n ...\n+\n+/* Medium and small screens (640px) */\n+@media (min-width: 640px) {\n+  /* Style information will go here */\n+}\n+\n+/* Large screens (1024px) */\n+@media (min-width: 1024px) {\n+  /* Style information will go here */\n+}\n```\n\nThe `@media` queries we've defined correspond to the root em measurements for medium and large (desktop) devices. We chose values that look good on a number of devices in favor of a more granular spectrum of breakpoints. `1024px` works well for both laptops and tablets, and `640px` works well for smaller tablets and bigger phones. We'll add more styles in the coming sections for devices that are smaller than `640px` as well.\n\nRecall that a root em is relative to the default browser font-size, which is 16 pixels in most browsers. 16 pixels is pretty small, particularly for high-resolution devices. Set the font-size above 100% of the default to make our text more legible on all devices:\n\n```css(~/bloc/bloc-jams/styles/main.css)\n ...\n /* Medium screens (640px) */\n @media (min-width: 640px) {\n+    html { font-size: 112%; }\n }\n\n /* Large screens (1024px) */\n @media (min-width: 1024px) {\n+    html { font-size: 120%; }\n }\n```\n\nWhen a browser sets a default text size (which is the basis for root ems) it sets the size _on the `html` element_. Therefore, the base text size cannot be a relative unit because there is no parent element to which to relate it.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/9qjkwk47ju\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\n## Add a Max-width Container\n\nBigger screens cause a website to stretch horizontally in a way that can warp elements and make text difficult to read. Setting a max-width on a container element is a common way to maintain the integrity of a design as the screen expands. Here's what Bloc Jams looks like on a large monitor without a max-width:\n\n<center>![bloc jams without a max width](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/responsive-landing-page%20checkpoint/bloc_jams_big_screen_no_max_width.png)</center>\n\nand with a max-width:\n\n<center>![bloc jams with a max width defined](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/responsive-landing-page%20checkpoint/blocs_jams_big_screen_max_width.png)</center>\n\nSet the max-width on a new `container` class, and set the [horizontal `margin` value to `auto` to center it](http://learnlayout.com/margin-auto.html):\n\n```html(~/bloc/bloc-jams/styles/main.css)\n ...\n+.container {\n+    margin: 0 auto;\n+    max-width: 64rem;\n+}\n+\n /* Medium screens (640px) */\n @media (min-width: 640px) {\n     html { font-size: 112%; }\n }\n ...\n```\n\nRecall that the second argument of the `margin` shorthand determines the size of the margin on the left __and__ right side of the element whenever there are only two arguments given. When a width is \"fixed\" (meaning there is a width or max-width defined), setting the left and right margins to `auto` will center the element.\n\nAdd the container class to the `.selling-points` section:\n\n```html(~/bloc/bloc-jams/index.html)\n ...\n-        <section class=\"selling-points\"> <!-- selling points -->\n+        <section class=\"selling-points container\"> <!-- selling points -->\n ...\n```\n\n## Add a Grid System\n\nIn responsive web development, a grid system is used to set divisions in a page based on common proportions. Popular implementations include [Bootstrap's](http://getbootstrap.com/css/#grid) or [Foundation's](http://foundation.zurb.com/grid.html) grid systems. We'll make our own, simple grid system for Bloc Jams.\n\nGrids set natural changes in the layout at device breakpoints. Add the `.column` under the `min-width: 640px` media query:\n\n```css(~/bloc/bloc-jams/styles/main.css)\n ...\n @media (min-width: 640px) {\n     html { font-size: 112%; }\n+\n+    .column {\n+        float: left;\n+        padding-left: 1rem;\n+        padding-right: 1rem;\n+    }\n }\n```\n\nWe use the `column` class as a shared class for all items in our grid system. We set the __float__ to `left` and add padding to keep some aesthetic space between grid elements. `float: left` ensures that every element with the `column` class will stick to the left-most side in its container.\n\nThe browser achieves this by pulling the floated item out of the normal document flow. This is an important distinction because unexpected behavior may occur when floats are not \"cleared\"; `clear` is a CSS property that specifies whether an element can be next to floating elements that precede it or must be moved down (cleared) below them.\n\nDefine additional column classes that divide elements within a container into full-width, halves, thirds, and fourths:\n\n```css(~/bloc/bloc-jams/styles/main.css)\n ...\n @media (min-width: 640px) {\n     html { font-size: 112%; }\n\n     .column {\n         float: left;\n         padding-left: 1rem;\n         padding-right: 1rem;\n     }\n+\n+    .column.full { width: 100%; }\n+    .column.two-thirds { width: 66.7%; }\n+    .column.half { width: 50%; }\n+    .column.third { width: 33.3%; }\n+    .column.fourth { width: 25%; }\n+    .column.flow-opposite { float: right; }  \n }\n```\n\nThe class names correspond to the fraction of the width they will occupy. We've used the same selector syntax that we used on `body.landing`. We _must_ use the proportion classes (`full`, `half`, etc.) with the `column` class or the styles will not apply.\n\nAdd the `third` class to our selling points:\n\n```html(~/bloc/bloc-jams/index.html)\n ...\n-            <div class=\"point\">\n+            <div class=\"point column third\">\n                 <span class=\"ion-music-note\"></span>\n                 <h5 class=\"point-title\">Choose your music</h5>\n                 <p class=\"point-description\">The world is full of music; why should you have to listen to music that someone else chose?</p>\n             </div>\n-            <div class=\"point\">\n+            <div class=\"point column third\">\n                 <span class=\"ion-radio-waves\"></span>\n                 <h5 class=\"point-title\">Unlimited, streaming, ad-free</h5>\n                 <p class=\"point-description\">No arbitrary limits. No distractions.</p>\n             </div>\n-            <div class=\"point\">\n+            <div class=\"point column third\">\n                 <span class=\"ion-iphone\"></span>\n                 <h5 class=\"point-title\">Mobile enabled</h5>\n                 <p class=\"point-description\">Listen to your music on the go. This streaming service is available on all mobile platforms.</p>\n             </div>\n ...\n```\n\nRemove the `width` property definition from the `point` and `selling-points` classes in `landing.css` – width is now applied via the `container` and `column` classes. Remove the `display` properties as well. The `column` class's `float` property takes care of displaying our content in a grid, so we no longer need them formatted like a table:\n\n```css(~/bloc/bloc-jams/styles/landing.css)\n ...\n .selling-points {\n     position: relative;\n-    display: table;\n-    width: 100%;\n }\n\n .point {\n-    display: table-cell;\n     position: relative;\n     padding: 2rem;\n-    width: 33.3%;\n     text-align: center;\n }\n ...\n```\n\n## Recap\n\n| **Concept** | **Description** |\n| ----------- | --------------- |\n| [Responsive Web Design](http://en.wikipedia.org/wiki/Responsive_web_design) | A responsive web site will adapt its layout to a wide range of devices and screen sizes. |\n| [Viewport](https://developers.google.com/speed/docs/insights/ConfigureViewport) | A viewport controls how a site displays on a mobile device.<br><br>&bullet; [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta) |\n| [Pseudo-elements](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements) | Pseudo-elements like `::before`  and `::after` are added to selectors and allow you to style certain parts of a document. |\n| [Universal Selector: `*`](https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors) | The universal selector, represented by the asterisk symbol, matches a single element of any type. |\n| [`clear` CSS property](https://developer.mozilla.org/en-US/docs/Web/CSS/clear) | Specifies whether an element can be next to floating elements that precede it or must be moved down (cleared) below them. |\n| [Breakpoint](https://developers.google.com/web/fundamentals/layouts/rwd-fundamentals/how-to-choose-breakpoints?hl=en) | A breakpoint is a measurement that corresponds to an approximate screen size of many devices. It marks when certain mobile or desktop styles should be enabled or disabled. |\n| [Media Queries](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries) | Media queries tailor the presentation of content to a [specific range of output devices](https://css-tricks.com/snippets/css/media-queries-for-standard-devices/) without having to change the content itself. |\n| Grid Systems | A grid system provides a site with solid structure. In responsive web development in particular, grids simplify the division and display of information. |\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"### Media Queries\n\n1. Read the [Mozilla documentation on media queries](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries#Logical_operators).\n2. Use this [JS Bin](http://jsbin.com/hecaye/12/edit?html,css,output) for a media query exercise:\n  - In the CSS panel, note that there is a comment in each of the media queries, numbered 1, 2, and 3, and a different color applied to each of the three `media-container` class definitions.\n  - Write a media query that makes the text in the media container\n    - red when the output has minimum width of 400px\n    - blue when the output has minimum width of 450px\n    - green when the output has minimum width of 500px\n\nWhen you're done, the text should change like this:\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Responsive%20Landing%20Page/media_queries_assignment_jsbin.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Responsive%20Landing%20Page/media_queries_assignment_jsbin.mp4) the preview directly.\n</video></center>\n\n3. Submit your JS Bin URL to your mentor.\n\n### `clearfix`\n\n__Before You Begin__: Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n1. Read the entire [CSS Tricks resource](https://css-tricks.com/all-about-floats/) about floats and clearfixes.\n2. Add the `clearfix` class to each `<section>` tag in the HTML pane of this [JS Bin](http://jsbin.com/zepepu/16/edit?html,css,output). Read the HTML comments above each container and watch the output to see how the clearfix affects the layout of the boxes and the text.\n3. After experimenting with clearfixes, add the following clearfix styles to the end of `main.css`:\n\n  ```css(~/bloc/bloc-jams/styles/main.css)\n   ...\n  .clearfix::before,\n  .clearfix::after {\n      content: \" \";\n      display: table;\n  }\n\n  .clearfix::after {\n      clear: both;\n  }\n  ```\n\n4. Lastly, in `index.html`, add the `clearfix` class to `<section class=\"selling-points container\">`.\n\n__When You're Done__: Commit your assignment work in Git. __This assignment should be merged.__ See [Git Checkpoint Workflow: __Mergeable Assignments__](https://www.bloc.io/resources/git-checkpoint-workflow#mergeable-assignments) for details.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n- <a href=\"//fast.wistia.net/embed/iframe/y825mhmf52?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Media Queries Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>4, "checkpoint_type"=>"normal", "position"=>4, "points"=>1, "ref"=>"627b1d15-6ebb-46cd-9d37-8c4b51770e81|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2077", "assessment"=>nil}, {"id"=>2078, "name"=>"HTML & CSS: Collection View", "summary"=>"Collection View: a view to display the collection of all albums", "body"=>"<!-- { ids:[2078], name:'HTML & CSS: Collection View', summary:'Collection View: a view to display the collection of all albums' } -->\n\n## Overview and Purpose\n\nThis checkpoint implements a \"Collection view\" for the Bloc Jams application, which allows a user to view their album collection on a single page.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Create a basic HTML document structure.\n- Create links (anchors) to local files.\n- Discuss style properties – such as `z-index`, `vertical-align`, `text-decoration`, etc. – and their respective values and units.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/zpgckqumiv\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nTo view albums and play songs, we need to see a collection of the available albums that we can play. We also want to continue to use the responsive classes we defined in the last checkpoint, so our album collection looks nice on a mobile device.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Create the Collection View Files\n\nThe Collection view needs its own HTML page. Create the file in the base directory, the same place where we created `index.html`:\n\n```bash(~/bloc/bloc-jams/)\n$ touch collection.html\n```\n\nCreate an accompanying CSS file:\n\n```bash(~/bloc/bloc-jams/)\n$ touch styles/collection.css\n```\n\n## Add the HTML Skeleton to `collection.html`\n\nThe HTML skeleton for the collection page is similar to the landing page, except that it links to `collection.css` instead of `landing.css`:\n\n```html(~/bloc/bloc-jams/collection.html)\n+<!DOCTYPE html>\n+<html>\n+    <head>\n+        <title>Bloc Jams</title>\n+        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n+        <link rel=\"stylesheet\" type=\"text/css\" href=\"http://fonts.googleapis.com/css?family=Open+Sans:400,800,600,700,300\">\n+        <link rel=\"stylesheet\" type=\"text/css\" href=\"http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css\">\n+        <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/normalize.css\">\n+        <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/main.css\">\n+        <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/collection.css\">\n+    </head>\n+    <body>\n+    </body>\n+</html>\n```\n\n## Update the Navigation to Link to All Bloc Jams Pages\n\nWe have two pages in Bloc Jams, and we need a way to navigate between them. We'll make the Bloc Jams logo the link to the landing page and create a separate set of links on the righthand side of the navbar. We may have more pages in Bloc Jams in the future, so we'll create a container to hold any future links to those pages.\n\nAdd the new nav markup to `index.html`:\n\n```html(~/bloc/bloc-jams/index.html)\n ...\n     <nav class=\"navbar\"> <!-- nav bar -->\n-        <img src=\"assets/images/bloc_jams_logo.png\" alt=\"bloc jams logo\" class=\"logo\">\n+        <a href=\"index.html\" class=\"logo\">\n+            <img src=\"assets/images/bloc_jams_logo.png\" alt=\"bloc jams logo\">\n+        </a>\n+        <div class=\"links-container\">\n+            <a href=\"collection.html\" class=\"navbar-link\">collection</a>\n+        </div>\n     </nav>\n ...\n```\n\nWhen linking to other pages, we use an anchor tag (`<a>`) with a defined `href` attribute. Like the `href` in `<link>` tags, the content of the attribute is either a link to a remote location (like another site), or in this case, a relative path to another file (`href=\"collection.html\"`).\n\nWe've added some new classes to style the nav. Add the corresponding style rules to `main.css`:\n\n```css(~/bloc/bloc-jams/styles/main.css)\n ...\n .navbar {\n+    position: relative;\n     padding: 0.5rem;\n-    background-color: rgb(101,18,95);\n     /* #1 */\n+    background-color: rgba(101,18,95,0.5);\n     /* #2 */\n+    z-index: 1;\n }\n\n .navbar .logo {\n     position: relative;\n     left: 2rem;\n+    cursor: pointer;  /* produces the finger-pointer icon when you hover over the logo */\n+}\n+\n+.navbar .links-container {\n+    display: table;\n+    position: absolute;\n+    top: 0;\n+    right: 0;\n+    height: 100px;\n+    color: white;\n     /* #3 */\n+    text-decoration: none;\n+}\n+\n+.links-container .navbar-link {\n+    display: table-cell;\n+    position: relative;\n+    height: 100%;\n+    padding-left: 1rem;\n+    padding-right: 1rem;\n     /* #4 */\n+    vertical-align: middle;\n+    color: white;\n+    font-size: 0.625rem;\n+    letter-spacing: 0.05rem;\n+    font-weight: 700;\n+    text-transform: uppercase;\n     /* #3 */\n+    text-decoration: none;\n+    cursor: pointer;\n+}\n+\n   /* #5 */\n+.links-container .navbar-link:hover {\n+    color: rgb(233,50,117);\n+}\n ...\n```\n\nWe've included some new CSS properties in these classes:\n\n- At __#1__: the `rgba()` value is the same as the `rgb()` value for color, except that it takes a fourth argument that determines _alpha_ (opacity) of the color. Opacity is measured on a scale from 0 (invisible) to 1 (completely opaque). We've made the navigation element slightly transparent to reveal the new background we'll have on other pages, including the collection page.\n- At __#2__: the `z-index` property adds a third dimension to the placement of an element (think of x, y, and z coordinates). If two elements overlap, then the `z-index` determines which of them is displayed on top of the other. By default, `z-index` for an element is set by the browser (`auto`), but we want the nav to sit above all adjacent elements. Elements with larger z-index values sit above lesser ones.\n- At __#3__: the `text-decoration` property changes the \"decorative\" properties of text, allowing for the addition of underlines, strikethroughs, and more. By default, anchor tags (`<a>`) are decorated with an underline, so setting `text-decoration` to `none` removes it. Try commenting out this style to see what the underline looks like.\n- At __#4__: `vertical-align` orients `inline` or `table-cell` content vertically. The `middle` value centers our nav links vertically within their containers.\n\nThere's also a pseudo-class selector at __#5__, `:hover`, that's appended to the `.navbar-link` class. A \"hover\" state of an element occurs when a cursor mouses over it. Test this out in Brackets Live Preview. Note that when hovering over the \"Collection\" link, it changes to the color specified under the `:hover` style rule.\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Adding%20Collection%20View/navbar_hover_link_styling.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Adding%20Collection%20View/navbar_hover_link_styling.mp4) the preview directly.\n</video></center>\n\nWe want the nav updates reflected on both the landing and collection pages. Add the same markup to `collection.html`:\n\n```html(~/bloc/bloc-jams/collection.html)\n ...\n     <body>\n+        <nav class=\"navbar\"> <!-- nav bar -->\n+            <a href=\"index.html\" class=\"logo\">\n+                <img src=\"assets/images/bloc_jams_logo.png\" alt=\"bloc jams logo\">\n+            </a>\n+            <div class=\"links-container\">\n+                <a href=\"collection.html\" class=\"navbar-link\">collection</a>\n+            </div>\n+        </nav>\n     </body>\n ...\n```\n\n## Download Blurred Backgrounds and Album Placeholder Images\n\nThe blurred background effect on the collection page and the images for each album are in downloadable .zip files.\n\nDownloads:\n\n- Download the [album placeholder images](https://dl.dropboxusercontent.com/u/10788831/album_covers.zip).\n- Download the [blurred backgrounds](https://dl.dropboxusercontent.com/u/10788831/blurred_backgrounds.zip).\n\nExtract or unzip the files:\n\n- On OS X, double-clicking the .zip file will automatically extract it.\n- On Windows, double-clicking the .zip file will open the \"Extract all\" option at the top of the File Explorer Window. More details can be found in [this Microsoft support document](http://windows.microsoft.com/en-us/windows-8/zip-unzip-files).\n\nMove the _unzipped_ folders to the `bloc-jams/assets/images` directory, where the rest of the Bloc Jams images reside.\n\n__Do not rename the folders.__ Doing so will prevent the images from displaying properly. __Double check that the placeholder image directory is called `album_covers` and that the backgrounds directory is called `blurred_backgrounds`__ before continuing with the rest of the checkpoint.\n\n## Add `collection.html` Content\n\nPopulate the Collection view with the following HTML:\n\n```html(~/bloc/bloc-jams/collection.html)\n ...\n     </nav>\n+\n+    <section class=\"album-covers container clearfix\">\n+        <div class=\"collection-album-container column fourth\">\n+            <img src=\"assets/images/album_covers/01.png\"/>\n+            <div class=\"collection-album-info caption\">\n+                <p>\n+                    <a class=\"album-name\" href=\"#\">The Colors</a>\n+                    <br/>\n+                    <a href=\"#\">Pablo Picasso</a>\n+                    <br/>\n+                    X songs\n+                    <br/>\n+                </p>\n+            </div>\n+        </div>\n+        <div class=\"collection-album-container column fourth\">\n+            <img src=\"assets/images/album_covers/01.png\"/>\n+            <div class=\"collection-album-info caption\">\n+                <p>\n+                    <a class=\"album-name\" href=\"#\">The Colors</a>\n+                    <br/>\n+                    <a href=\"#\">Pablo Picasso</a>\n+                    <br/>\n+                    X songs\n+                    <br/>\n+                </p>\n+            </div>\n+        </div>\n+        <div class=\"collection-album-container column fourth\">\n+            <img src=\"assets/images/album_covers/01.png\"/>\n+            <div class=\"collection-album-info caption\">\n+                <p>\n+                    <a class=\"album-name\" href=\"#\">The Colors</a>\n+                    <br/>\n+                    <a href=\"#\">Pablo Picasso</a>\n+                    <br/>\n+                    X songs\n+                    <br/>\n+                </p>\n+            </div>\n+        </div>\n+        <div class=\"collection-album-container column fourth\">\n+            <img src=\"assets/images/album_covers/01.png\"/>\n+            <div class=\"collection-album-info caption\">\n+                <p>\n+                    <a class=\"album-name\" href=\"#\">The Colors</a>\n+                    <br/>\n+                    <a href=\"#\">Pablo Picasso</a>\n+                    <br/>\n+                    X songs\n+                    <br/>\n+                </p>\n+            </div>\n+        </div>\n+    </section>\n </body>\n ...\n```\n\nThis may look like a lot of markup, but we've repeated the elements that contain the albums in our collection four times. We wrapped the album covers in a `.container` class to maintain an aesthetic content width. There is also a `.clearfix` class to prohibit floated content from sharing the line with these albums. We use the `.column` and `.fourth` classes to create nice, responsive containers for our albums that restrict them to 25% of their parent container.\n\nWe want to add one more class to the body of the collection page before we add styles to `collection.css`:\n\n```html(~/bloc/bloc-jams/collection.html)\n ...\n </head>\n-<body>\n+<body class=\"collection\">\n    <nav class=\"navbar\"> <!-- nav bar -->\n ...\n```\n\n## Add Styles to `collection.css`\n\nAdd the following styles to the collection stylesheet:\n\n```css(~/bloc/bloc-jams/styles/collection.css)\n+body.collection {\n+    background-image: url(../assets/images/blurred_backgrounds/blur_bg_2.jpg);\n+    background-repeat: no-repeat;\n+    background-attachment: fixed;\n+    background-position: center center;\n+    background-size: cover;\n+}\n+\n+.album-covers {\n+    position: relative;\n+}\n+\n+.collection-album-container {\n+    position: relative;\n+    margin-top: 30px;\n+    margin-bottom: 20px;\n+    text-align: center;\n+}\n+\n+.collection-album-container .caption {\n+    margin-top: 10px;\n+}\n+\n+.collection-album-container .caption p {\n+    font-size: 1rem;\n+    font-weight: 300;\n+    color: rgba(255, 255, 255, 0.6);\n+}\n+\n+.collection-album-container .caption p a {\n+    color: rgba(255, 255, 255, 0.6);\n+}\n+\n+.collection-album-container .caption p a.album-name {\n+    color: white;\n+}\n+\n+.collection-album-container img {\n+    width: 80%;\n+}\n```\n\nWe've seen these properties before, but the background values are worth noting. We're using one of the blurred backgrounds for the background image in `collection.html`.\n\n- The `background-repeat` property has a value of `no-repeat`, which means that if the dimensions of the collection page are greater than the size of the background image, the image will not repeat.\n- Instead, `background-size` with a value of `cover` scales the image to cover the dimensions of the browser.\n- Lastly, the `background-attachment` property with a value of `fixed` fixes the background so that when the page scrolls, the background image does not move up or down with the content.\n\nThe result is a background image that remains in place, scales in size with the browser, and displays without the breaks of a repeating image.\n\n## Recap\n\n| **Concept** | **Description** |\n| ----------- | --------------- |\n| [Navigation](http://www.w3schools.com/css/css_navbar.asp) | Navigation is an essential aspect of any website that allows users to quickly access other pages. |\n| [RGBa model](http://tinyurl.com/nujpucb) | Colors can be defined in the red-green-blue-alpha model (RGBa) using the `rgba()` functional notation. RGBa extends the RGB color model to include the alpha channel, allowing specification of the opacity of a color. |\n| CSS Properties | &bullet; [`z-index`](https://developer.mozilla.org/en-US/docs/Web/CSS/z-index)<br>&bullet; [`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)<br>&bullet; [`vertical-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align) |\n| [Pseudo-classes](https://developer.mozilla.org/en-US/docs/Web/CSS/pseudo-classes) | A pseudo-class, such as [`:hover`](https://developer.mozilla.org/en-US/docs/Web/CSS/:hover), specifies a special state of the element to be selected. |\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"__Before You Begin__: Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n1. Read the [Mozilla resource on all pseudo-class selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/pseudo-classes), and review the [documentation on the `:active`](https://developer.mozilla.org/en-US/docs/Web/CSS/:active) pseudo-class's behavior.\n2. Add a style definition that uses the `:active` pseudo-class to change the color of the navigation bar link text to `rgb(233,50,117)` and the `background-color` to `white`. Use the `.navbar-link:hover` rule as a guide. The result should produce the behavior exhibited in the video below:\n\n    <center><video height=\"\" width=\"480px\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Adding%20Collection%20View/active_pesudo_class_assignment_demo.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Adding%20Collection%20View/active_pesudo_class_assignment_demo.mp4) the preview directly.\n    </video></center>\n\n__When You're Done__: Commit your assignment work in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n- <a href=\"//fast.wistia.net/embed/iframe/j7n7bmz6a3?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">:active Pseudo Class Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>5, "checkpoint_type"=>"normal", "position"=>5, "points"=>1, "ref"=>"d674842a-a8e0-44cd-9d92-401af1410cb3|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2078", "assessment"=>nil}, {"id"=>2079, "name"=>"HTML & CSS: Album View", "summary"=>"Album View: a view to display information for an individual album", "body"=>"<!-- { ids:[2079], name:'HTML & CSS: Album View', summary:'Album View: a view to display information for an individual album' } -->\n\n## Overview and Purpose\n\nThis checkpoint implements an \"Album view\" for the Bloc Jams application, which allows a user to view the details of a single album.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Create HTML tables.\n- Use media queries to make a page responsive on mobile devices.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/p4djc3q1ld\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nBloc Jams looks good so far. We'll build an Album view to expand the application's capabilities. From the collection page, a user can choose an individual album and view more details about it. The Album view will include a cover image, information about the album, and an HTML table of the album's songs.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Create the Album View Files\n\nThe Album view needs its own HTML page. Create the file in the base directory, the same place where we created `index.html` and `collection.html`:\n\n```bash(~/bloc/bloc-jams/)\n$ touch album.html\n```\n\nCreate an accompanying CSS file:\n\n```bash(~/bloc/bloc-jams/)\n$ touch styles/album.css\n```\n\n## Add an HTML Skeleton to `album.html`\n\nThe HTML skeleton for the album page is very similar to the landing and collection pages, except that we link to `album.css` in the head and give the body an `album` class. Add the following to `album.html`:\n\n```html(~/bloc/bloc-jams/album.html)\n+<!DOCTYPE html>\n+<html>\n+    <head>\n+        <title>Bloc Jams</title>\n+        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n+        <link rel=\"stylesheet\" type=\"text/css\" href=\"http://fonts.googleapis.com/css?family=Open+Sans:400,800,600,700,300\">\n+        <link rel=\"stylesheet\" type=\"text/css\" href=\"http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css\">\n+        <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/normalize.css\">\n+        <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/main.css\">\n+        <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/album.css\">\n+    </head>\n+    <body class=\"album\">\n+        <nav class=\"navbar\"> <!-- nav bar -->\n+            <a href=\"index.html\"  class=\"logo\">\n+                <img src=\"assets/images/bloc_jams_logo.png\" alt=\"bloc jams logo\">\n+            </a>\n+            <div class=\"links-container\">\n+                <a href=\"collection.html\" class=\"navbar-link\">collection</a>\n+            </div>\n+        </nav>\n+    </body>\n+</html>\n```\n\n## Add a Section for Album Details\n\nWe have a number of details to display on this page. We'll add a section for the album cover image, the album title, the artist, and release information.\n\nAdd the section markup to `album.html`:\n\n```html(~/bloc/bloc-jams/album.html)\n ...\n         </nav>\n+        \n+        <main class=\"album-view container narrow\">\n+            <section class=\"clearfix\">\n+                <div class=\"column half\">\n+                    <img src=\"assets/images/album_covers/01.png\" class=\"album-cover-art\">\n+                </div>\n+                <div class=\"album-view-details column half\">\n+                    <h2 class=\"album-view-title\">The Colors</h2>\n+                    <h3 class=\"album-view-artist\">Pablo Picasso</h3>\n+                    <h5 class=\"album-view-release-info\">1909 Spanish Records</h5>\n+                </div>\n+            </section>\n+        </main>\n     </body>\n </html>\n```\n\nWe've wrapped all of the content in a `<main>` tag because it is the main content. We've also wrapped this section in a `<section>` tag to separate it from other information we'll add later.\n\nWe've placed the album image in a `<div>` and the album details in another `<div>`. We've given the class names `column` and `half` to each `<div>` such that they expand to half their parent's width, which allows us to display them side by side.\n\n## Add Styles to `album.css`\n\nLet's style the album details that we've added. The styles we'll add should all be familiar by now, although we'll use a different background image than the one used on the collection page.\n\nAdd the following styles to `album.css`:\n\n```css(~/bloc/bloc-jams/styles/album.css)\n+body.album {\n+    background-image: url(../assets/images/blurred_backgrounds/blur_bg_3.jpg);\n+    background-repeat: no-repeat;\n+    background-attachment: fixed;\n+    background-position: center center;\n+    background-size: cover;\n+}\n+\n+.album-cover-art {\n+    position: relative;\n+    left: 20%;\n+    margin-top: 1rem;\n+    width: 60%;\n+}\n+\n+.album-view-details {\n+    position: relative;\n+    top: 1.5rem;\n+    padding: 1rem;\n+}\n+\n+.album-view-details .album-view-title {\n+    font-weight: 300;\n+    font-size: 2rem;\n+}\n+\n+.album-view-details .album-view-artist {\n+    font-weight: 300;\n+    font-size: 1.5rem;\n+}\n+\n+.album-view-details .album-view-release-info {\n+    font-weight: 300;\n+    font-size: 0.75rem;\n+}\n```\n\nIn our HTML, we've used a new class named `narrow` on the album-view container that sets a `max-width` property to the element. We may want to use this style again – let's add it to `main.css`:\n\n```css(~/bloc/bloc-jams/styles/main.css)\n ...\n .container {\n     margin: 0 auto;\n     max-width: 64rem;\n }\n\n+.container.narrow {\n+    max-width: 56rem;\n+}\n\n /* Medium screens (640px) */\n ...\n```\n\n## Add a Table for Song Listings\n\nWe'll add the song list to complete the album's information.\n\nAdd the song list `<table>` below the album details section in `album.html`:\n\n```html(~/bloc/bloc-jams/album.html)\n ...\n         <main class=\"album-view container narrow\">\n             <section class=\"clearfix\">\n                 ...\n             </section>\n+            <table class=\"album-view-song-list\">\n+                <tr class=\"album-view-song-item\">\n+                    <td class=\"song-item-number\">1</td>\n+                    <td class=\"song-item-title\">Blue</td>\n+                    <td class=\"song-item-duration\">X:XX</td>\n+                </tr>\n+                <tr class=\"album-view-song-item\">\n+                    <td class=\"song-item-number\">2</td>\n+                    <td class=\"song-item-title\">Red</td>\n+                    <td class=\"song-item-duration\">X:XX</td>\n+                </tr>\n+                <tr class=\"album-view-song-item\">\n+                    <td class=\"song-item-number\">3</td>\n+                    <td class=\"song-item-title\">Green</td>\n+                    <td class=\"song-item-duration\">X:XX</td>\n+                </tr>\n+                <tr class=\"album-view-song-item\">\n+                    <td class=\"song-item-number\">4</td>\n+                    <td class=\"song-item-title\">Purple</td>\n+                    <td class=\"song-item-duration\">X:XX</td>\n+                </tr>\n+                <tr class=\"album-view-song-item\">\n+                    <td class=\"song-item-number\">5</td>\n+                    <td class=\"song-item-title\">Black</td>\n+                    <td class=\"song-item-duration\">X:XX</td>\n+                </tr>\n+            </table>\n         </main>\n ...\n```\n\nStructuring lists of data is a standard use for tables. A table begins and ends with `<table>` tags. Each `<tr>` tag is a row of the table, and each `<td>` tag is an item within that row.\n\nWe've included a table row for each song. Additionally, the `<td>`s in each row are the same except for the song content. We'll eventually fill in our album and song list with real data, but for now we'll use placeholder album data.\n\n## Style the Song Listings\n\nWe'll style the song list table to fit in with the sleek look of our application.\n\nAdd the following styles to `album.css`:\n\n```css(~/bloc/bloc-jams/styles/album.css)\n ...\n .album-view-details .album-view-release-info {\n     font-weight: 300;\n     font-size: 0.75rem;\n }\n\n+.album-view-song-list {\n+    width: 90%;\n+    margin: 1.5rem auto;\n+    font-weight: 300;\n+    font-size: 0.75em;\n+    border-collapse: collapse;\n+}\n+\n+.album-view-song-item {\n+    height: 3rem;\n     /* #1 */\n+    border-bottom: 1px solid rgba(255,255,255,0.5);\n+}\n+\n+.song-item-number {\n+    width: 5%;\n+}\n+\n+.song-item-title {\n+    width: 85%;\n+}\n+\n+.song-item-duration {\n+    width: 5%;\n+}\n```\n\nAt __#1__, we use `border-bottom` instead of `border` to specify one that only exists on the bottom of the element. Recall from the [Box Model resource](https://www.bloc.io/resources/the-css-box-model) that borders have three values: `border: <width> <style> <color>;`. We've used an `rgba` color value with 50% opacity.\n\n## Make the Album View Responsive\n\nAdd the following at the bottom of `album.css`:\n\n```css(~/bloc/bloc-jams/styles/album.css)\n ...\n .song-item-duration {\n     width: 5%;\n }\n\n /* #2 */\n+@media (max-width: 640px) and (min-width: 320px) {\n+    .album-view-details {\n+        text-align: center;\n+    }\n+    \n+    .album-view-title {\n+        margin-top: 0;   \n+    }\n+}\n+\n /* #3 */\n+@media (max-width: 1024px) and (min-width: 320px) {\n+   .album-view-song-list {\n+        position: relative;\n+        top: 1rem;\n+        width: 80%;\n+        margin: auto;\n+    }\n+}\n```\n\nAt __#2__, we center the album details text to look better on smaller devices. At __#3__, we adjust the song list to have spacing around it so that it doesn't meet the edge of small devices.\n\n## Update Links in Collection View\n\nAll the links on the Collection page point to `#`, which is a placeholder URL. Update the URLs of each `<a>` tag to link the album and artist names to the new Album view. For example:\n\n```html(~/bloc/bloc-jams/collection.html)\n ...\n-<a class=\"album-name\" href=\"#\">The Colors</a>\n+<a class=\"album-name\" href=\"album.html\">The Colors</a>\n <br/>\n-<a href=\"#\">Pablo Picasso</a>\n+<a href=\"album.html\">Pablo Picasso</a>\n ...\n```\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Tables](http://www.w3schools.com/html/html_tables.asp) | Use tables to present data in rows and columns. |\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"1. Read the [Mozilla resource](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table) on the `<table>` element.\n2. Clone this [JS Bin to practice HTML tables](http://clln.jsbin.com/wajoyu/edit?html,css,output):\n    - Add two new songs to the table.\n    - There are three columns in the song list: the track number, song title, and song length. Add a fourth column that indicates how many times a song has been played. Populate the new column with your own data. Adjust the widths of the columns as needed so the spacing is user friendly.\n    - Add a head (`<thead>`) to the table. Give each column a heading to match the column's content.\n    - Update the styling of the table – give it new colors, backgrounds, borders, font styles, etc.\n3. Send the URL of your completed JS Bin to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n- <a href=\"//fast.wistia.net/embed/iframe/u1lvas8zc8?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">HTML Tables Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>6, "checkpoint_type"=>"normal", "position"=>6, "points"=>1, "ref"=>"d9cb4156-0b4b-4233-a6d8-575f9e7266a3|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2079", "assessment"=>nil}, {"id"=>2313, "name"=>"Quiz: Frontend Foundations: HTML & CSS", "summary"=>"Quiz: Frontend Foundations: HTML & CSS", "body"=>"", "assignment"=>"", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>7, "checkpoint_type"=>"quiz", "position"=>7, "points"=>1, "ref"=>"a87270bb-fb50-4df1-9375-dc5421278512|0", "exercises"=>false, "quiz_id"=>9, "path"=>"/checkpoints/2313", "assessment"=>nil}, {"id"=>2080, "name"=>"Programming Reinforcement: Introduction", "summary"=>"Reinforce JavaScript programming and problem solving fundamentals through curated exercises", "body"=>"<!-- { ids:[2080], name:'Programming Reinforcement: Introduction', summary:'Reinforce JavaScript programming and problem solving fundamentals through curated exercises' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Don’t Believe Anyone Who Tells You Learning To Code Is Easy](https://techcrunch.com/2014/05/24/dont-believe-anyone-who-tells-you-learning-to-code-is-easy/)\n* [Debug with Breakpoints](https://developers.google.com/web/tools/chrome-devtools/debug/breakpoints/?hl=en)A\n* [Why Learning to Code is So Damn Hard](https://www.vikingcodeschool.com/posts/why-learning-to-code-is-so-damn-hard)\n* [How to Ask Questions on Bloc Student Slack](https://github.com/juliusdelta/slackquestions/blob/master/slackquestions.md)\n* [Bloc’s Top 5 Keys to Success](https://students-bloc.slack.com/archives/welcome-general/p1474937912000383)\n* [How to Ask for Help](https://github.com/wonderwoman13/apprentice/blob/master/how_to_ask_for_help.md)\n* [The Developer Mindset](http://kaibun.net/blog/2015/11/06/programming-might-not-be-about-programming/)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint introduces the Codewars platform and three coding challenges to practice conditionals, basic data structures, string and array manipulation, and algorithms in JavaScript.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Implement algorithms in JavaScript.\n- Understand conditional logic and the importance of sequence.\n- Understand the differences and similarities between strings and arrays in JavaScript.\n- Discuss the advantages of various conditional statements in JavaScript.\n- Understand how to read test specifications in JavaScript.\n\n## Introduction to Programming Reinforcement\n\nEach foundation checkpoint introduces new concepts, patterns, and assignments. We designed Bloc’s curriculum to push you to your learning limits. With that in mind, we’ve included breaks between lessons to reinforce programming concepts; this is the first of those breaks, known as Programming Reinforcement checkpoints.\n\nIn these checkpoints, you will complete coding challenges that help you master JavaScript and learn to think like a programmer. After you complete the challenges, you will meet with your mentor to discuss your solutions.\n\n- [Codewars](#codewars)\n- [Challenges](#challenges)\n- [Bonus Challenge: Musical Pitch Classes](#bonus-challenge)\n- [Assignment](#assignment)\n  - [For Mentors](#for-mentors)\n\n<a name=\"codewars\"></a>\n## Codewars\n\n<center>\n    <iframe src=\"//fast.wistia.net/embed/iframe/0sysb0t39z\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe>\n    <script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center><br><br>\n\nSign up for a free account at [Codewars](http://codewars.com). Codewars is a community of developers who help each other complete coding challenges. These challenges require you to apply JavaScript’s core features and your strong, analytical thinking to solve them properly.\n\nIf this is your first time creating an account, you must solve two initial coding challenges to complete sign up: [Multiply](http://www.codewars.com/kata/multiply/train/javascript) and [Broken Greetings](http://www.codewars.com/kata/broken-greetings/train/javascript).\n\n>If you attempt Broken Greetings before completing the _this, apply(), call(), bind()_ checkpoint, refer to [this solution](https://github.com/Bloc/curriculum-public/blob/master/web-development/frontend/programming-reinforcement/checkpoints/checkpoint-01-broken-greetings-solution.js#L6). The solution requires the use and understanding of `this`, which we cover in a later checkpoint.\n\n<a name=\"challenges\"></a>\n## Challenges\n\nYou must solve these three Kata (challenges) before submitting the checkpoint. At this point in your program, your skill level meets or exceeds that required by each Kata. While they may challenge you, know that you are capable of completing each one.\n\n>Your mentor may help you, but we strongly encourage you attempt these on your own.\n\n| Kata | Hint |\n|:-|:-|\n| [Powers of 2](https://www.codewars.com/kata/powers-of-2/javascript) | Write a function which will return list of all powers of 2 from 0 to n. |\n| [Find Count of Most Frequent Item in Array](https://www.codewars.com/kata/find-count-of-most-frequent-item-in-an-array/javascript) | Write a function to find count of the most frequent item of an array. |\n| [Create Phone Number](https://www.codewars.com/kata/create-phone-number/javascript) | Write a function that accepts an array of 10 integers (between 0 and 9), that returns a string of those numbers in the form of a phone number. |\n\n<a name=\"bonus-challenge\"></a>\n## Bonus Challenge: [Musical Pitch Classes](http://www.codewars.com/kata/musical-pitch-classes/train/javascript)\n\n>This bonus challenge is optional, but we strongly encourage you to attempt it.\n\nIn this challenge, you must convert musical notes (C through B) into their numerical representations (0 to 11). The exercise gives you little to begin with:\n\n```js\nfunction pitchClass(note){\n  return null;\n}\n```\n\n`note` is a string that represents the note itself and an optional modifier: sharp ('#') or flat ('b'). You must return an integer that represents the natural note (C, D, E, F, G, A, or B) optionally augmented by sharp or flat. Sharp notes are one value **larger** than their natural counterparts, whereas flat notes are one **smaller**. Here are some examples:\n\n```js\npitchClass('D') // D\n// returns 2\npitchClass('D#') // D Sharp\n// returns 3\npitchClass('Db') // D Flat\n// returns 1\n```\n\nIf the note goes below 0 or above 11, its value wraps to the other end of the scale (-1 becomes 11, 12 becomes 0). Some examples:\n\n```js\npitchClass('B') // B\n// returns 11\npitchClass('B#') // B Sharp\n// returns 0\npitchClass('C') // C\n// returns 0\npitchClass('Cb') // C Flat\n// returns 11\n```\n\nThis exercise also tests your ability to verify input parameters. Sometimes the data passed to your method is inaccurate. Perform checks to avoid working with data that may cause errors in your code.\n\nFor example, does passing `null` to `pitchClass` make sense? How about `56`? Or `'May I have a cupcake?'`?\n\n<a name=\"assignment\"></a>", "assignment"=>"- Navigate to your Bloc student account page to add your Codewars username. This will help your mentor find you on Codewars.\n- Complete all [mandatory challenges](#challenges).\n  - Submit the [link](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/programming-reinforcement-solution-link.png) to each of your solutions as part of your assignment.\n- Attempt the [Bonus Challenge](#bonus-challenge).\n  - Keep a log as you work through it and consider these questions when writing your report:\n    - What approaches did you try?\n    - Did you ever restart the process? If so, why?\n    - What steps did you take to solve the problem before you began coding?\n    - What was the most challenging aspect of the problem?\n    - Etc.\n  - If you complete the [Bonus Challenge](#bonus-challenge), submit the [link](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/programming-reinforcement-solution-link.png) to your solution.\n- Discuss your solutions and your struggles with your mentor.\n\n> Articulating your problem solving process is a valuable skill on the job and during technical interviews.\n\nRemember to click **Submit Final** on every challenge you complete, and notify your mentor when you do so. For challenges you *do not* complete, you may ask your mentor to review them with you.\n\n<a name=\"for-mentors\"></a>\n### For Mentors\n\nConsult this [document for reference](https://www.bloc.io/resources/javascript-programming-reinforcement-mentor-s-guide) for this and all future Frontend Programming Reinforcement checkpoints.", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>7, "checkpoint_type"=>"normal", "position"=>7, "points"=>1, "ref"=>"c5b5e1d3-ec4d-4784-a3de-01433a33d7fb|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2080", "assessment"=>nil}, {"id"=>2268, "name"=>"Learn Your Industry Vertical", "summary"=>"Learn about the people, ideas, and companies in your industry vertical", "body"=>"<!-- { ids:[1924,1932,2268], name:\"Learn Your Industry Vertical\", summary:\"Learn about the people, ideas, and companies in your industry vertical\" } -->\n\n> It's amazing how few students understand that such a big part of a job search is informally asking for a coffee.\n>\n> &mdash; Maria Halpern - Director of MBA Career Management at The Wharton School <a href=\"https://twitter.com/mariahalpern\">@mariahalpern</a>\n\n## Objectives\n\nAfter this checkpoint you should be able to:\n\n- Follow the influencers, companies, and news related to their industry of focus.\n- Understand how to reach out to strangers for informational interviews.\n- Discuss their industry of focus with others.\n\n## Networking\n\nNetworking is a broad term that encompasses any time people interact to learn, to exchange information, or to develop contacts. Professionals in all fields network. Here are four examples:\n\n- Joining conferences or Meetups\n- Attending job fairs\n- Having coffee or lunch with someone in your field\n- Taking an ongoing education class\n\nNetworking is important to your career’s development. Through proper networking, you can hear about new job opportunities before anyone else. You can learn new high-demand skills, exchange advice, and even make a new friend. Most importantly, “[more than 70 percent of people land jobs through networking.](http://money.usnews.com/money/blogs/outside-voices-careers/2014/09/17/dont-believe-these-8-job-search-myths)”\n\nAs you develop your network, remember that you get out what you put in. If you decide to pass on a job opportunity, share it with someone else who’s looking. If you find a great article or video, send it to someone else who’s learning. Invite people you meet to events you’re attending. Engaging these people and investing in their success will pay dividends as they begin to engage and invest in yours.\n\n- [Connect with Bloc Students](#connect-with-the-bloc-community)\n- [Network and Build Relationships](#network-and-build-relationships)\n- [Write and Practice Your Elevator Pitch](#write-and-practice-your-elevator-pitch)\n- [Overcome Impostor Syndrome](#overcome-impostor-syndrome)\n- [Assignment](#assignment)\n\n## Connect with the Bloc Community\n\nMore than anyone else, Bloc students, graduates, mentors, and staff know where you’ve been and where you’re going. Bloc is already your network, so take advantage of it.\n\n- [Find Bloc peers](https://www.linkedin.com/edu/school?id=162130) on LinkedIn\n- Join and take part in [the `#careers-general` Slack channel](https://students-bloc.slack.com/messages/careers-general/)\n- Collaborate on a project or share ideas in [The Bloc Hacker Club](https://www.facebook.com/groups/blocalumni/)\n\nWhen you share your experience, other students will give advice and detail what has worked for them. Similarly, you should offer what has worked for you.\n\n## Network and Build Relationships\n\nNetworking happens in one of two ways: offline and online. _Online_ networking occurs on e-mails, comment threads, LinkedIn, Twitter, and other online portals. Your primary goal when networking online is to bring those relationships _offline_.\n\nOffline networking happens in person, in a meeting, at a conference, at Meetups, and anywhere you can communicate with people directly. Offline networking results in stronger relationships, and helps you seal the deal.\n\nTo cut straight to offline networking, look to these sources:\n\n- Search for groups on [Meetup](http://www.meetup.com/)\n- Find upcoming hackathons in your area on [Hackalist](http://www.hackalist.org/)\n- Find Hackathons, conferences, and Meetups in your area through Google. For example, search for, “Ruby meetup New Orleans,” or, “JavaScript Hackathon Baltimore,” or “Developer conferences Houston.”\n- If you’re a member of a minority group, look for groups that work toward broader inclusion.\n  - Join every online portal your group(s) maintain, like Twitter lists, subreddits, mailing lists, Facebook groups, etc.\n  - Introduce yourself and take part in their conversations.\n- If you *cannot* find a local group, consider starting your own.\n\n> We've had a number of students who have benefitted from Code for America Brigades. \"Code for America Brigades are local volunteer groups that bring together community members to help make government work better.\" You can learn more at https://www.codeforamerica.org/brigade/\n\nOnline networking is comfortable because you are safe from judgment and have all the time in the world to come up with something to say. Conversely, if you’re not a naturally gifted speaker or feel anxiety when meeting new people, networking _offline_ will prove challenging.\n\nFor those struggling with social anxiety, we recommend reading Psychology Today’s, [“How to Overcome Your Social Anxiety,”](https://www.psychologytoday.com/blog/anxiety-files/201410/how-overcome-your-social-anxiety) and related materials. For naturally introverted people, this [Quora answer](http://qr.ae/RUgtKG) by a Bloc curriculum writer should help.\n\n## Write and Practice Your Elevator Pitch\n\nAn *elevator pitch* is a short summary that relates your experience and career goals; it *sells* you. Write and practice this so you know what to say when someone asks you about yourself – a common occurrence in offline networking scenarios.\n\nThere are two rules for your elevator pitch:\n\n1. It must be short\n2. It must be interesting\n\nThe easiest way to make something both short and interesting is to hone in on a specific example. Use a project you worked on, your capstone, or an open-source contribution you made.\n\nHere’s a *short* elevator pitch that’s *not* interesting enough:\n\n> Hi, I’m Hannah McExample. I graduated from University of Chicago with a degree in Medieval and Renaissance Studies, but found it hard to get a job, so I took an online course at Bloc. Since then, I’ve interned for 4 months at United Airlines. I’m really good at Ruby on Rails. I’m on the job market for a full stack web developer job.\n\nThat’s all accurate information, but it doesn’t reel in the listener on Hannah’s abilities. People will have trouble remembering Hannah after hearing this, because the pitch sounds so generic.\n\nNow consider this example, which *shows* knowledge and experience instead of explaining it:\n\n> Hi, I’m Hannah McExample and as you know, airlines interpret lots of data so their flights run well. I interned at United where we combined FAA data, weather simulations, maintenance records, and historical overbooking data to keep planes full and on time. After we created a database, I wrote a Ruby on Rails dashboard to display the data and its conclusions to stakeholders.\n\nThis introduction will make listeners *think* about a flight they missed, or about what a “weather simulation” entails, or which overbooking data are available. It will make Hannah’s story stick in their mind, and they’ll remember Hannah as someone who is intelligent and interesting.\n\n## Informational Interviews\n\nOur favorite tool for learning more about your industry is the informational interview. Haseeb Qureshi has an excellent explanation of what an informational interview is and why they work in his [How to Break Into the Tech Industry](http://haseebq.com/how-to-break-into-tech-job-hunting-and-interviews/) guide.\n\n> Here’s what you do in an informational interview.\n\n> First, learn everything and anything you can about this person. Learn everything you can about their company. Learn everything you can about the industry or technology they work with.\n\n> Notice I didn’t say “ask for a job.” Don’t ask for a job. This is not about you asking for a job. This is about everything other than you asking for a job.\n\n> Get to know them! Get to know their company! Learn more about what they do and why it’s important. Ask things you really want to know.\n\n> They should be doing most of the talking, otherwise you’re doing it wrong. Shut up and ask more questions.\n\n> Chances are, if you shut up for long enough, they’ll be curious about you and want to know what you’re doing. Tell them your story. Tell them about who you are, what brought you here, and why you want a job as a software engineer.\n\n> At the end of the conversation, go for the close—which, most of the time, is not to ask for a job referral. Do not ask for a referral unless they bring it up. Rather, ask them: “who else do you know who’d be a good person for me to talk to?” Tell them you want to learn more about front-end development, or cryptography, or iOS, or whatever you were asking them questions about.\n\n> You were asking them questions, right?\n\n> If they can’t think of anyone to pass you along to, ask them if they know any other engineers anywhere you could talk to. Or anyone at all who works at another tech company you’re interested in. Whatever it is, get contacts for more people to get introduced to. Every conversation should lead to at least one more contact.\n\n> Then, just keep following this chain. Schedule more coffee dates, ask more questions, get more contacts. Go through all of it without asking for any unsolicited referrals.\n\n> This might seem weird. But studies have shown that this is the most effective way to get a job. And ultimately, it’s the most effective way to generate referrals outside of your network.\n\n> Why does this work?\n\n> It works because people hate it when you ask them for a job.\n\n> Give you a job? Why? They don’t know you. Why would they give you a job? Why would they even waste their time on you?\n\n> The power of informational interviewing is that instead of making it about you, you make it about them. People like to talk about themselves. They like to teach others. They want to help. But they don’t want to be pestered by strangers for favors.\n\n> If you keep doing this, people will see your curiosity and your genuineness. They’ll believe in your story, and they will want to refer you. By not pressuring people to recommend you, you will make them want to do so—or, at the very least, become an ally in your journey.\n\n> The reality is, most people can’t refer you. This is because their company might be too small to hire junior devs, or they might not need people with your skillset, or they might have overhired for the quarter, or, believe it or not, their company could just be secretly failing and not have any money.\n\n> That’s okay.\n\n> If you do this enough times, someone will eventually float the idea: “I could refer you if you want.”\n\n> If they say this, graciously ask them if they’d be comfortable doing so. They’ll then say yes. Now say “golly gee, that would be swell.” Then follow up with them over e-mail, thank them, and send them your resume. Congrats, you’ve just landed yourself a referral.\n\n> See? That wasn’t so hard.\n\n> Now keep them posted on your progress through their company’s pipeline. Don’t hesitate to also ask them for further advice.\n\n> Oh, and, before you leave that coffee date, still ask them for more contacts. I mean it. The chain stops for no one.\n\n## Overcome Impostor Syndrome\n\n*Impostor syndrome* or *impostor phenomenon* is when you feel like a fraud despite your accomplishments. If you feel that you belong to the development community and you feel secure about your position, skip to the [assignment](#assignment). But, if you doubt yourself or are curious about the subject, read on.\n\nHere’s an excerpt from [a 1978 report](http://psycnet.apa.org/?&fa=main.doiLanding&doi=10.1037/h0086006) about women feeling like impostors in the workplace:\n\n> “Despite outstanding academic and professional accomplishments, women who experience the impostor phenomenon persist in believing that they are really not bright and have fooled anyone who thinks otherwise. Numerous achievements, which one might expect to provide ample objective evidence of superior intellectual functioning, do not appear to affect the impostor belief.”\n\nLearning to program lends itself to impostor syndrome. It’s impossible to become proficient in every aspect of programming; there’s too much to learn. What number of people know everything there is to know about Ruby? *Zero*. Not a CS grad, not your smartest developer friend, not even the creator of Ruby itself. No matter how experienced you are, you will always hear other developers discussing a new concept. You will feel like you don’t belong in the conversation, but you do.\n\nOkay, you know what to call this rotten feeling, but now what? As with most struggles, your first step is to recognize the issue. Imposter syndrome is overwhelming and soul-crushing if you *believe* you’re the outsider. First, realize that it’s common. Then shift the problem from an internal judgment of yourself (*“I’m not a programmer”*) to an opportunity to expand your skill set (*“There’s a lot to learn, and I’m capable of learning it”*).\n\nImpostor syndrome makes you doubt your capabilities. When applying to jobs, it can lead you to set your sights too low and accept a job or internship that is not worthy of your talents. To get over it: recognize it, discuss it, and remind yourself that no one enters the world with this knowledge. And merely months ago, you knew far less than you do now.", "assignment"=>"- List the 10 major companies in your chosen industry.\n- List 10 up-and-coming companies in your chosen industry.\n- Follow these companies and their CEOs on Twitter.\n- Find three news articles on the industry and read about the companies and their latest events.\n- Connect with your mentor and at least 20 Bloc students on LinkedIn.\n- Email three software developers in your industry and have informational interviews with them.\n- Find three upcoming events (Meetups, conferences, job fairs, hackathons) to attend and book your spot.\n  - Send event details to your mentor.\n  - At each event, connect with at least three new people.\n  - After each event, share the contact information with your mentor.\n  - After each event, plan your next moves: when to follow-up with each person, what to ask of them, etc.\n- If you’re struggling with [Imposter Syndrome](#overcome-impostor-syndrome), speak to your mentor and ask them about their experiences.\n- If you haven't already, [request to join the student Slack community](https://www.bloc.io/resources/community-slack-readme) and let your mentor know your Slack handle in the checkpoint submission.\n- The Outcomes Team will be able to help you more effectively if you provide us feedback. In your assignment submission, note one thing you like about this checkpoint, and one thing you wish was different.", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>8, "checkpoint_type"=>"career_prep", "position"=>8, "points"=>1, "ref"=>"7889e589-2f2d-48da-bfad-bb1f29d983fa|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2268", "assessment"=>nil}, {"id"=>2081, "name"=>"DOM Scripting: Animation", "summary"=>"CSS Transitions and DOM Scripting: make web pages dynamic", "body"=>"<!-- { ids:[2081], name:'DOM Scripting: Animation', summary:'CSS Transitions and DOM Scripting: make web pages dynamic' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [An Inconvenient API: The Theory of the DOM](http://yuiblog.com/blog/2006/10/20/video-crockford-domtheory/)\n* [The Document Object Model](http://eloquentjavascript.net/13_dom.html)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint introduces CSS transitions and DOM (Document Object Model) scripting, the most basic form of writing JavaScript to interact with the browser.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Apply CSS transitions to HTML elements.\n- Create and save a JavaScript file.\n- Include JavaScript directly in an HTML document as well as link to a local or external script source.\n- Discuss what the DOM is and what nodes are.\n- Understand and explain the purpose of various DOM selectors – such as `getElementById()` and `getElementsByClassName()`.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/rf2qtu4jys\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nWe've established a structure and style for Bloc Jams, although at the moment the application is entirely static. We'll implement animations on our landing page to spice things up.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Add CSS Transitions\n\nCSS transitions animate between properties to change an element's appearance. Many CSS properties are _animatable_; here's a [full list of animatable properties](http://www.w3schools.com/cssref/css_animatable.asp).\n\nWe'll use CSS transitions to animate the selling points on the landing page.\n\nAdd the following to `.point` in `landing.css`:\n\n```css(~/bloc/bloc-jams/styles/landing.css)\n ...\n .point {\n     position: relative;\n     padding: 2rem;\n     text-align: center;\n+    opacity: 0;\n+    -webkit-transform: scaleX(0.9) translateY(3rem);\n+    -moz-transform: scaleX(0.9) translateY(3rem);\n+    transform: scaleX(0.9) translateY(3rem);\n+    -webkit-transition: all 0.25s ease-in-out;\n+    -moz-transition: all 0.25s ease-in-out;\n+    transition: all 0.25s ease-in-out;\n+    -webkit-transition-delay: 0.2s;\n+    -moz-transition-delay: 0.2s;\n+    transition-delay: 0.2s;\n }\n ...\n```\n\nThe vendor prefixes (`-webkit` and `-moz`) that precede the `transform`, `transition`, and `transition-delay` properties ensure that our animations are compatible across browsers.\n\nThe transitions we've added will animate the `point` class elements by scaling and fading them.\n\nFirst, we set the `opacity` property to `0`, which means that on page load this element will not be visible. We'll write a JavaScript program to trigger the animation and make the elements visible.\n\nThe `transform` property [can have many values](http://www.w3schools.com/cssref/css3_pr_transform.asp). We're using  `scaleX(x)` to scale the element to 90% of its width. We're also using `translateY(y)` to to move the element `3rem` down from its normal position.\n\nThe `transition` property can have four unique values, of which we're using three: `<transition-property> <transition-duration> <transition-timing-function>`. The first value specifies the name of the CSS property the effect is for; in this case, we want to transition _all_ CSS properties of the element. We want the transition to last a quarter of a second, and we want the transition timing function to `ease-in-out`.\n\nLastly, we use `transition-delay` property to delay the transition by 0.2 seconds.\n\n## Connect JavaScript to an HTML File\n\nTo trigger the animations on the landing page, we'll write a JavaScript program to activate our CSS transitions and then we'll connect the program to our application.\n\n`<script>` tags allow us to define and run JavaScript on a web page. Open `index.html` and add the following code at the bottom of the file, just before the closing `</body>` tag:\n\n```html(~/bloc/bloc-jams/index.html)\n ...\n+        <script>\n+            // our JavaScript will go here\n+        </script>\n     </body>\n </html>\n```\n\nBrowsers read HTML files from the top down. Although scripts can be placed anywhere in a file, we've placed the `<script>` tags at the end of the document. Placing scripts near the top of the file may result in slower page loads.\n\nWrite a simple alert message to test the script:\n\n```html(~/bloc/bloc-jams/index.html)\n ...\n         <script>\n-            // our JavaScript will go here\n+            alert(\"Why hello there! I'm a wee bit of JavaScript.\");\n         </script>\n     </body>\n </html>\n```\n\nUse Brackets' Live Preview to see the alert message when the page loads.\n\n## HTML Files Are Documents\n\nHTML files are documents that are intended for viewing in a browser. When a browser loads a web page, it uses the __Document Object Model__ (DOM) to interpret each of the document's elements as an object (__node__). The DOM builds a tree of objects that is accessible to JavaScript.\n\nJavaScript uses the `document` object to refer to a web page. __Selectors__ are methods that exist on the `document` object. We can use selectors to perform actions on elements in a web page because the DOM interprets those elements as objects. Once an element is selected, certain properties, modeling styles, classes, and other pieces of information are accessible.\n\nSome selectors, such as `getElementsByClassName()`, return a list of element nodes (called a `NodeList`). We can use index notation to reference a node within a `NodeList`. For example, we can select all the `point` class elements in our landing page and reference each individually:\n\n```javascript\nvar points = document.getElementsByClassName('point');\n\nvar firstPoint = points[0];\nvar secondPoint = points[1];\n// etc.\n```\n\nOther selectors, such as `querySelector()` and `getElementById()`, return a single node instead of an array. For example, if there was an element that had an ID name of `warning`, we might select it like this:\n\n```javascript\nvar warningElement = document.getElementById('warning');\n```\n\n## Animate Elements\n\nWe'll use the `getElementsByClassName()` selector to select all the `point` class elements in our landing page. Add the following code to `index.html`:\n\n```html(~/bloc/bloc-jams/index.html)\n ...\n         <script>\n-            alert(\"Why hello there! I'm a wee bit of JavaScript.\");\n+            var animatePoints = function() {\n+\n+                var points = document.getElementsByClassName('point');\n+\n+                var revealFirstPoint = function() {\n+                    points[0].style.opacity = 1;\n+                    points[0].style.transform = \"scaleX(1) translateY(0)\";\n+                    points[0].style.msTransform = \"scaleX(1) translateY(0)\";\n+                    points[0].style.WebkitTransform = \"scaleX(1) translateY(0)\";\n+                };\n+\n+                var revealSecondPoint = function() {\n+                    points[1].style.opacity = 1;\n+                    points[1].style.transform = \"scaleX(1) translateY(0)\";\n+                    points[1].style.msTransform = \"scaleX(1) translateY(0)\";\n+                    points[1].style.WebkitTransform = \"scaleX(1) translateY(0)\";\n+                };\n+\n+                var revealThirdPoint = function() {\n+                    points[2].style.opacity = 1;\n+                    points[2].style.transform = \"scaleX(1) translateY(0)\";\n+                    points[2].style.msTransform = \"scaleX(1) translateY(0)\";\n+                    points[2].style.WebkitTransform = \"scaleX(1) translateY(0)\";\n+                };\n+\n+                revealFirstPoint();\n+                revealSecondPoint();\n+                revealThirdPoint();\n+\n+            };\n         </script>\n ...\n```\n\nWe've written a function named `animatePoints`. When called, this function will activate the CSS transitions on the landing page. It will update the styles from what we've set in place in the CSS file to the new styles in the script. The `opacity` will change from `0` to `1`. The `transform` property will scale the element from 90% to 100% of its width and translate it `3rem` up to its normal position.\n\nWhen our script runs, it assigns an array-like list of all elements that have the class name `point` to the `points` variable. Our program alters the `style` of each `.point` in the `NodeList`. The `style` property is an object that represents every style applied to the element. We can call `document.getElementsByClassName('point').style` to recover every style applied to `.point`.\n\nWe've written our script, but it won't execute until we call it. Add the following line to call `animatePoints()`:\n\n```html(~/bloc/bloc-jams/index.html)\n ...\n         <script>\n             var animatePoints = function() {\n                 ...\n             };\n\n+            animatePoints();\n         </script>\n ...\n```\n\nUse Brackets' Live Preview to see the animation when the page loads.\n\nWe can also call the script directly from the console. Remove the `animatePoints()` function call that we just added:\n\n```html(~/bloc/bloc-jams/index.html)\n ...\n         <script>\n             var animatePoints = function() {\n                 ...\n             };\n\n-           animatePoints();\n         </script>\n ...\n```\n\nUse Brackets' Live Preview to view the page. Right click anywhere on the page and choose \"Inspect Element\" from the dropdown menu. In the DevTools pane, select the \"Console\" tab. Type in the `animatePoints()` function call directly to the console:\n\n```javascript(Console)\nanimatePoints();\n```\n\nHit the Enter/Return key on your keyboard and view the animation.\n\n## Create the JavaScript File and Link It to the Landing Page\n\nIn addition to writing scripts directly in an HTML file, we can run scripts by defining them in a separate file and linking them to a document. We'll add our script to animate the landing page to a separate JavaScript file. In the base directory, create a new directory named `scripts`. In the `scripts` directory, create a file named `landing.js`:\n\n```bash(~/bloc/bloc-jams/)\n$ mkdir scripts\n$ cd scripts\n$ touch landing.js\n```\n\nCut the script from `index.html` and paste it into `landing.js`:\n\n```javascript(~/bloc/bloc-jams/scripts/landing.js)\n+var animatePoints = function() {\n+\n+    var points = document.getElementsByClassName('point');\n+\n+    var revealFirstPoint = function() {\n+        points[0].style.opacity = 1;\n+        points[0].style.transform = \"scaleX(1) translateY(0)\";\n+        points[0].style.msTransform = \"scaleX(1) translateY(0)\";\n+        points[0].style.WebkitTransform = \"scaleX(1) translateY(0)\";\n+    };\n+\n+    var revealSecondPoint = function() {\n+        points[1].style.opacity = 1;\n+        points[1].style.transform = \"scaleX(1) translateY(0)\";\n+        points[1].style.msTransform = \"scaleX(1) translateY(0)\";\n+        points[1].style.WebkitTransform = \"scaleX(1) translateY(0)\";\n+    };\n+\n+    var revealThirdPoint = function() {\n+        points[2].style.opacity = 1;\n+        points[2].style.transform = \"scaleX(1) translateY(0)\";\n+        points[2].style.msTransform = \"scaleX(1) translateY(0)\";\n+        points[2].style.WebkitTransform = \"scaleX(1) translateY(0)\";\n+    };\n+\n+    revealFirstPoint();\n+    revealSecondPoint();\n+    revealThirdPoint();\n+\n+};\n```\n\nIn `index.html`, replace the script with a link to our new external JavaScript file:\n\n```html(~/bloc/bloc-jams/index.html)\n ...\n         </section>\n+        <script src=\"scripts/landing.js\"></script>\n     </body>\n </html>\n```\n\nAlthough the script is now external, we can still call it from the browser's console. Use DevTools to inspect the page again and call `animatePoints()` in the console to confirm.\n\n## Recap\n\n| **Concept** | **Description** |\n| ----------- | --------------- |\n| [CSS Transitions](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions) | CSS transitions provide a way to control transition type, which properties to animate, as well as animation speed, length, and delay.<br><br>&bullet; [`transition` property](https://developer.mozilla.org/en-US/docs/Web/CSS/transition)<br>&bullet; [`transition-timing-function` property](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function)|\n| [`<script>`](http://www.w3schools.com/tags/tag_script.asp) | The `<script>` tag defines a client-side script. We can use it to define statements within an HTML file or to point to an external script using the `src` attribute. While scripts [can be placed anywhere](http://javascript.info/tutorial/adding-script-html), we often place them at [the end of the document](http://stackoverflow.com/questions/436411/where-is-the-best-place-to-put-script-tags-in-html-markup). |\n| [The DOM](https://www.bloc.io/resources/what-is-the-dom) | When a browser loads a web page, it uses the Document Object Model (DOM) to interpret each of the document's elements as an object. The DOM builds a tree of objects that is accessible to JavaScript. |\n| [Selectors](https://www.bloc.io/resources/dom-selectors-and-methods) | Selectors are methods that exist on the document object. We use selectors to perform actions on elements in a web page because the DOM interprets those elements as objects. |\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"__Before You Begin__: Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n1. Read our resources on [the DOM](https://www.bloc.io/resources/what-is-the-dom) and [DOM Selectors](https://www.bloc.io/resources/dom-selectors-and-methods).\n2. Read the [Mozilla documentation on CSS Transitions](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions).\n3. Experiment with the many transition options by adding new transitions or altering the current transitions of the `.point` class in `landing.css`.\n4. Refactor the individual style calls of the `landing.js` script to be a single function named `revealPoint` that:\n    - takes a single argument: the index of the `points` class node element, and\n    - gets called in a `for` loop.\n\n__When You're Done__: Commit your assignment work in Git. __This assignment should be merged.__ See [Git Checkpoint Workflow: __Mergeable Assignments__](https://www.bloc.io/resources/git-checkpoint-workflow#mergeable-assignments) for details.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n- <a href=\"//fast.wistia.net/embed/iframe/kdl9we3b2o?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">DOM Scripting Refactoring Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>8, "checkpoint_type"=>"normal", "position"=>8, "points"=>1, "ref"=>"b79bbf50-0fff-4ae2-8b7e-d448a996e0a9|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2081", "assessment"=>nil}, {"id"=>2082, "name"=>"DOM Scripting: Events", "summary"=>"DOM Events, Listeners, and Handlers: perform actions based on browser events", "body"=>"<!-- { ids:[2082], name:'DOM Scripting: Events', summary:'DOM Events, Listeners, and Handlers: perform actions based on browser events' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [An Introduction To DOM Events](https://www.smashingmagazine.com/2013/11/an-introduction-to-dom-events/)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint introduces DOM events, which allow user interactions in the browser to trigger method calls.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Understand and explain the concept of events.\n- Discuss the purpose of event listeners and handlers.\n- Recognize and use some basic DOM scripting methods and properties.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/jkilh45swo\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nWe know how to write and invoke functions that execute JavaScript animations on our landing page. However, we can't expect Bloc Jams users to open the Developer Console and manually call our functions. Ideally, our application should know _when_ to run animations. We will implement that behavior with DOM __events__. Events are messages which the browser broadcasts to the DOM. We can use event __listeners__ for these broadcasts and execute code as they arrive.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Add an Event That Detects the Page Load\n\nThere is a property on the `window` object called `onload` that we can pass a function that executes when the window (like a browser window or tab) finishes loading. Add the `window.onload` property to `landing.js` and pass it an anonymous function that calls a JavaScript `alert()`:\n\n```js(~/bloc/bloc-jams/scripts/landing.js)\n var animatePoints = function() {\n     ...\n };\n\n+window.onload = function() {\n+    alert(\"The window has loaded!\");\n+}\n```\n\nWe assign the `window.onload` property an __event handler__, a function that _handles_ code in response to an event. The event handler executes as soon as an action __fires__ an event.\n\nAs a page loads, the browser may render elements, styles, and scripts that require additional time to process. This means that some DOM nodes may not exist until the browser finishes loading the page. Put any code that is dependent on a completely-loaded web page in a `window.onload` block, particularly any code that depends on DOM elements to execute properly.\n\n## Attach Behavior to the Scroll Event\n\nA common way to initiate animation is to wait for the user to scroll to the elements we wish to animate. When we want to execute code based on an event, we attach a listener that executes a handler. Delete the alert, and call `addEventListener()` to add a listener to the `window` object:\n\n```js(~/bloc/bloc-jams/scripts/landing.js)\n ...\n window.onload = function() {\n-    alert(\"The window has loaded!\");\n+    window.addEventListener('scroll', function(event) {\n+        console.log(event);\n+    });\n }\n```\n\nThe `addEventListener()` method takes three arguments, but we'll focus on the first two because the third, `useCapture`, is optional and does not affect the current listener:\n\n| Order | Parameter    | Type     | Required? | Description |\n| ----- | ------------ | -------- | --------- | ----------- |\n| 1     | _type_       | string   | yes       | Represents the type of event for which the DOM should be listening. |\n| 2     | _listener_   | function | yes       | Passed in as an event handler and contains the code that executes when the event fires. |\n| 3     | _useCapture_ | boolean  | no        | Specifies whether the user wishes to initiate capture. |\n\nThe first argument is a string that represents the type of event for which the DOM should be listening. The second is a __callback function__ passed in as an event handler, which contains the code that executes when the event fires.\n\n> We'll talk more about callbacks and their role in JavaScript in a resource at the end of this section.\n\nEvent listeners provide the first argument to the handler function, `event`, sometimes abbreviated to `e`. `event` is a DOM object whose properties provide event dispatch information. We've added a `console.log()` function to the event listener above so we can inspect the `scroll` event's properties. Open the browser console and scroll the page to see the event object.\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Landing%20Page%20Animations%20with%20Events/scroll_event_console_log.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Landing%20Page%20Animations%20with%20Events/scroll_event_console_log.mp4) the preview directly.\n</video></center>\n\nExpanding the event object shows its properties.\n\n> We can listen to all events, including `scroll`, on any DOM element. However, we wanted to listen specifically for when the user scrolled the entire page, so we attached it to the `window` object.\n\n## Move Selling Point Selector to the Global Scope\n\nThe page scrolling event listener needs access to the selling point DOM elements. We could include the selector both inside and outside of the `animatePoints()` function, but then we're repeating ourselves; remember the importance of DRY, or Don't Repeat Yourself.\n\nInstead, move the selector into a new variable that is accessible from the entire file, and add a parameter to `animatePoints()` so that we can pass the elements into the function when we call it:\n\n```js(~/bloc/bloc-jams/scripts/landing.js)\n+var pointsArray = document.getElementsByClassName('point');\n+\n+var animatePoints = function(points) {\n-var animatePoints = function() {\n-    var points = document.getElementsByClassName('point');\n     var revealPoint = function(index) {\n         points[index].style.opacity = 1;\n         points[index].style.transform = \"scaleX(1) translateY(0)\";\n ...\n```\n\n## Measure the Scroll Distance from the Top of the Window\n\nWe want `animatePoints()` to run when the client scrolls the selling points into view. The most straightforward way to do this is to determine the distance from the top of the browser window to the selling points. We will trigger the animation after the user scrolls far enough to render the selling points clearly visible.\n\nCalling `getBoundingClientRect()` returns an object with four properties, `top`, `left`, `right`, and `bottom`. Each property measures the distance (in pixels) from the outside of a selected element to the end of the viewport (in this case, the window).\n\nUse `console.log()` to print the `top` property of the `.selling-points` element whenever the user scrolls:\n\n```js(~/bloc/bloc-jams/scripts/landing.js)\n ...\n window.onload = function() {\n+    var sellingPoints = document.getElementsByClassName('selling-points')[0];\n\n     window.addEventListener(\"scroll\", function(event) {\n-        console.log(event);\n+        console.log(\"Current offset from the top is \" + sellingPoints.getBoundingClientRect().top + \" pixels\");\n     });\n }\n```\n\nOpen up the Developer Console and scroll to see the logged distance:\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Landing%20Page%20Animations%20with%20Events/getBoundingRect_scroll_values_demo.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Landing%20Page%20Animations%20with%20Events/getBoundingRect_scroll_values_demo.mp4) the preview directly.\n</video></center>\n\n> Note that opening up the Developer Console disables the Live Preview functionality in Brackets. You will need to re-enable it after using the Console, or alternately, you can refresh the page every time you make a change.\n\n## Add `animatePoints()` to the Event Handler\n\nWe need to call `animatePoints()` when the selling points are visible in the view. Depending on the browser's zoom level, the selling points won't always be the same number of pixels away from the top of the document. In this case, we need to calculate the difference between (1) the window height and (2) the distance of `.selling-points` from the top of the document, also known as the __offset__. The difference will be the distance the user must scroll to reach the top of `.selling-points`.\n\nThis diagram displays the distances we need to measure to figure out the number of pixels the user must scroll to trigger the animation:\n\n![animate with events](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/23-animate-with-events/scroll-event-animation-web.jpg)\n\nIn order to see the animation, however, we must scroll a bit more so that `.selling-points` is visible above the fold. Let's trigger the animation when a user scrolls at least 200 pixels into the `.selling-points` element. We'll nest the animation call in an `if` statement:\n\n```js(~/bloc/bloc-jams/scripts/landing.js)\n ...\n window.onload = function() {\n     var sellingPoints = document.getElementsByClassName('selling-points')[0];\n+    var scrollDistance = sellingPoints.getBoundingClientRect().top - window.innerHeight + 200;\n\n     window.addEventListener(\"scroll\", function(event) {\n-        console.log(\"Current offset from the top is \" + sellingPoints.getBoundingClientRect().top + \" pixels\");\n+        if (document.documentElement.scrollTop || document.body.scrollTop >= scrollDistance) {\n+            animatePoints(pointsArray);   \n+        }\n     });\n }\n```\n\nScroll the page and you should see the points animate as shown in the video at the beginning of this checkpoint.\n\n## Animate the Selling Points on Taller Screens\n\nWe've tied the animation to a scroll event, and it works for most situations. What happens if the user's screen is tall enough to display all the content on load and prevents them from scrolling?\n\nThey won't be able to see the animation when they load the page. To protect against this bug, we want to measure the height of the window when the page loads. If the window is too big, we animate the selling points immediately. The height of all the landing page content is about 950 pixels, so any window taller than that will warrant an immediate animation call. Use the `window`'s `innerHeight` property to detect the height of the browser when the page loads:\n\n```js(~/bloc/bloc-jams/scripts/landing.js)\n ...\n window.onload = function() {  \n    // Automatically animate the points on a tall screen where scrolling can't trigger the animation\n+    if (window.innerHeight > 950) {\n+        animatePoints(pointsArray);\n+    }\n\n     var sellingPoints = document.getElementsByClassName('selling-points')[0];\n ...\n```\n\n## Event Context\n\nBecause event handlers are functions, they also have a context. Where they differ from traditional anonymous functions is that their context is set automatically by the _event dispatcher_. The event dispatcher is responsible for keeping track of which events are attached to DOM elements (`div` or `a`, for example), and _dispatching_ the events at the appropriate time.\n\nWhen an event handler is executed, its context changes to the DOM element whose event handler is firing. This can be different from the `event.target`, which is a reference to the object that caused the event to be dispatched. You can see an example of how the context of the event handler changes and can be different than the `event.target` [here](http://jsbin.com/wujotejaqo/edit?html,js,console,output).\n\n## Recap\n\n| Concept | Description |\n| ------- | ----------- |\n| [Events](https://developer.mozilla.org/en-US/docs/Web/Events) | An event is a message that dispatches to the browser when a certain client action occurs.<br><br>&bullet; [`scroll`](https://developer.mozilla.org/en-US/docs/Web/Events/scroll) |\n| [Dispatching](http://www.w3.org/TR/DOM-Level-3-Events/#glossary-dispatch) | If you're curious to know more on how events are dispatched, you can reference the [event flow documentation](http://www.w3.org/TR/DOM-Level-3-Events/#event-flow). |\n| Event Listener | An event listener is an object that receives a notification of the event when the event of a specified type (e.g. `scroll`) occurs. |\n| [Event Handler](https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload) | An event handler is code that runs in response to an event. The handler is a [JavaScript callback](https://www.bloc.io/resources/javascript-callbacks). |\n| [Callback](https://www.bloc.io/resources/javascript-callbacks) | A callback is a function passed as an argument to another function. |\n| [`window` Object](https://developer.mozilla.org/en-US/docs/Web/API/Window) | Represents a window containing a DOM document. |\n| [`window.alert()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert) | Displays an alert dialog with the optional specified content and an OK button. |\n| [`getBoundingClientRect()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect) | Returns the size of an element and its position relative to the viewport. |\n| [`window.innerHeight` Property](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight) | Height (in pixels) of the browser window viewport. |\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"__Before You Begin__: Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n1. Read the first three paragraphs of the [Mozilla documentation on the `window` object](https://developer.mozilla.org/en-US/docs/Web/API/Window). Stop before the section titled \"Properties\".\n2. Read our resource on [JavaScript callbacks](https://www.bloc.io/resources/javascript-callbacks).\n3. Create a `utilities.js` file in the `scripts` directory. In `index.html`, link to it by adding `<script src=\"scripts/utilities.js\"></script>` _before_ the `landing.js` source.\n4. Write a function named `forEach` in the `utilities.js` file. __For educational purposes, DO NOT use the built-in `Array.prototype.forEach` function mentioned in the callback resource. The goal is to write your own function named `forEach`.__ It should:\n    - Use a loop to go through all elements in the `points` array.\n    - Execute a callback for each element.\n5. Replace the `for` loop in the `animatePoints` function with a `forEach` block and confirm that the selling points still animate properly.\n\n__When You're Done__: Commit your assignment work in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n- <a href=\"//fast.wistia.net/embed/iframe/1e76adifty?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">DOM Scripting `forEach` Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>9, "checkpoint_type"=>"normal", "position"=>9, "points"=>1, "ref"=>"881f2c96-9489-4e3e-adb6-79d172f7df98|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2082", "assessment"=>nil}, {"id"=>2083, "name"=>"DOM Scripting: Collection View", "summary"=>"Dynamic Templates: replace static HTML with dynamic JavaScript templates", "body"=>"<!-- { ids:[2083], name:'DOM Scripting: Collection View', summary:'Dynamic Templates: replace static HTML with dynamic JavaScript templates' } -->\n\n## Overview and Purpose\n\nThis checkpoint uses DOM scripting with the Collection view to generate templates dynamically.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Create and link a JavaScript file.\n- Translate a static HTML template into a dynamic JavaScript template.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/keqs4yi6bt\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nThe Collection view displays the available albums. Currently, we're using static placeholders to display albums, but realistically, a user may have hundreds of albums with different songs, cover art, and details. We'll create a script that dynamically generates as many albums as needed to display.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Create and Link the JavaScript File\n\nThe Collection view needs its own JavaScript file. Create the file in the `scripts` directory, the same place where we created `landing.js`:\n\n```bash(~/bloc/bloc-jams/scripts)\n$ touch collection.js\n```\n\nConnect the JavaScript file to `collection.html` by adding a `<script>` tag at the end of the document:\n\n```html(~/bloc/bloc-jams/collection.html)\n ...\n         </section>\n+        <script src=\"scripts/collection.js\"></script>\n     </body>\n </html>\n```\n\n## Remove Static Templates\n\nWe'll set up our JavaScript file to generate the album templates. We no longer require the static templates currently in place. Remove them from `collection.html`:\n\n```html(~/bloc/bloc-jams/collection.html)\n ...\n         <section class=\"album-covers container clearfix\">\n-            <div class=\"collection-album-container column fourth\">\n-                <img src=\"assets/images/album_covers/01.png\"/>\n-                <div class=\"collection-album-info caption\">\n-                    <p>\n-                        <a class=\"album-name\" href=\"album.html\">The Colors</a>\n-                        <br/>\n-                        <a href=\"album.html\">Pablo Picasso</a>\n-                        <br/>\n-                        X songs\n-                        <br/>\n-                    </p>\n-                </div>\n-            </div>\n-            <div class=\"collection-album-container column fourth\">\n-                <img src=\"assets/images/album_covers/01.png\"/>\n-                <div class=\"collection-album-info caption\">\n-                    <p>\n-                        <a class=\"album-name\" href=\"album.html\">The Colors</a>\n-                        <br/>\n-                        <a href=\"album.html\">Pablo Picasso</a>\n-                        <br/>\n-                        X songs\n-                        <br/>\n-                    </p>\n-                </div>\n-            </div>\n-            <div class=\"collection-album-container column fourth\">\n-                <img src=\"assets/images/album_covers/01.png\"/>\n-                <div class=\"collection-album-info caption\">\n-                    <p>\n-                        <a class=\"album-name\" href=\"album.html\">The Colors</a>\n-                        <br/>\n-                        <a href=\"album.html\">Pablo Picasso</a>\n-                        <br/>\n-                        X songs\n-                        <br/>\n-                    </p>\n-                </div>\n-            </div>\n-            <div class=\"collection-album-container column fourth\">\n-                <img src=\"assets/images/album_covers/01.png\"/>\n-                <div class=\"collection-album-info caption\">\n-                    <p>\n-                        <a class=\"album-name\" href=\"album.html\">The Colors</a>\n-                        <br/>\n-                        <a href=\"album.html\">Pablo Picasso</a>\n-                        <br/>\n-                        X songs\n-                        <br/>\n-                    </p>\n-                </div>\n-            </div>\n         </section>\n ...\n```\n\n## Build JavaScript Templates with a String\n\nWe'll use a template to create each album in the Collection view. Add the following to `collection.js`:\n\n```javascript(~/bloc/bloc-jams/scripts/collection.js)\n+var collectionItemTemplate =\n+    '<div class=\"collection-album-container column fourth\">'\n+  + '  <img src=\"assets/images/album_covers/01.png\"/>'\n+  + '  <div class=\"collection-album-info caption\">'\n+  + '    <p>'\n+  + '      <a class=\"album-name\" href=\"album.html\"> The Colors </a>'\n+  + '      <br/>'\n+  + '      <a href=\"album.html\"> Pablo Picasso </a>'\n+  + '      <br/>'\n+  + '      X songs'\n+  + '      <br/>'\n+  + '    </p>'\n+  + '  </div>'\n+  + '</div>'\n+  ;\n```\n\nWe create a variable named `collectionItemTemplate` to hold the template. When the script runs, the browser _caches_ content generated by the script, such as this template. Cached elements speed up page loading times.\n\nThis is our first instance of a multiline-JavaScript string. We've ported over the static template from `collection.html` to our JavaScript file. To make the template a string, it must be wrapped in quotation marks. The template could exist on one line, but for readability we return each line as we normally would in an HTML document. To keep the string together, we use `+` at the start of each line, where it's easy to see its location.\n\nWe've used `+` many times before in strings, especially to include variable values. Consider these three strings:\n\n```javascript\nvar milton1 = 'I believe you have my stapler.';\n\nvar milton2 = 'I believe' + ' you ' + 'have my stapler.';\n\nvar milton3 = 'I believe'\n    + ' you '\n    + 'have my stapler.';\n```\n\nThese three strings produce the same results.\n\n## Display the Albums\n\nNow that we've assigned the template to a variable, we'll use that variable to add as many albums as we'd like to the collection page. Add the following to `collection.js`, after the template:\n\n```javascript(~/bloc/bloc-jams/scripts/collection.js)\n ...\n+window.onload = function() {\n     // #1\n+    var collectionContainer = document.getElementsByClassName('album-covers')[0];\n     // #2\n+    collectionContainer.innerHTML = '';\n+\n     // #3\n+    for (var i = 0; i < 12; i++) {\n+        collectionContainer.innerHTML += collectionItemTemplate;\n+    }\n+}\n```\n\nWe need our JavaScript to dynamically generate the album template in place of what was statically there. At __#1__, we select the first (and only, as we've designed it) element with an `album-covers` class name. We assign this specified element to a variable named `collectionContainer`.\n\nAt __#2__, We assign an empty string to `collectionContainer`'s `innerHTML` property to clear its content. This ensures we're working with a clean slate before we insert content with JavaScript.\n\nWe then create a `for` loop, at __#3__, that inserts 12 albums using the `+=` operator, which appends content to strings. Each loop adds the contents of `collectionItemTemplate` (the template) to the `innerHTML` of `collectionContainer`, thereby generating the albums that display on the collection page.\n\nView Bloc Jams in the browser to see our script in action.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"1. Read the documentation on the following node selection properties: [`textContent`](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent), [`innerText`](https://msdn.microsoft.com/en-us/library/ie/ms533899%28v=vs.85%29.aspx), [`nodeValue`](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue), [`firstChild`](https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild), and [`childNodes`](https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes)\n2. Write a few sentences, in your own words, that detail the difference between `textContent` and `innerText`. Send your write-up to your mentor.\n3. Clone the [JS Bin for exploring node selection properties](http://jsbin.com/hugamikeso/2/edit?html,js,output):\n    - Use each of the five node selection properties at least once to change nodes or grab node information on the collection page (recreated in JS Bin).\n    - Detail how you used each node.\n    - When complete, send your JS Bin URL to your mentor.\n\n> Refer to the [JS Bin resource](https://www.bloc.io/resources/js-bin) for a review on JS Bin.", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>10, "checkpoint_type"=>"normal", "position"=>10, "points"=>1, "ref"=>"9246885c-e080-4829-9aa9-c4c213e33152|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2083", "assessment"=>nil}, {"id"=>2084, "name"=>"DOM Scripting: Album View", "summary"=>"Dynamic Templates (cont.): replace static HTML with dynamic JavaScript templates", "body"=>"<!-- { ids:[2084], name:'DOM Scripting: Album View', summary:'Dynamic Templates (cont.): replace static HTML with dynamic JavaScript templates' } -->\n\n## Overview and Purpose\n\nThis checkpoint uses DOM scripting with the Album view to generate templates dynamically.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Manipulate HTML elements using DOM selectors.\n- Inject stored information in JavaScript into a template using DOM scripting.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/v13pgk88wu\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nThe Album view displays an album's details and song list. Currently, we're using static content to display this information. An application such as Bloc Jams will pull the album information from a database and populate the view dynamically. We'll create a script to pull information from album objects and display it in the Album view.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Create and Link the JavaScript File\n\nThe Album view needs its own JavaScript file. Create the file in the `scripts` directory, the same place we created `landing.js` and `collection.js`:\n\n```bash(~/bloc/bloc-jams/scripts)\n$ touch album.js\n```\n\nConnect the JavaScript file to `album.html` by adding a `<script>` tag at the end of the document:\n\n```html(~/bloc/bloc-jams/album.html)\n ...  \n         </main>\n+        <script src=\"scripts/album.js\"></script>\n     </body>\n </html>\n```\n\n## Remove Static Elements\n\nWe'll set up our JavaScript file to generate the song list information. We no longer require the static elements that we currently have in place. Remove the static elements from `album.html`:\n\n```html(~/bloc/bloc-jams/album.html)\n ...\n             <table class=\"album-view-song-list\">\n-                <tr class=\"album-view-song-item\">\n-                    <td class=\"song-item-number\">1</td>\n-                    <td class=\"song-item-title\">Blue</td>\n-                    <td class=\"song-item-duration\">X:XX</td>\n-                </tr>\n-                <tr class=\"album-view-song-item\">\n-                    <td class=\"song-item-number\">2</td>\n-                    <td class=\"song-item-title\">Red</td>\n-                    <td class=\"song-item-duration\">X:XX</td>\n-                </tr>\n-                <tr class=\"album-view-song-item\">\n-                    <td class=\"song-item-number\">3</td>\n-                    <td class=\"song-item-title\">Green</td>\n-                    <td class=\"song-item-duration\">X:XX</td>\n-                </tr>\n-                <tr class=\"album-view-song-item\">\n-                    <td class=\"song-item-number\">4</td>\n-                    <td class=\"song-item-title\">Purple</td>\n-                    <td class=\"song-item-duration\">X:XX</td>\n-                </tr>\n-                <tr class=\"album-view-song-item\">\n-                    <td class=\"song-item-number\">5</td>\n-                    <td class=\"song-item-title\">Black</td>\n-                    <td class=\"song-item-duration\">X:XX</td>\n-                </tr>\n             </table>\n ...\n```\n\n## Create Album Objects\n\nWe will create JavaScript objects to represent albums. These objects will store information such as album title, artist, label, songs, etc. Add the following to `album.js`:\n\n```html(~/bloc/bloc-jams/scripts/album.js)\n // Example Album\n+var albumPicasso = {\n+    title: 'The Colors',\n+    artist: 'Pablo Picasso',\n+    label: 'Cubism',\n+    year: '1881',\n+    albumArtUrl: 'assets/images/album_covers/01.png',\n+    songs: [\n+        { title: 'Blue', duration: '4:26' },\n+        { title: 'Green', duration: '3:14' },\n+        { title: 'Red', duration: '5:01' },\n+        { title: 'Pink', duration: '3:21'},\n+        { title: 'Magenta', duration: '2:15'}\n+    ]\n+};\n+\n // Another Example Album\n+var albumMarconi = {\n+    title: 'The Telephone',\n+    artist: 'Guglielmo Marconi',\n+    label: 'EM',\n+    year: '1909',\n+    albumArtUrl: 'assets/images/album_covers/20.png',\n+    songs: [\n+        { title: 'Hello, Operator?', duration: '1:01' },\n+        { title: 'Ring, ring, ring', duration: '5:01' },\n+        { title: 'Fits in your pocket', duration: '3:21'},\n+        { title: 'Can you hear me now?', duration: '3:14' },\n+        { title: 'Wrong phone number', duration: '2:15'}\n+    ]\n+};\n```\n\nWe've created two album objects to use in our application. In a real-world scenario, we would pull this information from a database, where we could store hundreds or thousands of albums and their corresponding details.\n\n## Dynamically Generate Song Row Content\n\nNow we'll create a function named `createSongRow` that generates the song row content. Add the following to `album.js`, after the album objects:\n\n```html(~/bloc/bloc-jams/scripts/album.js)\n ...\n+var createSongRow = function(songNumber, songName, songLength) {\n+    var template =\n+       '<tr class=\"album-view-song-item\">'\n+     + '  <td class=\"song-item-number\">' + songNumber + '</td>'\n+     + '  <td class=\"song-item-title\">' + songName + '</td>'\n+     + '  <td class=\"song-item-duration\">' + songLength + '</td>'\n+     + '</tr>'\n+     ;\n+\n+    return template;\n+};\n```\n\nWe declare the objects before the function because the `createSongRow` function uses the information stored in the album objects.\n\nThe `createSongRow` function assigns our previously static song row template to a variable named `template` and returns it. Instead of statically declaring the song number, name, or length, our function takes them as arguments and populates the song row template accordingly.\n\n## Set the Current Album\n\nWe'll create a function named `setCurrentAlbum` that the program calls when the window loads. It will take one of our album objects as an argument and will utilize the object's stored information by injecting it into the template. Add the following to the end of `album.js`:\n\n```html(~/bloc/bloc-jams/scripts/album.js)\n ...\n+var setCurrentAlbum = function(album) {\n     // #1\n+    var albumTitle = document.getElementsByClassName('album-view-title')[0];\n+    var albumArtist = document.getElementsByClassName('album-view-artist')[0];\n+    var albumReleaseInfo = document.getElementsByClassName('album-view-release-info')[0];\n+    var albumImage = document.getElementsByClassName('album-cover-art')[0];\n+    var albumSongList = document.getElementsByClassName('album-view-song-list')[0];\n+\n     // #2\n+    albumTitle.firstChild.nodeValue = album.title;\n+    albumArtist.firstChild.nodeValue = album.artist;\n+    albumReleaseInfo.firstChild.nodeValue = album.year + ' ' + album.label;\n+    albumImage.setAttribute('src', album.albumArtUrl);\n+\n     // #3\n+    albumSongList.innerHTML = '';\n+\n     // #4\n+    for (var i = 0; i < album.songs.length; i++) {\n+        albumSongList.innerHTML += createSongRow(i + 1, album.songs[i].title, album.songs[i].duration);\n+    }\n+};\n+\n+window.onload = function() {\n+    setCurrentAlbum(albumPicasso);\n+};\n```\n\nFirst, at __#1__, we select all of the HTML elements required to display on the album page: title, artist, release info, image, and song list. We want to populate these elements with information. To do so, we assign the corresponding values of the album objects' properties to the HTML elements.\n\nAt __#2__, the `firstChild` property identifies the first child node of an element, and `nodeValue` returns or sets the value of a node. Alternatively, we could _technically_ use `innerHTML` to insert plain text (like we did in `collection.js`), but it's excessive and semantically misleading in this context because we aren't adding any HTML.\n\nFor example, the `.albumTitle` element has only one node and it's a text node. When we use the `firstChild` property and `nodeValue` properties together on the `.albumTitle` element, we set the value of that text node to `album.title`.\n\nWhen we populated the Collection view with albums, we initially set the value of the parent container's `innerHTML` to an empty string. This ensured that we were working with a clean slate. We do the same here, at __#3__, and clear the album song list HTML to make sure there are no interfering elements.\n\nWe use a `for` loop, at __#4__, to go through all the songs from the specified album object and insert them into the HTML using the `innerHTML` property. The `createSongRow` function is called at each loop, passing in the song number, name, and length arguments from our album object.\n\nView Bloc Jams in the browser to see our script in action.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"__Before You Begin__: Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n1. Create a third album object in `album.js`. Populate the object with the same properties as the other two album objects, but provide values of your choosing.\n2. Add an event listener to the album cover. When a user clicks it, the album page content should toggle between the three album objects: `albumPicasso`, `albumMarconi`, and your album object.\n\n__When You're Done__: Commit your assignment work in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n- <a href=\"//fast.wistia.net/embed/iframe/w8czbfxnyt?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">DOM Scripting Click Event Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>11, "checkpoint_type"=>"normal", "position"=>11, "points"=>1, "ref"=>"660199e6-d25c-423c-930d-5fc1cfcf0fba|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2084", "assessment"=>nil}, {"id"=>2085, "name"=>"DOM Scripting: Play/Pause Part 1", "summary"=>"Event Delegation and Bubbling: handle events more efficiently", "body"=>"<!-- { ids:[2085], name:'DOM Scripting: Play/Pause Part 1', summary:'Event Delegation and Bubbling: handle events more efficiently' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [JavaScript and the DOM Series: Lesson 1](https://code.tutsplus.com/tutorials/javascript-and-the-dom-series-lesson-1--net-3134)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint introduces event delegation and bubbling.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Discuss the benefits of event delegation.\n- Explain the process of event bubbling.\n- Explain the use of HTML data attributes.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/osk94q1z7o\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nThis is the first of two checkpoints that implement working play and pause buttons on the Bloc Jams album page. We'll use events and event handlers to control whether a number or play button appears in the table cell.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Use Event Delegation to Track the Mouse's Position\n\nAdding many event listeners to elements in a document can make the page load and execute JavaScript more slowly. To reduce the number of event listeners, we'll use __event delegation__. It allows us to listen for an event on a parent element but target the behavior on one of its children.\n\nListening for an event on a parent is possible because of __event bubbling__. An event may fire on a child element, but it propagates up (or _bubbles_ up) the DOM tree to its parent.\n\n<center>![event bubbling flow](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/Album%20Play-Pause%20with%20DOM%20Scripting/event_bubbling_flow.png)</center>\n\nThe target parent element is the table with the class `.album-view-song-list`. Store the selected table in a variable and add a listener to it for the `mouseover` event in `album.js`:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n+var songListContainer = document.getElementsByClassName('album-view-song-list')[0];\n\n window.onload = function() {\n     setCurrentAlbum(albumPicasso);\n\n+    songListContainer.addEventListener('mouseover', function(event) {\n         // #1\n+        console.log(event.target);\n+    });\n ...\n```\n\nThe `target` property on the event object at __#1__ stores the DOM element where the event occurred. Enable Live Preview and open up the Developer Console. Mouse over the table, and the element where the event is dispatched will be logged to the console.\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Album%20Play-Pause%20with%20DOM%20Scripting/event_target_mouseover_album_play_pause.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Album%20Play-Pause%20with%20DOM%20Scripting/event_target_mouseover_album_play_pause.mp4) the preview directly.\n</video></center>\n\nThe console output shows that moused-over elements will fire an event that eventually registers with the table's event listener.\n\n> Remember that opening the Developer Console will disable Live Preview\n\n## Substitute the Play Button for the Song Number\n\nTo display the play button when we hover over the table row, we'll change the content of the table cell with the class `.song-item-number`. We'll use the [Ionicons](http://ionicons.com/) play button for a nice-looking icon.\n\nAdd a template for the play button to `album.js`:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var songListContainer = document.getElementsByClassName('album-view-song-list')[0];\n\n // Album button templates\n+var playButtonTemplate = '<a class=\"album-song-button\"><span class=\"ion-play\"></span></a>';\n\n window.onload = function() {\n ...\n```\n\nAnd add the CSS for the play button to `album.css`:\n\n```css(~/bloc/bloc-jams/styles/album.css)\n ...\n .song-item-duration {\n     width: 5%;\n }\n+\n+.album-song-button {\n+    text-align: center;\n+    font-size: 14px;\n+    background-color: white;\n+    color: rgb(210, 40, 123);\n+    border-radius: 50% 50%;\n+    display: inline-block;\n+    width: 28px;\n+    height: 28px;\n+}\n+\n+.album-song-button:hover {\n+    cursor: pointer;\n+    color: white;\n+    background-color: rgb(210, 40, 123);\n+}\n+\n+.album-song-button span {\n+    line-height: 28px;\n+}\n\n /* Centered text looks better on smaller devices */\n @media (max-width: 640px) and (min-width: 320px) {\n ...\n```\n\nAlso, add a minimum width to `.song-item-number` to account for the width of the button:\n\n```css(~/bloc/bloc-jams/styles/album.css)\n ...\n .song-item-number {\n     width: 5%;\n+    min-width: 30px;\n }\n ...\n```\n\nWithout a minimum width, the cell has the potential to become smaller in width than the size of the button. In this scenario, the song list content would shift to make room for the button when a user hovers over the area to make the button appear. To avoid this, we use a minimum width to make sure there is always room for the button.\n\nWe need to restrict the content change to the current table row. When we mouse over a cell in the item row, whether it's the song's number, title, or duration, we always want to change _only_ the cell with the song number. To ensure that this happens every time, we first select the parent element of all three elements, and _then_ select the song number's cell.\n\nAdd a conditional statement to the `mouseover` event listener that restricts the target to the table row:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n     songListContainer.addEventListener('mouseover', function(event) {\n-        console.log(event.target);\n         // Only target individual song rows during event delegation\n+        if (event.target.parentElement.className === 'album-view-song-item') {\n+            // Change the content from the number to the play button's HTML\n+        }\n     });\n ...\n```\n\nWe use the `parentElement` and `className` properties together to make sure that we only act on the table row. Select the `.song-item-number` element relative to the parent (that is, the table we're mousing-over) and change the `innerHTML` to the play button:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n     songListContainer.addEventListener('mouseover', function(event) {\n         if (event.target.parentElement.className === 'album-view-song-item') {\n-            // Change the content from the number to the play button's HTML\n+            event.target.parentElement.querySelector('.song-item-number').innerHTML = playButtonTemplate;\n         }\n     });\n ...\n```\n\nWe use the `querySelector()` method because we only need to return a single element with the `.song-item-number` class.\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Album%20Play-Pause%20with%20DOM%20Scripting/mouseover_only_album_play_pause.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Album%20Play-Pause%20with%20DOM%20Scripting/mouseover_only_album_play_pause.mp4) the preview directly.\n</video></center>\n\n## Store the Song Number in the HTML\n\nTo revert the play button back to the song's number, we need to store the number before the user gets a chance to mouse over the row. We could do this with JavaScript, but a simpler solution is to use HTML5 __data attributes__. As the name suggests, HTML data attributes allow us to store information in an attribute on an HTML element. Add an attribute called `data-song-number` to the template we generate using the `createSongRow()` function:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var createSongRow = function(songNumber, songName, songLength) {\n     var template =\n         '<tr class=\"album-view-song-item\">'\n-    + '  <td class=\"song-item-number\">' + songNumber + '</td>'\n+    + '  <td class=\"song-item-number\" data-song-number=\"' + songNumber + '\">' + songNumber + '</td>'\n     + '  <td class=\"song-item-title\">' + songName + '</td>'\n     + '  <td class=\"song-item-duration\">' + songLength + '</td>'\n     + '</tr>'\n     ;\n\n     return template;\n };\n ...\n```\n\nThis allows us to access the data held in the attribute using DOM methods when the mouse leaves the table row, and the song number's table cell returns to its original state.\n\n## Detect the Mouse Leaving\n\nThe DOM uses the `mouseleave` event to signal when a mouse leaves the target element's bounds. For this event, we want to attach event listeners to each table row (instead of using event delegation) because the action of leaving a cell is not something that can be specified as easily by listening on the parent. We will select an array of every table row and loop over each to add its event listener:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n // Elements we'll be adding listeners to\n var songListContainer = document.getElementsByClassName('album-view-song-list')[0];\n+var songRows = document.getElementsByClassName('album-view-song-item');\n\n var playButtonTemplate = '<a class=\"album-song-button\"><span class=\"ion-play\"></span></a>';\n\n window.onload = function() {\n     songListContainer.addEventListener('mouseover', function(event) {\n         ...\n     });\n\n+    for (var i = 0; i < songRows.length; i++) {\n+        songRows[i].addEventListener('mouseleave', function(event) {\n+            // Revert the content back to the number\n+        });\n+    }\n }\n```\n\nTo select the song number container, we'll use a property on the song row DOM selector that gets the first child, and sets the `innerHTML` to the song number:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n     for (var i = 0; i < songRows.length; i++) {\n         songRows[i].addEventListener('mouseleave', function(event) {\n-            // Revert the content back to the number\n             // Selects first child element, which is the song-item-number element\n+            this.children[0].innerHTML = this.children[0].getAttribute('data-song-number');\n         });\n     }\n ...\n```\n\nThe `getAttribute()` method takes a single argument: a string with the name of the attribute whose value we want to retrieve. When the mouse leaves a selected table row, it will change back to the song number using the value obtained from this method.\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Album%20Play-Pause%20with%20DOM%20Scripting/album_play_pause_dom_scripting_part_one.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Album%20Play-Pause%20with%20DOM%20Scripting/album_play_pause_dom_scripting_part_one.mp4) the preview directly.\n</video></center>\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Event Delegation](http://javascript.info/tutorial/event-delegation) | Event delegation listens for an event on a parent element but targets the behavior on one of its children. |\n| [Event Bubbling](http://javascript.info/tutorial/bubbling-and-capturing) | Listening for an event on a parent is possible because of event bubbling. An event may fire on a child element, but it bubbles up the DOM tree to its parent. |\n| [Data Attributes](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_data_attributes) | HTML data attributes allow us to store information in an attribute on an HTML element. |\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"There is another event propagation pattern called __event capturing__ (or sometimes, __trickling__) where events move _down_ element nodes instead of up.\n\n1. Read [this post](http://www.quirksmode.org/js/events_order.html#link1) about the difference between capturing and bubbling events.\n\n    `addEventListener()` can accept a third argument. In the blog post linked above, we find that the third argument is a boolean that determines whether the listener bubbles (`false`) or trickles (`true`).\n\n2. Use this [JS Bin](http://joelip.jsbin.com/vofutu/edit?html,js,output) to:\n    - Add an event listener for the `click` event on each element. All elements with the `.red` class should have listeners for capturing. All elements with a `.blue` class should have listeners for bubbling.\n    - In each event handler, use a JavaScript `alert()` that displays a message with the class name of the element (`this.className`) that is currently listening in on the event.\n    - Click each set of boxes and you should see the following behavior:\n\n    <center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Album%20Play-Pause%20with%20DOM%20Scripting/album_play_pause_capturing_bubbling_assignment_demo.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Album%20Play-Pause%20with%20DOM%20Scripting/album_play_pause_capturing_bubbling_assignment_demo.mp4) the preview directly.\n    </video></center>\n\n3. Submit your JS Bin URL to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n- <a href=\"//fast.wistia.net/embed/iframe/n7us5vdkm7?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Event Capturing and Bubbling Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>12, "checkpoint_type"=>"normal", "position"=>12, "points"=>1, "ref"=>"e9904644-adcc-4db9-b9a9-b5780c0a23eb|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2085", "assessment"=>nil}, {"id"=>2086, "name"=>"DOM Scripting: Play/Pause Part 2", "summary"=>"Complex Behavior: execute code based on numerous factors", "body"=>"<!-- { ids:[2086], name:'DOM Scripting: Play/Pause Part 2', summary:'Complex Behavior: execute code based on numerous factors' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Javascript and the DOM: Lesson 2](https://code.tutsplus.com/tutorials/javascript-and-the-dom-lesson-2--net-3669)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint implements complex JavaScript behavior, which requires forethought and algorithmic thinking.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Assess a problem and attempt to devise a solution in pseudo-code or plain English.\n- Translate pseudo-code or plain English actions into JavaScript.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/pbhm3beo5a\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe>\n<script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nThis is the second of two checkpoints completing the play and pause behavior on the Album view.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Consider the Behavior Before Writing the Code\n\nThis will be the most complex behavior we've implemented in Bloc Jams so far. To help write the code, consider the required functionality in plain English:\n\n1. When we click a song to play it, the song number should change to a pause button:\n   <center>![song number to pause button](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/27-dom-scripting-play-pause-2/song_num_to_pause.gif)</center>\n\n2. When the mouse leaves the table row of the currently playing song, the pause button should remain:\n   <center>![pause button remains](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/27-dom-scripting-play-pause-2/pause_remain.gif)</center>\n\n3. When we switch songs, the previously playing song's table cell should revert the content back to the song number:\n   <center>![pause button reverts to song number](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/27-dom-scripting-play-pause-2/pause_to_num.gif)</center>\n\n4. When we hover over each of the songs that aren't playing, the play button should still appear; we _don't_, however, want to show the play button when we hover over the playing song:\n   <center>![play button on hover](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/27-dom-scripting-play-pause-2/play_on_hover.gif)</center>\n\n## Change the Song Number to the Pause Button\n\nWhen we click to play, switch, or pause a song, we need to change the `innerHTML` of the element with the `.song-item-number` class. There are four different relationships the clicked element can have to the `.song-item-number` table cell:\n\n1. A child, like the icon or the icon's circular container\n2. A parent, like the table row\n3. A child of the parent, but neither a child nor parent of `.song-item-number`, like the table cells with the classes `.song-item-title` or `.song-item-duration`\n4. The `.song-item-number` element itself\n\nWe can select items 1 and items 4 using built-in DOM functions, but items 2 and items 3 require us to look up the DOM tree to select a parent element. To address this requirement, write a `findParentByClassName` function that keeps traversing the DOM upward until a parent with a specified class name is found.\n\nInstead of providing the code immediately for this exercise, __you should to try and write it on your own first__. You can check your work by looking at [our implementation](https://github.com/Bloc/curriculum-public/blob/master/web-development/frontend/foundation/27-dom-scripting-play-pause-part-2/find-parent-by-class-name.js). Write your code below the `setCurrentAlbum` function in `album.js`.\n\n> Message your mentor for help before looking at the solution.\n\n## `getSongItem()` Method\n\nThe `findParentByClassName` function enables us to write a larger function that will always return the song item. This method, which we'll call `getSongItem`, should take an element and, based on that element's class name(s), use a `switch` statement that returns the element with the `.song-item-number` class.\n\nOnce again, __try writing the `getSongItem` function on your own__. We've created [another solution](https://github.com/Bloc/curriculum-public/blob/master/web-development/frontend/foundation/27-dom-scripting-play-pause-part-2/get-song-item.js) that you can use to verify your implementation. Write your code below the `findParentByClassName()` function in `album.js`.\n\n> Message your mentor for help before referring to the solution.\n\n## Add a `click` Event Listener\n\nBefore writing the `click` handler, create a variable to store the template for the pause button, as well as a variable for the currently playing song:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var playButtonTemplate = '<a class=\"album-song-button\"><span class=\"ion-play\"></span></a>';\n+var pauseButtonTemplate = '<a class=\"album-song-button\"><span class=\"ion-pause\"></span></a>';\n\n // Store state of playing songs\n+var currentlyPlayingSong = null;\n\n window.onload = function() {\n ...\n```\n\nWe set it to `null` so that no song is identified as playing until we click one. To register the click that will eventually change the value of `currentlyPlayingSong`, add an event listener for the `click` event in the same `for` loop we created for the `mouseleave` event:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n     for (var i = 0; i < songRows.length; i++) {\n         songRows[i].addEventListener('mouseleave', function(event) {\n             // Selects first child element, which is the song-item-number element\n             this.children[0].innerHTML = this.children[0].getAttribute('data-song-number');\n         });\n\n+        songRows[i].addEventListener('click', function(event) {\n+            // Event handler call\n+        });\n     }\n```\n\n## Add a `clickHandler()` Function\n\nCreate a function called `clickHandler()` in `album.js` that takes one argument, `targetElement`:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n...\n var getSongItem = function(element) {\n     ...\n };\n\n+var clickHandler = function(targetElement) {\n+};\n\n // Elements to which we'll be adding listeners\n var songListContainer = document.getElementsByClassName('album-view-song-list')[0];\n...\n```\n\nStore the `.song-item-number` element, selected using the `getSongItem` function, in a variable:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var clickHandler = function(targetElement) {\n\n+    var songItem = getSongItem(targetElement);  \n\n };\n ...\n```\n\nCreate a conditional that checks if `currentlyPlayingSong` is `null`. If `true`, it should set the `songItem`'s content to the pause button and set `currentlyPlayingSong` to the new song's number:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var clickHandler = function(targetElement) {\n\n     var songItem = getSongItem(targetElement);\n\n+    if (currentlyPlayingSong === null) {\n+        songItem.innerHTML = pauseButtonTemplate;\n+        currentlyPlayingSong = songItem.getAttribute('data-song-number');\n+    }\n\n };\n ...\n```\n\nAdd another conditional to revert the button back to a play button if the playing song is clicked again. Set `currentlyPlayingSong` to `null` after:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var clickHandler = function(targetElement) {\n\n     var songItem = getSongItem(targetElement);\n\n     if (currentlyPlayingSong === null) {\n         songItem.innerHTML = pauseButtonTemplate;\n         currentlyPlayingSong = songItem.getAttribute('data-song-number');\n-    }\n+    } else if (currentlyPlayingSong === songItem.getAttribute('data-song-number')) {\n+        songItem.innerHTML = playButtonTemplate;\n+        currentlyPlayingSong = null;\n+    }\n\n };\n ...\n```\n\nIf the clicked song is not the active song, set the content of the new song to the pause button:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var clickHandler = function(targetElement) {\n\n     var songItem = getSongItem(targetElement);\n\n     if (currentlyPlayingSong === null) {\n         songItem.innerHTML = pauseButtonTemplate;\n         currentlyPlayingSong = songItem.getAttribute('data-song-number');\n     } else if (currentlyPlayingSong === songItem.getAttribute('data-song-number')) {\n         songItem.innerHTML = playButtonTemplate;\n         currentlyPlayingSong = null;\n-    }\n+    } else if (currentlyPlayingSong !== songItem.getAttribute('data-song-number')) {\n+        var currentlyPlayingSongElement = document.querySelector('[data-song-number=\"' + currentlyPlayingSong + '\"]');\n+        currentlyPlayingSongElement.innerHTML = currentlyPlayingSongElement.getAttribute('data-song-number');\n+        songItem.innerHTML = pauseButtonTemplate;\n+        currentlyPlayingSong = songItem.getAttribute('data-song-number');\n+    }\n\n };\n ...\n```\n\nFinally, add the click handler to the event listener:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n     for (var i = 0; i < songRows.length; i++) {\n         songRows[i].addEventListener('mouseleave', function(event) {\n             // Selects first child element, which is the song-item-number element\n             this.children[0].innerHTML = this.children[0].getAttribute('data-song-number');\n         });\n\n         songRows[i].addEventListener('click', function(event) {\n-            // Event handler call\n+            clickHandler(event.target);\n         });\n     }\n```\n\n## Change the Mouseover and Mouseleave Behavior\n\nWe should see the click behavior working with one exception: when the mouse leaves the table cell, the pause button will disappear.\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Album%20Play-Pause%20with%20DOM%20Scripting/album_play_pause_click_without_ifs.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Album%20Play-Pause%20with%20DOM%20Scripting/album_play_pause_click_without_ifs.mp4) the preview directly.\n</video></center>\n\nRecall the fourth objective we set before we wrote the code for this checkpoint:\n\n> We still want to show the play button when we hover over each of the songs that aren't playing. However, we _don't_ want to show the play button when we hover over the playing song.\n\nWe need to add some conditional statements to support the correct behavior.\n\n### Update the Code in the `mouseleave` Listener\n\nWhen we originally wrote the code block inside the listener, we used `this.children[0]` to change the HTML of the table cell. We now have a helper function, `getSongItem()`, that gets this element for us and makes the purpose of the code more explicit.\n\nRemove all references to `this.children[0]`, and add a conditional statement to ensure the row we're exiting does not belong to the currently playing song:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n     for (var i = 0; i < songRows.length; i++) {\n         songRows[i].addEventListener('mouseleave', function(event) {\n-            // Selects first child element, which is the song-item-number element\n-            this.children[0].innerHTML = this.children[0].getAttribute('data-song-number');\n             // #1\n+            var songItem = getSongItem(event.target);\n+            var songItemNumber = songItem.getAttribute('data-song-number');\n+\n             // #2\n+            if (songItemNumber !== currentlyPlayingSong) {\n+                songItem.innerHTML = songItemNumber;\n+            }\n         });\n\n         songRows[i].addEventListener('click', function(event) {\n ...\n```\n\nAt __#1__, we've cached the song item that we're leaving in a variable. Referencing `getSongItem()` repeatedly causes multiple queries that can hinder performance. We've done the same with the song number.\n\nAt __#2__, we've added the conditional that checks that the item the mouse is leaving is not the current song, and we only change the content if it isn't.\n\n### Update the Code in the `mouseover` Listener\n\nFinally, update the code in the `mouseover` event with a conditional statement that only changes the `innerHTML` of the table cell when the element does not belong to the currently playing song. __Try implementing the code without guidance first__, and check your work against the [example implementation we've written](https://github.com/Bloc/curriculum-public/blob/master/web-development/frontend/foundation/27-dom-scripting-play-pause-part-2/mouseover-behavior.js#L7-L11).\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"__Before You Begin__: Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nWhen we wrote `findParentByClassName()`, we did not account for some potential errors that could occur if we used the method elsewhere. For example, the function doesn't check for any situation where an ancestor element with the specified class name didn't exist, nor does it check to see if the starting element has a parent.\n\n1. Re-write the function so that it:\n    - Checks to see if a parent exists. If it doesn't, then show an alert that says \"No parent found\".\n    - Shows a different alert when it fails to find a parent with the given class name: \"No parent found with that class name\".\n\n__When You're Done__: Commit your assignment work in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details.", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>13, "checkpoint_type"=>"normal", "position"=>13, "points"=>1, "ref"=>"abf09b64-1cf8-49f8-b246-7c28516bfe55|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2086", "assessment"=>nil}, {"id"=>2314, "name"=>"Quiz: Frontend Foundations: DOM Scripting", "summary"=>"Quiz: Frontend Foundations: DOM Scripting", "body"=>"", "assignment"=>"", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>14, "checkpoint_type"=>"quiz", "position"=>14, "points"=>1, "ref"=>"cd3dd8a2-a755-4dd8-9772-03fa031752a9|0", "exercises"=>false, "quiz_id"=>10, "path"=>"/checkpoints/2314", "assessment"=>nil}, {"id"=>2087, "name"=>"Programming Reinforcement: Checkpoint 2", "summary"=>"Reinforce JavaScript programming and problem solving fundamentals through curated exercises", "body"=>"<!-- { ids:[2087], name:'Programming Reinforcement: Checkpoint 2', summary:'Reinforce JavaScript programming and problem solving fundamentals through curated exercises' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [What Nobody Tells You About Learning To Code — And Why That Makes It So Hard](https://medium.freecodecamp.com/what-nobody-tells-you-about-learning-to-code-and-why-that-makes-it-so-hard-22431ba27d78#.foy6vwdzp)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint introduces three coding challenges to practice object-oriented programming, basic data structures, control flow, algorithms, and closures.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Understand the purpose of an algorithm.\n- Apply advanced control flow to an algorithm.\n- Explain a closure and how it's used in a program.\n\n## Programming Reinforcement\n\nEach foundation checkpoint introduces new concepts, patterns, and assignments. We designed Bloc’s curriculum to push you to your learning limits. With that in mind, we’ve included breaks between lessons to reinforce programming concepts; this is the second of those breaks, known as Programming Reinforcement checkpoints.\n\nIn these checkpoints, you will complete coding challenges that help you master JavaScript and learn to think like a programmer. After you complete the challenges, you will meet with your mentor to discuss your solutions.\n\n- [Challenges](#challenges)\n- [Bonus Challenge: Stacked Deck](#bonus-challenge)\n- [Assignment](#assignment)\n  - [For Mentors](#for-mentors)\n\n<a name=\"challenges\"></a>\n## Challenges\n\nYou must solve these three Kata (challenges) before submitting the checkpoint. At this point in your program, your skill level meets or exceeds that required by each Kata. While they may challenge you, know that you are capable of completing each one.\n\n>Your mentor may help you, but we strongly encourage you attempt these on your own.\n\n| Kata | Hint |\n|:--|:--|\n| [FizzBuzz Array](https://www.codewars.com/kata/fizzbuzz-array-custom/javascript) | Complete a classic programming challenge with an array twist. |\n| [Jaden Casing Strings](https://www.codewars.com/kata/jaden-casing-strings) | Implement a function that converts convert strings to how they would be written by Jaden Smith. |\n| [Transpose Two Strings in an Array](https://www.codewars.com/kata/transpose-two-strings-in-an-array/javascript) | Create a function that will take two strings and transpose them, so that the strings go from top to bottom instead of left to right. |\n\n<a name=\"bonus-challenge\"></a>\n## Bonus Challenge: [Stacked Deck](http://www.codewars.com/kata/stacked-deck-create-a-cheaters-deck-of-cards/train/javascript)\n\n>This bonus challenge is optional, but we strongly encourage you to attempt it.\n\nIn this challenge, Bloc went all-in on a hand of poker. We had a flush, but Codecademy pulled a ringer and got a full-house. We owe them $3M by next Tuesday and if we don’t pay up, they’re going to tell everyone we smell.\n\nWe’re going to raise that money like a gambler… by gambling. To help us win, you will write a deck-shuffling algorithm. By default, your code must shuffle a deck as per usual: semi-randomly using a [pseudo-random number generator](http://www.w3schools.com/jsref/jsref_random.asp).\n\nHere’s the fun: whenever we pass you a `cheatCode`, you should use that value to build a cheat deck. Whenever we pass you the same cheat code, you must return the same cheat deck each time. Here’s an example:\n\n```js\nvar shuffledDeckOne = new StackedDeck();\nshuffledDeckOne.shuffle();\nvar shuffledDeckTwo = new StackedDeck();\nshuffledDeckTwo.shuffle();\nvar cheatDeckOne = new StackedDeck(1);\nvar cheatDeckTwo = new StackedDeck(1);\ncheatDeckOne.shuffle();\ncheatDeckTwo.shuffle();\n```\n\n`shuffledDeckOne` and `shuffledDeckTwo` are normal decks, shuffled randomly, and are _not_ identical. After shuffling `cheatDeckOne` and `cheatDeckTwo`, we expect both of these decks to have the exact same order of cards. We passed the same cheat code to both decks: `1`. Here's another caveat:\n\n```js\nvar cheatDeckA = new StackedDeck(1);\nvar cheatDeckB = new StackedDeck(2);\nvar cheatDeckC = new StackedDeck(2);\n```\n\nIn this example, `cheatDeckB` is identical to `cheatDeckC` but both of them are different than `cheatDeckA`. `cheatDeckA` is identical to `cheatDeckOne` and `cheatDeckTwo` from the previous example. Each cheat code corresponds to a unique deck.\n\nStore the deck in an array:\n\n```js\nshuffledDeck = [];\n```\n\nEach deck must be complete with the full set of 52 unique cards, each represented by a string. For example, `\"5c\"` for the five of clubs, and `\"Qs\"` for the queen of spades. Here’s the full breakdown:\n\n- **A** = Ace\n- **K** = King\n- **Q** = Queen\n- **J** = Jack\n- and **2** through **10** represent the numbered cards\n\nSuits are lower-case letters:\n\n- **d** = Diamonds\n- **h** = Hearts\n- **c** = Clubs\n- and **s** = Spades\n\nYour shuffling must be random enough that each call to `shuffle` generates a different deck unless we provide a cheat code. But please, do _not_ mess this up, Bloc is in deep on this one.\n\n<a name=\"assignment\"></a>", "assignment"=>"- Complete all [mandatory challenges](#challenges).\n  - Submit the [link](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/programming-reinforcement-solution-link.png) to each of your solutions as part of your assignment.\n- Attempt the [Bonus Challenge](#bonus-challenge).\n  - Keep a log as you work through it and consider these questions when writing your report:\n    - What approaches did you try?\n    - Did you ever restart the process? If so, why?\n    - What steps did you take to solve the problem before you began coding?\n    - What was the most challenging aspect of the problem?\n    - Etc.\n  - If you complete the [Bonus Challenge](#bonus-challenge), submit the [link](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/programming-reinforcement-solution-link.png) to your solution.\n- Discuss your solutions and struggles with your mentor.\n\n> Articulating your problem solving process is a valuable skill on the job and during technical interviews.\n\nRemember to click **Submit Final** on every challenge you complete, and notify your mentor when you do so. For challenges you *do not* complete, you may ask your mentor to review them with you.\n\n<a name=\"for-mentors\"></a>\n### For Mentors\n\nConsult this [document for reference](https://www.bloc.io/resources/javascript-programming-reinforcement-mentor-s-guide) for this and all future Frontend Programming Reinforcement checkpoints.", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>14, "checkpoint_type"=>"normal", "position"=>14, "points"=>1, "ref"=>"b8726fb2-0091-40ef-b222-44feb4078d8b|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2087", "assessment"=>nil}, {"id"=>2088, "name"=>"HTML & CSS: Music Player", "summary"=>"Music Player: structure and style Bloc Jam's audio player", "body"=>"<!-- { ids:[2088], name:'HTML & CSS: Music Player', summary:\"Music Player: structure and style Bloc Jam's audio player\" } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [CSS How To...](http://www.w3schools.com/css/css_howto.asp)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint reviews basic HTML structure and CSS by implementing a music player bar, which allows a user to control song playback.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Comfortably create and link a CSS file.\n- Add new HTML elements to a larger HTML structure.\n- Readily style HTML elements.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/5hlvxfwyym\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nBloc Jams is getting closer to playing music! Before it can do that, though, we'll need a music player to control song playback. The music player will allow users to pause and play songs, view playback progress, and adjust volume. We will implement the script to make the player functional in another checkpoint. For now, we'll build the view structure and make it responsive.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Create the CSS File\n\nCreate a CSS file for the music player bar in the `styles` directory:\n\n```bash(~/bloc/bloc-jams/styles)\n$ touch player_bar.css\n```\n\nLink the CSS file to `album.html`:\n\n```html(~/bloc/bloc-jams/album.html)\n ...\n         <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/album.css\">\n+        <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/player_bar.css\">\n     </head>\n ...\n```\n\n## Set Up the Music Player\n\nThe music player will perform distinct functions that we'll separate into different groups. Our player bar will have three \"control groups\":\n\n  1. _Main controls_, which contains the play/pause and previous/next buttons.\n  2. _Currently playing_, which displays the currently playing song information, including the song progress.\n  3. _Volume_, which contains the volume control slider.\n\nWe will associate corresponding class names to each of these groups: `main-controls`, `currently-playing`, and `volume`, respectively.\n\nIn `album.html`, create a `<section>` for the music player bar and add the `<div>`s that will hold each group:\n\n```html(~/bloc/bloc-jams/album.html)\n ...\n         </main>\n+\n+        <section class=\"player-bar\">\n+            <div class=\"container\">\n+                <div class=\"control-group main-controls\">\n+                </div>\n+                <div class=\"control-group currently-playing\">\n+                </div>\n+                <div class=\"control-group volume\">\n+                </div>\n+            </div>\n+        </section>\n         <script src=\"scripts/album.js\"></script>\n     </body>\n </html>\n```\n\nIn `player_bar.css`, add the following styles to get our music player started:\n\n```css(~/bloc/bloc-jams/styles/player_bar.css)\n+.player-bar {\n+    position: fixed;\n+    bottom: 0;\n+    left: 0;\n+    right: 0;\n+    height: 200px;\n+    background-color: rgba(255, 255, 255, 0.3);\n+    z-index: 100;\n+}\n+\n+.player-bar a,\n+.player-bar a:hover {\n+    color: white;\n+    cursor: pointer;\n+    text-decoration: none;\n+}\n+\n+.player-bar .container {\n+    display: table;\n+    padding: 0;\n+    width: 90%;\n+    min-height: 100%;\n+}\n+\n+.player-bar .control-group {\n+    display: table-cell;\n+    vertical-align: middle;\n+}\n+\n+.player-bar .main-controls {\n+    width: 25%;\n+    text-align: left;\n+    padding-right: 1rem;\n+}\n+\n+.player-bar .currently-playing {\n+    width: 50%;\n+    text-align: center;\n+    position: relative;\n+}\n+\n+.player-bar .volume {\n+    width: 25%;\n+    text-align: right;\n+}\n```\n\nWe want the `.currently-playing` (middle) group to display wider than the other control groups, which is why its width property is largest. Additionally, we've fixed the position of the player bar to the bottom of the window and gave it a height of `200px`. To accommodate this fixed element on the album page, add this style to `album.css`:\n\n```css(~/bloc/bloc-jams/styles/album.css)\n body.album {\n     background-image: url(../assets/images/blurred_backgrounds/blur_bg_3.jpg);\n     background-repeat: no-repeat;\n     background-attachment: fixed;\n     background-position: center center;\n     background-size: cover;\n+    padding-bottom: 200px;\n }\n ...\n```\n\nThis style adds padding to the bottom of the album page. This allows the user to scroll to the end of the album page and still view all the content, even with the player bar fixed at the bottom. Without this style, the music player may obscure the content beneath it, which would make for a poor user experience.\n\n## Add Main Controls\n\n![Main Controls](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/Responsive%20Playback%20Bar/left_controls.jpg)\n\nWe'll set up the main controls with previous/next and play/pause buttons. Add the following to `album.html`:\n\n```html(~/bloc/bloc-jams/album.html)\n ...\n                 <div class=\"control-group main-controls\">\n+                    <a class=\"previous\">\n+                        <span class=\"ion-skip-backward\"></span>\n+                    </a>\n+                    <a class=\"play-pause\">\n+                        <span class=\"ion-play\"></span>\n+                    </a>\n+                    <a class=\"next\">\n+                        <span class=\"ion-skip-forward\"></span>\n+                    </a>\n                 </div>\n ...\n```\n\nWe use `<span>` tags to display icons that represent the buttons. The play/pause button is initialized with the \"play\" icon.\n\nIn `player_bar.css`, add the following code to style the anchor tags:\n\n```css(~/bloc/bloc-jams/styles/player_bar.css)\n ...\n+.player-bar a {\n+    font-size: 1.1rem;\n+    vertical-align: middle;\n+}\n+\n .player-bar a,\n .player-bar a:hover {\n ...\n```\n```css(~/bloc/bloc-jams/styles/player_bar.css)\n ...\n .player-bar .main-controls {\n     width: 25%;\n     text-align: left;\n     padding-right: 1rem;\n }\n+\n+.player-bar .main-controls .previous {\n+    margin-right: 16.5%;\n+}\n+\n+.player-bar .main-controls .play-pause {\n+    margin-right: 15%;\n+    font-size: 1.6rem;\n+}\n ...\n```\n\nWe adjust the position of the icons using `margin` and `vertical-align`. We also adjust the size of the icons to make them easier to see.\n\n## Add Currently Playing Controls\n\n![Currently Playing Controls](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/Responsive%20Playback%20Bar/currently_playing.jpg)\n\nThe center of the player bar contains details about the currently playing song. Add the following to `album.html`:\n\n```html(~/bloc/bloc-jams/album.html)\n ...\n                 <div class=\"control-group currently-playing\">\n+                    <h2 class=\"song-name\">My dumb song</h2>\n+                    <h2 class=\"artist-song-mobile\">My dumb song - Fallout Boy</h2>\n+                    <h3 class=\"artist-name\">Fallout Boy</h3>\n                 </div>\n ...\n```\n\nWe've given each of the details a heading tag, a corresponding class name, and placeholder information. We've created a `.artist-song-mobile` heading that joins the song name and artist in one line to make it more compact. We'll style this element so that it only displays on mobile devices.\n\nAdd the following to `player_bar.css`:\n\n```css(~/bloc/bloc-jams/styles/player_bar.css)\n ...\n .player-bar .currently-playing {\n     width: 50%;\n     text-align: center;\n     position: relative;\n }\n+\n+.player-bar .currently-playing .song-name,\n+.player-bar .currently-playing .artist-name,\n+.player-bar .currently-playing .artist-song-mobile {\n+    text-align: center;\n+    font-size: 0.75rem;\n+    margin: 0;\n+    position: absolute;\n+    width: 100%;\n+    font-weight: 300;\n+}\n+\n+.player-bar .currently-playing .song-name,\n+.player-bar .currently-playing .artist-song-mobile {\n+    top: 1.1rem;\n+}\n+\n+.player-bar .currently-playing .artist-name {\n+    bottom: 1.1rem;\n+}\n+\n+.player-bar .currently-playing .artist-song-mobile {\n+    display: none;\n+}\n ...\n```\n\nThe \"currently playing\" control group will also contain a seek bar to allow the user to jump to any point in the song.\n\nAdd the following to `album.html`:\n\n```html(~/bloc/bloc-jams/album.html)\n ...\n                 <div class=\"control-group currently-playing\">\n                     <h2 class=\"song-name\">My dumb song</h2>\n+                    <div class=\"seek-control\">\n+                        <div class=\"seek-bar\">\n+                            <div class=\"fill\"></div>\n+                            <div class=\"thumb\"></div>\n+                        </div>\n+                        <div class=\"current-time\">2:30</div>\n+                        <div class=\"total-time\">4:45</div>\n+                    </div>\n                     <h2 class=\"artist-song-mobile\">My dumb song - Fallout Boy</h2>\n                     <h3 class=\"artist-name\">Fallout Boy</h3>\n                 </div>\n ...\n```\n\nThe seek bar displays the current playback time and the full length duration of the song. For now, we've used placeholder times.\n\nThe `fill` class element in `.seek-bar` will display the current song's playback progress. As the song plays, the width of `.fill` increases until it reaches 100%, the full width of `.seek-bar`.\n\n`.thumb` is a visual marker that makes it easier for users to identify the end of the `.fill` element. To make it easy for users to drag and drop the `.thumb`, we'll style it as a small circle.\n\nAdd the seek bar styles to `player_bar.css`:\n\n```css(~/bloc/bloc-jams/styles/player_bar.css)\n ...\n .player-bar .currently-playing .artist-song-mobile {\n     display: none;\n }\n+\n+.seek-control {\n+    position: relative;\n+    font-size: 0.8rem;\n+}\n+\n+.seek-control .current-time {\n+    position: absolute;\n+    top: 0.5rem;\n+}\n+\n+.seek-control .total-time {\n+    position: absolute;\n+    right: 0;\n+    top: 0.5rem;\n+}\n+\n+.seek-bar {\n+    height: 0.25rem;\n+    background-color: rgba(255, 255, 255, 0.3);\n+    border-radius: 2px;\n+    position: relative;\n+    cursor: pointer;\n+}\n+\n+.seek-bar .fill {\n+    background-color: white;\n+    width: 36%;\n+    height: 0.25rem;\n+    border-radius: 2px;\n+}\n+\n+.seek-bar .thumb {\n+    position: absolute;\n+    height: 0.5rem;\n+    width: 0.5rem;\n+    background-color: white;\n+    left: 36%;\n+    top: 50%;\n     /* #1 */\n+    margin-left: -0.25rem;\n+    margin-top: -0.25rem;\n+    border-radius: 50%;\n+    cursor: pointer;\n+    -webkit-transition: all 100ms ease-in-out;\n+       -moz-transition: all 100ms ease-in-out;\n+            transition: all 100ms ease-in-out;\n+}\n+\n+.seek-bar:hover .thumb {\n+    width: 1.1rem;\n+    height: 1.1rem;\n+    margin-top: -0.5rem;\n+    margin-left: -0.5rem;\n+}\n ...\n```\n\nWe use properties we've seen before to set position, color, and size of the seek bar elements.\n\n`.fill` is a static element that appears as a line. For the time being, we've given it a `36%` width so that we can see the element when we view the page.\n\nWe've set the `border-radius` of `.thumb` to `50%`, causing the corners of the element to round out enough to appear circular. Additionally, we've styled `.thumb` to increase in size when a user hovers over it so it's easier to click and drag. Negative margins (at __#1__) account for the size increase and hold the element's position in place so that the change in size doesn't adjust the position of other elements.\n\nSpend some time to style the seek bar in different ways. Adjust the various properties to see how different values alter the view. When you feel comfortable with these properties, reapply these proposed styles to maintain the original design.\n\n## Add Volume Controls\n\n![Volume Controls](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/Responsive%20Playback%20Bar/playback_bar.jpg)\n\nThe volume control group contains the volume adjuster. Add the following markup to `album.html`:\n\n```html(~/bloc/bloc-jams/album.html)\n ...\n                 <div class=\"control-group volume\">\n+                    <span class=\"ion-volume-high icon\"></span>\n+                    <div class=\"seek-bar\">\n+                        <div class=\"fill\"></div>\n+                        <div class=\"thumb\"></div>\n+                    </div>\n                 </div>\n ...\n```\n\nThe volume icon visually informs the user that this control adjusts the volume. We also include another seek bar element so that the user can adjust the volume as desired.\n\nAdd the following styles to `player_bar.css`:\n\n```css(~/bloc/bloc-jams/styles/player_bar.css)\n ...\n .player-bar .volume {\n     width: 25%;\n     text-align: right;\n }\n+\n+.player-bar .volume .icon {\n+    font-size: 1.1rem;\n+    display: inline-block;\n+    vertical-align: middle;\n+}\n+\n+.player-bar .volume .seek-bar {\n+    display: inline-block;\n+    width: 5.75rem;\n+    vertical-align: middle;\n+}\n```\n\nWe style the volume icon so that it's easily viewable.\n\nExperiment with these properties to create a new look for the volume controls. When you feel comfortable with these properties and how they affect elements, revert back to the original styles.\n\n## Mobile\n\nThe player bar collapses on itself when viewed on smaller screens, rendering it unusable. We need to change it so that past a certain screen width, the `.control-group` elements stack vertically instead of horizontally.\n\nAdd the mobile styles to `player_bar.css`:\n\n```css(~/bloc/bloc-jams/styles/player_bar.css)\n ...\n .player-bar .volume .seek-bar {\n     display: inline-block;\n     width: 5.75rem;\n     vertical-align: middle;\n }\n+\n+@media (max-width: 640px) {\n+    .player-bar {\n+        padding: 1rem;\n+        background-color: rgba(0,0,0,0.6);\n+    }\n+\n+    .player-bar .main-controls,\n+    .player-bar .currently-playing,\n+    .player-bar .volume {\n+        display: block;\n+        margin: 0 auto;\n+        padding: 0;\n+        width: 100%;\n+        text-align: center;\n+    }\n+    \n+    .player-bar .main-controls,\n+    .player-bar .volume {\n+        min-height: 3.5rem;\n+    }\n+    \n+    .player-bar .currently-playing {\n+        min-height: 2.5rem;\n+    }\n+     \n+    .player-bar .artist-name,\n+    .player-bar .song-name {\n+        display: none;\n+    }\n+\n+    .player-bar .currently-playing .artist-song-mobile {\n+        display: block;\n+    }\n+}\n```\n\nWe add a semi-transparent black background color to the player bar so that the white text stands out better. We also change each control group element to `display: block`, stacking them vertically, and set `width: 100%`, expanding them to the width of the screen. We give them a minimum width to ensure they have enough space to display well. We hide the individual song and artist titles with `display: none` and reveal the compact, single-line version.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Icons](http://ionicons.com/) | Icons are used in websites and applications to visually communicate information to the user. |\n| [Mobile-Friendly Views](https://www.google.com/webmasters/tools/mobile-friendly/) | Mobile-friendly designs are important for maximizing usability. |\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"On larger screens, the control elements display like table cells with `display: table-cell`. In mobile view, we changed the control elements to `display: block`, which is the default display value for `<div>` elements. There are, however, a number of ways to display `<div>` elements side by side.\n\n1. Research the different ways to display `<div>`s horizontally. Use [this StackOverflow thread](http://stackoverflow.com/questions/225956/how-do-i-align-spans-or-divs-horizontally) as a starting point in your research.\n2. Clone this JS Bin: [Practice Displaying `<div>` Elements Horizontally](http://clln.jsbin.com/voruto/edit?html,css,output). Implement at least two different solutions in the same file. Alter the HTML and CSS as needed.\n3. When complete, send your JS Bin URL to your mentor.\n\n> Refer to the [JS Bin resource](https://www.bloc.io/resources/js-bin) for a review on JS Bin.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n- <a href=\"//fast.wistia.net/embed/iframe/pvqq2caxmv?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Displaying `<div>` Elements Horizontally Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>15, "checkpoint_type"=>"normal", "position"=>15, "points"=>1, "ref"=>"0ebe1811-5099-4571-8af7-d219edaf2a03|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2088", "assessment"=>nil}, {"id"=>2089, "name"=>"jQuery: Landing Page", "summary"=>"jQuery: a JavaScript helper library to simplify development", "body"=>"<!-- { ids:[2089], name:'jQuery: Landing Page', summary:'jQuery: a JavaScript helper library to simplify development' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Codecademy: jQuery](https://www.codecademy.com/learn/jquery)\n* [W3 Schools: jQuery Tutorial](http://www.w3schools.com/jquery/)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint introduces jQuery, a JavaScript helper library to simplify development.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Discuss the pros and cons of using a helper library.\n- Include jQuery in an application.\n- Use jQuery selectors correctly and understand the object(s) returned.\n- Recognize and use some basic jQuery methods – such as `.css()` and `.each()`.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/sq7ug2iuaz\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe>\n<script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nTo make Bloc Jams more dynamic, we've been using vanilla JavaScript – no bells, no whistles, just JavaScript in its purest form. DOM scripting is \"lightweight,\" as it requires no libraries that may slow page performance.\n\nAnything we can accomplish with a helper library, such as jQuery, we can achieve with JavaScript. However, libraries execute many common, time-consuming tasks that simplify development. Libraries are critical to any developer's success, but knowing which to learn and master can be difficult.\n\nDOM scripting is useful for contributing to open source projects, too. External packages, in particular, often shouldn't depend on other external packages like jQuery.\n\nExperience with DOM scripting is essential, but frontend developers require knowledge of at least a few common libraries. jQuery is the most popular JavaScript library today. We'll use it to refactor the vanilla JavaScript we've implemented for the Bloc Jams landing page and learn why it's so widely used.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Add the jQuery Library\n\nTo include the jQuery library in our Bloc Jams project, add `<script>` tags and the jQuery source file in `index.html`:\n\n```html(~/bloc/bloc-jams/index.html)\n ...\n         </section>\n+        <script src=\"https://code.jquery.com/jquery-2.1.3.min.js\"></script>\n         <script src=\"scripts/landing.js\"></script>\n     </body>\n </html>\n```\n\nHere, the jQuery source library is hosted on code.jquery.com, known as a __content delivery network__ (or CDN). A CDN is any network that hosts assets you use on your website. Alternatively, we could host the jQuery source ourselves by downloading the source and adding it to the scripts local to our project.\n\n__When should I use a content delivery network?__ There are various pros and cons to using a CDN, and whether or not you should use CDN-hosted assets depends on your project needs. There's no one-size-fits-all answer.\n\n## Use jQuery Selectors\n\nWe've learned a number of DOM selectors, and a number of methods to select DOM objects (nodes). They aren't supported equally in all browsers, however. jQuery simplifies DOM selection in two ways:\n\n1. jQuery uses a unified selector function written with a dollar sign and parentheses: `$()`.\n2. This function works consistently across nearly all browsers.\n\n> Note: `$` is a valid function name in JavaScript, and in jQuery is just an alias for the `jQuery` function.\n\nFor example, to select all `<div>` elements using the jQuery selector we would write:\n\n```javascript\n$('div')\n```\n\nAnother advantage of the jQuery selector is that it uses CSS-style syntax. For example, to select all `.cool` elements that have a `#radical` parent element, we would write:\n\n```javascript\n$('#radical .cool')\n```\n\nWe would use this same syntax in a CSS file to style all `.cool` elements that have a `#radical` parent element. This helps simplify element selection. The selector syntax can include pseudo classes like `:hover` as well:\n\n```javascript\n$('#radical .cool:hover')\n```\n\nLike other selectors, the jQuery selector returns an object. Any time we use `$()` to select an element, the element becomes a __jQuery object__. jQuery _wraps_ elements to provide special __jQuery methods__ not available on plain JavaScript objects. These additional methods reduce the amount of code required to manipulate the DOM, handle events, and animate elements.\n\nRecall how we styled elements using pure JavaScript:\n\n```javascript\nvar domElement = document.getElementById(\"refrigerator\");\ndomElement.style.color = \"white\";\n```\n\nWe can perform this same action in jQuery with much less code on our part:\n\n```javascript\n$('#refrigerator').css('color', 'white');\n```\n\nThe jQuery `css()` method gets or sets the style properties of an element. In this case, we _set_ the `color` property to `\"white\"`.\n\nWhen we want to use a jQuery method on an element we didn't obtain via jQuery selection, we need to wrap the object:\n\n```javascript\nvar domElement = document.getElementById(\"refrigerator\");\nvar $newDomElement = $(domElement);\n$newDomElement.find('.food'); // Finds all .food elements using the jQuery method\n```\n\n> It's a common convention to prefix jQuery variables with a dollar sign so they are easily identified as variables on which jQuery methods can be called.\n\n## Refactor `window.onload` with the jQuery Selector\n\nWe'll first refactor `window.onload` in `landing.js`. Update the following:\n\n```javascript(/bloc/bloc-jams/scripts/landing.js)\n ...\n-window.onload = function() {\n+$(window).load(function() {\n     if (window.innerHeight > 950) {\n ...\n```\n\nWe've made the `window` object a jQuery object. We've also changed the `onload` property to the jQuery `load()` method, which takes a function as an argument. When the page loads, the function will execute.\n\nLet's refactor the rest of the function. Make the following changes to `landing.js`:\n\n```javascript(/bloc/bloc-jams/scripts/landing.js)\n ...\n $(window).load(function() {\n-    // Automatically animates the points on a tall screen where scrolling can't trigger the animation\n-    if (window.innerHeight > 950) {\n-        animatePoints(pointsArray);\n     // #1\n+    if ($(window).height() > 950) {\n+        animatePoints();\n     }\n\n-    var sellingPoints = document.getElementsByClassName('selling-points')[0];\n-    var scrollDistance = sellingPoints.getBoundingClientRect().top - window.innerHeight + 200;\n     // #2\n+    var scrollDistance = $('.selling-points').offset().top - $(window).height() + 200;\n\n-    window.addEventListener(\"scroll\", function(event) {\n     // #3\n+    $(window).scroll(function(event) {\n-        if (document.documentElement.scrollTop || document.body.scrollTop >= scrollDistance) {\n-            animatePoints(pointsArray);\n         // #4\n+        if ($(window).scrollTop() >= scrollDistance) {\n+            animatePoints();\n         }\n     });\n-}\n+});\n```\n\nWe add `$()` to convert all instances of `window` into a jQuery object. At __#1__ and __#2__, we update the `.innerHeight` property to jQuery's `height()` method, which gets or sets an object's height. Since we pass no arguments to the function, we _get_ the height.\n\nAt __#2__, we no longer need a separate variable to hold the `.selling-points` element since jQuery can select the element with many fewer characters. We replace `getBoundingClientRect()` with jQuery's `.offset()` method.\n\nAt __#3__, the `addEventListener()` method becomes jQuery's `scroll()` method, which takes a function as an argument. jQuery's `scroll()` \"method\" is still an event handler like `addEventListener()`, but the jQuery wrapper obscures the appearance of events. When the window scrolls, the function executes.\n\nLastly, at __#4__, we replace `document.documentElement.scrollTop || document.body.scrollTop` with the jQuery equivalent of `$(window).scrollTop()`.\n\n## Refactor `animatePoints()`\n\nDuring the `window.onload` update, we removed the `pointsArray` argument from `animatePoints()`. We'll refactor `animatePoints()` to learn why.\n\nUpdate the following code in `landing.js`:\n\n```javascript(/bloc/bloc-jams/scripts/landing.js)\n // #5\n-var pointsArray = document.getElementsByClassName('point');\n-\n-var animatePoints = function(points) {\n+var animatePoints = function() {\n-    var revealPoint = function(index) {\n-        points[index].style.opacity = 1;\n-        points[index].style.transform = \"scaleX(1) translateY(0)\";\n-        points[index].style.msTransform = \"scaleX(1) translateY(0)\";\n-        points[index].style.WebkitTransform = \"scaleX(1) translateY(0)\";\n+    var revealPoint = function() {\n         // #7\n+        $(this).css({\n+            opacity: 1,\n+            transform: 'scaleX(1) translateY(0)'\n+        });\n     };\n-    for (var i = 0; i < points.length; i++) {\n-        revealPoint(i);\n-    }\n     // #6\n+    $.each($('.point'), revealPoint);\n };\n ...\n```\n\nFirst, we remove the DOM selector (at __#5__) that gets the `.point` elements by class name. The jQuery selection of `.point`, added at __#7__, is terse enough that we don't need to store it in a variable anymore.\n\nAlso at __#6__, the `revealPoint` function no longer requires an argument. We replace the `for` loop with the jQuery `$.each()` function. The `$.each()` function iterates over each `.point` element and executes the callback function, `revealPoint`.\n\nAt __#7__, we use the jQuery `css()` method in place of the multiple `style` property instances. Due to jQuery's cross-browser compatibility, we don't need to use vendor prefixes on the `transform` property.\n\nAdditionally, the `revealPoint` function now refers to `$(this)` instead of a specific `.point` element. To use `this` with jQuery, we must wrap it in a jQuery object. `$(this)` (at __#7__) references a different `.point` element each time jQuery executes the `revealPoint()` callback.\n\n## Recap\n\n| **Concept** | **Description** |\n| ----------- | --------------- |\n| [Libraries](https://en.wikipedia.org/wiki/JavaScript_library) | JavaScript libraries execute many common, time-consuming tasks that simplify development. |\n| [jQuery](https://jquery.com/) | jQuery is the most popular JavaScript library today. It simplifies many common operations and works across a multitude of browsers. |\n| Content Delivery Network (CDN) | There are [pros](https://support.cloudflare.com/hc/en-us/articles/202176560-Why-should-I-use-a-Content-Delivery-Network-or-CDN-) and [cons](http://www.sitepoint.com/7-reasons-not-to-use-a-cdn/) to using a CDN. |\n| [jQuery Selectors](http://www.w3schools.com/JQuery/jquery_selectors.asp) | jQuery selectors allow you to select and manipulate HTML elements using CSS-style syntax. |\n| [jQuery API](http://api.jquery.com) | jQuery has many methods for event handling, animation, document manipulation, etc.<br><br>&bullet; [`.css()`](https://api.jquery.com/css/)<br>&bullet; [`.load()`](http://api.jquery.com/load-event/)<br>&bullet; [`$.each()`](https://api.jquery.com/jquery.each/) |\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"1. Read through jQuery's [basic tutorial](https://learn.jquery.com/about-jquery/how-jquery-works/) for getting started.\n2. Read the documentation on jQuery's [`ready()` event](http://api.jquery.com/ready/).\n3. Clone this JS Bin: [Practice Refactoring to jQuery](http://jsbin.com/tolipa/1/edit?html,js,output). Refactor the code to use jQuery.\n4. When complete, submit your JS Bin URL to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n- <a href=\"//fast.wistia.net/embed/iframe/d1pn13irqr?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Refactor to jQuery Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>16, "checkpoint_type"=>"normal", "position"=>16, "points"=>1, "ref"=>"dfe8ce69-190e-4990-8163-c4168e1efc8b|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2089", "assessment"=>nil}, {"id"=>2090, "name"=>"jQuery: Collection and Album Views", "summary"=>"jQuery (cont.): simplify the code of the Album and Collection views", "body"=>"<!-- { ids:[2090], name:'jQuery: Collection and Album Views', summary:'jQuery (cont.): simplify the code of the Album and Collection views' } -->\n\n## Overview and Purpose\n\nThis checkpoint continues the introduction to jQuery.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Refactor vanilla JavaScript into jQuery.\n- Recognize and use a number of jQuery methods – such as `.empty()`, `.append()`, `.text()`, etc.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/2ia4lkej3c\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe>\n<script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nWe'll refactor the collection and album pages to continue exploring jQuery.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Add the jQuery Library\n\nBefore we begin refactoring we'll need to link jQuery to our collection and album pages.\n\nAdd the jQuery library to `collection.html`:\n\n```html(~/bloc/bloc-jams/collection.html)\n ...\n         </section>\n+        <script src=\"https://code.jquery.com/jquery-2.1.3.min.js\"></script>\n         <script src=\"scripts/collection.js\"></script>\n     </body>\n </html>\n```\n\nAdd the jQuery library to `album.html`:\n\n```html(~/bloc/bloc-jams/album.html)\n ...\n         </section>\n+        <script src=\"https://code.jquery.com/jquery-2.1.3.min.js\"></script>\n         <script src=\"scripts/album.js\"></script>\n     </body>\n </html>\n```\n\n## Refactor `collection.js`\n\nMake the following changes to `collection.js`:\n\n```html(~/bloc/bloc-jams/scripts/collection.js)\n-var collectionItemTemplate =\n // #1\n+var buildCollectionItemTemplate = function() {\n+    var template =\n       '<div class=\"collection-album-container column fourth\">'\n     + '  <img src=\"assets/images/album_covers/01.png\"/>'\n     + '  <div class=\"collection-album-info caption\">'\n        ...\n     + '  </div>'\n     + '</div>'\n     ;\n+\n     // #2\n+    return $(template);\n+};\n\n window.onload = function() {\n ...\n```\n\nWe change the name of the variable that stores the template from `collectionItemTemplate` to `template`. Although we don't use any jQuery methods, we may later. To support that, we wrap `template` in a jQuery object (at __#2__) to future-proof it.\n\nWith that in mind, we wrap the template in a function. This function returns the markup string as a jQuery object, which we'll call a _jQuery template_. Note that when naming action-oriented functions, it's a convention to start the function name with a verb. In that spirit, we name the function `buildCollectionItemTemplate` (at __#1__).\n\nLet's refactor the `window.onload` function as we did for `landing.js`. Update the following code in `collection.js`:\n\n```html(~/bloc/bloc-jams/scripts/collection.js)\n-window.onload = function() {\n+$(window).load(function() {\n-    var collectionContainer = document.getElementsByClassName('album-covers')[0];\n     // #3\n+    var $collectionContainer = $('.album-covers');\n-    collectionContainer.innerHTML = '';\n     // #4\n+    $collectionContainer.empty();\n\n     for (var i = 0; i < 12; i++) {\n-        collectionContainer.innerHTML += collectionItemTemplate;\n+        var $newThumbnail = buildCollectionItemTemplate();\n         // #5\n+        $collectionContainer.append($newThumbnail);\n     }\n-}\n+});\n```\n\nAs in `landing.js`, we change `window.onload` to its jQuery equivalent of `$(window).load()`. Similarly, at __#3__, we substitute DOM selection with the shorter jQuery alternative. When the element selection becomes a jQuery object, we prefix the `collectionContainer` variable name with a `$`, a convention that identifies jQuery-related variables.\n\nAt __#4__, we replace the vanilla DOM scripting `innerHTML` property with the jQuery `empty()` method. The `empty()` method, like many jQuery operations, is literal in what it does – it empties, or removes, any text or other elements from the element(s) it is called on.\n\nLastly, at __#5__, we replace `+=` in the `for` loop with the `append()` method. With each loop, we append the template content to the collection container.\n\nView the collection page in the browser to confirm that the jQuery performs the same as our original vanilla JavaScript implementation.\n\n## Refactor `album.js`\n\nLet's continue exploring jQuery by refactoring `album.js`.\n\nIn `album.js`, update the `createSongRow` function to return a jQuery template:\n\n```html(~/bloc/bloc-jams/scripts/album.js)\n ...\n var createSongRow = function(songNumber, songName, songLength) {\n     var template =\n       '<tr class=\"album-view-song-item\">'\n     + '  <td class=\"song-item-number\" data-song-number=\"' + songNumber + '\">' + songNumber + '</td>'\n     + '  <td class=\"song-item-title\">' + songName + '</td>'\n     + '  <td class=\"song-item-duration\">' + songLength + '</td>'\n     + '</tr>'\n     ;\n\n-    return template;\n+    return $(template);\n };\n ...\n```\n\nNext, refactor the DOM selectors in the `setCurrentAlbum` function:\n\n```html(~/bloc/bloc-jams/scripts/album.js)\n ...\n var setCurrentAlbum = function(album) {\n-    var albumTitle = document.getElementsByClassName('album-view-title')[0];\n-    var albumArtist = document.getElementsByClassName('album-view-artist')[0];\n-    var albumReleaseInfo = document.getElementsByClassName('album-view-release-info')[0];\n-    var albumImage = document.getElementsByClassName('album-cover-art')[0];\n-    var albumSongList = document.getElementsByClassName('album-view-song-list')[0];\n+    var $albumTitle = $('.album-view-title');\n+    var $albumArtist = $('.album-view-artist');\n+    var $albumReleaseInfo = $('.album-view-release-info');\n+    var $albumImage = $('.album-cover-art');\n+    var $albumSongList = $('.album-view-song-list');\n ...\n```\n\nWe replace each instance of `getElementsByClassName` with a jQuery selector and use CSS-style syntax to select the elements. Additionally, we add a `$` to the start of each variable name because they now reference jQuery objects.\n\nRefactor the values assigned to the album detail elements:\n\n```html(~/bloc/bloc-jams/scripts/album.js)\n ...\n-    albumTitle.firstChild.nodeValue = album.title;\n-    albumArtist.firstChild.nodeValue = album.artist;\n-    albumReleaseInfo.firstChild.nodeValue = album.year + ' ' + album.label;\n-    albumImage.setAttribute('src', album.albumArtUrl);\n+    $albumTitle.text(album.title);\n+    $albumArtist.text(album.artist);\n+    $albumReleaseInfo.text(album.year + ' ' + album.label);\n+    $albumImage.attr('src', album.albumArtUrl);\n ...\n```\n\nWe call jQuery's `text()` method to replace the content of the text nodes, instead of setting `firstChild.nodeValue`. We also change the `setAttribute()` method to jQuery's `attr()` method, which changes the element attribute using the same arguments.\n\nWhen a jQuery selector returns a single element, we can access it without array-index syntax. For example, we can call a jQuery method directly on a selector without recovering the first (and only) item in the array.\n\nApply the following final changes to `album.js`:\n\n```html(~/bloc/bloc-jams/scripts/album.js)\n ...\n-    albumSongList.innerHTML = '';\n+    $albumSongList.empty();\n\n     for (var i = 0; i < album.songs.length; i++) {\n-        albumSongList.innerHTML += createSongRow(i + 1, album.songs[i].title, album.songs[i].duration);\n+        var $newRow = createSongRow(i + 1, album.songs[i].title, album.songs[i].duration);\n+        $albumSongList.append($newRow);\n     }\n };\n```\n\nOnce again, we refactor with jQuery using the `empty()` and `append()` jQuery methods.\n\nView the album page in the browser to confirm that the jQuery performs the same as our original vanilla JavaScript implementation.\n\nNote that jQuery and JavaScript work harmoniously. Even when refactoring some of the code in `album.js` to jQuery, everything done with basic DOM scripting still functions.\n\n## Recap\n\n| **Concept** | **Description** |\n| ----------- | --------------- |\n| [`.empty()`](https://api.jquery.com/empty/) | Removes all child nodes of the set of matched elements from the DOM. |\n| [`.append()`](http://api.jquery.com/append/) | Insert content, specified by the parameter, to the end of each element in the set of matched elements. |\n| [`.text()`](https://api.jquery.com/text/) | Get or set the content of each element in the set of matched elements. |\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"We've learned more about jQuery and how great it is. It simplifies many tasks and substantially reduces the amount of code we have to write.\n\n_If jQuery's so great, then why would anyone ever use boring, stupid, old DOM scripting?_\n\n1. Research the answer to this question, starting with these resources:\n    - [Sitepoint: Native JavaScript Equivalents of jQuery Methods](http://www.sitepoint.com/jquery-vs-raw-javascript-1-dom-forms/)\n    - [Go Make Things: Ditching jQuery for Vanilla JS](http://gomakethings.com/ditching-jquery-for-vanilla-js/)\n2. Answer the question in at least one paragraph in your own words. Cite two or more reputable references to support your reasoning.\n3. Send your answer to your mentor.", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>17, "checkpoint_type"=>"normal", "position"=>17, "points"=>1, "ref"=>"aae8af86-d47d-45e5-8fe2-aa81a6fcfc78|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2090", "assessment"=>nil}, {"id"=>2091, "name"=>"jQuery: Play/Pause", "summary"=>"jQuery (cont.): simplify the code of play/pause behavior", "body"=>"<!-- { ids:[2091], name:'jQuery: Play/Pause', summary:'jQuery (cont.): simplify the code of play/pause behavior' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Wikipedia: Pseudocode](https://en.wikipedia.org/wiki/Pseudocode)\n* [Khan Academy: Planning with Pseudo-Code](https://www.khanacademy.org/computing/computer-programming/programming/good-practices/p/planning-with-pseudo-code)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint continues the introduction to jQuery.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Refactor vanilla JavaScript into jQuery.\n- Recognize and use a number of jQuery methods – such as `.find()`, `.click()`, `.hover()`, etc.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/0u8v6g0a2d\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe>\n<script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nThe addition of jQuery has made the Bloc Jams codebase more concise. We'll continue to tighten our methods in `album.js` by moving the event handling into the `createSongRow()` function. This will reduce our code in the `$document.ready()` block to a single function call.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Prepare `createSongRow()` to Handle Events\n\nWe can attach event listeners to dynamically created elements before we add them to the DOM. As part of our refactor, we'll pass events to the jQuery object we create at the beginning of `createSongRow()`.\n\nTo start, remove the return statement at the end of assigning `template`:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var createSongRow = function(songNumber, songName, songLength) {\n\n     ...\n\n-    return $(template);\n+    var $row = $(template);\n };\n ...\n```\n\nAttach the jQuery equivalent to the three event listeners we've been using thus far to `$row`:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var createSongRow = function(songNumber, songName, songLength) {\n\n     ...\n\n     var $row = $(template);\n     // #1\n+    $row.find('.song-item-number').click(clickHandler);\n     // #2\n+    $row.hover(onHover, offHover);\n     // #3\n+    return $row;\n };\n ...\n```\n\nThe jQuery `find()` method at __#1__ is similar to `querySelector()`. We call it here to find the element with the `.song-item-number` class that's contained in whichever row is clicked. jQuery's `click` event listener executes the callback we pass to it when the target element is clicked. Notice that `clickHandler()` no longer takes any arguments, which we'll address in our `clickHandler()` refactor.\n\nThe `hover()` event listener at __#2__ combines the `mouseover` and `mouseleave` functions we relied on previously. The first argument is a callback that executes when the user mouses over the `$row` element and the second is a callback executed when the mouse leaves `$row`.\n\nAt __#3__, we return `$row`, which is created with the event listeners attached.\n\n## Revisiting `this`\n\nRemember our old friend `this`? Recall that `this` is a contextual object in JavaScript. Unless otherwise stated using `apply()`, `call()`, or `bind()`, `this` refers to the object that is calling the method which relies on `this`. As we refactor our play and pause button functions during this checkpoint, we'll use `this` to reference the jQuery objects to which we've attached event listeners.\n\n## Define `onHover` and `offHover`\n\nThe definitions of the `onHover` and `offHover` functions need to move to `createSongRow()`.\n\n> Note that these are currently anonymous functions called in the event listeners for the `mouseleave` and `mouseover` events.\n\nAdd the functions just above our event handlers:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var createSongRow = function(songNumber, songName, songLength) {\n\n     ...\n\n     var $row = $(template);\n+\n+    var onHover = function(event) {\n+        // Placeholder for function logic\n+    };\n+    var offHover = function(event) {\n+        // Placeholder for function logic\n+    };\n+\n     $row.find('.song-item-number').click(clickHandler);\n     $row.hover(onHover, offHover);\n     return $row;\n };\n ...\n```\n\n__Attempt to write the `onHover` and `offHover` functions.__\n\nThe implementations will be similar to the code in the corresponding vanilla DOM scripting. Make sure to use jQuery methods instead. Note that we no longer need to use the `getSongItem()` helper because we can use jQuery's `find()` method to get the element with `.song-item-number`. Use `this` to refer to the row.\n\nHere's [our implementation](https://github.com/Bloc/curriculum-public/blob/master/web-development/frontend/foundation/31-jquery-play-pause/onhover-offhover-jquery.js#L2-L18) so you can check your solution. Message your mentor for help before referencing our solution.\n\nAfter adding the new functions, update the `window.onload()` block to use `$(document).ready()` and delete the event handlers that we refactored inside `createSongRow()`:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n...\n-window.onload = function() {\n+$(document).ready(function() {\n     setCurrentAlbum(albumPicasso);\n\n-    songListContainer.addEventListener('mouseover', function(event) {\n-        if (event.target.parentElement.className === 'album-view-song-item') {\n-            var songItem = getSongItem(event.target);\n-\n-            if (songItem.getAttribute('data-song-number') !== currentlyPlayingSong) {\n-                songItem.innerHTML = playButtonTemplate;\n-            }\n-        }\n-    });\n     for (var i = 0; i < songRows.length; i++) {\n-        songRows[i].addEventListener('mouseleave', function(event) {\n-            var songItem = getSongItem(event.target);\n-\n-            if (songItem.getAttribute('data-song-number') !== currentlyPlayingSong) {\n-                getSongItem(this).innerHTML = getSongItem(this).getAttribute('data-song-number');\n-            }\n-        });\n-\n         songRows[i].addEventListener('click', function(event) {\n             clickHandler(event.target);\n         });\n     }\n-};\n+});\n```\n\n## Refactor `clickHandler`\n\nAs noted earlier, the `clickHandler` function will no longer need to take any arguments. We no longer need to reference the `targetElement` or use the `getSongItem()` function because we can use `this` to reference the row. Move an empty function to `createSongRow()`:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var createSongRow = function(songNumber, songName, songLength) {\n\n     ...\n\n     var $row = $(template);\n\n+    var clickHandler = function() {\n+        // clickHandler logic\n+    };\n+\n     var onHover = function(event) {\n ...\n```\n\n__Attempt to refactor the function using jQuery on your own.__ Reference [our implementation](https://github.com/Bloc/curriculum-public/blob/master/web-development/frontend/foundation/31-jquery-play-pause/clickhandler-jquery.js) for assistance. Message your mentor if you need help before consulting our solution.\n\n## Remove Deprecated Code\n\nRemove the code for `findParentByClassName()`, `getSongItem()`, and the previous `clickHandler()`. jQuery renders these methods unnecessary:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var createSongRow = function(songNumber, songName, songLength) {\n     ...\n };\n\n-var findParentByClassName = function(element, targetClass) {\n-    var currentParent = element.parentElement;\n-    while (currentParent.className != targetClass) {\n-        currentParent = currentParent.parentElement\n-    }\n-    return currentParent;\n-};\n-\n-var getSongItem = function(element) {\n-    switch (element.className) {\n-        case 'album-song-button':\n-        case 'ion-play':\n-        case 'ion-pause':\n-            return findParentByClassName(element, 'song-item-number');\n-        case 'album-view-song-item':\n-            return element.querySelector('.song-item-number');\n-        case 'song-item-title':\n-        case 'song-item-duration':\n-            return findParentByClassName(element, 'album-view-song-item').querySelector('.song-item-number');\n-        case 'song-item-number':\n-            return element;\n-        default:\n-            return;\n-    }\n-};\n-\n-var clickHandler = function(targetElement) {\n-    var songItem = getSongItem(targetElement);\n-\n-    if (currentlyPlayingSong === null) {\n-        songItem.innerHTML = pauseButtonTemplate;\n-        currentlyPlayingSong = songItem.getAttribute('data-song-number');\n-    } else if (currentlyPlayingSong === songItem.getAttribute('data-song-number')) {\n-        songItem.innerHTML = playButtonTemplate;\n-        currentlyPlayingSong = null;\n-    } else if (currentlyPlayingSong !== songItem.getAttribute('data-song-number')) {\n-        var currentlyPlayingSongElement = document.querySelector('[data-song-number=\"' + currentlyPlayingSong + '\"]');\n-        currentlyPlayingSongElement.innerHTML = currentlyPlayingSongElement.getAttribute('data-song-number');\n-        songItem.innerHTML = pauseButtonTemplate;\n-        currentlyPlayingSong = songItem.getAttribute('data-song-number');\n-    }\n-};\n ...\n```\n\nFinally, remove the `click` event listener from the `$(document).ready()` call, and remove the variables that selected the song rows and song list container. The operations in `createSongRow()` replace their functionality:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n-var songListContainer = document.getElementsByClassName('album-view-song-list')[0];\n-var songRows = document.getElementsByClassName('album-view-song-item');\n\n var playButtonTemplate = '<a class=\"album-song-button\"><span class=\"ion-play\"></span></a>';\n var pauseButtonTemplate = '<a class=\"album-song-button\"><span class=\"ion-pause\"></span></a>';\n\n var currentlyPlayingSong = null;\n\n $(document).ready(function() {\n     setCurrentAlbum(albumPicasso);\n-    for (var i = 0; i < songRows.length; i++) {\n-        songRows[i].addEventListener('click', function(event) {\n-            clickHandler(event.target);\n-        });\n-    }\n });\n```\n\n## Recap\n\n| Concept | Description |\n| ------- | ----------- |\n| `this` | References the object to which it is scoped, depending on the context of that scope. |\n| [`.find()`](https://api.jquery.com/find/) | jQuery's equivalent to `querySelector()`. It can be called on a selected jQuery-wrapped element to find any child that matches the specified selector.\n| [`.click()`](https://api.jquery.com/click/) | jQuery's event handler for click events. |\n| [`.hover()`](https://api.jquery.com/hover/) | jQuery's shorthand for an event that handles both `mouseenter` and `mouseleave` behavior. In the case of event delegation, it uses `mouseover` and `mouseout`. |\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"1. Use [this JS Bin](http://jsbin.com/haxalo/1/edit?html,js,output) to create two jQuery event handlers that:\n    - Using `click()`, sets the text of the element with the `event-element` class to \"Clicked!\"\n    - Using `hover()`, sets the text of the element with the `event-element` class to \"Moused over!\" with the first callback and \"Moused left!\" with the second.\n    - The end behavior should match the video below:\n\n    <center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Album%20Play%20Pause%20with%20jQuery/refactor_play_pause_jquery_assignment.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Album%20Play%20Pause%20with%20jQuery/refactor_play_pause_jquery_assignment.mp4) the preview directly.\n    </video></center>\n\n2. When complete, submit your JS Bin URL to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n- <a href=\"//fast.wistia.net/embed/iframe/lrfypwc8jm?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">jQuery Events Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>18, "checkpoint_type"=>"normal", "position"=>18, "points"=>1, "ref"=>"42ad1e5c-bf23-4692-b0bd-dd0622903855|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2091", "assessment"=>nil}, {"id"=>2092, "name"=>"jQuery: Next and Previous Buttons", "summary"=>"Next and Previous Buttons: move between songs", "body"=>"<!-- { ids:[2092], name:'jQuery: Next and Previous Buttons', summary:'Next and Previous Buttons: move between songs' } -->\n\n## Overview and Purpose\n\nThis checkpoint uses jQuery to implement complex JavaScript behavior for moving between songs.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Assess a problem and attempt to devise a solution in pseudo-code or plain English.\n- Translate pseudo-code or plain English actions into JavaScript.\n- Recognize and use a number of jQuery methods – such as `.html()`, `.text()`, etc.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/8z17y9chpo\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe>\n<script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nWe've used jQuery selectors to retrieve the song data using methods like `attr()`. As we add features that require us to use the same data in multiple places, finding data via selectors becomes inefficient. We want data in our application to populate the interface, not the other way around. To streamline the source of song and album data, we'll add functions that keep track of this information using JavaScript objects and arrays.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Move Album Data\n\nCreate a new file called `fixtures.js`:\n\n```bash(~/bloc/bloc-jams/)\n$ touch scripts/fixtures.js\n```\n\nMove the album objects from `album.js` into the new `fixtures.js` file:\n\n```js(~/bloc/bloc-jams/scripts/fixtures.js)\n+var albumPicasso = {\n+    title: 'The Colors',\n+    artist: 'Pablo Picasso',\n+    label: 'Cubism',\n+    year: '1881',\n+    albumArtUrl: 'assets/images/album_covers/01.png',\n+    songs: [\n+        { title: 'Blue', duration: '4:26' },\n+        { title: 'Green', duration: '3:14' },\n+        { title: 'Red', duration: '5:01' },\n+        { title: 'Pink', duration: '3:21' },\n+        { title: 'Magenta', duration: '2:15' }\n+    ]\n+};\n+\n+var albumMarconi = {\n+    title: 'The Telephone',\n+    artist: 'Guglielmo Marconi',\n+    label: 'EM',\n+    year: '1909',\n+    albumArtUrl: 'assets/images/album_covers/20.png',\n+    songs: [\n+        { title: 'Hello, Operator?', duration: '1:01' },\n+        { title: 'Ring, ring, ring', duration: '5:01' },\n+        { title: 'Fits in your pocket', duration: '3:21' },\n+        { title: 'Can you hear me now?', duration: '3:14' },\n+        { title: 'Wrong phone number', duration: '2:15' }\n+    ]\n+};\n```\n\nDelete the albums from the top of `album.js`:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n-var albumPicasso = {\n-    title: 'The Colors',\n-    artist: 'Pablo Picasso',\n-    label: 'Cubism',\n-    year: '1881',\n-    albumArtUrl: 'assets/images/album_covers/01.png',\n-    songs: [\n-        { title: 'Blue', duration: '4:26' },\n-        { title: 'Green', duration: '3:14' },\n-        { title: 'Red', duration: '5:01' },\n-        { title: 'Pink', duration: '3:21' },\n-        { title: 'Magenta', duration: '2:15' }\n-    ]\n-};\n-\n-var albumMarconi = {\n-    title: 'The Telephone',\n-    artist: 'Guglielmo Marconi',\n-    label: 'EM',\n-    year: '1909',\n-    albumArtUrl: 'assets/images/album_covers/20.png',\n-    songs: [\n-        { title: 'Hello, Operator?', duration: '1:01' },\n-        { title: 'Ring, ring, ring', duration: '5:01' },\n-        { title: 'Fits in your pocket', duration: '3:21' },\n-        { title: 'Can you hear me now?', duration: '3:14' },\n-        { title: 'Wrong phone number', duration: '2:15' }\n-    ]\n-};\n ...\n```\n\nInclude the `fixtures.js` file in a script tag at the bottom of `album.html`:\n\n```html(~/bloc/bloc-jams/album.html)\n ...\n     <script src=\"https://code.jquery.com/jquery-2.1.3.min.js\"></script>\n+    <script src=\"scripts/fixtures.js\"></script>\n     <script src=\"scripts/album.js\"></script>\n ...\n```\n\n## Track Current Song Data\n\nHere are the goals of this checkpoint's code:\n\n- We want to use the album data stored in `fixtures.js` to track our current song and album by storing them in variables.\n- We want to match the currently playing song's object with its corresponding index in the `songs` array.\n- When we call the _next_ and _previous_ functions in our application, they should increment or decrement the index of the current song in the array, respectively.\n\n## Store Current Album and Song Information\n\n>We want to use the album data stored in `fixtures.js` to track our current song and album by storing them in variables.\n\nThus far, Bloc Jams has used `currentlyPlayingSong` to track information about the music playing. We need to store more data about the currently playing music to track the song properly for _next_ and _previous_ functionality. We can store the current album information by adding a variable above the `$document.ready()` block called `currentAlbum`:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var currentlyPlayingSong = null;\n+var currentAlbum = null;\n\n $(document).ready(function() {\n ...\n```\n\nThen, assign the variable to `album`, the argument in the existing `setCurrentAlbum()` function:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var setCurrentAlbum = function(album) {\n+    currentAlbum = album;\n     var $albumTitle = $('.album-view-title');\n ...\n```\n\nWe've used the `currentlyPlayingSong` variable to store the number of the current song, but we'll rename it to `currentlyPlayingSongNumber` to be more explicit. Add the new variable to `album.js`, along with a `currentSongFromAlbum` variable that will hold the currently playing song object from the `songs` array:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n-var currentlyPlayingSong = null;\n // #1\n var currentAlbum = null;\n+var currentlyPlayingSongNumber = null;\n+var currentSongFromAlbum = null;\n\n $(document).ready(function() {\n ...\n```\n\nWe now have a set of variables in the global scope that hold current song and album information (at __#1__).\n\n## Update Methods to Use the New Variables\n\nThe `clickHandler()`, `onHover`, and `offHover` methods relied on `currentlyPlayingSong` to determine their behavior. We also need to update the `currentSongFromAlbum` variable when a new song number is established.\n\n__Attempt to refactor the `clickHandler()`, `offHover()`, and `onHover()` on your own using the new variables.__ Consult your mentor for help if you have trouble. Check your work against [our sample implementation](https://github.com/Bloc/curriculum-public/blob/master/web-development/frontend/foundation/32-jquery-next-and-previous-buttons/createsongrow-refactor.diff) after your attempt.\n\n## Use the Song Data to Update the Player Bar\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Next%20and%20Previous%20with%20jQuery/updating_player_bar_song.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Next%20and%20Previous%20with%20jQuery/updating_player_bar_song.mp4) the preview directly.\n</video></center>\n\n>The player bar information updating when we play a new song.\n\nWith the new variables holding the current song information, we can easily share this information with the player bar. Remove our beloved placeholder song from `album.html`:\n\n```html(~/bloc/bloc-jams/album.html)\n ...\n-                    <h2 class=\"song-name\">My dumb song</h2>\n+                    <h2 class=\"song-name\"></h2>\n ...\n```\n\n```html(~/bloc/bloc-jams/album.html)\n ...\n-                    <h2 class=\"artist-song-mobile\">My dumb song - Fallout Boy</h2>\n-                    <h3 class=\"artist-name\">Fallout Boy</h3>\n+                    <h2 class=\"artist-song-mobile\"></h2>\n+                    <h3 class=\"artist-name\"></h3>\n ...\n```\n\nWrite a function called `updatePlayerBarSong()` that updates the text of the `<h2>` tags that contain the song name and the artist name. Reference data from the current song variables to populate them. __Try it on your own first.__ Message your mentor with questions, and check your answer with [our sample implementation](https://github.com/Bloc/curriculum-public/blob/master/web-development/frontend/foundation/32-jquery-next-and-previous-buttons/update-player-song.js#L6-L12).\n\n### Toggle the Player Bar \"Play\" Button\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Next%20and%20Previous%20with%20jQuery/toggle_player_bar_play_pause_2.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Next%20and%20Previous%20with%20jQuery/toggle_player_bar_play_pause_2.mp4) the preview directly.\n</video></center>\n\n> The player bar toggling between play and pause with the individual song rows.\n\nIn a music player like Bloc Jams, the player bar should reflect whether a song is playing or paused.\n\n![Screenshot of the player bar where the icon should be switching](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/Functional%20Next%20and%20Previous%20with%20jQuery/player_bar_play_icon_location_with_arrow.png)\n\nAdd two new templates that hold the Ionicon for the play and pause button, so we can easily set the HTML of the player bar when we've played a new song:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var playButtonTemplate = '<a class=\"album-song-button\"><span class=\"ion-play\"></span></a>';\n var pauseButtonTemplate = '<a class=\"album-song-button\"><span class=\"ion-pause\"></span></a>';\n+var playerBarPlayButton = '<span class=\"ion-play\"></span>';\n+var playerBarPauseButton = '<span class=\"ion-pause\"></span>';\n\n var currentAlbum = null;\n ...\n```\n\nAnd add a line of code to the end of `updatePlayerBarSong()` that updates the HTML of the play/pause button to the content of `playerBarPauseButton`:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var updatePlayerBarSong = function() {\n\n     ...\n\n+    $('.main-controls .play-pause').html(playerBarPauseButton);\n };\n ...\n```\n\nFinally, add a call to `updatePlayerBarSong()` in the `clickHandler()` conditional when a new song is played, and revert the HTML of the element to the `playerBarPlayButton` template when the song is paused:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n         if (currentlyPlayingSongNumber !== songNumber) {\n             $(this).html(pauseButtonTemplate);\n             currentlyPlayingSongNumber = songNumber;\n             currentSongFromAlbum = currentAlbum.songs[songNumber - 1];\n+            updatePlayerBarSong();\n         } else if (currentlyPlayingSongNumber === songNumber) {\n             $(this).html(playButtonTemplate);\n+            $('.main-controls .play-pause').html(playerBarPlayButton);\n             currentlyPlayingSongNumber = null;\n             currentSongFromAlbum = null;\n         }\n ...\n```\n\n## Track the Index of the Current Song\n\n> We want to match the currently playing song's object with its corresponding index in the `songs` array.\n\nFollowing the goal we set earlier, create a helper method with two arguments, `album` and `song`, that returns the index of a song found in album's `songs` array:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var setCurrentAlbum = function(album) {\n     ...\n };\n+\n+var trackIndex = function(album, song) {\n+    return album.songs.indexOf(song);\n+};\n ...\n```\n\n## Implement the `nextSong()` Function\n\n> When we call the _next_ and _previous_ functions in our application, they should increment or decrement the index of the current song in the array, respectively.\n\nLet's expand this requirement and be more specific. The `nextSong()` function should:\n\n- Know what the previous song is. This includes the situation in which the next song is the first song, following the final song in the album (that is, it should \"wrap\" around).\n- Use the `trackIndex()` helper function to get the index of the current song and then increment the value of the index.\n- Set a new current song to `currentSongFromAlbum`.\n- Update the player bar to show the new song.\n- Update the HTML of the previous song's `.song-item-number` element with a number.\n- Update the HTML of the new song's `.song-item-number` element with a pause button.\n\nGiven the details above, __try to write the `nextSong()` function on your own, first.__ Consult your mentor for help if needed. Check your work against [our own implementation](https://github.com/Bloc/curriculum-public/blob/master/web-development/frontend/foundation/32-jquery-next-and-previous-buttons/next-song.js).\n\n## Implement the `previousSong()` Function\n\nThe implementation of the `previousSong()` function follows the same steps, except that the first detail will be different when switching to a previous song.\n\nAlso, after getting the index of the current song in this function, we should _decrement_ it, not increment it.\n\nFollow the same procedure as the prior section: __try writing `previousSong()`__, message your mentor with questions, and check it [against our implementation](https://github.com/Bloc/curriculum-public/blob/master/web-development/frontend/foundation/32-jquery-next-and-previous-buttons/previous-song.js).\n\n## Add Event Handlers\n\nCreate variables at the bottom of `album.js` to hold jQuery selectors for the next and previous buttons:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var currentSongFromAlbum = null;\n+\n+var $previousButton = $('.main-controls .previous');\n+var $nextButton = $('.main-controls .next');\n\n $(document).ready(function() {\n ...\n```\n\nAdd jQuery click event handlers on each respective variable to the `$(document).ready()` block:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n $(document).ready(function() {\n     setCurrentAlbum(albumPicasso);\n+    $previousButton.click(previousSong);\n+    $nextButton.click(nextSong);\n });\n```\n\n## Enforce Consistent Data Types\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Next%20and%20Previous%20with%20jQuery/type_inconsistency_hover_error_2.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Next%20and%20Previous%20with%20jQuery/type_inconsistency_hover_error_2.mp4) the preview directly.\n</video></center>\n\n> An error occurs from inequality in types between `songNumber` and `currentlyPlayingSongNumber`.\n\nIf we hover over a song row after clicking next or previous, we find that the play button switches back to the song number of the row. This behavior occurs because the type of `songNumber` and `currentlyPlayingSongNumber` are different, and the conditional in the `onHover` and `offHover` functions uses <C>1369#booleans | strict equality</C> to evaluate the conditional statements.\n\nThe jQuery `attr()` method retrieves the numbers with a string data type, whereas `currentlyPlayingSongNumber` is either type object or number. Add this line to the `offHover()` function to test the types:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\nconsole.log(\"songNumber type is \" + typeof songNumber + \"\\n and currentlyPlayingSongNumber type is \" + typeof currentlyPlayingSongNumber);\n```\n\nUse the `parseInt()` function to convert all song number references to integers. Wrap every variable assignment involving a song number in a `parseInt()` call. For example, we would refactor the first variable assignment in `clickHandler()` to:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\nvar songNumber = parseInt($(this).attr('data-song-number'));\n```\n\n__Wrap every variable assignment involving a song number in a `parseInt()` call.__\n\nTest the `onHover` and `offHover` behavior after, and the next and previous functionality should work as shown below.\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Next%20and%20Previous%20with%20jQuery/functional_next_and_previous_jquery_completed.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Next%20and%20Previous%20with%20jQuery/functional_next_and_previous_jquery_completed.mp4) the preview directly.\n</video></center>\n\n## Recap\n\n| __Concept__ | __Description__ |\n| ----------- | --------------- |\n| \"Fixtures\" data file | A file used for holding static data, often used to supply sample data for an application. |\n| `parseInt()` | One of few JavaScript functions for converting data to numbers. |\n| [`indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) | Returns the first index at which a given element can be found in the array, or -1 if it is not present. |\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"__Before You Begin__: Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nWe update `currentlyPlayingSongNumber` and `currentSongFromAlbum` frequently, and almost always together.\n\nWe also select the element with the `.song-item-number` class frequently, using different references to a song number. For example:\n\n```js\n$('.song-item-number[data-song-number=\"' + currentlyPlayingSongNumber + '\"]');\n```\n\n1. Create a `setSong` function that takes one argument, `songNumber`, and assigns `currentlyPlayingSongNumber` and `currentSongFromAlbum` a new value based on the new song number.\n2. Replace all instances where we manually assign values to these functions with a call to `setSong()`.\n\n    > Review the [`clickHandler()` refactor](https://github.com/Bloc/curriculum-public/blob/master/web-development/frontend/foundation/32-jquery-next-and-previous-buttons/createsongrow-refactor.diff) for the best implementation.\n\n3. Write a function named `getSongNumberCell` that takes one argument, `number`, and returns the song number element that corresponds to that song number.\n4. Replace all instances where we use the selector with a `getSongNumberCell()` call.\n\n__When You're Done__: Commit your assignment work in Git. __This assignment should be merged.__ See [Git Checkpoint Workflow: __Mergeable Assignments__](https://www.bloc.io/resources/git-checkpoint-workflow#mergeable-assignments) for details.\n\n### Extra Credit\n\nCreate a feature branch for this extra credit challenge. Do _not_ merge it when finished.\n\nRefactor the `nextSong` and `prevSong` functions to be a single function that performs both actions as needed.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n- <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script>\n<div class=\"wistia_embed wistia_async_bg9uhffh69 popover=true popoverContent=link videoFoam=false\" style=\"display:inline\"><a href=\"#\">`setSong()` and `getSongNumberCell()` Solution</a></div>", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>19, "checkpoint_type"=>"normal", "position"=>19, "points"=>1, "ref"=>"9a13f09b-84f9-4ca2-a543-fa0a07053976|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2092", "assessment"=>nil}, {"id"=>2093, "name"=>"jQuery: Buzz Library", "summary"=>"Buzz JavaScript Library: play audio files", "body"=>"<!-- { ids:[2093], name:'jQuery: Buzz Library', summary:'Buzz JavaScript Library: play audio files' } -->\n\n## Overview and Purpose\n\nThis checkpoint introduces the Buzz music library for playing audio files.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Include the Buzz music library in an application.\n- Play an audio file using the Buzz API.\n- Explain what the `buzz.sound` constructor function returns.\n- Use a number of Buzz methods to manage audio file playback – such as `.play()`, `.pause()`, `.stop()`, `isPaused()`, etc.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/5ojmupytmh\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe>\n<script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nBloc Jams has been a silent music player so far, and it's time to change that. We'll use the [Buzz music library](http://buzz.jaysalvat.com/) to play and pause music in our application. We've already written many of the functions required to update the interface, so we'll focus more on helper methods that use Buzz to change song playback, volume, and state.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Download mp3s and Add the Buzz Library\n\nCreate a subdirectory in `assets` called `music` to hold the files we'll add to Bloc Jams:\n\n```bash(~/bloc/bloc-jams/)\n$ mkdir assets/music\n```\n\n[Download the .zip of the mp3s](https://bloc-global-assets.s3.amazonaws.com/bloc-jams-music/bloc_jams_music.zip) and move them into `assets/music`. There should be five songs that match the names of the songs in the `albumPicasso` object.\n\nAdd an `audioUrl` property to each song in the `songs` array of `albumPicasso`, and set the value to the corresponding path of the mp3:\n\n```js(~/bloc/bloc-jams/scripts/fixtures.js)\n var albumPicasso = {\n     title: 'The Colors',\n     artist: 'Pablo Picasso',\n     label: 'Cubism',\n     year: '1881',\n     albumArtUrl: 'assets/images/album_covers/01.png',\n     songs: [\n-        { title: 'Blue', duration: '4:26' },\n-        { title: 'Green', duration: '3:14' },\n-        { title: 'Red', duration: '5:01' },\n-        { title: 'Pink', duration: '3:21'},\n-        { title: 'Magenta', duration: '2:15'}\n+        { title: 'Blue', duration: '4:26', audioUrl: 'assets/music/blue' },\n+        { title: 'Green', duration: '3:14', audioUrl: 'assets/music/green' },\n+        { title: 'Red', duration: '5:01', audioUrl: 'assets/music/red' },\n+        { title: 'Pink', duration: '3:21', audioUrl: 'assets/music/pink' },\n+        { title: 'Magenta', duration: '2:15', audioUrl: 'assets/music/magenta' }  \n     ]\n };\n ...\n```\n\n>Note that we don't add the `.mp3` extension to the end of the audio files. We'll specify the file type when we use the files with Buzz.\n\nAdd Buzz library's CDN link to `album.html`:\n\n```html(~/bloc/bloc-jams/album.html)\n ...\n     <script src=\"https://code.jquery.com/jquery-2.1.3.min.js\"></script>\n+    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/buzz/1.1.10/buzz.min.js\"></script>\n     <script src=\"scripts/fixtures.js\"></script>\n     <script src=\"scripts/album.js\"></script>\n ...\n```\n\n>We put the script reference before `fixtures.js` and `album.js` because the Buzz functionality needs to load before the code in which reference it.\n\n## Wrap Song in a Buzz Object\n\nTo use Buzz's API on audio files, we need to wrap an audio file in the `buzz.sound` constructor function. The function returns a Buzz `sound` object, which is instantiated using the `new` keyword. It requires at least one argument, a link to an audio file (or array of audio files), but also takes an optional settings object.\n\nBefore we use one of our songs in a `buzz.sound` call, create a global variable called  `currentSoundFile`:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var currentlyPlayingSongNumber = null;\n var currentSongFromAlbum = null;\n+var currentSoundFile = null;\n ...\n```\n\nWe'll store the `sound` object in this variable when we set a new current song. The `setSong()` function handles the assignment of the current song, so we should create the `sound` object there and assign it to `currentSoundFile`:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var setSong = function(songNumber) {\n     currentlyPlayingSongNumber = parseInt(songNumber);\n     currentSongFromAlbum = currentAlbum.songs[songNumber - 1];\n     // #1\n+    currentSoundFile = new buzz.sound(currentSongFromAlbum.audioUrl, {\n         // #2\n+        formats: [ 'mp3' ],\n+        preload: true\n+    });\n };\n ...\n```\n\nAt __#1__, we assign a new Buzz `sound` object. We've passed the audio file via the `audioUrl` property on the `currentSongFromAlbum` object.\n\nAt __#2__, we've passed in a settings object that has two properties defined, `formats` and `preload`. `formats` is an array of strings with acceptable audio formats. We've only included the `'mp3'` string because all of our songs are mp3s. Setting the `preload` property to `true` tells Buzz that we want the mp3s loaded as soon as the page loads.\n\n## Play Music Using Existing Functions\n\nWe want to implement play and pause behavior with music. To do so, we need to redefine what our application has understood \"pause\" to mean so far.\n\nBefore adding music, we couldn't _actually_ pause songs because pausing a song means _freezing the song at a specific time_. If we don't have music files to play, then no time elapses to establish a moment where we can pause them.\n\nWith the addition of music, we now have three states:\n\n| State | Description |\n|-------|-------------|\n| __Stopped__ | The _stopped_ state means that `currentlyPlayingSongNumber`, `currentSongFromAlbum`, and `currentSoundFile` are all `null`. It only exists before we've clicked a song. |\n| __Playing__ | _Playing_ means that  `currentlyPlayingSongNumber`, `currentSongFromAlbum`, and `currentSoundFile` are defined based on the song whose play button was clicked. |\n| __Paused__ | In the _paused_ state, the current time elapsed in the song is greater than zero, and `currentlyPlayingSongNumber`, `currentSongFromAlbum`, and `currentSoundFile` are all defined. It may only exist after we've played a song. |\n\n### Refactor `clickHandler()`\n\nWe need to refactor `clickHandler` to reflect this new playback approach. That means:\n\n- In the second conditional statement, when the user clicks a song that is not the currently playing song, we need to play the `currentSoundFile` after calling `setSong()`.\n- In the third conditional statement, when the user clicks the pause button for the same song that is playing, we need to get rid of the logic that sets the `currentlyPlayingSongNumber` and `currentSongFromAlbum` to `null`. We should replace it with a conditional statement that checks if the `currentSoundFile` is paused:\n  - If it is, we need to start playing the song again and revert the icon in the song row and the player bar to the pause button.\n  - If it isn't paused, we need to pause it and set the content of the song number cell and player bar's pause button back to the play button.\n\nBuzz has `play()` and `pause()` methods that will play and pause audio files. For the third conditional in `clickHandler()`, we'll use Buzz's `isPaused()` method on `currentSoundFile` to check if the song is paused or not. __Try implementing the new `clickHandler()` behavior on your own based on the requirements we've defined above.__\n\nReference the [Methods section of the Buzz documentation](http://buzz.jaysalvat.com/documentation/sound/) for clarification on the `buzz.sound` APIs. Message your mentor with any questions, and compare your answer to [our implementation](https://github.com/Bloc/curriculum-public/blob/master/web-development/frontend/foundation/33-jquery-buzz-library/click-handler-with-buzz.diff).\n\n### Prevent Multiple Songs From Playing Concurrently\n\nWe need to make an addition to the `setSong()` function to prevent concurrent playback. If we click to play a different song before a the current song is finished, we need to stop the current song before we set a new one. Add a conditional statement to the beginning of `setSong()` that checks for a defined `currentSoundFile` and then runs `currentSoundFile.stop()` if `true`:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var setSong = function(songNumber) {\n+    if (currentSoundFile) {\n+        currentSoundFile.stop();\n+    }\n+\n     currentlyPlayingSongNumber = parseInt(songNumber);\n\n     ...\n\n };\n ...\n```\n\n### Play Songs When Skipping\n\nAdd `currentSoundFile.play()` to `nextSong()` and `previousSong()` after the `setSong()` call:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var previousSong = function() {\n     ...\n     setSong(currentSongIndex + 1);\n+    currentSoundFile.play();\n     updatePlayerBarSong();\n     ...\n };\n\n var nextSong = function() {\n     ...\n     setSong(currentSongIndex + 1);\n+    currentSoundFile.play();\n     updatePlayerBarSong();\n     ...\n };\n ...\n```\n\n## Set Song Volume\n\nBuzz `sound` objects also have methods for handling volume that are based on a scale from 0-100, with 100 as the maximum volume. Create a `currentVolume` variable and set its initial value to 80:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var currentSongFromAlbum = null;\n var currentSoundFile = null;\n+var currentVolume = 80;\n ...\n```\n\nAdd a `setVolume()` function that takes one argument, a volume value, and wraps the Buzz `setVolume()` method with a conditional statement that checks to see if a `currentSoundFile` exists:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n var setSong = function(songNumber) {\n\n     ...\n\n     currentSoundFile = new buzz.sound(currentSongFromAlbum.audioUrl, {\n         formats: [ 'mp3' ],\n         preload: true\n     });\n+\n+    setVolume(currentVolume);\n };\n+\n+var setVolume = function(volume) {\n+    if (currentSoundFile) {\n+        currentSoundFile.setVolume(volume);\n+    }\n+};\n ...\n```\n\nClick any song's play button to enjoy some killer tunes.\n\n## Recap\n\n| **Concept** | **Description** |\n| ----------- | --------------- |\n| [Buzz](http://buzz.jaysalvat.com/) | A JavaScript audio library which uses the HTML5 audio element API. |\n| [Buzz `sound` Object](http://buzz.jaysalvat.com/documentation/sound/) | A constructor function that wraps audio files and provides methods and events for enabling, tracking, and manipulating them. |\n| [Buzz `setVolume()` Method](http://buzz.jaysalvat.com/documentation/sound/) | Set the volume of the sound. The range is 0-100. |\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"__Before You Begin__: Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nThe Bloc Jams player bar has a few features: it updates with a song when one is playing; its previous and next buttons switch songs; and the play button switches to a pause button when a song is played from a song row. It does _not_ allow the user to play and pause a song from the bar.\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Add%20the%20Buzz%20Library%20to%20Play%20Music/play_pause_from_player_bar.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Add%20the%20Buzz%20Library%20to%20Play%20Music/play_pause_from_player_bar.mp4) the preview directly.\n</video></center>\n\n1. Create a variable to hold the `$('.main-controls .play-pause')` selector and add a `click()` event to it in the `$(document).ready()` block with `togglePlayFromPlayerBar()` as an event handler.\n2. Write a function so that users _can_ play and pause a song from the bar, as shown in the demo above. The function should be named `togglePlayFromPlayerBar()`, take no arguments, and have the following behavior:\n    - If a song is paused and the play button is clicked in the player bar, it will\n        - Change the song number cell from a play button to a pause button\n        - Change the HTML of the player bar's play button to a pause button\n        - Play the song\n    - If the song is playing (so a current sound file exist), and the pause button is clicked\n        - Change the song number cell from a pause button to a play button\n        - Change the HTML of the player bar's pause button to a play button\n        - Pause the song\n\n__When You're Done__: Commit your assignment work in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details.", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>20, "checkpoint_type"=>"normal", "position"=>20, "points"=>1, "ref"=>"8dcdb3a2-8db9-494f-8c37-c0b80c2e7720|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2093", "assessment"=>nil}, {"id"=>2094, "name"=>"jQuery: Seek Bars", "summary"=>"Seek Bars: adjust the progress and volume of a song", "body"=>"<!-- { ids:[2094], name:'jQuery: Seek Bars', summary:'Seek Bars: adjust the progress and volume of a song' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Youtube: jQuery Mouse Events](https://www.youtube.com/watch?v=l4nACgCZcwY)\n* [jQuery: Mouse Events](https://api.jquery.com/category/events/mouse-events/)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint implements code to adjust the song progress and volume seek bars.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Discuss different mouse fire events.\n- Explain what `Math.min()` and `Math.max()` do.\n- Discuss jQuery event properties such as `pageX` and methods such as `offset()`.\n\n<iframe src=\"//fast.wistia.net/embed/iframe/ceo9s8yz6r\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe>\n<script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nWith playable music in our application, it's time to program usable seek bars to adjust the current time of the song and its volume. We'll develop seek bars that update as the song plays, and respond to mouse events that click or drag the thumb to a specific location.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Get Song Durations in Seconds\n\nTo implement functional seek bars, we need to have the song duration for each of our album tracks in seconds instead of fake strings. Replace the strings stored in each `length` property with the following values:\n\n```js(~/bloc/bloc-jams/scripts/fixtures.js)\n var albumPicasso = {\n     title: 'The Colors',\n     artist: 'Pablo Picasso',\n     label: 'Cubism',\n     year: '1881',\n     albumArtUrl: 'assets/images/album_covers/01.png',\n     songs: [\n-        { title: 'Blue', duration: '4:26', audioUrl: 'assets/music/blue' },\n-        { title: 'Green', duration: '3:14', audioUrl: 'assets/music/green' },\n-        { title: 'Red', duration: '5:01', audioUrl: 'assets/music/red' },\n-        { title: 'Pink', duration: '3:21', audioUrl: 'assets/music/pink' },\n-        { title: 'Magenta', duration: '2:15', audioUrl: 'assets/music/magenta' }\n+        { title: 'Blue', duration: 161.71, audioUrl: 'assets/music/blue' },\n+        { title: 'Green', duration: 103.96, audioUrl: 'assets/music/green' },\n+        { title: 'Red', duration: 268.45, audioUrl: 'assets/music/red' },\n+        { title: 'Pink', duration: 153.14, audioUrl: 'assets/music/pink' },\n+        { title: 'Magenta', duration: 374.22, audioUrl: 'assets/music/magenta' }\n     ]\n };\n ...\n```\n\n## A Generic Method for Updating Seek Bars\n\nBefore writing any code, consider the functionality required of a generic method to update any seek bar:\n\n- The function must take two arguments, one for the seek bar to alter (either the volume or audio playback controls) and one for the ratio that will determine the `width` and `left` values of the `.fill` and `.thumb` classes, respectively.\n- The ratio must be converted to a percentage so we can set the CSS property values as percents.\n- The percentage must be passed into jQuery functions that set the `width` and `left` CSS properties.\n\nWith those constraints in mind, add the following code to `album.js` below the `setCurrentAlbum()` function:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n+var updateSeekPercentage = function($seekBar, seekBarFillRatio) {\n+   var offsetXPercent = seekBarFillRatio * 100;\n    // #1\n+   offsetXPercent = Math.max(0, offsetXPercent);\n+   offsetXPercent = Math.min(100, offsetXPercent);\n+\n    // #2\n+   var percentageString = offsetXPercent + '%';\n+   $seekBar.find('.fill').width(percentageString);\n+   $seekBar.find('.thumb').css({left: percentageString});\n+};\n ...\n```\n\nWe start by multiplying the ratio by 100 to determine a percentage. At __#1__, we use the built-in JavaScript `Math.max()` function to make sure our percentage isn't less than zero and the `Math.min()` function to make sure it doesn't exceed 100.\n\n> While we expect you to give 110% effort to the Bloc checkpoints, giving 110% to determine the position of our seek bar causes weird visual bugs and ugly errors.\n\nAt __#2__, we convert our percentage to a string and add the `%` character. When we set the `width` of the `.fill` class and the `left` value of the `.thumb` class, the CSS interprets the value as a percent instead of a unit-less number between 0 and 100.\n\n## Configure the Seek Bars\n\n`updateSeekPercentage()` is useless until we have a method for determining the `seekBarFillRatio`. Create a function called `setupSeekBars()` below `updateSeekPercentage()` and consider the following code which uses a `click` event to determine the fill width and thumb location of the seek bar:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n+var setupSeekBars = function() {\n+    var $seekBars = $('.player-bar .seek-bar');\n+\n+    $seekBars.click(function(event) {\n         // #3\n+        var offsetX = event.pageX - $(this).offset().left;\n+        var barWidth = $(this).width();\n         // #4\n+        var seekBarFillRatio = offsetX / barWidth;\n+\n         // #5\n+        updateSeekPercentage($(this), seekBarFillRatio);\n+    });\n+};\n ...\n```\n\nWe emphasized the importance of making our functions work for any seek bar, and we're satisfying that goal by selecting either seek bar with our `$seekBars` selector. The seek bar that updates will be determined by the target of the event.\n\nAt __#3__, we see a new property on the `event` object called `pageX`. This is a jQuery-specific event value, which holds the X (or horizontal) coordinate at which the event occurred (think of the X-Y coordinate plane that you hated in Algebra class).\n\nWe subtract the `offset()` of the seek bar held in `$(this)` from the left side. This may be difficult to visualize, so we've created a diagram below:\n\n![sketch of offsetX calculation](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/Function%20Seek%20Bars/event_pagex_offset_demo_player_bar_2.png)\n\nThe diagram illustrates how subtracting `$(this).offset().left` (the blue line) from the `event.pageX` value (the red line) leaves us with a resulting value that is a proportion of the seek bar (the green).\n\nAt __#4__, we divide `offsetX` by the width of the entire bar to calculate `seekBarFillRatio`.\n\nFinally, at __#5__, we pass `$(this)` as the `$seekBar` argument and `seekBarFillRatio` for its eponymous argument to `updateSeekBarPercentage()`.\n\nAdd `setupSeekBars()` to `$(document).ready()` and click the seek bars to test the new functionality.\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n $(document).ready(function() {\n    setCurrentAlbum(albumPicasso);\n+   setupSeekBars();\n ...\n```\n\n<center><video height=\" \" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Seek%20Bars/click_only_seek_bar.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Seek%20Bars/click_only_seek_bar.mp4) the preview directly.\n</video></center>\n\n>Seek bars with click functionality.\n\n## Drag Thumb Position Using Mouse Events\n\nDragging the seek bar's thumb involves three new events:\n\n1. `mousedown` which fires when the user presses their mouse down\n2. `mousemove` which fires anytime the mouse moves, regardless of which event precedes it\n3. `mouseup` which fires when the user releases their hold on the mouse\n\nAdd the following code below the `click()` event:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n var setupSeekBars = function() {\n    // #6\n     var $seekBars = $('.player-bar .seek-bar');\n\n     $seekBars.click(function(event) {\n        ...\n     });\n     // #7\n+    $seekBars.find('.thumb').mousedown(function(event) {\n         // #8\n+        var $seekBar = $(this).parent();\n+\n         // #9\n+        $(document).bind('mousemove.thumb', function(event){\n+            var offsetX = event.pageX - $seekBar.offset().left;\n+            var barWidth = $seekBar.width();\n+            var seekBarFillRatio = offsetX / barWidth;\n+\n+            updateSeekPercentage($seekBar, seekBarFillRatio);\n+        });\n+\n         // #10\n+        $(document).bind('mouseup.thumb', function() {\n+            $(document).unbind('mousemove.thumb');\n+            $(document).unbind('mouseup.thumb');\n+        });\n+    });\n };\n```\n\nAt __#6__, we are using jQuery to find all elements in the DOM with a class of `\"seek-bar\"` that are contained within the element with a class of `\"player-bar\"`. This will return a jQuery wrapped array containing both the song seek control and the volume control.\n\nAt __#7__, we `find` elements with a class of `.thumb` inside our `$seekBars` and add an event listener for the `mousedown` event. A `click` event fires when a mouse is pressed and released quickly, but the `mousedown` event will fire as soon as the mouse button is pressed down. In contrast to this, the `mouseup` event is the opposite: it fires when the mouse button is released. jQuery allows us access to a shorthand method of attaching the `mousedown` event by calling `mousedown` on a jQuery collection.\n\nAt __#8__, we are taking the context of the event and wrapping it in jQuery. In this scenario, `this` will be equal to the `.thumb` node that was clicked. Because we are attaching an event to both the song seek and volume control, this is an important way for us to determine which of these nodes dispatched the event. We can then use the `parent` method, which will select the immediate parent of the node. This will be whichever seek bar this `.thumb` belongs to.\n\n__#9__ introduces a new way to track events, [jQuery's `bind()` event](http://api.jquery.com/bind/). `bind()` behaves similarly to `addEventListener()` in that it takes a string of an event instead of wrapping the event in a method like we've seen with all other jQuery events thus far. We use `bind()` because it allows us to __namespace__ event listeners (we'll discuss namespacing, shortly). The event handler inside the `bind()` call is identical to the `click` behavior.\n\nWe've attached the `mousemove` event to `$(document)` to make sure that we can drag the thumb after mousing down, even when the mouse leaves the seek bar. This allows for a smoother experience for seeking to a song position. If we didn't take this approach, and instead attached the event handler directly to `$seekBar`, we would see the behavior shown in this video:\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Seek%20Bars/mousedown_bound_to_seekbar_error.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Seek%20Bars/mousedown_bound_to_seekbar_error.mp4) the preview directly.\n</video></center>\n\nNotice that we can't drag the thumb outside of the seek bar element, which creates a very narrow interface for adjusting song position. However, when we attach the `mousemove` event to `$(document)`, we can continue to drag the thumb as long as the mouse remains down:\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Seek%20Bars/mousedown_bound_to_document_correct_behavior.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Seek%20Bars/mousedown_bound_to_document_correct_behavior.mp4) the preview directly.\n</video></center>\n\nThe event handler on `$(document)` is the reason we need to use `bind()` with namespacing. In this case, namespacing is a technique to make the event more specific by attaching a string to it after a period. This way, if we ever attach another event listener for the `mousemove` event, the seek bar would only move if we also included the `.thumb` string.\n\n>The resemblance to the notation for a `.thumb` CSS selector is incidental. All jQuery event namespaces are offset with a period and followed by a string. We could have called it `.thumbOnSeekBar`, and it would still function the same way.\n\nFinally, at __#10__, we bind the `mouseup` event with a `.thumb` namespace. The event handler uses the `unbind()` event method, which removes the previous event listeners that we just added. If we fail to `unbind()` them, the thumb and fill would continue to move even after the user released the mouse. Comment out this block to demonstrate the unintended behavior.\n\n## Refactoring the Transition\n\nDragging the thumb works, but it looks visually awkward because the thumb delays when it seeks:\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Seek%20Bars/dragging_thumb_with_transition.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Seek%20Bars/dragging_thumb_with_transition.mp4) the preview directly.\n</video></center>\n\nThe culprit is the `transition` property we set on the `.seek-bar .thumb` selector in `player_bar.css`, which animates all properties of the thumb for 100ms. To fix this, we'll limit transitions to the properties which the `:hover` selector manipulates:\n\n```css(~/bloc/bloc-jams/styles/player_bar.css)\n ...\n .seek-bar .thumb {\n     ...\n-    transition: all 100ms ease-in-out;\n+    transition: width 100ms ease-in-out,\n+                height 100ms ease-in-out,\n+                margin-top 100ms ease-in-out,\n+                margin-left 100ms ease-in-out;\n }\n ...\n```\n\n`transition` can take multiple arguments that define transitions on specific properties. Now we only apply the transition to the `width`, `height`, `margin-top`, and `margin-left` properties. This removes the transition on the `left` property that caused the unwanted animation.\n\nCheck the result and the thumb should animate more cleanly:\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Seek%20Bars/dragging_thumb_with_without_transition.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Seek%20Bars/dragging_thumb_with_without_transition.mp4) the preview directly.\n</video></center>\n\n## Update the Seek Bar When a Song Plays\n\nThe interface for the seek bars works, but it doesn't affect the song position or volume. To address that need, add a function called `updateSeekBarWhileSongPlays()` with the following code above `updateSeekPercentage()`. Consider its implementation below:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n+var updateSeekBarWhileSongPlays = function() {\n+    if (currentSoundFile) {\n         // #10\n+        currentSoundFile.bind('timeupdate', function(event) {\n             // #11\n+            var seekBarFillRatio = this.getTime() / this.getDuration();\n+            var $seekBar = $('.seek-control .seek-bar');\n+\n+            updateSeekPercentage($seekBar, seekBarFillRatio);\n+        });\n+    }\n+};\n\n var updateSeekPercentage = function($seekBar, seekBarFillRatio) {\n ...\n```\n\nAt __#10__, we `bind()` the `timeupdate` event to `currentSoundFile`. `timeupdate` is a custom Buzz event that fires repeatedly while time elapses during song playback.\n\nAt __#11__, we use a new method for calculating the `seekBarFillRatio`. We use Buzz's `getTime()` method to get the current time of the song and the `getDuration()` method for getting the total length of the song. Both values return time in seconds.\n\n>Find the documentation for `getTime()` and `getDuration()` on the Buzz [sound API page](http://buzz.jaysalvat.com/documentation/sound/).\n\nWe need to trigger this method whenever a song plays, so __add `updateSeekBarWhileSongPlays()` to `clickHandler()`, `nextSong()`, and `previousSong()` after the `currentSoundFile.play()` call.__\n\nPlay a song and the seek bar moves with each passing second.\n\n## Seek to Parts of a Song\n\nThe seek bar updates while a song plays, but clicking a new location doesn't seek to the corresponding position in the song. We need to create a method that can change the current song's playback location. Name it `seek()` and add it to `album.js` above `setVolume()`:\n\n```js(~/bloc/bloc-jams/scripts/album.js)\n ...\n+var seek = function(time) {\n+    if (currentSoundFile) {\n+        currentSoundFile.setTime(time);\n+    }\n+}\n ...\n```\n\n`seek()` uses the Buzz `setTime()` method to change the position in a song to a specified time.\n\n## Differentiate Behavior Based on the Seek Bar\n\n`setupSeekBars()` configures the behavior for both the volume and playback seek bars. Add a conditional statement to each event handler with the following behavior:\n\n- Checks the class of the seek bar's parent to determine whether the current seek bar is changing the volume or seeking to a song position\n  - If it's the playback seek bar, seek to the position of the song determined by the `seekBarFillRatio`\n  - Otherwise, set the volume based on the `seekBarFillRatio`\n\n__Add the code that meets the requirements to `setupSeekBars()`__. Message your mentor for help if you find yourself struggling with it. Compare your answer with [our implementation](https://github.com/Bloc/curriculum-public/blob/master/web-development/frontend/foundation/34-jquery-seek-bars/setup-seekbars-setvolume-seek.js).\n\n## Setting Volume on Initial Song Play\n\nStarting a song for the first time sets a volume, but doesn't update fill and thumb of the volume seek bar. __Update `clickHandler()` to set the CSS of the volume seek bar to equal the `currentVolume`.__ Message your mentor for help and compare it against [our solution](https://github.com/Bloc/curriculum-public/blob/master/web-development/frontend/foundation/34-jquery-seek-bars/initial-volume-seekbar.diff).\n\n## Congratulations!\n\nAfter completing the assignment below, you will have completed the Foundation Phase for Frontend Web Development. Take a moment and reflect on how far you've come: you've learned how to structure and style a webpage with HTML and CSS; you learned about fundamental programming concepts using JavaScript; you've applied that JavaScript knowledge by dynamically altering the DOM; and you've conquered your first libraries in jQuery and Buzz. You are now well positioned to proceed to the Project Phase of the program and build some amazing things. You should be proud of how much you've learned, and also embrace the challenge ahead. Maintain the good habits you've developed through the Foundation Phase, and you __will__ succeed in the Project Phase.\n\nAnd again, we offer you a sincere congratulations:\n\n<center>\n![Michael Jordan congratulations](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Seek%20Bars/tune_squad_celebration.gif)\n</center>\n\n## Recap\n\n| **Concept** | **Description** |\n| ----------- | --------------- |\n| [`Math.min()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min) and [`Math.max()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max) | Each function takes two numbers as arguments and returns the minimum or maximum between the two. |\n| [`pageX`](http://api.jquery.com/event.pagex/) | A property on jQuery events that stores the location of the X coordinate where an event occurs in the browser window. `pageX` may be a [native browser-event property in the future](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/pageX), but for now, it's only a property on jQuery-wrapped events. |\n| [`offset()`](http://api.jquery.com/offset/) | A method for finding the distance between an element and the edge of the browser window. |\n| `mousedown`, `mousemove`, and `mouseup` | Mouse events that track when the user has pressed the mouse down, moved the mouse, or released the mouse, respectively. |\n| [`bind()`](http://api.jquery.com/bind/) | A jQuery and Buzz method that attaches behavior to an event. Allows namespacing. |\n| [`timeupdate`](http://buzz.jaysalvat.com/documentation/events/) | A Buzz event that fires repeatedly during audio playback. |\n| Namespacing | A technique for making a string or name more specific by adding a prefix or suffix. Used in Bloc Jams to more specifically identify events bound to the `document`, like `mousemove` and `mouseup`. |\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"__Before You Begin__: Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n1. Write a function called `setCurrentTimeInPlayerBar()` that takes one argument, `currentTime`, that sets the text of the element with the `.current-time` class to the current time in the song.\n    - Add the method to `updateSeekBarWhileSongPlays()` so the current time updates with song playback.\n2. Write a function called `setTotalTimeInPlayerBar()` that takes one argument, `totalTime`, that sets the text of the element with the `.total-time` class to the length of the song.\n    - Add the method to `updatePlayerBarSong()` so the total time is set when a song first plays.\n3. Write a function called `filterTimeCode` that takes one argument, `timeInSeconds`. It should:\n    - Use the [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat) method to get the seconds in number form.\n    - Store variables for whole seconds and whole minutes (hint: use [Math.floor() to round numbers down](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor)).\n    - Return the time in the format `X:XX`\n4. Wrap the arguments passed to `setCurrentTimeInPlayerBar()` and `setTotalTimeInPlayerBar()` in a `filterTimeCode()` call so the time output below the seek bar is formatted.\n5. Wrap the `songLength` variable in `createSongRow()` in a `filterTimeCode()` call so the time lengths are formatted.\n\nWhen you're done, the resulting behavior should match the example below:\n\n<center><video height=\"\" width=\"100%\" controls>\n    <source src=\"https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Seek%20Bars/functional_seekbars_completed_with_filters.mp4\" type=\"video/mp4\">\n    Your browser does not support HTML5 video, click [here to download](https://bloc-global-assets.s3.amazonaws.com/images-frontend/gifs/Functional%20Seek%20Bars/functional_seekbars_completed_with_filters.mp4) the preview directly.\n</video></center>\n\n__When You're Done__: Commit your assignment work in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details.", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>21, "checkpoint_type"=>"normal", "position"=>21, "points"=>1, "ref"=>"d0a656b2-6b3f-4f2d-9b60-d23574836f0c|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2094", "assessment"=>nil}, {"id"=>2095, "name"=>"Programming Reinforcement: Checkpoint 3", "summary"=>"Reinforce JavaScript programming and problem solving fundamentals through curated exercises", "body"=>"<!-- { ids:[2095], name:'Programming Reinforcement: Checkpoint 3', summary:'Reinforce JavaScript programming and problem solving fundamentals through curated exercises' } -->\n\n## Overview and Purpose\n\nThis checkpoint introduces three coding challenges to practice data types, math operators, arrays, functions, algorithms, and advanced control flow.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Understand the use, difference, and properties of JavaScript data types.\n- Use a modulo operator in an algorithm.\n- Demonstrate how to loop through and analyze an array of arrays in JavaScript.\n\n## Programming Reinforcement\n\nEach foundation checkpoint introduces new concepts, patterns, and assignments. We designed Bloc’s curriculum to push you to your learning limits. With that in mind, we’ve included breaks between lessons to reinforce programming concepts; this is the third of those breaks, known as Programming Reinforcement checkpoints.\n\nIn these checkpoints, you will complete coding challenges that help you master JavaScript and learn to think like a programmer. After you complete the challenges, you will meet with your mentor to discuss your solutions.\n\n- [Challenges](#challenges)\n- [Bonus Challenge: Find the Heavy Ball - Level Ubermaster](#bonus-challenge)\n- [Assignment](#assignment)\n  - [For Mentors](#for-mentors)\n\n<a name=\"challenges\"></a>\n## Challenges\n\nYou must solve these three Kata (challenges) before submitting the checkpoint. At this point in your program, your skill level meets or exceeds that required by each Kata. While they may challenge you, know that you are capable of completing each one.\n\n>Your mentor may help you, but we strongly encourage you attempt these on your own.\n\n| Kata | Hint |\n|:--|:--|\n| [Schedule Your Da(rra)y](https://www.codewars.com/kata/schedule-your-da-rra-y/javascript) | Write a function that, given three inputs, creates an an array of time allotted to work, broken up with time allotted with breaks. |\n| [Unique In Order](https://www.codewars.com/kata/unique-in-order/javascript) | Implement the function which takes as argument a sequence and returns a list of items without any elements with the same value next to each other and preserves the original order of elements. |\n| [Find the Odd Int](https://www.codewars.com/kata/find-the-odd-int/javascript) | Write a function that, given an array, finds the int that appears an odd number of times. |\n\n<a name=\"bonus-challenge\"></a>\n## Bonus Challenge: [Find the Heavy Ball - Level Ubermaster](http://www.codewars.com/kata/find-heavy-ball-level-ubermaster/train/javascript)\n\n>This bonus challenge is optional, but we strongly encourage you to attempt it.\n\nThis challenge will test your mathematic and pattern-building skills. This is the most difficult among the heavy ball finding Katas, but we believe you are more than capable of solving it. The tests provide your function with two values: a `scales` object and a `ball_count` variable.\n\nGiven `ball_count`, you must find the one number from `0` to `ball_count - 1` that is heavier than the others. The remaining balls weigh the same. To discover the heaviest ball, use `scales`. The `scales` object has one method, `getWeight(left, right)`. `left` and `right` must both be an array of balls, for example:\n\n```js\nscales.getWeight([0, 1, 2, 3, 4], [5, 6, 7, 8, 9]);\n```\n\nBalls may not repeat, and both arrays must be unique. `getWeight` returns `-1` if the `left` array is heavier, `1` if the `right` array is heavier, and `0` if they weigh the same. Let's consider the example above and assume that `4` is the heavier ball:\n\n```js\nscales.getWeight([0, 1, 2, 3, 4], [5, 6, 7, 8, 9]); // returns -1\nscales.getWeight([0, 1, 2, 3], [5, 6, 7, 8]); // returns 0\nscales.getWeight([1, 2], [3, 4]); // returns 1\n```\n\nYour solution must account for anywhere from 8 to 500 balls. Most importantly, you may invoke `getWeight` a limited number of times:\n\n| Ball Count | # `getWeight` Uses |\n| :-- | :-- |\n| 0-9 | 2 |\n| 10-27 | 3 |\n| 28-81 | 4 |\n| 82-243 | 5 |\n| 244-500 | 6 |\n\nWe recommend that you think about this problem before you begin coding. Take out a pencil and paper, and start solving it by hand. Write out the parameters of the problem, try to solve the base case (8 balls), then expand your algorithm to suit more balls.\n\n>**Big hint**: If you're struggling on this problem and are scratching your head, read on. The following hint will help: `getWeight` returns one of *three* possibilities.\n\n<a name=\"assignment\"></a>", "assignment"=>"- Complete all [mandatory challenges](#challenges).\n  - Submit the [link](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/programming-reinforcement-solution-link.png) to each of your solutions as part of your assignment.\n- Attempt the [Bonus Challenge](#bonus-challenge).\n  - Keep a log as you work through it and consider these questions when writing your report:\n    - What approaches did you try?\n    - Did you ever restart the process? If so, why?\n    - What steps did you take to solve the problem before you began coding?\n    - What was the most challenging aspect of the problem?\n    - Etc.\n  - If you complete the [Bonus Challenge](#bonus-challenge), submit the [link](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/programming-reinforcement-solution-link.png) to your solution.\n- Discuss your solutions and your struggles with your mentor.\n\n> Articulating your problem solving process is a valuable skill on the job and during technical interviews.\n\nRemember to click **Submit Final** on every challenge you complete, and notify your mentor when you do so. For challenges you *do not* complete, you may ask your mentor to review them with you.\n\n<a name=\"for-mentors\"></a>\n### For Mentors\n\nConsult this [document for reference](https://www.bloc.io/resources/javascript-programming-reinforcement-mentor-s-guide) for this and all future Frontend Programming Reinforcement checkpoints.", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>22, "checkpoint_type"=>"normal", "position"=>22, "points"=>1, "ref"=>"ae4eab78-8a9f-466c-a71b-079dc4c3d866|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2095", "assessment"=>nil}, {"id"=>2315, "name"=>"Quiz: Frontend Foundations: jQuery and JS Best Practices", "summary"=>"Quiz: Frontend Foundations: jQuery and JS Best Practices", "body"=>"", "assignment"=>"", "roadmap_section_id"=>184, "roadmap_section_ref"=>"1854edb0-257d-46e7-b6dc-d43d77128234|0", "default_student_access"=>"locked", "active_index"=>23, "checkpoint_type"=>"quiz", "position"=>23, "points"=>1, "ref"=>"960eb768-0976-4a85-9c58-fe2793b1fc7c|0", "exercises"=>false, "quiz_id"=>11, "path"=>"/checkpoints/2315", "assessment"=>nil}]}, {"id"=>185, "roadmap_id"=>38, "name"=>"Project: Portfolio", "time_estimate"=>"8 Hours", "point_ratio"=>0.0, "description"=>"", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"locked", "ref"=>"a38380d7-2f79-46a5-b721-5cfd79df2669|0", "section_type"=>"project", "checkpoints"=>[{"id"=>2129, "name"=>"Introduction", "summary"=>"As a developer, I want to build a personal portfolio", "body"=>"<!-- { ids:[2129], name:\"Introduction\", summary:\"As a developer, I want to build a personal portfolio\" } -->\n> If you already have a portfolio site we recommend that you work on other projects, and update your portfolio with the projects you build in this phase. There is no requirement to have two portfolio sites. One polished portfolio with robust content is sufficient.\n\n## Overview and Purpose\n\nIn this project you'll build a personal portfolio and blog to showcase your projects that you can present to potential clients and employers.\n\n## Objectives\n\nAfter this project, you should be able to:\n\n- Fork and clone a Jekyll theme.\n- Write a case study for a project.\n- Write a blog post.\n- Create a Contact page.\n- Add Google Analytics or a similar service to a project.\n- Deploy a project to GitHub pages.\n- Establish a custom domain name.\n\n## Use Case\n\nA personal portfolio and blog allows you to share your work and stories with potential employers. Writing project case studies help employers understand your development and implementation processes. Blogging helps you display your personality and insight.\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As a developer, I want to **fork and clone** a Jekyll portfolio theme | 1 |\n| As a developer, I want to **write a case study** for each project I've completed | 4 |\n| As a developer, I want to **write blog posts** about my journey into development | 3 |\n| As a developer, I want to allow visitors to **contact me** | 1 |\n| As a developer, I want to track **visits and visitors** of my portfolio | 1 |\n| As a developer, I want to **deploy** my portfolio to GitHub Pages | 1 |\n| As a developer, I want to use **a custom domain name** for my portfolio | 2 |\n\nLater user stories often rely on the completion of the former, therefore, work on them in the order prescribed.\n\n## Implementation Examples\n\nBefore creating your own portfolio, you should view other examples to draw inspiration from.\n\n| **Portfolio** | **Explanation** |\n| :-- | :-- |\n| [Mattt Thompson](http://nshipster.com/authors/mattt-thompson/) | Mattt Thompson blogs at NSHipster, sharing code snippets and detailed explanation on topics. |\n| [Ben Dodson](http://bendodson.com/weblog/) | Ben Dodson writes about his work and includes links to his apps in the App Store. |\n| [Tim Boelaars](http://www.timboelaars.nl/) | Tim Boelaars specializes in logo and icon design. His portfolio is simple and elegant, featuring the work he's completed along with short case studies for each. |\n| [Ryan Johnson](http://ryjohnson.com/) | Each project completed by Ryan Johnson features several images to provide depth in his design process. |\n| [Meagan Fisher](http://owltastic.com/) | Meagan Fisher showcases her work, blog posts, as well as items she finds to be inspiring. |\n| [Haraldur Thorleifsson](http://haraldurthorleifsson.com/) | Haraldur Thorleifsson's portfolio features several projects, each with an in-depth case study around his design process, thinking, and creation. |", "assignment"=>"Acquaint yourself with the user stories.\n\nMessage your mentor, letting him/her know that you’re going to build your portfolio.", "roadmap_section_id"=>185, "roadmap_section_ref"=>"a38380d7-2f79-46a5-b721-5cfd79df2669|0", "default_student_access"=>"locked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"7aaae277-5fb3-473d-84dc-9cee41c54c51|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2129", "assessment"=>nil}, {"id"=>2130, "name"=>"Fork and Clone a Template", "summary"=>"As a developer, I want to fork and clone a Jekyll portfolio theme", "body"=>"<!-- { ids:[2130], name:\"Fork and Clone a Template\", summary:\"As a developer, I want to fork and clone a Jekyll portfolio theme\" } -->\n>As a developer, I want to **fork and clone** a Jekyll portfolio theme<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\nCreate a Jekyll-based portfolio using one of the two templates we developed:\n\n- [Portfolio Kami](https://github.com/Bloc/portfolio-kami/)\n- [Portfolio Iro](https://github.com/Bloc/portfolio-iro/)\n\nThe video below demonstrates how to install Jekyll, fork the repository, and run it locally on your machine:\n\n<center><iframe src=\"//fast.wistia.net/embed/iframe/mehq3eu3d5\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script></center>\n\n## Install Jekyll\n\nJekyll allows you to create static websites and blogs using Markdown, Liquid, HTML and CSS. You can host the site for free using GitHub Pages. To use it, you must install Jekyll:\n\n```bash\n$ gem install jekyll\n```\n\n## Fork and Clone the Repository\n\nSelect the template you wish to use:\n\n### Portfolio Kami\n\n<center>![Portfolio Kami](https://bloc-global-assets.s3.amazonaws.com/portfolio/portfolio-kami.png)</center>\n\n- [Source](https://github.com/Bloc/portfolio-kami/)\n- [Demo](http://madebymunsters.github.io/portfolio-kami/)\n\n### Portfolio Iro\n\n<center>![Portfolio Iro](https://bloc-global-assets.s3.amazonaws.com/portfolio/portfolio-iro.png)</center>\n\n- [Source](https://github.com/Bloc/portfolio-iro/)\n- [Demo](http://madebymunsters.github.io/portfolio-iro/)\n\nFork the template you selected into your GitHub account. Then clone the repository to your machine:\n\n```bash\n$ git clone https://github.com/{username}/{portfolio-xxxx}.git\n```\n\nBefore going further, be sure to change the remote URL to your repository:\n\n```bash\n$ git remote set-url origin https://github.com/{username}/{portfolio-xxxx}.git\n```\n\n## Run Locally\n\nYou can create content and update the site locally without having to deploy. Execute the following command to preview your site:\n\n```bash\n$ jekyll serve\n```\n\nThen navigate your browser to the indicated localhost address, e.g. \"http://127.0.0.1:____\".\n\n## Customize the Template\n\nWithin the `_config.yml` file, you will need to change several settings. You can add your Stack Exchange account, GitHub, e-mail address, and more.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>185, "roadmap_section_ref"=>"a38380d7-2f79-46a5-b721-5cfd79df2669|0", "default_student_access"=>"locked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"e73823b7-04ea-4cab-9769-37548173fba4|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2130", "assessment"=>nil}, {"id"=>2131, "name"=>"Write Case Studies", "summary"=>"As a developer, I want to write a case study for each project I've completed", "body"=>"<!-- { ids:[2131], name:\"Write Case Studies\", summary:\"As a developer, I want to write a case study for each project I've completed\" } -->\n>As a developer, I want to **write a case study** for each project I've completed<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 4\n\nCase studies provide detail about each project you worked on, focusing on:\n\n- Summary\n- Explanation\n- Problem\n- Solution\n- Results\n- Conclusion\n\nRefer to the [Case Study](https://www.bloc.io/resources/case-study) resource to ensure you write well-rounded, deep case studies for each project you've completed.\n\n## Write a Case Study for Each Project\n\nWriting a case study will take time, as will preparing the images to display on these pages. Select a project, and create a new Markdown file within the `_portfolio` folder.\n\nEach case study markdown file should be named after the project it details. At the top, you have to include a header that specifies the layout, title, a thumbnail to display on the main page, and a description.\n\n```markdown\n---\nlayout: post\ntitle: BlocFlix\nthumbnail-path: \"img/blocflix.png\"\nshort-description: BlocFlix is a Netflix replica for finding the best movies and watching them online.\n---\n```\n\nJekyll uses Markdown for writing. Refer to the [cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) for proper syntax.\n\nTo display your project's images, create assets and reference them in the markdown file:\n\n```markdown\n{:.center}\n![]({{ site.baseurl }}/img/blocflix.png)\n```\n\nIf you want to showcase code snippets, you should wrap them in highlights:\n\n```markdown\n{% highlight javascript %}\nmyApp.directive('myDirective', function() {\n    return {\n        templateUrl: 'templates/mydirective.html',\n        replace: true,\n        restrict: 'E'\n    };\n});\n{% endhighlight %}\n```\n\nOnce you finish a case study, create another for each project you've completed. Remember, case studies take a significant amount of time to produce. Do your best to focus on quality for each.\n\n## Commit and Push your Changes\n\nAdd, commit and push your changes to the repo:\n\n```bash\n$ git add .\n$ git commit -m \"Added case studies\"\n$ git push origin master\n```", "assignment"=>"Complete the user story.", "roadmap_section_id"=>185, "roadmap_section_ref"=>"a38380d7-2f79-46a5-b721-5cfd79df2669|0", "default_student_access"=>"locked", "active_index"=>3, "checkpoint_type"=>"normal", "position"=>3, "points"=>1, "ref"=>"f5e9e8e1-0868-4a60-bffc-ecf0788d4630|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2131", "assessment"=>nil}, {"id"=>2132, "name"=>"Create Blog Posts", "summary"=>"As a developer, I want to write blog posts about my journey into development", "body"=>"<!-- { ids:[2132], name:\"Create Blog Posts\", summary:\"As a developer, I want to write blog posts about my journey into development\" } -->\n>As a developer, I want to **write blog posts** about my journey into development<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\nSharing your journey into development through blog posts shows off your personality and passion for your newfound skill set. Write a few blog posts to discuss your reason for learning Frontend web development, and what you have learned during your time as a Bloc student.\n\n## Create a New Blog Post\n\nCreate at least three blog posts. Each post should be approximately 500 words in length. Break up larger stories across several posts to keep your content consumable and reader-friendly. Choose from among the following topics, or come up with your own:\n\n- Your goals as a Frontend developer\n- Your experience with Bloc\n- The biggest challenge you've faced when learning to develop\n\nBlog posts belong in the `_posts` folder in your project directory. Each post must be named using this format (`YYYY-MM-DD-TITLE.md`):\n\n```markdown\n2015-06-09-my-experience-at-bloc.md\n```\n\nEach post must have a header which specifies its layout and title:\n\n```markdown\n---\nlayout: post\ntitle: My Experience at Bloc\n---\n```\n\nReview [Writing Posts](http://jekyllrb.com/docs/posts/) within the Jekyll documentation for more information.\n\nOnce you have completed a blog post, create two more to generate some additional content for your site.\n\n## Commit and Push your Changes\n\nAdd, commit and push your changes to the repo:\n\n```bash\n$ git add .\n$ git commit -m \"Added blog posts\"\n$ git push origin master\n```", "assignment"=>"Complete the user story.", "roadmap_section_id"=>185, "roadmap_section_ref"=>"a38380d7-2f79-46a5-b721-5cfd79df2669|0", "default_student_access"=>"locked", "active_index"=>4, "checkpoint_type"=>"normal", "position"=>4, "points"=>1, "ref"=>"15708137-2408-4e34-9883-fc4255ddf04a|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2132", "assessment"=>nil}, {"id"=>2133, "name"=>"Include a Contact Form", "summary"=>"As a developer, I want to allow visitors to contact me", "body"=>"<!-- { ids:[2133], name:\"Include a Contact Form\", summary:\"As a developer, I want to allow visitors to contact me\" } -->\n>As a developer, I want to allow visitors to **contact me**<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\nProvide a way for potential employers to contact you. Within the Jekyll template, a contact form is pre-generated, but first you must update it.\n\nThe video below demonstrates how to configure the contact form:\n\n<center><iframe src=\"//fast.wistia.net/embed/iframe/zhaoe960m1\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script></center>\n\n## Configure Simple Form\n\n![Simple Form](https://bloc-global-assets.s3.amazonaws.com/portfolio/simpleform.png)\n\nSign up for [Simple Form](https://getsimpleform.com/) using your e-mail address to generate an API token. Within the `contact.md` file, include your token and change the redirect URL for the thank you page:\n\n```html(contact.md)\n<!-- #1 -->\n<form action=\"https://getsimpleform.com/messages?form_api_token=\" method=\"post\">\n  <!-- the redirect_to is optional, the form will redirect to the referrer on submission -->\n  <!-- #2 -->\n  <input type='hidden' name='redirect_to' value='full-url/thank-you/' />\n  <input type='text' name='name' placeholder='Your Full Name' />\n  <input type='email' name='email' placeholder='Your E-mail Address' />\n  <textarea name='message' placeholder='Write your message ...'></textarea>\n  <input type='submit' value='Send Message' />\n</form>\n```\n\nAt **#1**, paste your Simple Form API token after the `=` symbol. The value at **#2** will resemble the following:\n\n```markdown\nhttp://{username}.github.io/thank-you\n```\n\n## Commit and Push Your Changes\n\n```bash\n$ git add .\n$ git commit -m \"Updated to Simple Form\"\n$ git push origin master\n```", "assignment"=>"Complete the user story.", "roadmap_section_id"=>185, "roadmap_section_ref"=>"a38380d7-2f79-46a5-b721-5cfd79df2669|0", "default_student_access"=>"locked", "active_index"=>5, "checkpoint_type"=>"normal", "position"=>5, "points"=>1, "ref"=>"d2a1c4bf-fcc5-4066-bb1a-0611133eb750|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2133", "assessment"=>nil}, {"id"=>2134, "name"=>"Track Visitors", "summary"=>"As a developer, I want to track visits and visitors of my portfolio", "body"=>"<!-- { ids:[2134], name:\"Track Visitors\", summary:\"As a developer, I want to track visits and visitors of my portfolio\" } -->\n>As a developer, I want to track **visits and visitors** of my portfolio<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\nGoogle Analytics allows you to track the visits and visitors to your portfolio, as well as tracking your most visited posts.\n\nThe video below demonstrates how to configure Google Analytics:\n\n<center><iframe src=\"//fast.wistia.net/embed/iframe/1v9g37izur\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script></center>\n\n## Configure Google Analytics\n\nLog into Google Analytics and sign up to create your account.\n\n> If you already have an account, select Admin in the top navigation. Under **Account**, click on the dropdown and select **Create a new account**.\n\nComplete the form to get your site's tracking ID. Add your Google Analytics tracking ID within the `_config.yml` file:\n\n```yaml(_config.yml)\n...\n  wordpress:\n  youtube:\n\n  # Scripts\n  # #1\n  google_analytics: # Tracking ID, e.g. \"UA-000000-01\"\n  disqus_shortname:\n  katex: true # Enable if using math markup\n\n  # Localization strings\n  str_follow_on: \"Follow on\"\n...\n```\n\nPlace your tracking ID at **#1**, remember to use double quotes, e.g. \"UA-000000-01\".\n\n## Commit and Push your Changes\n\nAdd, commit and push your changes to the repo:\n\n```bash\n$ git add .\n$ git commit -m \"Added Google Analytics\"\n$ git push origin master\n```", "assignment"=>"Complete the user story.", "roadmap_section_id"=>185, "roadmap_section_ref"=>"a38380d7-2f79-46a5-b721-5cfd79df2669|0", "default_student_access"=>"locked", "active_index"=>6, "checkpoint_type"=>"normal", "position"=>6, "points"=>1, "ref"=>"b80a4d43-fbf2-4e88-a3e2-d9b10d401129|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2134", "assessment"=>nil}, {"id"=>2135, "name"=>"Deploy Your Portfolio", "summary"=>"As a developer, I want to deploy my portfolio to GitHub Pages", "body"=>"<!-- { ids:[2135], name:\"Deploy Your Portfolio\", summary:\"As a developer, I want to deploy my portfolio to GitHub Pages\" } -->\n>As a developer, I want to **deploy** my portfolio to GitHub Pages<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\nGitHub Pages allows you to deploy your website using its free hosting. To do this, rename your repository to `{username}.github.io`, e.g. [`developer.github.io`](https://github.com/github/developer.github.com). Then update your `_config.yml` file to reflect the changes:\n\n```yml\n# SITE CONFIGURATION\n-baseurl: \"/portfolio-xxxx\" # the subpath of your site, e.g. /blog/\n-url: \"http://www.domain.com\" # the base hostname & protocol for your site\n+baseurl: \"\" # the subpath of your site, e.g. /blog/\n+url: \"http://{username}.github.io\" # the base hostname & protocol for your site\n\n # THEME-SPECIFIC CONFIGURATION\n theme:\n```\n\nCommit and push the changes to `master`. Then verify that GitHub published your repository as a GitHub page by navigating to the repository settings:\n\n<center>![](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/portfolio/github-pages-settings.png)</center>\n\n## Verify GitHub Pages\n\n- Visit `http://<username>.github.io` to view your portfolio page.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>185, "roadmap_section_ref"=>"a38380d7-2f79-46a5-b721-5cfd79df2669|0", "default_student_access"=>"locked", "active_index"=>7, "checkpoint_type"=>"normal", "position"=>7, "points"=>1, "ref"=>"d9c1d4c9-1545-4c51-b738-55f9f11fd200|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2135", "assessment"=>nil}, {"id"=>2136, "name"=>"Use a Custom Domain", "summary"=>"As a developer, I want to use a custom domain name for my portfolio", "body"=>"<!-- { ids:[2136], name:\"Use a Custom Domain\", summary:\"As a developer, I want to use a custom domain name for my portfolio\" } -->\n>As a developer, I want to use **a custom domain name** for my portfolio<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\nYour Jekyll portfolio site is published at {username}.github.io. We recommend purchasing a personalized domain name, and directing it to the GitHub Pages URL.\n\n## Purchase a Domain Name\n\nSelecting a domain name should be simple if your name is available, such as [joeykirk.com](http://www.joeykirk.com). You can purchase a domain name through [Namecheap](https://www.namecheap.com/), [Hover](https://www.hover.com/), [Domainr](https://domainr.com/), or one of the [many domain registrars](http://lifehacker.com/5683682/five-best-domain-name-registrars) to use as the primary URL for your portfolio.\n\n## Add a Custom Domain\n\nFollow the instructions for creating a [CNAME record](https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/).\n\nModify the `_config.yml` file to specify the new URL:\n\n```yaml(_config.yml)\n# SITE CONFIGURATION\nbaseurl: \"\" # the subpath of your site, e.g. /blog/\n- url: \"http://example.com\" # the base hostname & protocol for your site\n+ url: \"http://your-new-domain-na.me\"\n```\n\nWithin `contact.md`, you must change the redirect URL for the thank you page:\n\n```markdown(contact.md)\n<form action=\"https://getsimpleform.com/messages?form_api_token=_yourtoken_\" method=\"post\">\n  <!-- the redirect_to is optional, the form will redirect to the referrer on submission -->\n-   <input type='hidden' name='redirect_to' value='http://bloc.github.io/portfolio-iro/thank-you/' />\n+   <input type='hidden' name='redirect_to' value='http://your-new-domain-na.me/thank-you/' />\n  <input type='text' name='name' placeholder='Your Full Name' />\n  <input type='email' name='email' placeholder='Your E-mail Address' />\n  <textarea name='message' placeholder='Write your message ...'></textarea>\n  <input type='submit' value='Send Message' />\n</form>\n```\n\n## Commit and Push to GitHub Pages\n\n```bash\n$ git add .\n$ git commit -m \"Deploy to GitHub Pages\"\n$ git push origin master\n```", "assignment"=>"Complete the user story.", "roadmap_section_id"=>185, "roadmap_section_ref"=>"a38380d7-2f79-46a5-b721-5cfd79df2669|0", "default_student_access"=>"locked", "active_index"=>8, "checkpoint_type"=>"normal", "position"=>8, "points"=>1, "ref"=>"ef390a38-c0fc-4450-8266-6e5757055db4|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2136", "assessment"=>nil}]}, {"id"=>186, "roadmap_id"=>38, "name"=>"Project: Frontend Web Development - Angular", "time_estimate"=>"60 Hours", "point_ratio"=>0.0, "description"=>"", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"locked", "ref"=>"0d47c2cb-2c63-46c3-a883-b9b5da818a2b|0", "section_type"=>"project", "checkpoints"=>[{"id"=>2137, "name"=>"Introduction", "summary"=>"Introduction: the basic what and why of the Angular framework", "body"=>"<!-- { ids:[2137], name:'Introduction', summary:'Introduction: the basic what and why of the Angular framework' } -->\n\n## Overview and Purpose\n\nIn this project you'll rework Bloc Jams to use the Angular JavaScript framework.\n\n## Objectives\n\nAfter this project, you should be able to:\n\n- Bootstrap Angular to an application and create an Angular module.\n- Configure routing and states for an application.\n- Implement controllers for an application's views.\n- Create a service that controls song playback.\n- Write a custom directive that controls song and volume sliders.\n- Create a custom time code filter.\n\n## Use Case\n\njQuery is a great tool for adding animations and effects to a page, but it's difficult to build a sophisticated frontend application with jQuery alone. In this project, you'll refactor Bloc Jams using [AngularJS](https://angularjs.org/), commonly referred to as Angular.\n\n## What Is Angular?\n\nAngular is a JavaScript framework for building dynamic web applications, primarily [CRUD (Create, Read, Update, Delete)](http://en.wikipedia.org/wiki/Create,_read,_update_and_delete) applications. Although its purpose is to simplify application development, Angular is not an all-purpose framework. In particular, it's not suitable for static, content-heavy sites.\n\nInstead, Angular helps build [single-page applications (SPAs)](http://en.wikipedia.org/wiki/Single-page_application), which are web applications that do not require page loads when navigating between pages as most web sites do. SPAs aim to provide a user experience akin to desktop applications. Some prominent SPAs include [Gmail](http://gmail.com), [Medium](https://medium.com), and [Virgin America](https://www.virginamerica.com).\n\nAngular allows us to extend HTML syntax (tags and attributes) with _directives_. We'll learn more about directives later in the project, but for now, know that they attach particular behavior(s) to DOM elements. For example, in this HTML, we've added a directive to the `<div>`:\n\n```HTML\n<div ng-click=\"doSomething()\">\n```\n\n`ng-click` is the directive that tells Angular to execute `doSomething()` when a user clicks the `<div>`. Angular has some built-in directives like `ngClick`, but, more excitingly, we can write our own.\n\nAnother key feature of Angular is its [two-way data binding](https://docs.angularjs.org/guide/databinding). As a user interacts with an application, the data populated in the view updates in real time to reflect the changes made by the user. [Visit this example](http://www.angularjshub.com/examples/basics/twowaydatabinding/) to see data binding in action.\n\n## Framework vs. Library\n\nThe terms _framework_ and _library_ are sometimes used interchangeably and can cause confusion. The use of these terms often depends on the context. We distinguish the two below:\n\nA __library__, such as jQuery, is a collection of prewritten code consisting of common tasks that simplify development. Our code is \"in charge\" and uses a library to retrieve specific functions from the collection:\n\n<center>![library](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/Angular%20Project/jquery_library.jpg)</center>\n\nA __framework__, like Angular, provides the basic structure of an application. The framework is \"in charge\" and our code fills in the details:\n\n<center>![framework](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/Angular%20Project/framework.jpg)</center>\n\n## Architectural Patterns\n\nArchitectural patterns are reusable solutions to common, recurring problems in software architecture. Two patterns developers most often use with Angular are [Model-View-Controller](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller), or MVC, and [Model-View-ViewModel](http://en.wikipedia.org/wiki/Model_View_ViewModel), or MVVM.\n\nFor both, the Model is the data of an application. The View is an output representation of that data, or the UI.\n\nWith MVC, a user interacts with the Controller, and based on the user's input, the Controller conducts transactions on behalf of the Model. The Controller manipulates the Model and passes the Model to the View. The View renders the Model into an appropriate output format.\n\nA simplified diagram of these interactions looks like this:\n\n<center>![MVC](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/Angular%20Project/mvc.png)</center>\n\nWith MVVM, a user interacts with the View which is always in sync with the ViewModel. The ViewModel represents the View and exposes the data objects from the Model in a way that makes them manageable; that is, the ViewModel provides data binding between the View and the Model. MVVM was designed to support data-binding functions with less effort.\n\nTo illustrate MVVM, it might look like this:\n\n<center>![MVVM](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/Angular%20Project/mvvm.png)\n<br/>Source: [Wikimedia Foundation](https://commons.wikimedia.org/wiki/File:MVVMPattern.png)</center>\n\nAngular began as an MVC framework, but is now closer to MVVM. Don't concern yourself with semantics, however. Most often your architecture will not be purely MVC or MVVM, and that's okay. Although Angular has \"shifted\" architecture, Angular is often considered [an MV* framework](https://plus.google.com/+AngularJS/posts/aZNVhj355G2), meaning Model-View-_Whatever_. Whether you choose to use MVC or MVVM or a combination of the two, do _whatever works for you_.\n\n## Modules\n\nAn [Angular __module__](https://docs.angularjs.org/guide/module) acts as a container for the different parts – the services, directives, controllers, filters, and configuration information (all of which we'll learn about soon) – of an application.\n\nModules are about _encapsulation_, a tenet of object-oriented programming. Recall the concept of scope, whereby an object created within a function exists in the function's local scope, not the global scope. Functions created in the global scope can be overwritten by other scripts. For this reason, avoid declaring functions in the global [namespace](http://www.codeproject.com/Articles/829254/JavaScript-Namespace).\n\n> Note: [Linters](http://en.wikipedia.org/wiki/Lint_%28software%29) are tools that check code quality. JSHint, a JavaScript linter, [can check variable shadowing](http://jshint.com/docs/options/#shadow) to see if a variable is overwriting another.\n\nWith modules, Angular alleviates unintentional shadowing by keeping functions and values local to an application's module.\n\n## Advice\n\nAngularJS introduces a lot of new terminology which can make it difficult to absorb the framework's concepts. If you struggle with the terms or concepts, don't fret. We encourage you to do some things during this project:\n\n- Read the documentation. In particular, [version 1.4.7](https://code.angularjs.org/1.4.7/docs/guide) because it's the version of Angular this project will use to refactor Bloc Jams.\n- Click the links provided throughout a checkpoint for additional, relevant information on a concept. Most of the links take you to specific spots in the documentation. Bookmark them and refer to them often.\n- Take notes. Keep track of new terms either in a file on your computer or [by hand in a notebook](http://www.pbs.org/wgbh/nova/next/body/taking-notes-by-hand-could-improve-memory-wt/) (it's effective). We support [learning by writing](https://www.bloc.io/resources/learning-by-writing).\n- Communicate with your mentor. Seek their guidance when a concept becomes difficult to understand.\n\n## Resources\n\nIf you want more practice or resources to refer to while you learn Angular, here are some recommendations:\n\n- [AngularJS Tutorial](https://docs.angularjs.org/tutorial)\n- [Learn Angular](http://learn-angular.org/)\n- [Todd Motto: AngularJS Tutorial](https://www.airpair.com/angularjs/posts/angularjs-tutorial)\n\n## User Stories\n\n| User Story | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As a developer, I want to bootstrap Angular to my application. | 1 |\n| As a developer, I want to configure routing and states for my application. | 2 |\n| As a developer, I want to implement controllers for my application's views. | 2 |\n| As a developer, I want to create a service that handles song playback. | 3 |\n| As a developer, I want to write a directive that controls song and volume sliders. | 4 |\n| As a developer, I want to add a time code filter to display time properly. | 1 |\n\nLater user stories often rely on the completion of the former, therefore, work on them in the order prescribed.", "assignment"=>"1. Read the [AngularJS Developer Guide Introduction](https://code.angularjs.org/1.4.7/docs/guide/introduction).\n2. Browse through these [application examples](http://angularjs4u.com/demos/10-angularjs-crud-app-demos/) to better understand CRUD and what Angular is suited for.\n  >Note: the demo for the AngularJS CRUD Data Grid Demo is broken. All other tutorials and links should work.", "roadmap_section_id"=>186, "roadmap_section_ref"=>"0d47c2cb-2c63-46c3-a883-b9b5da818a2b|0", "default_student_access"=>"locked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"22c7793b-e1b3-45f6-9951-e3252755535c|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2137", "assessment"=>nil}, {"id"=>2138, "name"=>"Configuration", "summary"=>"Configuration: getting started with Bloc Jams Angular", "body"=>"<!-- { ids:[2138], name:'Configuration', summary:'Configuration: getting started with Bloc Jams Angular' } -->\n\nBecause Angular lends itself to the single-page application architecture, it is better suited to a different application structure than Bloc Jams in the Foundation. SPAs that change the URLs of an application require a server to intercept their requests and allow the frontend of the application to handle what's displayed in the browser.\n\nTo accommodate these differences, clone the [Bloc Frontend Starter Project](https://github.com/Bloc/bloc-frontend-project-starter) to serve as the base for our Angular application:\n\n```bash(~/bloc)\n$ git clone https://github.com/Bloc/bloc-frontend-project-starter.git bloc-jams-angular\n```\n\n__Important__: Read the following resources before continuing.\n\n1. [Bloc Frontend Starter Project README](https://github.com/Bloc/bloc-frontend-project-starter/blob/master/README.md)\n2. [Using Grunt](https://www.bloc.io/resources/using-grunt)\n3. [NPM and `package.json`](https://www.bloc.io/resources/npm-and-package-json)\n4. (optional) [Using Heroku](https://www.bloc.io/resources/using-heroku-frontend)\n\nThese resources provide instructions on how to install Node.js, NPM, and Grunt in order to properly configure your application. Note that the Bloc Frontend Starter Project already has a defined Gruntfile, so you do not need to write your own (we encourage you to examine it); however, you will need to install four Grunt plugins, as stated in the project README. If you receive an error message that says `Error: cannot find module 'hapi'`, install it with the command `npm install hapi`.\n\n## Restructure Bloc Jams for Angular\n\n[Create a repository on GitHub](https://github.com/new) named `bloc-jams-angular`. Rename the remote location of the official Bloc repository from `origin` to `bloc`. Then add the repo as the remote `origin`:\n\n```bash(~/bloc/bloc-jams-angular)\n$ git remote -v\n#=> Should output origin https://github.com/Bloc/bloc-frontend-project-starter.git (fetch)\n#=>               origin https://github.com/Bloc/bloc-frontend-project-starter.git (push)\n$ git remote rename origin bloc\n$ git remote add origin https://github.com/<your-github-username>/bloc-jams-angular.git\n$ git remote -v\n#=> Should output bloc https://github.com/Bloc/bloc-frontend-project-starter.git (fetch)\n#=>               bloc https://github.com/Bloc/bloc-frontend-project-starter.git (push)\n#=>               origin https://github.com/<your-github-username>/bloc-jams-angular.git (fetch)\n#=>               origin https://github.com/<your-github-username>/bloc-jams-angular.git (push)\n```\n\nBefore continuing, follow the instructions for [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint).\n\nAll of the required contents of Bloc Jams built during the Foundation will live inside the `app` directory of the Bloc Frontend Starter Project. When you clone the project, these are the default contents in the `app` folder, the primary folder for your code and markup:\n\n```\n├── app\n│   ├── assets\n│   │   └── images\n│   │       └── bloc-logo-white.png\n│   ├── pages\n│   │   └── index.html\n│   ├── scripts\n│   │   └── app.js\n│   ├── styles\n│   │   └── style.css\n│   └── templates\n│       └── home.html\n```\n\nThe JavaScript written during the Foundation is important for reference during the Angular project. Many of the Angular components can reuse the logic used to implement methods during the first version of Bloc Jams. However, the format and encapsulation of that functionality will deviate from the implementation in the Foundation, so we will refrain from transferring any JavaScript before going through the following checkpoints.\n\n> Note: with JavaScript absent at this point in the application, certain functionality on the landing, collection, and album pages will not work until they are re-implemented using Angular.\n\n## Migrate CSS and Assets\n\nThroughout this project we'll migrate files and code from the Foundation Bloc Jams to Angular Bloc Jams. Start copying the six CSS files in `bloc-jams/styles` into the `bloc-jams-angular/app/styles` directory.\n\nOnce copied, link to the files in `pages/index.html`, along with the font stylesheets:\n\n```html(~/bloc/bloc-jams-angular/app/pages/index.html)\n ...\n <head lang=\"en\">\n     <meta charset=\"UTF-8\">\n     <title>Bloc Base Project</title>\n-    <link rel=\"stylesheet\" type=\"text/css\" href=\"/styles/style.css\">\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://fonts.googleapis.com/css?family=Open+Sans:400,800,600,700,300\">\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css\">\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"/styles/normalize.css\">\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"/styles/main.css\">\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"/styles/landing.css\">\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"/styles/collection.css\">\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"/styles/album.css\">\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"/styles/player_bar.css\">\n </head>\n ...\n```\n\nRemove the `style.css` file from the `styles` directory.\n\nNext, update these lines to tailor the `<head>` content for Bloc Jams Angular:\n\n```html(~/bloc/bloc-jams-angular/app/pages/index.html)\n ...\n <head lang=\"en\">\n     <meta charset=\"UTF-8\">\n-    <title>Bloc Base Project</title>\n+    <title>Bloc Jams Angular</title>\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n ...\n```\n\nLastly, copy the contents of `bloc-jams/assets` into the `bloc-jams-angular/app/assets` directory. Once copied, remove the `body.collection` style from `collection.css` and the `body.album` style from `album.css`. Instead, add a background image to `main.css`:\n\n```css(~/bloc/bloc-jams-angular/app/styles/main.css)\n ...\n body {\n+    background-image: url(../assets/images/blurred_backgrounds/blur_bg_3.jpg);\n+    background-repeat: no-repeat;\n+    background-attachment: fixed;\n+    background-position: center center;\n+    background-size: cover;\n     font-family: 'Open Sans';\n     color: white;\n     min-height: 100%;\n+    padding-bottom: 200px;\n }\n ...\n```\n\n## Include Angular\n\nFollow the steps below to initialize an Angular application.\n\n### 1. Reference the Angular Script File\n\nInclude Angular the same way we include a library like jQuery, by adding a script source to the HTML document. Add a link to the Angular source in `index.html`:\n\n```html(~/bloc/bloc-jams-angular/app/pages/index.html)\n ...\n+    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.7/angular.min.js\"></script>\n     <script src=\"/scripts/app.js\"></script>\n </body>\n ...\n```\n\nThe source we've included above is the _minified_ version of the script, denoted by the `.min` in the file name. __Minification__ removes all the unnecessary characters, such as spaces and new lines, from source code and shortens variable names to the smallest number of letters possible (usually one) in order to reduce the file size. Alternatively, we can use the un-minified version of the script (`https://ajax.googleapis.com/ajax/libs/angularjs/1.4.7/angular.js`) to help when debugging issues, as the source is easier to read and dissect.\n\nChrome does, however, have a \"pretty print\" tool to un-minify JavaScript via a button in the bottom lefthand corner of a minified file in the Source tab:\n\n<center>![Chrome Pretty Print](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/Angular%20Project/chrome-pretty-print.png)</center>\n\n> Note that variable names will remain shortened even when using the Pretty Print tool.\n\n__When should I use minified source code?__ In a production application, because it optimizes the file size and loading speed, while reducing the bandwidth consumption of your site/application.\n\n### 2. Declare an Angular Module\n\nThe root Angular module will act as a container for different parts of our application. In `app.js`, define [a module](https://docs.angularjs.org/guide/module) with [`angular.module`](https://docs.angularjs.org/api/ng/function/angular.module):\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/app.js)\nangular.module('blocJams', []);\n```\n\nThe first argument passed, `blocJams`, is the prescribed name of the module. The empty array, passed as the second argument, injects dependencies into an application. For now, there are no dependencies to inject, but we'll cover dependency injection in the next checkpoint.\n\n### 3. Bootstrap the Application\n\nTo link the `blocJams` module to the application, Angular needs to know the root element of the application, which is typically the `<html>` or `<body>` element. In `index.html`, link the root module to the `<html>` tag:\n\n```html(~/bloc/bloc-jams-angular/app/pages/index.html)\n ...\n-<html>\n+<html ng-app=\"blocJams\">\n ...\n```\n\n[`ngApp`](https://docs.angularjs.org/api/ng/directive/ngApp) is a built-in Angular _directive_. This particular directive tells Angular where to bootstrap the defined application. For Bloc Jams, it's `<html>`, or the entire document. The `ng-app` activates the `blocJams` module for this part of the page.\n\n> __What does `ng` stand for?__ `ng` has no particular significance. The [Angular FAQ](https://docs.angularjs.org/misc/faq) says that \"ng\" sounds like \"Angular.\"\n\nAt this point, we've wired Angular to the application. The next steps are to configure the module and create a controller, which we'll cover in the following checkpoints.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n> Remember to run the application using the Gruntfile default task:\n  ```terminal\n  $ grunt\n  ```\n> And navigate to `localhost:3000` to view the application in the browser.\n\n1. Migrate the `<nav>` tag and its contents from `bloc-jams/index.html` to `bloc-jams-angular/app/pages/index.html`.\n2. Read and bookmark this [opinionated Angular style guide](http://toddmotto.com/opinionated-angular-js-styleguide-for-teams) to better understand how to organize your Angular code for maintainability and readability. This Angular project won't follow all of these styles, but it's good to understand that there are different ways to style your code.\n  > As you reference documentation and read articles about Angular, you're bound to find varying styles in use. Even the Angular documentation itself hasn't been update to reflect the best practices in place today. Unfortunately, there's no singular definitive guide on how to style Angular code The Right Way&trade;. You'll likely come across [John Papa's style guide](https://github.com/johnpapa/angular-styleguide) in your Angular journey as well; it shares many of the styles in the guide above, though it's more comprehensive, and thus why we opted for Todd Motto's abbreviated version to get you started.\n\n3. Install the [ng-inspector for AngularJS](https://chrome.google.com/webstore/detail/ng-inspector-for-angularj/aadgmnobpdmgmigaicncghmmoeflnamj?hl=en) extension for Chrome. As you build your Angular application, use the extension to help you debug.\n\nCommit your assignment work in Git. __Merge this assignment.__ See [Git Checkpoint Workflow: Mergeable Assignments](https://www.bloc.io/resources/git-checkpoint-workflow#mergeable-assignments) for details.", "roadmap_section_id"=>186, "roadmap_section_ref"=>"0d47c2cb-2c63-46c3-a883-b9b5da818a2b|0", "default_student_access"=>"locked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"3c5a005e-3b08-4e70-ba9d-d601e8df7095|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2138", "assessment"=>nil}, {"id"=>2139, "name"=>"Routing and States", "summary"=>"Routing and States: establish URL paths for Bloc Jams views", "body"=>"<!-- { ids:[2139], name:'Routing and States', summary:'Routing and States: establish URL paths for Bloc Jams views' } -->\n\nMost web applications refresh when we navigate to a different page on the site. When a user clicks a link, the application sends a request to the server for a new HTML file. The browser then reloads the entire page with the newly received information.\n\nAn alternative to this request/response process is to use single-page applications (SPA). They have engineering benefits as well as a snappier user interface that feels like a native desktop application.\n\nSome disadvantages of SPAs include browser history management and client-side state. For example, when a user bookmarks a page, the application should reinitialize the page in the same state as when the user bookmarked it. With SPAs, implementing this ability is complicated.\n\n> __Important__: Once you've run the `grunt` command, you'll find that your project directory contains `app` and `dist` directories. __Make all edits in the `app` directory, NOT the `dist` directory.__\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Templates\n\nLet's look at a simple, conceptual example of an application. Suppose the `index.html`, `album.html`, and `collection.html` pages look like this:\n\n```html(index.html)\n<html>\n    <head>\n        <title>Bloc Jams</title>\n    </head>\n    <body>\n        <h1>Landing</h1>\n    </body>\n</html>\n```\n\n```html(album.html)\n<html>\n    <head>\n        <title>Bloc Jams</title>\n    </head>\n    <body>\n        <h1>Album</h1>\n    </body>\n</html>\n```\n\n```html(collection.html)\n<html>\n    <head>\n        <title>Bloc Jams</title>\n    </head>\n    <body>\n        <h1>Collection</h1>\n    </body>\n</html>\n```\n\nThere is a lot of redundant code because the only unique part of each page is the `<h1>` tag. This is the case with Bloc Jams, where each of the pages shares the same basic structure and navigation.\n\nThe browser also has to load a new HTML document when a user navigates between the pages, which can result in a slow experience. With Angular, we can pull the shared HTML into one __global file__, and each of the unique fragments into separate __templates__. [Templates](https://docs.angularjs.org/guide/templates), in this context, are HTML documents with Angular markup.\n\nUsing the example presented above, `index.html` could become the global file that works with three templates: `landing.html`, `album.html`, and `collection.html`:\n\n```html(index.html)\n<html>\n    <head>\n        <title>Bloc Jams</title>\n    </head>\n    <body>\n        <ui-view></ui-view>\n    </body>\n</html>\n```\n\n```html(templates/landing.html)\n<h1>Landing</h1>\n```\n\n```html(templates/album.html)\n<h1>Album</h1>\n```\n\n```html(templates/collection.html)\n<h1>Collection</h1>\n```\n\nNote the [`ui-view` directive](http://angular-ui.github.io/ui-router/site/#/api/ui.router.state.directive:ui-view) in the global file, `index.html`. This directive (with the help of an external module known as UI-Router) tells Angular where to place the templates when they're requested.\n\n## Create Templates for Bloc Jams\n\n`index.html` will act as the global file for Bloc Jams. Add `<ui-view></ui-view>` to the global file:\n\n```html(~/bloc/bloc-jams-angular/app/pages/index.html)\n ...\n <body>\n     <nav class=\"navbar\">\n         ...\n     </nav>\n\n+    <ui-view></ui-view>\n\n     <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.7/angular.min.js\"></script>\n     <script src=\"/scripts/app.js\"></script>\n </body>\n </html>\n```\n\n> Remove the `home.html` file from the starter project `app/templates` directory – we won't use it for this project.\n\nThe Landing, Collection, and Album templates will consist of content unique to each template.\n\nCreate a `landing.html` file in the `app/templates` directory:\n\n```html(~/bloc/bloc-jams-angular/app/templates/landing.html)\n+<section class=\"hero-content\">\n+    <h1 class=\"hero-title\">Turn the music up!</h1>\n+</section>\n+\n+<section class=\"selling-points container clearfix\">\n+    <div class=\"point column third\">\n+        <span class=\"ion-music-note\"></span>\n+        <h5 class=\"point-title\">Choose your music</h5>\n+        <p class=\"point-description\">The world is full of music; why should you have to listen to music that someone else chose?</p>\n+    </div>\n+    <div class=\"point column third\">\n+        <span class=\"ion-radio-waves\"></span>\n+        <h5 class=\"point-title\">Unlimited, streaming, ad-free</h5>\n+        <p class=\"point-description\">No arbitrary limits. No distractions.</p>\n+    </div>\n+    <div class=\"point column third\">\n+        <span class=\"ion-iphone\"></span>\n+        <h5 class=\"point-title\">Mobile enabled</h5>\n+        <p class=\"point-description\">Listen to your music on the go. This streaming service is available on all mobile platforms.</p>\n+    </div>\n+</section>\n```\n\nWhen we view the landing page, we see that the selling points don't display. This is because `bloc-jams/scripts/landing.js` animated those elements to display with jQuery. In this project, we won't refactor the animation. In `bloc-jams-angular/app/styles/landing.css`, change the `opacity` of `.point` from `0` to `1` and remove the transition properties.\n\nTo display the Collection view with Angular, we'll need to move the template from `collection.js` back to HTML. Create a `collection.html` file in the `app/templates` directory:\n\n```html(~/bloc/bloc-jams-angular/app/templates/collection.html)\n+<section class=\"album-covers container clearfix\">\n+    <div class=\"collection-album-container column fourth\">\n+        <img src=\"/assets/images/album_covers/01.png\"/>\n+        <div class=\"collection-album-info caption\">\n+            <p>\n+                <a class=\"album-name\" href=\"album.html\">The Colors</a>\n+                <br/>\n+                <a href=\"album.html\">Pablo Picasso</a>\n+                <br/>\n+                X songs\n+                <br/>\n+            </p>\n+        </div>\n+    </div>\n+</section>\n```\n\nFor the Album view, create an `album.html` file in the `app/templates` directory. Similar to the Collection view, move the song row template from `album.js` and place it back in the HTML:\n\n```html(~/bloc/bloc-jams-angular/app/templates/album.html)\n+<main class=\"album-view container narrow\">\n+    <section class=\"clearfix\">\n+        <div class=\"column half\">\n+            <img src=\"/assets/images/album_covers/01.png\" class=\"album-cover-art\">\n+        </div>\n+        <div class=\"album-view-details column half\">\n+            <h2 class=\"album-view-title\">The Colors</h2>\n+            <h3 class=\"album-view-artist\">Pablo Picasso</h3>\n+            <h5 class=\"album-view-release-info\">1909 Spanish Records</h5>\n+        </div>\n+    </section>\n+    <table class=\"album-view-song-list\">\n+        <tr class=\"album-view-song-item\">\n+            <td class=\"song-item-number\">1</td>\n+            <td class=\"song-item-title\">Blue</td>\n+            <td class=\"song-item-duration\">3:31</td>\n+        </tr>\n+    </table>\n+</main>\n```\n\n> Note that the Album view does not include the player bar. You'll add that in the next checkpoint.\n\n## Routing\n\nTo display these templates in the view, Angular uses __routing__, which is organized around URL routes. Angular has a built-in router, but [many developers don't use it](http://www.funnyant.com/angularjs-ui-router/).\n\nInstead, developers use [UI-Router](https://angular-ui.github.io/ui-router/) because it is more flexible and features behaviors not found in the Angular tools. With UI-Router, an application can be in different __states__ that determine what to display when a user navigates to a specific route.\n\nUI-Router will take care of replacing the contents of `<ui-view></ui-view>` with a template when a user navigates to the proper route. Each template can be unique, while the shared code is kept in the global file. Since UI-Router uses JavaScript to switch the views, the browser won't load a new HTML document when a user navigates to a new route.\n\n## Add an External Module to an Angular Application\n\nThe Angular development community has useful external modules that makes adding more robust functionality to Angular applications easy. To add these external modules, we must do at least two things:\n\n1. Include the script source in the application, below the Angular source.\n2. Inject the module into the application's declaration.\n\n### Include the UI-Router Source\n\nUI-Router is a separate module from the Angular source script. To include it in an application, add its source script after the Angular source. With a global file that contains all the subviews, we only need to add the source once:\n\n```html(~/bloc/bloc-jams-angular/app/pages/index.html)\n ...\n <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.7/angular.min.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/angular-ui-router/0.2.15/angular-ui-router.min.js\"></script>\n <script src=\"/scripts/app.js\"></script>\n ...\n```\n\n> UI-Router is an extension of Angular so it must come _after_ the Angular source or the application will throw a [Reference Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError).\n\n### Inject the UI-Router Module\n\nRecall the `blocJams` module definition in `app.js`:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/app.js)\nangular.module('blocJams', []);\n```\n\nThe second argument, the empty array, is the list of external modules that `blocJams` depends on, known as [__dependency injection__](https://docs.angularjs.org/guide/di). After we add an external module's script source, we can inject the module into the application by adding it to the array:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/app.js)\n-angular.module('blocJams', []);\n+angular.module('blocJams', ['ui.router']);\n```\n\nThe `blocJams` module can now make use of the UI-Router module. We can add additional modules as strings in the array.\n\n> __Reminder__: Make all edits to `app.js` in the `app/scripts` directory, _NOT_ the `dist/scripts` directory.\n\n## Configure the Module with Providers\n\nWith UI-Router, we need to set up state configuration using an Angular [provider](https://docs.angularjs.org/api/ng/provider). __Providers__ are services used by Angular modules to either configure or define default behavior for a certain Angular module. For Bloc Jams, we'll use two providers:\n\n- [`$stateProvider`](https://github.com/angular-ui/ui-router/wiki/Quick-Reference#stateprovider-1): to configure the state behavior\n- [`$locationProvider`](https://docs.angularjs.org/api/ng/provider/$locationProvider): to configure how the application handles URLs in the browser\n\nTo make sure the providers are accessible throughout the application, inject them using the [`config` block](https://docs.angularjs.org/guide/module#module-loading-dependencies) on the application's root module. Write a `config` function to pass into the `config()` function:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/app.js)\n+(function() {\n+    function config($stateProvider, $locationProvider) {\n+    }\n+\n-angular.module('blocJams', ['ui.router']);\n+    angular\n+        .module('blocJams', ['ui.router'])\n+        .config(config);\n+})();\n```\n\n> This style of module declaration is based on the [Opinionated Angular Styleguide](http://toddmotto.com/opinionated-angular-js-styleguide-for-teams).\n\n### Configure Paths with `$locationProvider`\n\n`$locationProvider`, which is part of Angular's core, configures an [application's paths](https://docs.angularjs.org/guide/$location#getter-and-setter-methods). By default, Angular prefixes routes with `#!`, known as [Hashbang mode](https://docs.angularjs.org/guide/$location#hashbang-and-html5-modes). This is a convention for showing that a page load is triggered by JavaScript.\n\nFor example, if we navigate to a state with the path `/album`, the full URL will read `localhost:3000/#!/album` instead of `localhost:3000/album`. It doesn't look nice, but we can disable it. Add the following code to the `config` function:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/app.js)\n function config($stateProvider, $locationProvider) {\n+    $locationProvider\n+        .html5Mode({\n+            enabled: true,\n+            requireBase: false\n+        });\n }\n ...\n```\n\nBy setting the `html5Mode` method's `enabled` property to `true`, the hashbang URLs are disabled; that is, users will see clean URLs without the hashbang. Setting the `requireBase` property to `false` is unrelated to the hashbang issue, but is one way to avoid [a common `$location` error](https://docs.angularjs.org/error/$location/nobase).\n\n### Configure States with `$stateProvider`\n\n`$stateProvider`, a component of UI-Router, will determine a number of properties for a state. For Bloc Jams, we'll need to know how to configure at least four aspects of a state: its name, URL route, controller, and template.\n\n`$stateProvider` calls `.state()`, which takes two arguments: `stateName` and `stateConfig`. For example:\n\n```javascript\n$stateProvider.state(stateName, stateConfig)\n```\n\n`stateName` is a _unique_ string that identifies a state and `stateConfig` is an object that defines specific properties of the state. For Bloc Jams, create a state named `landing` and add an accompanying URL and template to the `stateConfig` object:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/app.js)\n function config($stateProvider, $locationProvider) {\n     $locationProvider\n         .html5Mode({\n             enabled: true,\n             requireBase: false\n         });\n\n+    $stateProvider\n+        .state('landing', {\n+            url: '/',\n+            templateUrl: '/templates/landing.html'\n+        });\n }\n ...\n```\n\nWith this state configuration, when we navigate to localhost:3000 or localhost:3000/, the `ui-view` directive in the global file (`index.html`) will load the template associated with the `landing` state.\n\nBecause `$stateProvider.state()` returns `$stateProvider`, we are able to call `state()` again without having to reference the `$stateProvider` variable. With no arguments passed to the `state()` call, this would look like `$stateProvider.state().state()`. This is called method chaining. It's common to chain `state()` calls instead of calling them individually on `$stateProvider`. Add another state, named `album`:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/app.js)\n ...\n     $stateProvider\n         .state('landing', {\n             url: '/',\n             templateUrl: '/templates/landing.html'\n-        });\n+        })\n+        .state('album', {\n+            url: '/album',\n+            templateUrl: '/templates/album.html'\n+        });\n ...\n```\n\n> Note that chained calls should not have a semicolon at the end of each call. If you include them, you will receive an error. Chained calls require only a single semicolon after the last call, which signifies the termination of the statement.\n\nYou may notice that we've put the `state()` calls on their own line. Because we removed the semicolon from the first `state()` call, JavaScript will look to the next line for a continuation. When chaining method calls, it is common to see each call happen own its own line.\n\nWith this configuration the `album` state, when we navigate to localhost:3000/album, the `ui-view` directive in the global file will load the `album` template.\n\n## Trigger a State\n\nInstead of using anchor tags (`<a>`) with an `href` (short for \"hyperlink reference\"), UI-Router triggers states by attaching a `ui-sref` directive (short for \"user interface state reference\") in place of the `href`.\n\nFor example, instead of `<a href=\"album.html\">`, a link refers to a state name like so: `<a ui-sref=\"album\">`, where `album` is the name of the state to trigger.\n\nTo trigger a state change (display a different view) when using UI-Router, use `ui-sref` instead of `href`. For external page links or an internal anchor, continue to use `href`.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n1. Read the [`$stateProvider` documentation](https://github.com/angular-ui/ui-router/wiki/Quick-Reference#stateprovider-1) with particular attention to these `stateConfig` properties:\n    - `url`\n    - `template`, `templateUrl`, `templateProvider`\n    - `controller` (Controllers are covered in the next checkpoint)\n2. Implement a third state named `collection` for the Collection view. Set the `url` and `templateUrl` properties accordingly.\n3. Update links in the navigation and throughout the templates with routing based on `ui-sref` instead of `href`.\n\nCommit your assignment work in Git. __Merge this assignment.__ See [Git Checkpoint Workflow: Mergeable Assignments](https://www.bloc.io/resources/git-checkpoint-workflow#mergeable-assignments) for details.", "roadmap_section_id"=>186, "roadmap_section_ref"=>"0d47c2cb-2c63-46c3-a883-b9b5da818a2b|0", "default_student_access"=>"locked", "active_index"=>3, "checkpoint_type"=>"normal", "position"=>3, "points"=>1, "ref"=>"793ed193-2cbe-4621-a7a9-5ab1210ea7b0|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2139", "assessment"=>nil}, {"id"=>2140, "name"=>"Templates", "summary"=>"Templates: render dynamic views in the browser", "body"=>"<!-- { ids:[2140], name:'Templates', summary:'Templates: render dynamic views in the browser' } -->\n\nWe've established the basic views for Bloc Jams. The song list in the Album view, however, is missing the `onHover` and `offHover` ability that we wrote in the Foundation. We're also missing a crucial aspect of our application: the player bar. Before we fine tune these templates, let's learn a bit about \"the Angular way\".\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## The Angular Way\n\nAn important difference between Angular and jQuery is the distinction between [\"imperative\" and \"declarative\" view manipulation](http://stackoverflow.com/questions/14994391/thinking-in-angularjs-if-i-have-a-jquery-background#answer-14994393). Angular is designed so that views are open books which \"declare\" the functionality behind them. In a jQuery-powered view, any element could have \"hidden\" functionality attached to it, obscuring the view manipulation unless we dive into the JavaScript. In Angular, the associated JavaScript behavior of any element is declared clearly in the HTML.\n\nConsider this jQuery code that we wrote for Bloc Jams in the Foundation:\n\n```javascript\nvar $previousButton = $('.main-controls .previous');\nvar $nextButton = $('.main-controls .next');\n\n$(document).ready(function() {\n    setCurrentAlbum(albumPicasso);\n    $previousButton.click(previousSong);\n    $nextButton.click(nextSong);\n});\n```\n\nThis code designates what should happen when a user clicks the `$previousButton` and `$nextButton` objects. The DOM elements are identified in the JavaScript. Angular, on the other hand, declares this code in the HTML:\n\n```html\n<div class=\"main-controls\">\n    <a class=\"previous\" ng-click=\"previousSong()\">\n        <span class=\"ion-skip-backward\"></span>\n    </a>\n    <a class=\"next\" ng-click=\"nextSong()\">\n        <span class=\"ion-skip-forward\"></span>\n    </a>\n</div>\n```\n\nThe functions `previousSong` and `nextSong` exist in the JavaScript, but Angular's `ng-click` syntax more clearly shows the elements that trigger some action when a user interacts with the application.\n\n## `ngClick` and `ngShow` Directives\n\nThe section above shows a use case for the [`ngClick` directive](https://docs.angularjs.org/api/ng/directive/ngClick). It is Angular's declarative equivalent of jQuery's `.click()` method.\n\nSimilarly, the [`ngShow` directive](https://docs.angularjs.org/api/ng/directive/ngShow) is Angular's declarative equivalent of jQuery's `.show()` method. (Angular has an inverse of `ngShow` named [`ngHide`](https://docs.angularjs.org/api/ng/directive/ngHide).) From the documentation:\n\n> The `ngShow` directive shows or hides the given HTML element based on the expression provided to the `ngShow` attribute. The element is shown or hidden by removing or adding the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined in AngularJS and sets the `display` style to `none` (using an !important flag).\n\nHere is an `ngShow` example from the Angular documentation:\n\n```html\n<!-- when $scope.myValue is truthy (element is visible) -->\n<div ng-show=\"myValue\"></div>\n\n<!-- when $scope.myValue is falsy (element is hidden) -->\n<div ng-show=\"myValue\" class=\"ng-hide\"></div>\n```\n\n> Refer to the MDN documentation for a refresher on [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) and [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n\n## Update the Album View Template\n\nInstead of using jQuery's imperative view manipulation to create `onHover` and `offHover` functions ([as shown here](https://github.com/Bloc/bloc-jams-source/blob/master/scripts/album.js#L49-L65)), we'll declare this functionality in the view using Angular's `ngShow` directive.\n\nBefore we can add this declarative code, however, we need to decide what to show and when to show it:\n\n| What to Show | When to Show It |\n| :----------- | :-------------- |\n| Song number | When the song is __not__ playing _and_ the mouse is __off__ hover |\n| Play button | When the song is __not__ playing _and_ the mouse is __on__ hover |\n| Pause button | When the song __is__ playing |\n\nWhen a user first visits the Album view, each song row should display the song's number. When a user hovers over a song row, the song number should change to a play button if the song is not already playing. When a user clicks the play button, it should change to a pause button.\n\nUsing `ngShow`, we'll write some \"wishful coding\" with variables that we haven't yet declared. Update `album.html` with the following changes:\n\n```html(~/bloc/bloc-jams-angular/app/templates/album.html)\n ...\n-<td class=\"song-item-number\">1</td>\n+<td class=\"song-item-number\">\n+    <span ng-show=\"!playing && !hovered\">1</span>\n+    <a class=\"album-song-button\" ng-show=\"!playing && hovered\"><span class=\"ion-play\"></span></a>\n+    <a class=\"album-song-button\" ng-show=\"playing\"><span class=\"ion-pause\"></span></a>\n+</td>\n ...\n```\n\nWe can incorporate the `hovered` variable using the straightforward [`ngMouseover`](https://docs.angularjs.org/api/ng/directive/ngMouseover) and [`ngMouseleave`](https://docs.angularjs.org/api/ng/directive/ngMouseleave) directives. To replicate the Foundation behavior, add these directives to the table row:\n\n```html(~/bloc/bloc-jams-angular/app/templates/album.html)\n ...\n-<tr class=\"album-view-song-item\">\n+<tr class=\"album-view-song-item\" ng-mouseover=\"hovered = true\" ng-mouseleave=\"hovered = false\">\n ...\n```\n\nBoth directives evaluate an expression. In this case, we assign the `hovered` variable a value of `true` or `false`.\n\nAt this stage, we should be able to see the play button appear on mouseover. We'll be able to display the pause button once we start to work on playing music in a later checkpoint.\n\n## Create a Template for the Player Bar\n\nIn the Foundation, we implemented the player bar using jQuery by adding the HTML to the bottom of the Album view. When we converted Bloc Jams to an SPA, we removed the player bar. Now, we'll use Angular to create a player bar template and include it in the Album view. For the time being, the player bar controls will not work – we'll implement the player bar functionality using Angular in a later checkpoint.\n\nCreate a file named `player_bar.html` in the `app/templates` directory. Copy the player bar markup from `bloc-jams/album.html` and paste it into the new file:\n\n```html(~/bloc/bloc-jams-angular/app/templates/player_bar.html)\n+<section class=\"player-bar\">\n+    <div class=\"container\">\n+        <div class=\"control-group main-controls\">\n+            <a class=\"previous\">\n+                <span class=\"ion-skip-backward\"></span>\n+            </a>\n+            <a class=\"play-pause\">\n+                <span class=\"ion-play\"></span>\n+            </a>\n+            <a class=\"next\">\n+                <span class=\"ion-skip-forward\"></span>\n+            </a>\n+        </div>\n+        <div class=\"control-group currently-playing\">\n+            <h2 class=\"song-name\"></h2>\n+            <h2 class=\"artist-song-mobile\"></h2>\n+            <h3 class=\"artist-name\"></h3>\n+            <div class=\"seek-control\">\n+                <div class=\"seek-bar\">\n+                    <div class=\"fill\"></div>\n+                    <div class=\"thumb\"></div>\n+                </div>\n+                <div class=\"current-time\"></div>\n+                <div class=\"total-time\"></div>\n+            </div>\n+        </div>\n+        <div class=\"control-group volume\">\n+            <span class=\"icon ion-volume-high\"></span>\n+            <div class=\"seek-bar\">\n+                <div class=\"fill\"></div>\n+                <div class=\"thumb\"></div>\n+            </div>\n+        </div>\n+    </div>\n+</section>\n```\n\n### Include the Template in the Album View\n\nAngular has a directive for including external templates called [`ngInclude`](https://docs.angularjs.org/api/ng/directive/ngInclude). Like an `<img>` tag, `ngInclude` has an `src` attribute that defines the path of the asset – in this case, a template.\n\nUse the `ngInclude` like an element tag at the bottom of the Album view template:\n\n```html(~/bloc/bloc-jams-angular/app/templates/album.html)\n ...\n <main class=\"album-view container narrow\">\n     ...\n </main>\n\n+<ng-include src=\"'/templates/player_bar.html'\"></ng-include>\n ...\n```\n\nBecause the player bar now has its own template, it could be added to any view using `ngInclude`. Add the player bar template to the Landing and Collection views to try it out. After we've gotten the player bar to display on multiple views, be sure to remove it from the Landing view – we don't actually want a player bar to display there.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"1. Read the documentation for [`ngClick`](https://docs.angularjs.org/api/ng/directive/ngClick), [`ngShow`](https://docs.angularjs.org/api/ng/directive/ngShow), [`ngHide`](https://docs.angularjs.org/api/ng/directive/ngHide), [`ngMouseover`](https://docs.angularjs.org/api/ng/directive/ngMouseover), and [`ngMouseleave`](https://docs.angularjs.org/api/ng/directive/ngMouseleave).\n2. The player bar also has play and pause buttons that should show/hide under certain conditions. Determine __what__ you should show and __when__ you should show it. Create a markdown table (like the one presented in this checkpoint) to hold this information and send it to your mentor.", "roadmap_section_id"=>186, "roadmap_section_ref"=>"0d47c2cb-2c63-46c3-a883-b9b5da818a2b|0", "default_student_access"=>"locked", "active_index"=>4, "checkpoint_type"=>"normal", "position"=>4, "points"=>1, "ref"=>"552db940-efea-4c20-a477-6eaf82b9cbe2|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2140", "assessment"=>nil}, {"id"=>2141, "name"=>"Controllers", "summary"=>"Controllers: control the flow of data in your application", "body"=>"<!-- { ids:[2141], name:'Controllers', summary:'Controllers: control the flow of data in your application' } -->\n\nControllers control the flow of data in Angular applications and help keep code modularized. Each controller is automatically paired with [a scope](https://docs.angularjs.org/guide/scope) (`$scope`) that Angular uses to communicate between the controller and the view, making it possible to define JavaScript code for a particular DOM element.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## When to Use a Controller\n\nA controller is a JavaScript object created by a constructor function. Controllers contain the [\"business logic\"](http://en.wikipedia.org/wiki/Business_logic) that apply functions and values to the scope. When Angular instantiates a new Controller object, a child scope is created and made available as an injectable parameter to the Controller's constructor function as `$scope`.\n\nWe should only use a controller for two things:\n\n1. To initialize the state of the `$scope` object.\n2. To add behavior to the `$scope` object.\n\n__Do not use controllers to manipulate the DOM.__ Instead, use directives, which we'll learn more about in a later checkpoint.\n\n## Define a Controller\n\nWithin the `scripts` directory, create a `controllers` directory. Within the `controllers` directory, create a file named `LandingCtrl.js` and define a controller for the Landing view:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/controllers/LandingCtrl.js)\n+(function() {\n+    function LandingCtrl() {\n+    }\n+\n+    angular\n+        .module('blocJams')\n+        .controller('LandingCtrl', LandingCtrl);\n+})();\n```\n\nThe `.controller()` method has two parameters:\n\n1. The name of the controller.\n2. A callback function __or__ an array that injects dependencies, with a callback function as the last item in the array.\n\nWe've named the controller `LandingCtrl` – the first argument. Recall that object constructors are capitalized by convention to distinguish them from other functions. The second argument is the callback function that executes when the controller is initialized.\n\nLike `.config()`, we must call `.controller()` on an Angular module. Note that the `.module()` call does not have the second argument, the array of dependencies. Because we've set the dependencies in `app.js`, we only need to retrieve the already-defined module.\n\nWe may inject as many dependencies as our controller requires. In the case of `LandingCtrl`, we've injected no dependencies. With dependencies, however, the controller definition would require an array and would look like this example shown in [the documentation](https://docs.angularjs.org/guide/di#controllers):\n\n```javascript\n(function() {\n    function MyCtrl($scope, dep1, dep2) {\n        // controller logic\n    }\n\n    angular\n        .module('myApp')\n        .controller('MyCtrl', [$scope, dep1, dep2, MyCtrl];\n})();\n```\n\nThe last item in the array must be the callback function that executes when the controller is initialized – in this case, `MyCtrl`.\n\n## Instantiate a Controller\n\nAngular registers a new controller object via the `ngController` directive, which attaches a controller to a DOM element. For example:\n\n```html\n<body ng-controller=\"MyCtrl\">\n```\n\nThe `ngController` directive tells Angular to instantiate the controller named `MyCtrl` for the `<body>` element. This directive creates a new scope tied to the controller's `$scope` object. When the application loads, Angular will read the HTML, see the `ng-controller=\"MyCtrl\"` attribute, and execute the callback to initialize the controller.\n\nWith UI-Router, there's another way to register a controller. We can designate a controller for a particular state by adding a `controller` property to the state configuration. Add the `LandingCtrl` to the `landing` state in `app.js`:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/app.js)\n ...\n $stateProvider\n     .state('landing', {\n         url: '/',\n+        controller: 'LandingCtrl as landing',\n         templateUrl: '/templates/landing.html'\n     });\n ...\n```\n\nLink to the `LandingCtrl.js` script source in `index.html`:\n\n```html(~/bloc/bloc-jams-angular/app/pages/index.html)\n ...\n <script src=\"/scripts/app.js\"></script>\n+<script src=\"/scripts/controllers/LandingCtrl.js\"></script>\n ...\n```\n\n__Important__: Before continuing, read about the different ways to [assign a controller to a template](https://github.com/angular-ui/ui-router/wiki#controllers). For the `landing` state, we use `controller as` syntax to handle nested scopes. Read about [the benefits](http://toddmotto.com/digging-into-angulars-controller-as-syntax) of `controller as` syntax and examine [the example](https://code.angularjs.org/1.4.7/docs/api/ng/directive/ngController#example) provided by the Angular documentation.\n\n\n## Add Logic to a Controller\n\nTo initialize the `$scope` object, a controller attaches properties to it. Add a `heroTitle` property to the `LandingCtrl`:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/controllers/LandingCtrl.js)\n ...\n function LandingCtrl() {\n+    this.heroTitle = \"Turn the Music Up!\";\n }\n ...\n```\n\nUsing the `this` keyword adds `heroTitle` as a property on the `LandingCtrl`'s `$scope` object. `$scope` properties contain [the model](https://docs.angularjs.org/guide/concepts#model), or data, that the view will present, and are available to the template at the point in the DOM where the controller is registered. The `LandingCtrl` for Bloc Jams is registered for the `landing.html` template.\n\nWithin this designated template, we can use `{{ }}` markup to display properties in the view. Use `{{ }}` to display the hero title in `landing.html`:\n\n```html(~/bloc/bloc-jams-angular/app/templates/landing.html)\n ...\n <section class=\"hero-content\">\n-    <h1 class=\"hero-title\">Turn the music up!</h1>\n+    <h1 class=\"hero-title\">{{ landing.heroTitle }}</h1>\n </section>\n ...\n```\n\nThe `{{ }}` are a declarative way of specifying data binding locations in the HTML. Angular automatically updates this text whenever the `heroTitle` property changes. The `landing` part of `landing.heroTitle` comes from the `controller as` syntax used when the controller was assigned to the template.\n\nWhat exists between the `{{ }}` markup is called an __Angular expression__, which is similar to a JavaScript expression but differs in a few ways. Refer to the [AngularJS Developer Guide on expressions](https://docs.angularjs.org/guide/expression#angular-expressions-vs-javascript-expressions) to view their differences.\n\n## Create a Controller for the Collection View\n\nThe Bloc Jams Foundation Collection view uses a `for` loop and jQuery's `append()` to add a specified number of albums to the Collection view. We will need to refactor this because the jQuery code will break within the Angular application.\n\nTo start, copy the `fixtures.js` file created in the Foundation and move it to the Angular project in the `scripts` directory. Add the script source to `index.html`:\n\n```html(~/bloc/bloc-jams-angular/app/pages/index.html)\n ...\n <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.7/angular.min.js\"></script>\n <script src=\"/scripts/app.js\"></script>\n+<script src=\"/scripts/fixtures.js\"></script>\n ...\n```\n\nNext, create a `CollectionCtrl.js` file and add a controller for the Collection view:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/controllers/CollectionCtrl.js)\n+(function() {\n+    function CollectionCtrl() {\n+    }\n+\n+    angular\n+        .module('blocJams')\n+        .controller('CollectionCtrl', CollectionCtrl);\n+})();\n```\n\nRegister the `CollectionCtrl` to the `collection` state in `app.js`:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/app.js)\n ...\n .state('collection', {\n     url: '/collection',\n+    controller: 'CollectionCtrl as collection',\n     templateUrl: '/templates/collection.html'\n });\n ...\n```\n\nAnd link to the `CollectionCtrl.js` script source in `index.html`:\n\n```html(~/bloc/bloc-jams-angular/app/pages/index.html)\n ...\n <script src=\"/scripts/app.js\"></script>\n <script src=\"/scripts/controllers/LandingCtrl.js\"></script>\n+<script src=\"/scripts/controllers/CollectionCtrl.js\"></script>\n ...\n```\n\nBefore refactoring, look at the Bloc Jams Foundation code that runs when the Collection view loads:\n\n```javascript(~/bloc/bloc-jams/scripts/collection.js)\n...\nvar $collectionContainer = $('.album-covers');\n$collectionContainer.empty();\nfor (var i = 0; i < 12; i++) {\n    var $newThumbnail = buildCollectionItemTemplate();\n    $collectionContainer.append($newThumbnail);\n}\n```\n\nWith jQuery, we select a DOM element and, with the `for` loop, append a new album cover thumbnail to the element as many times as the loop specifies.\n\nInstead of using jQuery to append images, bind the data from the `albumPicasso` object to the Collection template:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/controllers/CollectionCtrl.js)\n ...\n function CollectionCtrl() {\n+    this.albums = [];\n+    for (var i=0; i < 12; i++) {\n+        this.albums.push(angular.copy(albumPicasso));\n+    }\n }\n ...\n```\n\n> [`angular.copy`](https://docs.angularjs.org/api/ng/function/angular.copy) is one of [several global function components](https://docs.angularjs.org/api/ng/function) on the `angular` object.\n\nWe add an `albums` property and set its value to an empty array. Within the `for` loop, we use `angular.copy` to make copies of `albumPicasso` and push them to the array.\n\n## Access the Data in the Template\n\nNow that we've bound the album data to the `CollectionCtrl`, we need to update the Collection template to access the necessary information and display multiple albums. Start by adding an `ngRepeat` to the template:\n\n```html(~/bloc/bloc-jams-angular/app/templates/collection.html)\n <section class=\"album-covers container clearfix\">\n-    <div class=\"collection-album-container column fourth\">\n+    <div class=\"collection-album-container column fourth\" ng-repeat=\"album in collection.albums\">\n ...\n```\n\nSimilar to a `for..in` statement, the `ngRepeat` directive iterates through a collection. From [the AngularJS documentation](https://docs.angularjs.org/api/ng/directive/ngRepeat):\n\n> `ngRepeat` instantiates a template once per item from a collection. Each template instance gets its own scope, where the given loop variable is set to the current collection item, and `$index` is set to the item index or key.\n\nIn this case, the collection is the `albums` array that we created to hold copies of `albumPicasso`. The `\"album in collection.albums\"` part of the code is what allows us to access the data from a single item in the collection. Update the Collection template to access the data from the `albums` property:\n\n```html(~/bloc/bloc-jams-angular/app/templates/collection.html)\n <section class=\"album-covers container clearfix\">\n     <div class=\"collection-album-container column fourth\" ng-repeat=\"album in collection.albums\">\n-        <img src=\"assets/images/album_covers/01.png\"/>\n+        <img src=\"{{ album.albumArtUrl }}\">\n         <div class=\"collection-album-info caption\">\n             <p>\n-                <a class=\"album-name\" ui-sref=\"album\">The Colors</a>\n+                <a class=\"album-name\" ui-sref=\"album\">{{ album.title }}</a>\n                 <br/>\n-                <a ui-sref=\"album\">Pablo Picasso</a>\n+                <a ui-sref=\"album\">{{ album.artist }}</a>\n                 <br/>\n-                X songs\n+                {{ album.songs.length }} songs\n ...\n```\n\nWith `ngRepeat`, the `<div>` with the `collection-album-container` class will repeat as many times as set by the loop.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n1. Read the [AngularJS Developer Guide on controllers](https://docs.angularjs.org/guide/controller).\n2. Read the [`ngRepeat` documentation](https://code.angularjs.org/1.4.7/docs/api/ng/directive/ngRepeat) and note the special properties that are exposed on the local scope of each template instance.\n3. Create a controller for the Album view.\n    - Link to the `AlbumCtrl.js` script source in `index.html`.\n    - Add an `albumData` property that holds a copy of `albumPicasso`.\n    - Use `ngRepeat` on the `album-view-song-item` table row to add a song row for each song on the album. Replace the static song information with the song data using the corresponding scope properties and {{ }} markup:\n        - number (Refer to the table of \"exposed properties\" in the [`ngRepeat` documentation](https://code.angularjs.org/1.4.7/docs/api/ng/directive/ngRepeat))\n        - name\n        - length (You'll filter the time code in a later checkpoint)\n    - In the Album template, replace the static album information with the album data using {{ }} markup:\n        - album art\n        - name\n        - artist\n        - year and record label\n\nCommit your assignment work in Git. __Merge this assignment.__ See [Git Checkpoint Workflow: Mergeable Assignments](https://www.bloc.io/resources/git-checkpoint-workflow#mergeable-assignments) for details.", "roadmap_section_id"=>186, "roadmap_section_ref"=>"0d47c2cb-2c63-46c3-a883-b9b5da818a2b|0", "default_student_access"=>"locked", "active_index"=>5, "checkpoint_type"=>"normal", "position"=>5, "points"=>1, "ref"=>"0c9e7448-f8bb-4265-ba14-38318d5eb410|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2141", "assessment"=>nil}, {"id"=>2142, "name"=>"Services: Part 1", "summary"=>"Services: organize and share code across your application", "body"=>"<!-- { ids:[2142], name:'Services: Part 1', summary:'Services: organize and share code across your application' } -->\n\nControllers have a specific role in an application and should not share code or state between each other. Instead, Angular has __services__ for that purpose.\n\nAngular [services](https://docs.angularjs.org/guide/services) are objects that can share data and behavior across several components (controllers, directives, filters, even other services) throughout an application. To use a service, we [inject it as a dependency](https://docs.angularjs.org/guide/di) for the component that depends on the service.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Service Recipes\n\nAngular has five service types, or \"recipes\":\n\n| &nbsp; | Recipe | Brief Description |\n| --- | :-- | :-- |\n| 1. | [Value Recipe](http://learn-angular.org/#!/lessons/the-value-recipe) | The simplest service of the recipes. It returns a value. |\n| 2. | [Factory Recipe](http://learn-angular.org/#!/lessons/the-factory-recipe) | Simple like the Value recipe, but allows us to inject a function instead of a variable. |\n| 3. | [Service Recipe](http://learn-angular.org/#!/lessons/the-service-recipe) | Produces a service just like the Value or Factory recipes, but does so by invoking a constructor with the `new` operator. |\n| 4. | [Provider Recipe](http://learn-angular.org/#!/lessons/the-provider-recipe) | The most verbose recipe with the most abilities. Overkill for most services. |\n| 5. | [Constant Recipe](http://learn-angular.org/#!/lessons/the-constant-recipe) | Similar to the Value recipe, but differs in that it is available in both the configuration and run phases. |\n\nFor most problems we encounter, there is an optimal recipe that will help us conquer it.\n\nNote the third item in the list that goes by the regrettable name of \"Service.\" As the group of recipes are called \"service recipes,\" it can be confusing that one of the individual recipes itself is called the \"Service\" recipe.\n\nAngular's creators are aware of the confusion this naming may cause, and they acknowledge their mistake in a humorous way:\n\n> Yes, we have called one of our service recipes 'Service'. We regret this and know that we'll be somehow punished for our misdeed. It's like we named one of our offspring 'Child'. Boy, that would mess with the teachers.\n\nRead the [AngularJS Developer Guide on providers](https://docs.angularjs.org/guide/providers) to learn more about the differences between the recipes.\n\n## Create a Service\n\nAngular provides some [built-in services](https://docs.angularjs.org/api/ng/service), but we will often need to create custom services. We register a service in the same way we've learned to register a controller, by calling a function on the application's module.\n\n> Angular's built-in services and objects, like `$scope` and `$interval`, start with a `$` as an identifier. This is a naming convention. Avoid naming custom services with this prefix.\n\nWithin the `scripts` directory, create a `services` directory. Within the `services` directory, create a file named `Fixtures.js` and register a `Fixtures` service using the Factory recipe:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/Fixtures.js)\n+(function() {\n+    function Fixtures() {\n+        var Fixtures = {};\n+        return Fixtures;\n+    }\n+\n+    angular\n+        .module('blocJams')\n+        .factory('Fixtures', Fixtures);\n+})();\n```\n\n> This style of factory declaration is based on the [Opinionated Angular Styleguide](http://toddmotto.com/opinionated-angular-js-styleguide-for-teams#factory)\n\n`.factory()` designates the use of the Factory recipe. For the Service recipe, we would use `.service()`, and so on for the other types.\n\nWithin the `Fixtures` function, we declare a variable and set it to an empty object. The factory will return this object and make its properties and methods available to other parts of our Angular application.\n\nOpen the `scripts/fixtures.js` file and copy the two album objects into the `scripts/services/Fixtures.js` file:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/Fixtures.js)\n ...\n function Fixtures() {\n     var Fixtures = {};\n\n+    var albumPicasso = {\n+        title: 'The Colors',\n+        artist: 'Pablo Picasso',\n+        label: 'Cubism',\n+        year: '1881',\n+        albumArtUrl: '/assets/images/album_covers/01.png',\n+        songs: [\n+            { title: 'Blue', duration: '161.71', audioUrl: '/assets/music/blue' },\n+            { title: 'Green', duration: '103.96', audioUrl: '/assets/music/green' },\n+            { title: 'Red', duration: '268.45', audioUrl: '/assets/music/red' },\n+            { title: 'Pink', duration: '153.14', audioUrl: '/assets/music/pink' },\n+            { title: 'Magenta', duration: '374.22', audioUrl: '/assets/music/magenta' }\n+        ]\n+    };\n+\n+    var albumMarconi = {\n+        title: 'The Telephone',\n+        artist: 'Guglielmo Marconi',\n+        label: 'EM',\n+        year: '1909',\n+        albumArtUrl: '/assets/images/album_covers/20.png',\n+        songs: [\n+            { title: 'Hello, Operator?', duration: '1:01' },\n+            { title: 'Ring, ring, ring', duration: '5:01' },\n+            { title: 'Fits in your pocket', duration: '3:21' },\n+            { title: 'Can you hear me now?', duration: '3:14' },\n+            { title: 'Wrong phone number', duration: '2:15' }\n+        ]\n+    };\n\n     return Fixtures;\n }\n ...\n```\n\n> Note that a forward slash (`/`) has been added to the beginning of each asset URL.\n\nWe'll use this service to pull the album data into our application. Delete the `scripts/fixtures.js` file. Add a public `getAlbum` method to the service:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/Fixtures.js)\n ...\n function Fixtures() {\n     var Fixtures = {};\n\n     var albumPicasso = { ... };\n\n     var albumMarconi = { ... };\n\n+    Fixtures.getAlbum = function() {\n+        return albumPicasso;\n+    };\n\n     return Fixtures;\n }\n ...\n```\n\nThis service is a \"Plain Old JavaScript Object\" (POJO). Components that inject this service as a dependency can access the public methods of the object – that is, the properties and methods that are `return`ed.\n\nIn `index.html`, remove the source link to `scripts/fixtures.js` and add one for the `Fixtures` service:\n\n```html(~/bloc/bloc-jams-angular/app/pages/index.html)\n ...\n-<script src=\"/scripts/fixtures.js\"></script>\n+<script src=\"/scripts/services/Fixtures.js\"></script>\n ...\n```\n\n## Inject a Service\n\nInject the custom service into the `AlbumCtrl`:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/controllers/AlbumCtrl.js)\n (function() {\n-    function AlbumCtrl() {\n+    function AlbumCtrl(Fixtures) {\n         this.albumData = angular.copy(albumPicasso);\n     }\n\n     angular\n         .module('blocJams')\n-        .controller('AlbumCtrl', AlbumCtrl);\n+        .controller('AlbumCtrl', ['Fixtures', AlbumCtrl]);\n })();\n```\n\nWe add `Fixtures` to `AlbumCtrl`'s array of dependencies. Once injected, the service is available for use within the controller.\n\nUpdate `AlbumCtrl` to use the `Fixtures` service's `getAlbum()` method:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/controllers/AlbumCtrl.js)\n ...\n function AlbumCtrl(Fixtures) {\n-    this.albumData = angular.copy(albumPicasso);\n+    this.albumData = Fixtures.getAlbum();\n }\n ...\n```\n\n`AlbumCtrl` uses `Fixtures`'s `getAlbum()` method to get the `albumPicasso` object.\n\n## Update `CollectionCtrl`\n\nWe haven't forgotten about `CollectionCtrl`; in the assignment, you will inject the `Fixtures` service into `CollectionCtrl` on your own.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n1. Read the [AngularJS Developer Guide on services](https://docs.angularjs.org/guide/services).\n2. Read about [each recipe in detail](http://learn-angular.org/#!/lessons/handling-complexity) from Learn-Angular.org.\n3. Add a second public method to the `Fixtures` service named `getCollection`.\n    - This method should take one argument, `numberOfAlbums`, and return an array with the specified number of `albumPicasso` objects pushed to it.\n    - Inject the `Fixtures` service into `CollectionCtrl`.\n    - Update `CollectionCtrl` to use the `Fixtures` service's `getCollection()` method:\n\n      ```javascript(~/bloc/bloc-jams-angular/app/scripts/controllers/CollectionCtrl.js)\n       ...\n       function CollectionCtrl(Fixtures) {\n      +    this.albums = Fixtures.getCollection(12);\n      -    this.albums = [];\n      -    for (var i = 0; i < 12; i++) {\n      -        this.albums.push(angular.copy(albumPicasso));\n      -    }\n       }\n       ...\n      ```\n\n    - To avoid a [duplicate key error](https://code.angularjs.org/1.4.7/docs/error/ngRepeat/dupes) (this error will display in the console), add `track by $index` to the `ngRepeat` directive in `collection.html`:\n\n      ```javascript(~/bloc/bloc-jams-angular/app/templates/collection.html)\n       ...\n      -<div class=\"collection-album-container column fourth\" ng-repeat=\"album in collection.albums\">\n      +<div class=\"collection-album-container column fourth\" ng-repeat=\"album in collection.albums track by $index\">\n       ...\n      ```\nCommit your assignment work in Git. __Merge this assignment.__ See [Git Checkpoint Workflow: Mergeable Assignments](https://www.bloc.io/resources/git-checkpoint-workflow#mergeable-assignments) for details.", "roadmap_section_id"=>186, "roadmap_section_ref"=>"0d47c2cb-2c63-46c3-a883-b9b5da818a2b|0", "default_student_access"=>"locked", "active_index"=>6, "checkpoint_type"=>"normal", "position"=>6, "points"=>1, "ref"=>"e3f6cad7-cbd9-4060-8bb1-ede7ba7a2e6e|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2142", "assessment"=>nil}, {"id"=>2143, "name"=>"Services: Part 2", "summary"=>"Services (cont.): organize and share code across your application", "body"=>"<!-- { ids:[2143], name:'Services: Part 2', summary:'Services (cont.): organize and share code across your application' } -->\n\nAn Angular service is a __singleton__, meaning regardless of how many components depend on the same service, each component gets the same instance of the service. If data in the service changes, any place where that service is injected will reflect the update(s) because the data references a _single_ object (not multiple instances of an object).\n\nThink of applications like Spotify, where the song we're listening to remains intact even as we navigate to different views. We view a playlist, then our profile, and then search results, and all the while the same song continues to play without needing to stop or reload.\n\n<center>![spotify](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/Angular%20Project/spotify.jpg)</center>\n\nIf we were to build Spotify with Angular, we might create three separate controllers to govern the views described above (playlist, profile, and search results). These controllers could all have a service named `SongPlayer` injected as a dependency.\n\nThis service might hold data such as if a song is playing, and if so, the song's name, artist, album, length, and timestamp. It may also control behaviors such as pause, play, previous, next, and volume.\n\nSince a service shares consistent data and behavior across components, Angular limits each service to a single instance: a singleton.\n\nThe example above is but one small use case for a service. Often, services are used to interact with application program interfaces, or APIs.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Create a `SongPlayer` Service for Bloc Jams\n\nWithin the `services` directory, create a file named `SongPlayer.js` and register a `SongPlayer` service using the Factory recipe:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n+(function() {\n+    function SongPlayer() {\n+         var SongPlayer = {};\n+         return SongPlayer;\n+    }\n+\n+    angular\n+        .module('blocJams')\n+        .factory('SongPlayer', SongPlayer);\n+})();\n```\n\nLike the `Fixtures` service, within the `SongPlayer` service we create a variable and set it to an empty object. The service returns this object, making its properties and methods public to the rest of the application.\n\nAdd the source link for the `SongPlayer` service to `index.html`:\n\n```html(~/bloc/bloc-jams-angular/app/pages/index.html)\n ...\n <script src=\"/scripts/services/Fixtures.js\"></script>\n <script src=\"/scripts/services/SongPlayer.js\"></script>\n ...\n```\n\nSince the `SongPlayer` service will play music, we need to add the Buzz library to our application. Add the Buzz library source to `index.html`:\n\n```html(~/bloc/bloc-jams-angular/app/pages/index.html)\n ...\n <script src=\"https://cdnjs.cloudflare.com/ajax/libs/angular-ui-router/0.2.15/angular-ui-router.min.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/buzz/1.1.10/buzz.min.js\"></script>\n ...\n```\n\n## Inject the `SongPlayer` Service\n\nTo use the service, we need to decide where to inject it as a dependency. We'll play music from the Album view, so inject the service into `AlbumCtrl`:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/controllers/AlbumCtrl.js)\n (function() {\n-     function AlbumCtrl(Fixtures) {\n+     function AlbumCtrl(Fixtures, SongPlayer) {\n         this.albumData = Fixtures.getAlbum();\n+        this.songPlayer = SongPlayer;\n     }\n\n     angular\n         .module('blocJams')\n-        .controller('AlbumCtrl', ['Fixtures', AlbumCtrl]);\n+        .controller('AlbumCtrl', ['Fixtures', 'SongPlayer', AlbumCtrl]);\n })();\n```\n\nThe `songPlayer` property holds the service and makes the service accessible within the Album view.\n\n## Add a `play` Method\n\nWith the current state of the Album view, we can view a play button when we hover over a song row. Let's add a `play` method to the `SongPlayer` service so that we can play a song:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n ...\n function SongPlayer() {\n     var SongPlayer = {};\n\n+    SongPlayer.play = function(song) {\n+        var currentBuzzObject = new buzz.sound(song.audioUrl, {\n+            formats: ['mp3'],\n+            preload: true\n+        });\n+\n+        currentBuzzObject.play();    \n+    };\n\n     return SongPlayer;\n }\n ...\n```\n\nThe `play` method takes an argument, `song`, which we'll get from the Album view when a user clicks the play button; the `ngRepeat` directive used in the Album view template will dictate which `song` to pass into the function. The `play` method creates a new Buzz object using the `song`'s `audioUrl` property and then calls Buzz's own `play` method on the object.\n\nTo trigger the `play` method, however, we need to add an `ngClick` directive to the play button anchor tag in `album.html`:\n\n```html(~/bloc/bloc-jams-angular/app/templates/album.html)\n ...\n-<a class=\"album-song-button\" ng-show=\"hovered && !playing\"><span class=\"ion-play\"></span></a>\n+<a class=\"album-song-button\" ng-show=\"hovered && !playing\" ng-click=\"album.songPlayer.play(song)\"><span class=\"ion-play\"></span></a>\n ...\n```\n\n`album.songPlayer.play(song)` may seem verbose, but it's not. Let's break it down:\n\n| Object/Property | Description |\n| :-------------- | :---------- |\n| `album` | Refers to the controller. We use \"controller as\" syntax: `AlbumCtrl as album` in our `config` block in `app.js`. |\n| `.songPlayer` | A property on the `album` object: `this.songPlayer = SongPlayer;`, where `this` refers to the controller. |\n| `.play(song)` | A method returned by the `SongPlayer` service, which we've injected and made available to `AlbumCtrl`. |\n\nView Bloc Jams locally and click to play a song. We can't pause a song yet, so refresh the page to stop the music.\n\n## Review `album.js`\n\nBefore we implement cohesive play and pause methods, let's review some code we implemented in `album.js` in the Foundation.\n\nThe `createSongRow` function handles a number of things. It:\n\n1. Generates [the song row template](https://github.com/Bloc/bloc-jams-source/blob/master/scripts/album.js#L6-L12).\n2. Declares and calls the [`clickHandler` function](https://github.com/Bloc/bloc-jams-source/blob/master/scripts/album.js#L16-L47), which plays or pauses a song.\n3. Declares and calls the [`onHover` and `offHover` functions](https://github.com/Bloc/bloc-jams-source/blob/master/scripts/album.js#L49-L65), which shows either a play button or the song number.\n\nWe no longer need a `createSongRow` function because our Angular app handles these functions in other ways. For the song row template, we now declare it in the view. We've also replaced the `onHover` and `offHover` functions with `ngMouseover` and `ngMouseleave` directives in the Album view.\n\nNow, we're working on playing and pausing music using a `SongPlayer` service instead of relying on a single `clickHandler` function. We'll use the `ngClick` directive in the view to tell Angular what to do when a user interacts with certain elements, such as play and pause buttons.\n\nNote that `clickHandler` calls numerous other functions, such as `setSong`, `updateSeekBarWhileSongPlays`, and `updatePlayerBarSong`. When we dive into those functions, we see that they also call other functions. There are many pieces to making a seemingly simple music player work well, and we'll work our way through them in due time.\n\nWe'll start with playing and pausing music.\n\n## Refactor the `play` Method\n\nWith our current `play` method, we could play all the songs on the album simultaneously, but that's not the expected behavior of a music player. We need better logic if we want users to have a good experience.\n\nWe [already figured out the logic](https://github.com/Bloc/bloc-jams-source/blob/master/scripts/album.js#L23-L46) in the foundation, but now we need to reimplement it using Angular. For example, the `clickHandler` function considers what to do if the currently playing song is or is not the same as the song the user clicks on.\n\nUpdate the `play` method with a condition that checks if the currently playing song is not equal to the song the user clicks on:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n ...\n function SongPlayer() {\n     var SongPlayer = {};\n\n+    var currentSong = null;\n+    var currentBuzzObject = null;\n\n     SongPlayer.play = function(song) {\n+        if (currentSong !== song) {\n+            if (currentBuzzObject) {\n+                currentBuzzObject.stop();\n+            }\n\n-            var currentBuzzObject = new buzz.sound(song.audioUrl, {\n+            currentBuzzObject = new buzz.sound(song.audioUrl, {\n                 formats: ['mp3'],\n                 preload: true\n             });\n\n+            currentSong = song;\n\n             currentBuzzObject.play();\n+        }   \n     };\n\n     return SongPlayer;\n }\n ...\n```\n\nFirst, we declare new variables named `currentSong` and `currentBuzzObject` and set their values to `null`, which is [what we did in the foundation](https://github.com/Bloc/bloc-jams-source/blob/master/scripts/album.js#L298-L299). We've removed the `currentBuzzObject` variable declaration from the local scope of the `play` method because we anticipate needing to access this variable elsewhere in the service.\n\nIf the currently playing song is not the same as the song the user clicks on, then we want to:\n\n1. Stop the currently playing song, if there is one.\n2. Set a new Buzz sound object.\n3. Set the newly chosen song object as the `currentSong`.\n4. Play the new Buzz sound object.\n\nNext, add a second conditional statement that checks if `currentSong` is equal to `song`:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n ...\n SongPlayer.play = function(song) {\n     if (currentSong !== song) {\n         ...\n-    }\n+    } else if (currentSong === song) {\n+        if (currentBuzzObject.isPaused()) {\n+            currentBuzzObject.play();\n+        }\n+    }              \n };\n ...\n```\n\nIf the user can trigger the `play` method on a song that is already set as the `currentSong`, then the assumption is that the song must be paused. The conditional statement `if (currentBuzzObject.isPaused())` is a check to make sure our assumption is correct.\n\n## Revisit Wishful Coding\n\nBefore we can implement a `pause` method, we need to go back to the \"wishful coding\" we wrote in `album.html` earlier in the project, specifically the expressions for the `ngShow` directive:\n\n```html(~/bloc/bloc-jams-angular/app/templates/album.html)\n<td class=\"song-item-number\">\n    <span ng-show=\"!hovered && !playing\">{{ $index + 1 }}</span>\n    <a class=\"album-song-button\" ng-show=\"hovered && !playing\" ng-click=\"album.songPlayer.play(song)\"><span class=\"ion-play\"></span></a>\n    <a class=\"album-song-button\" ng-show=\"playing\"><span class=\"ion-pause\"></span></a>\n</td>\n```\n\nWe used a variable named `playing` that we hadn't yet implemented, but was intended to reflect whether or not a song is playing. We'll maintain this idea, though we'll set `playing` to be a property on the `song` object and track the state of the song that way. __Replace the three instances of `playing` in `album.html` (as shown above) with `song.playing`.__\n\nIn our `SongPlayer` service, every time we play, pause, or stop a song, we'll need to update this boolean. Add the following to the `play` method:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n ...\n SongPlayer.play = function(song) {\n     if (currentSong !== song) {\n         if (currentBuzzObject) {\n             currentBuzzObject.stop();\n+            currentSong.playing = null;\n         }\n\n         var currentBuzzObject = new buzz.sound(song.audioUrl, {\n             formats: ['mp3'],\n             preload: true\n         });\n\n         currentSong = song;\n\n         currentBuzzObject.play();\n+        song.playing = true;\n     }\n ...\n```\n\nWhen we click to play a song, we should now see the pause button.\n\n## Write a `pause` Method\n\nNow that we can actually see the pause button, let's implement the method to call when a user clicks on it:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n ...\n SongPlayer.play = function(song) {\n     ...            \n };\n\n+SongPlayer.pause = function(song) {\n+    currentBuzzObject.pause();\n+    song.playing = false;\n+};\n ...\n```\n\nThe `pause` method requires less logic because we don't need to check for various conditions – a song must already be playing before the user can trigger it.\n\nAdd an `ngClick` directive to the pause button anchor tag in `album.html`:\n\n```html(~/bloc/bloc-jams-angular/app/templates/album.html)\n ...\n-<a class=\"album-song-button\" ng-show=\"song.playing\"><span class=\"ion-pause\"></span></a>\n+<a class=\"album-song-button\" ng-show=\"song.playing\" ng-click=\"album.songPlayer.pause(song)\"><span class=\"ion-pause\"></span></a>\n ...\n```\n\nOpen Bloc Jams and test the play and pause buttons.\n\n## Refactor\n\nWe can play and pause songs without issue now, though we should refactor some parts of our code to make it reusable. For example, [review the `setSong` function](https://github.com/Bloc/bloc-jams-source/blob/master/scripts/album.js#L72-L84) from the foundation. Now look at our new `play` method.\n\nWe'll extract parts of the code from the `play` method and create a `setSong` function to handle them:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n ...\n+var setSong = function(song) {\n+   if (currentBuzzObject) {\n+       currentBuzzObject.stop();\n+       currentSong.playing = null;\n+   }\n+\n+   currentBuzzObject = new buzz.sound(song.audioUrl, {\n+       formats: ['mp3'],\n+       preload: true\n+   });\n+\n+   currentSong = song;\n+};\n\n SongPlayer.play = function(song) {\n     if (currentSong !== song) {\n-        if (currentBuzzObject) {\n-            currentBuzzObject.stop();\n-            currentSong.playing = null;\n-        }\n-\n-        currentBuzzObject = new buzz.sound(song.audioUrl, {\n-            formats: ['mp3'],\n-            preload: true\n-        });\n-\n-        currentSong = song;\n+        setSong(song);\n         currentBuzzObject.play();\n         song.playing = true;\n     } else if (currentSong === song) {\n         if (currentBuzzObject.isPaused()) {\n             currentBuzzObject.play();\n         }\n     }\n };\n ...\n```\n\n## Documentation\n\nOur `SongPlayer` service should now contain:\n\n- two private attributes: `currentSong` and `currentBuzzObject`,\n- one private function: `setSong`,\n- and two public methods: `SongPlayer.play` and `SongPlayer.pause`.\n\nAs the logic of the service grows, it's important to write good documentation for our own benefit as well as the benefit of other developers.\n\nWe'll continue to group our service logic into four groups and maintain them in this order:\n\n1. private attributes\n2. private functions\n3. public attributes\n4. public methods\n\nWe will also provide more details for each attribute or function. For example, add the following documentation for the `setSong` function:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n ...\n+/**\n+* @function setSong\n+* @desc Stops currently playing song and loads new audio file as currentBuzzObject\n+* @param {Object} song\n+*/\n var setSong = function(song) {\n     ...\n };\n ...\n```\n\nWe place the documentation immediately before the function and provide:\n\n- `@function`: Name of the function\n- `@desc`: A short description\n- `@param`: A list of parameters and their type\n\n> If a function does not have a parameter, then we exclude that line.\n\nIf a function returns something, such as a number, then we would include a fourth line:\n\n```\n* @returns {Number}\n```\n\nFor attributes, we include two lines of information:\n\n- `@desc`: A short description\n- `@type`: The type, such as `{Object}`, `{Array}`, `{Number}`, etc.\n\nAdd the following documentation for `currentBuzzObject`:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n ...\n+/**\n+* @desc Buzz object audio file\n+* @type {Object}\n+*/\n var currentBuzzObject = null;\n ...\n```\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n1. Write a private `playSong` function.\n    - This function should do two things:\n        1. Play the current Buzz object: `currentBuzzObject.play();`\n        2. Set the `playing` property of the `song` object to `true`: `song.playing = true;`\n    - Replace all instances when these two lines of code are used together with the `playSong` function.\n2. Write documentation for the remaining undocumented attributes and functions of the SongPlayer service.\n\nCommit your assignment work in Git. __Merge this assignment.__ See [Git Checkpoint Workflow: Mergeable Assignments](https://www.bloc.io/resources/git-checkpoint-workflow#mergeable-assignments) for details.", "roadmap_section_id"=>186, "roadmap_section_ref"=>"0d47c2cb-2c63-46c3-a883-b9b5da818a2b|0", "default_student_access"=>"locked", "active_index"=>7, "checkpoint_type"=>"normal", "position"=>7, "points"=>1, "ref"=>"1b65b4fd-007c-4238-b05f-f7735ed005cb|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2143", "assessment"=>nil}, {"id"=>2144, "name"=>"Services: Part 3", "summary"=>"Services (cont.): organize and share code across your application", "body"=>"<!-- { ids:[2144], name:'Services: Part 3', summary:'Services (cont.): organize and share code across your application' } -->\n\nWe can play and pause songs from the song rows in the Album view, but what about the player bar? The player bar is a separate entity from the Album view, so we'll create a controller for it.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Create a Controller for the Player Bar\n\nCreate a new file for the `PlayerBarCtrl` and inject both the `Fixtures` and `SongPlayer` services into the controller:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/controllers/PlayerBarCtrl.js)\n+(function() {\n+    function PlayerBarCtrl(Fixtures, SongPlayer) {\n+        this.albumData = Fixtures.getAlbum();\n+        this.songPlayer = SongPlayer;\n+    }\n+\n+    angular\n+        .module('blocJams')\n+        .controller('PlayerBarCtrl', ['Fixtures', 'SongPlayer', PlayerBarCtrl]);\n+})();\n```\n\nAdd the source file to `index.html`:\n\n```html(~/bloc/bloc-jams-angular/app/pages/index.html)\n ...\n <script src=\"/scripts/controllers/AlbumCtrl.js\"></script>\n+<script src=\"/scripts/controllers/PlayerBarCtrl.js\"></script>\n ...\n```\n\nLastly, register `PlayerBarCtrl` for the player bar template:\n\n```html(~/bloc/bloc-jams-angular/app/templates/player_bar.html)\n-<section class=\"player-bar\">\n+<section class=\"player-bar\" ng-controller=\"PlayerBarCtrl as playerBar\">\n ...\n```\n\nWe use \"controller as\" syntax to stay consistent with our other controllers.\n\n## Update the Template\n\nWe'll also need to update the template to clearly declare the play and pause buttons of the player bar in the view:\n\n```html(~/bloc/bloc-jams-angular/app/templates/player_bar.html)\n ...\n <a class=\"play-pause\">\n-    <span class=\"ion-play\"></span>\n+    <span class='ion-play'\n+          ng-show=\"!song.playing\"\n+          ng-click=\"playerBar.songPlayer.play(song)\">\n+    </span>\n+    <span class='ion-pause'\n+          ng-show=\"song.playing\"\n+          ng-click=\"playerBar.songPlayer.pause(song)\">\n+    </span>\n </a>\n ...\n```\n\nWe no longer use jQuery to determine which element is visible. Instead, we include both buttons in the view and use the `ngShow` directive to tell Angular when one button or the other should display. We also include `ngClick` to trigger the play and pause functions.\n\nWhen we test this, however, we receive an error in the console. From this error we learn that `song` is undefined within `PlayerBarCtrl`. The scope of `PlayerBarCtrl` is different from `AlbumCtrl` and does not have access to the `song` object.\n\n## Make `currentSong` Public\n\nThe player bar is different from the Album view in that it doesn't need to know the state of individual songs because it will only be able to affect one song at a time: the currently playing song. To access the information of the currently playing song in the player bar, we'll need to do two things.\n\nThe first is to change the private attribute `currentSong` into a public attribute named `SongPlayer.currentSong` so that we can use it within the player bar:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n ...\n /**\n * @desc Active song object from list of songs\n * @type {Object}\n */\n-var currentSong = null;\n+SongPlayer.currentSong = null;\n ...\n```\n\n> Now that the attribute is public, move it below `setSong` and above `SongPlayer.play` to maintain organization of private and public attributes/functions.\n\n__Update all instances of `currentSong` to `SongPlayer.currentSong`.__ (Find and replace is the quickest way to accomplish this task.)\n\nIn the player bar template, update the `ngShow` expression to reflect this change:\n\n```html(~/bloc/bloc-jams-angular/app/templates/player_bar.html)\n ...\n <a class=\"play-pause\">\n     <span class='ion-play'\n-          ng-show=\"!song.playing\"\n+          ng-show=\"!playerBar.songPlayer.currentSong.playing\"\n           ng-click=\"playerBar.songPlayer.play(song)\">\n     </span>\n     <span class='ion-pause'\n-          ng-show=\"song.playing\"\n+          ng-show=\"playerBar.songPlayer.currentSong.playing\"\n           ng-click=\"playerBar.songPlayer.pause(song)\">\n     </span>\n </a>\n ...\n```\n\nIf we play and pause a song from the song row, we see that the play and pause buttons in the player bar display correctly. When we try to pause a song from the player bar, however, we get an error in the console. The error tells us the same thing as the previous error message – `song` is undefined within `PlayerBarCtrl`. We cannot pass `song` as an argument into the `play` and `pause` methods from the player bar.\n\n## Update the `play` and `pause` Methods\n\nWhile we still can't access the `song` object, that's okay. We've already figured out that we don't need to have access to `song` in the player bar. We only need to know the currently playing song, which we can access via the service. The second step to make the player bar work is to update `play` and `pause` to account for the fact that the player bar can't pass `song` as an argument.\n\nAdd the following lines to the `play` and `pause` methods:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n /**\n * @function play\n * @desc Play current or new song\n * @param {Object} song\n */\n SongPlayer.play = function(song) {\n+    song = song || SongPlayer.currentSong;\n     if (SongPlayer.currentSong !== song) {\n         setSong(song);\n         playSong(song);\n     } else if (SongPlayer.currentSong === song) {\n         if (currentBuzzObject.isPaused()) {\n             playSong(song);\n         }\n    }\n };\n /**\n * @function pause\n * @desc Pause current song\n * @param {Object} song\n */\n SongPlayer.pause = function(song) {\n+    song = song || SongPlayer.currentSong;\n     currentBuzzObject.pause();\n     song.playing = false;\n };\n```\n\nWe use `||` to tell the function: assign (1) the value of `song` _or_ (2) the value of `SongPlayer.currentSong` to the `song` variable. The first condition occurs when we call the methods from the Album view's song rows, and the second condition occurs when we call the methods from the player bar.\n\nLastly, update the player bar template to remove `song` as an argument:\n\n```html(~/bloc/bloc-jams-angular/app/templates/player_bar.html)\n ...\n <a class=\"play-pause\">\n     <span class='ion-play'\n           ng-show=\"!playerBar.songPlayer.currentSong.playing\"\n-          ng-click=\"playerBar.songPlayer.play(song)\">\n+          ng-click=\"playerBar.songPlayer.play()\">\n     </span>\n     <span class='ion-pause'\n           ng-show=\"playerBar.songPlayer.currentSong.playing\"\n-          ng-click=\"playerBar.songPlayer.pause(song)\">\n+          ng-click=\"playerBar.songPlayer.pause()\">\n     </span>\n </a>\n ...\n```\n\nTest the ability to play and pause from the player bar – it should work now!\n\n## Next and Previous Buttons\n\nBeing able to play and pause from the player bar is one victory; now we'll work on implementing the ability to move between songs with the next and previous buttons.\n\nLet's first review the [`nextSong` and `previousSong` functions](https://github.com/Bloc/bloc-jams-source/blob/master/scripts/album.js#L218-L276) from the Foundation.\n\nThere's a lot going on in these functions. We no longer need to get the song number cell and we won't need to update the DOM in the JavaScript. We can trim the excess from these old functions and implement them anew in the `SongPlayer` service.\n\n## Access `songs` from the Current Album\n\nTo move between songs, we need to know the index of the `song` object within the `songs` array. To access the `songs` array, we need to store the album information, which we [also did in the Foundation](https://github.com/Bloc/bloc-jams-source/blob/master/scripts/album.js#L296).\n\nInject the `Fixtures` service into the `SongPlayer` service. Then use the `getAlbum` method to store the album information:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n ...\n-function SongPlayer() {\n+function SongPlayer(Fixtures) {\n     var SongPlayer = {};\n\n+    var currentAlbum = Fixtures.getAlbum();\n ...\n```\n\n> Remember to write documentation for this private attribute.\n\nNow that we can access the album, we can write a function to get the index of a song. Write a `getSongIndex` function, which is similar to the [`trackIndex` function](https://github.com/Bloc/bloc-jams-source/blob/master/scripts/album.js#L214-L216) we wrote in the foundation:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n ...\n+var getSongIndex = function(song) {\n+    return currentAlbum.songs.indexOf(song);\n+};\n\n/**\n* @desc Active song object from list of songs\n* @type {Object}\n*/\nSongPlayer.currentSong = null;\n ...\n```\n\n> Add documentation for this private function.\n\n## Write a `previous` Method\n\nArmed with the ability to get a song's index, we'll write a method to go to the previous song:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n ...\n SongPlayer.pause = function(song) {\n     ...\n };\n\n+SongPlayer.previous = function() {\n+    var currentSongIndex = getSongIndex(SongPlayer.currentSong);\n+    currentSongIndex--;\n+};\n ...\n```\n\n> Don't forget the documentation! This will be the last reminder to add documentation for newly written attributes and functions/methods. Make it a habit.\n\nWe use the `getSongIndex` function to get the index of the currently playing song and then decrease that index by one.\n\nNext, we'll add logic for what should happen if the previous song index is less than zero – that is, what should happen when the user is on the first song and clicks the previous button? There are many possibilities. We'll opt to:\n\n- stop the currently playing song, and\n- set the value of the currently playing song to the first song.\n\nUpdate the `previous` method with the following conditional statement:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n ...\n SongPlayer.previous = function() {\n     var currentSongIndex = getSongIndex(SongPlayer.currentSong);\n     currentSongIndex--;\n\n+    if (currentSongIndex < 0) {\n+        currentBuzzObject.stop();\n+        SongPlayer.currentSong.playing = null;\n+    }\n };\n ...\n```\n\nIf the `currentSongIndex` is not less than zero, then it must be greater than zero. Add an `else` conditional that moves to the previous song and automatically plays it:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n ...\n SongPlayer.previous = function() {\n     var currentSongIndex = getSongIndex(SongPlayer.currentSong);\n     currentSongIndex--;\n\n     if (currentSongIndex < 0) {\n         currentBuzzObject.stop();\n         SongPlayer.currentSong.playing = null;\n-    }\n+    } else {\n+        var song = currentAlbum.songs[currentSongIndex];\n+        setSong(song);\n+        playSong(song);\n+    }\n };\n ...\n```\n\nTo trigger the `previous` method, add an `ngClick` directive to the previous button anchor tag in `player_bar.html`:\n\n```html(~/bloc/bloc-jams-angular/app/templates/player_bar.html)\n ...\n-<a class=\"previous\">\n+<a class=\"previous\" ng-click=\"playerBar.songPlayer.previous()\">\n ...\n```\n\nTest the previous button in the view and revel in another victory.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n1. Implement a `SongPlayer.next` method. This method should closely resemble `SongPlayer.previous`, except that it allows a user to move to the next song in the `songs` array.\n2. Write a private `stopSong` function.\n    - This function should do two things:\n        1. Stop the current Buzz object: `currentBuzzObject.stop();`\n        2. Set the `playing` property of the `song` object to `null`: `song.playing = null;`\n    - Replace all instances when these two lines of code are used together with the `stopSong` function.\n2. We can play, pause, and move between songs, but the player bar doesn't show us what is playing. Use {{ }} markup to update the player bar template with dynamic album and current song information:\n    - song name\n    - artist name\n    - total song time\n\n    > In the Foundation, we accomplished this with the [`updatePlayerBarSong` function](https://github.com/Bloc/bloc-jams-source/blob/master/scripts/album.js#L204-L212). With Angular, we don't need this function; instead, we declare the information in the view.\n\nCommit your assignment work in Git. __Merge this assignment.__ See [Git Checkpoint Workflow: Mergeable Assignments](https://www.bloc.io/resources/git-checkpoint-workflow#mergeable-assignments) for details.", "roadmap_section_id"=>186, "roadmap_section_ref"=>"0d47c2cb-2c63-46c3-a883-b9b5da818a2b|0", "default_student_access"=>"locked", "active_index"=>8, "checkpoint_type"=>"normal", "position"=>8, "points"=>1, "ref"=>"e803a52f-8e2c-4bb2-a527-0a78c60e0bba|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2144", "assessment"=>nil}, {"id"=>2145, "name"=>"Directives: Part 1", "summary"=>"Directives: attach specific Angular behavior to DOM elements", "body"=>"<!-- { ids:[2145], name:'Directives: Part 1', summary:'Directives: attach specific Angular behavior to DOM elements' } -->\n\nAny Angular element in the HTML is a __directive__. A [directive](https://docs.angularjs.org/guide/directive) binds Angular functionality to HTML on a page. We've already used several of Angular's built-in directives to refactor Bloc Jams:\n\n| Directive | Description |\n| --- | --- |\n| [`ngApp`](https://docs.angularjs.org/api/ng/directive/ngApp) | Designates the root element of the application |\n| [`ngController`](https://docs.angularjs.org/api/ng/directive/ngController) | Attaches a controller to the view |\n| [`ngRepeat`](https://docs.angularjs.org/api/ng/directive/ngRepeat) | Instantiates a template once per item from a collection |\n| [`ngClick`](https://docs.angularjs.org/api/ng/directive/ngClick) | Allows us to specify custom behavior when an element is clicked |\n| [`ngShow`](https://docs.angularjs.org/api/ng/directive/ngShow) | Shows or hides the given HTML element based on the expression provided to the attribute |\n\nWe've also used some of UI-Router's built-in directives:\n\n| Directive | Description |\n| --- | --- |\n| [`ui-view`](https://github.com/angular-ui/ui-router/wiki/Quick-Reference#ui-view) | Tells `$state` where to place templates |\n| [`ui-sref`](https://github.com/angular-ui/ui-router/wiki/Quick-Reference#ui-sref) | Binds an `<a>` tag to a state |\n\n> The `ng` prefix on directives is a naming convention reserved for the Angular core library. UI-Router, which is not part of the Angular core library, prefixes its directives with `ui`. When naming your own directives, you should choose a custom prefix. This will avoid potential bugs and naming conflicts that may occur with future releases of Angular.\n\nWhen we declare `ng-controller=\"SomeCtrl\"`, we're using the `ngController` directive to run certain Angular functionality. In this case, `ngController` searches for a controller named \"SomeCtrl\" and executes its code. Angular executes the code within the scope of the element attached to `ng-controller`.\n\nIn this example, as with every directive we have seen so far, we invoke directives as attributes in the HTML. When Angular compiles an application's HTML, however, it can match directives based on more than just attributes. It can also match directives on class names, element names, and even comments.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Directive Types\n\nLet's say we have a custom directive named `myDirective`. Here are the four ways in which we could invoke that directive in the HTML:\n\n### Attribute Directive\n\n```html\n<div my-directive=\"expression\"></div>\n```\n\nThis is the directive type with which we are already familiar. The directive evaluates the `expression`.\n\n### Class Directive\n\n```html\n<div class=\"my-directive: expression;\"></div>\n```\n\nWith the class directive, the `my-directive` class is applied to the element if the `expression` is true.\n\n### Element Directive\n\n```html\n<my-directive></my-directive>\n```\n\nWith the element directive, the directive name becomes a custom tag name.\n\n### Comment Directive\n\n```html\n<!-- directive: my-directive expression -->\n```\n\nAlthough comment directives are an option, __Angular documentation recommends developers use element and attribute directives above other options__. Element and attribute directives often make it easier for us, the developer, to match elements to directives.\n\n### A Note on Name Normalization\n\nWhen we talk about a directive we refer to it by its `camelCase` name, but when we use it in the HTML the name is `dash-delimited`.\n\nThe case-sensitive `camelCase` name is considered the _normalized_ name. Angular uses the normalized name (e.g. `ngApp`) to match elements to directives. HTML, however, is not case sensitive, so directives are referred to by their lower-case forms (e.g. `ng-app`).\n\nWhen Angular compiles HTML, it converts the `dash-delimited` name to `camelCase`.\n\n## Create a Custom Directive\n\nLike controllers and services, directives are registered on modules. We'll create a directive to handle the seek bars for Bloc Jams.\n\nWithin the `scripts` directory, create a `directives` directory. Within the `directives` directory, create a file named `seekBar.js` and register a `seekBar` directive:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/directives/seekBar.js)\n+(function() {\n+    function seekBar() {\n+    }\n+\n+    angular\n+        .module('blocJams')\n+        .directive('seekBar', seekBar);\n+})();\n```\n\nFor directives, the callback function (in this case, `seekBar`) is a _factory function_. It returns an object that describes the directive's behavior to Angular's HTML compiler. This object communicates the behavior through options. Add the following to the directive:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/directives/seekBar.js)\n ...\n function seekBar() {\n+    return {\n+        templateUrl: '/templates/directives/seek_bar.html',\n+        replace: true,\n+        restrict: 'E'\n+    };\n }\n ...\n```\n\nWe return three options: `templateUrl`, `replace`, and `restrict`.\n\n| Directive Option | Description |\n| ---------------- | ----------- |\n| `templateUrl` | Specifies a URL from which the directive will load a template. |\n| `replace` | Specifies what the template should replace. If `true`, the template replaces the directive's element. If `false`, the template replaces the _contents_ of the directive's element. |\n| `restrict` | <a id=\"restriction\"></a>Restricts the directive to a specific declaration style: element `E`, attribute `A`, class `C`, and comment `M`. If omitted, the defaults (`E` and `A`) are used. Multiple restrictions are stringed together, for example `AE` or `AEC`.|\n\n> Directives can have [many more options](https://docs.angularjs.org/api/ng/service/$compile#directive-definition-object) than the ones described above.\n\nWe've named the directive `seekBar`, which means Angular will look for `seek-bar` in the HTML and call this directive when it finds that markup.\n\n`restrict: 'E'` instructs Angular to treat this directive as an element. For example, Angular will run the code if it finds `<seek-bar>` in the HTML, but not if it finds `<div seek-bar>`.\n\n`replace: true` instructs Angular to completely replace the `<seek-bar>` element with the directive's HTML template rather than insert the HTML _between_ the `<seek-bar></seek-bar>` tags.\n\nThe `templateUrl` option specifies the path to the HTML template that the directive will use. We've added a template URL, but we haven't yet made the template. Let's do that now.\n\n## Create a Directive Template\n\nIn the `templates` directory, create a `directives` directory to distinguish primary application templates from directive templates. Within the `directives` directory, create a file named `seek_bar.html`.\n\nFind the seek bar element in `player_bar.html` and paste it into the newly created `seek_bar.html` file:\n\n```html(~/bloc/bloc-jams-angular/app/templates/directives/seek_bar.html)\n+<div class=\"seek-bar\">\n+    <div class=\"fill\"></div>\n+    <div class=\"thumb\"></div>\n+</div>\n```\n\nIn `player_bar.html`, find __both__ instances of the seek bar element and replace them with our custom `seekBar` directive:\n\n```html(~/bloc/bloc-jams-angular/app/templates/directives/player_bar.html)\n ...\n-<div class=\"seek-bar\">\n-    <div class=\"fill\"></div>\n-    <div class=\"thumb\"></div>\n-</div>\n+<seek-bar></seek-bar>\n ...\n```\n\nWhen Angular traverses the HTML, it replaces the `<seek-bar>` element with its corresponding directive definition, which includes both the HTML template and any functionality associated with it.\n\nTo display the directive template in the view, add the `seekBar.js` source to `index.html`:\n\n```html(~/bloc/bloc-jams-angular/app/pages/index.html)\n ...\n <script src=\"/scripts/controllers/PlayerBarCtrl.js\"></script>\n+<script src=\"/scripts/directives/seekBar.js\"></script>\n ...\n```\n\nThe seek bars should now display in the view.\n\n## Link Directive Logic to the DOM\n\nWe'll add two more options to the directive:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/directives/seekBar.js)\n ...\n function seekBar() {\n     return {\n         templateUrl: '/templates/directives/seek_bar.html',\n         replace: true,\n-        restrict: 'E'\n+        restrict: 'E',\n+        scope: { },\n+        link: function(scope, element, attributes) {\n             // directive logic to return\n+        }\n     };\n }\n ...\n```\n\nWe've added `scope` and `link` options:\n\n| Directive Option | Description |\n| ---------------- | ----------- |\n| `scope` | Specifies that a new scope be created for the directive. |\n| `link` | Responsible for registering DOM listeners and updating the DOM. This is where we put most of the directive logic. |\n\nDeclaring an empty `scope` property ensures that a new scope will exist solely for the directive (referred to as [isolate-scope](https://docs.angularjs.org/guide/directive#isolating-the-scope-of-a-directive)). An isolate-scope allows us to bind functions from the directive's view to its scope.\n\nThe `link` function is automatically generated and scoped to the element defining the directive. Think of it as a function that executes when the directive is instantiated in the view. This is where all logic related to DOM manipulation will go.\n\nDirective `link` functions take the same arguments (with a strict order) during declaration. Altering the order of these arguments will cause errors.\n\n1. The `link` method's first argument is its `scope` object. Attributes and methods on the `scope` object are accessible within the directive's view.\n2. The second argument is the [jqLite-wrapped element](https://docs.angularjs.org/api/ng/function/angular.element) that the directive matches.\n3. The third argument is a hash of attributes with which the directive was declared. If we declare `<seek-bar>` with no attributes in the HTML, then this hash will be empty.\n\n## jQuery and Angular\n\nAngular and jQuery are both powerful tools written with different programming design paradigms. The Angular community generally prefers to keep jQuery logic out of Angular apps because we can replicate jQuery functionality with Angular and plain JavaScript. Including both means we will have two heavy source libraries in our application when it may not be necessary.\n\nIf we are going to use jQuery logic anywhere in an Angular app, the _only_ place where we would use it is in a directive's `link` function. Angular has a subset of some basic jQuery DOM functions called [jqLite](https://thinkster.io/a-better-way-to-learn-angularjs/jqlite-angular-element-and-the-dom). It allows Angular users to get some of the most common DOM manipulation and event handling methods from jQuery without having to include the entire library.\n\nView the [`angular.element` documentation](https://docs.angularjs.org/api/ng/function/angular.element) to view the jQuery methods that are available with jqLite.\n\nFor the Bloc Jams project, we will use more jQuery methods than are available through jqLite, so we'll need to add the jQuery library to `index.html`:\n\n```html(~/bloc/bloc-jams-angular/app/pages/index.html)\n ...\n+<script src=\"https://code.jquery.com/jquery-2.1.4.min.js\"></script>\n <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.7/angular.min.js\"></script>\n ...\n```\n\n## Add Logic to the `seekBar` Directive\n\nBefore we write logic for the directive, let's review the [`setupSeekBars` function](https://github.com/Bloc/bloc-jams-source/blob/master/scripts/album.js#L169-L202) that we wrote in the Foundation. This function does a few things:\n\n1. Identifies the seek bar elements.\n2. Has a click event handler that, depending on which seek bar the user clicks, either jumps to a new point in the currently playing song or sets a new volume level.\n3. Has a mousedown event handler that tracks if a user has clicked on the seek bar thumb and is dragging it to a new position. If so, like the click event, either the song position or the volume changes.\n\nWe'll also review the [`updateSeekPercentage` function](https://github.com/Bloc/bloc-jams-source/blob/master/scripts/album.js#L159-L167) because we need to determine the position of the thumb as well as the width of the seek bar playback that allows a user to see how much of a song has played.\n\nLet's rewrite this logic in the `link` function:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/directives/seekBar.js)\n ...\n function seekBar() {\n     return {\n         templateUrl: '/templates/directives/seek_bar.html',\n         replace: true,\n         restrict: 'E',\n         scope: { },\n         link: function(scope, element, attributes) {\n+            scope.value = 0;\n+            scope.max = 100;\n+\n+            var percentString = function () {\n+                var value = scope.value;\n+                var max = scope.max;\n+                var percent = value / max * 100;\n+                return percent + \"%\";\n+            };\n+\n+            scope.fillStyle = function() {\n+                return {width: percentString()};\n+            };\n         }\n     };\n }\n ...\n```\n\n`seekBar`'s HTML template can access the attributes and methods of the directive's `scope` object – in this case: `scope.value`, `scope.max`, and `scope.fillStyle`.\n\n| Attribute / Method | Description |\n| ------------------ | ----------- |\n| `scope.value` | Holds the value of the seek bar, such as the currently playing song time or the current volume. Default value is 0. |\n| `scope.max` | Holds the maximum value of the song and volume seek bars. Default value is 100. |\n| `percentString()` | A function that calculates a percent based on the _value_ and _maximum value_ of a seek bar. |\n| `scope.fillStyle()` | Returns the width of the seek bar fill element based on the calculated percent. |\n\nEventually we'll add `scope.value` and `scope.max` to the view, but for now we'll just add `scope.fillStyle()` using the [`ngStyle directive`](https://docs.angularjs.org/api/ng/directive/ngStyle), which allows us to set CSS styles on an HTML element conditionally:\n\n```html(~/bloc/bloc-jams-angular/app/templates/directives/seek_bar.html)\n <div class=\"seek-bar\">\n-    <div class=\"fill\"></div>\n+    <div class=\"fill\" ng-style=\"fillStyle()\"></div>\n     <div class=\"thumb\"></div>\n </div>\n```\n\nNote that `scope` does not precede the method name in the view (e.g. `scope.fillStyle()`). The directive knows which attributes and methods are on its `scope` and can be used in the view. We could not, for instance, call `percentString()` in the view because it is not on the directive's `scope` object.\n\n## Update the Seek Bar from a Click Event\n\nThe logic we've added to the directive so far is similar to the logic of the [`updateSeekPercentage` function](https://github.com/Bloc/bloc-jams-source/blob/master/scripts/album.js#L159-L167) in the Foundation. Now that we can calculate the seek bar's `value`, we'll add the first of two functions: one to call when a user clicks on the seek bar:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/directives/seekBar.js)\n ...\n+var calculatePercent = function(seekBar, event) {\n+    var offsetX = event.pageX - seekBar.offset().left;\n+    var seekBarWidth = seekBar.width();\n+    var offsetXPercent = offsetX / seekBarWidth;\n+    offsetXPercent = Math.max(0, offsetXPercent);\n+    offsetXPercent = Math.min(1, offsetXPercent);\n+    return offsetXPercent;\n+};\n\n return {\n     templateUrl: '/templates/directives/seek_bar.html',\n     replace: true,\n     restrict: 'E',\n     scope: { },\n     link: function(scope, element, attributes) {\n         scope.value = 0;\n         scope.max = 100;\n\n+        var seekBar = $(element);\n\n         var percentString = function () {\n             var value = scope.value;\n             var max = scope.max;\n             var percent = value / max * 100;\n             return percent + \"%\";\n         };\n\n         scope.fillStyle = function() {\n             return {width: percentString()};\n         };\n\n+        scope.onClickSeekBar = function(event) {\n+            var percent = calculatePercent(seekBar, event);\n+            scope.value = percent * scope.max;\n+        };\n     }\n ...\n```\n\n| Attribute / Method | Description |\n| ------------------ | ----------- |\n| `calculatePercent()` | Calculates the horizontal percent along the seek bar where the event (passed in from the view as `$event`) occurred. |\n| `seekBar` | Holds the element that matches the directive (`<seek-bar>`) as a jQuery object so we can call jQuery methods on it. |\n| `scope.onClickSeekBar()` | Updates the seek bar value based on the seek bar's width and the location of the user's click on the seek bar. |\n\nDespite using jQuery, Angular still dictates the style of our code – we declare in the HTML which element should execute `scope.onClickSeekBar()`:\n\n```html(~/bloc/bloc-jams-angular/app/templates/directives/seek_bar.html)\n-<div class=\"seek-bar\">\n+<div class=\"seek-bar\" ng-click=\"onClickSeekBar($event)\">\n     <div class=\"fill\" ng-style=\"fillStyle()\"></div>\n     <div class=\"thumb\"></div>\n </div>\n```\n\nWhen a user clicks on a point on the `seek-bar` class element, the function will execute.\n\n## Update the Seek Bar from a Mousedown Event\n\nThe second function we need to implement is for when a user drags the seek bar thumb. In the Foundation, this logic was the [second half](https://github.com/Bloc/bloc-jams-source/blob/master/scripts/album.js#L184-L201) of the `setupSeekBars` function. We'll reimplement that logic in `seekBar.js` using much of the original code:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/directives/seekBar.js)\n ...\n scope.onClickSeekBar = function(event) {\n     var percent = calculatePercent(seekBar, event);\n     scope.value = percent * scope.max;\n };\n\n+scope.trackThumb = function() {\n+    $document.bind('mousemove.thumb', function(event) {\n+        var percent = calculatePercent(seekBar, event);\n+        scope.$apply(function() {\n+            scope.value = percent * scope.max;\n+        });\n+    });\n+\n+    $document.bind('mouseup.thumb', function() {\n+        $document.unbind('mousemove.thumb');\n+        $document.unbind('mouseup.thumb');\n+    });\n+};\n ...\n```\n\n| Attribute / Method | Description |\n| ------------------ | ----------- |\n| `scope.trackThumb()` | Similar to `scope.onClickSeekBar`, but uses [`$apply`](http://jimhoskins.com/2012/12/17/angularjs-and-apply.html) to constantly apply the change in value of `scope.value` as the user drags the seek bar thumb. |\n\nWe use `$document` as we did in the Foundation, but with Angular, [`$document`](https://docs.angularjs.org/api/ng/service/$document) must be injected as a dependency for us to use it. Add it as a dependency to the `seekBar` directive:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/directives/seekBar.js)\n (function() {\n-    function seekBar() {\n+    function seekBar($document) {\n         ...\n     }\n\n     angular\n     .module('blocJams')\n-   .directive('seekBar', seekBar);\n+   .directive('seekBar', ['$document', seekBar]);\n })();\n```\n\nThe `scope.trackThumb` function should execute when a user interacts with the `thumb` class element in the view. More specifically, when the event is a mousedown event. Add an `ngMousedown` directive, which allows us to specify custom behavior on a mousedown event, to trigger the `scope.trackThumb` function:\n\n```html(~/bloc/bloc-jams-angular/app/templates/directives/seek_bar.html)\n <div class=\"seek-bar\" ng-click=\"onClickSeekBar($event)\">\n     <div class=\"fill\" ng-style=\"fillStyle()\"></div>\n-    <div class=\"thumb\"></div>\n+    <div class=\"thumb\" ng-mousedown=\"trackThumb()\"></div>\n </div>\n```\n\nTest the seek bars in the browser. We should be able to slide or click to a new position. Note, however, that the thumb will not change position. You will implement that ability in the following assignment.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n1. Read the [AngularJS Developer Guide on directives](https://docs.angularjs.org/guide/directive). Focus on the first half of the documentation – stop when you get to the section titled \"Creating a Directive that Wraps Other Elements\".\n2. Read the [AngularJS documentation for the directive definition object](https://docs.angularjs.org/api/ng/service/$compile#directive-definition-object) with special regard to these options:\n    - `template`, `templateUrl`\n    - `replace`\n    - `restrict`\n    - `scope`\n    - `link`\n3. Write a `scope.thumbStyle` method – similar to `scope.fillStyle` – that updates the position of the seek bar thumb. Use the `ngStyle` directive in the view to apply this style to the element.\n4. Angular's `$apply` function is not particularly intuitive. Read through [this blog post](http://jimhoskins.com/2012/12/17/angularjs-and-apply.html) on the subject, making sure to look at the code snippets and their results. Then remove `$apply` from the `trackThumb` method (keep the `scope.value = percent * scope.max;` part). Explain, in your own words, what happens when you remove `$apply`. Send your explanation to your mentor.\n    > Be sure to add `$apply` again before moving on to the next checkpoint.\n\nCommit your assignment work in Git. __Merge this assignment.__ See [Git Checkpoint Workflow: Mergeable Assignments](https://www.bloc.io/resources/git-checkpoint-workflow#mergeable-assignments) for details.", "roadmap_section_id"=>186, "roadmap_section_ref"=>"0d47c2cb-2c63-46c3-a883-b9b5da818a2b|0", "default_student_access"=>"locked", "active_index"=>9, "checkpoint_type"=>"normal", "position"=>9, "points"=>1, "ref"=>"ec54e8fc-e7aa-462b-a4c6-d6da91e04fa5|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2145", "assessment"=>nil}, {"id"=>2146, "name"=>"Directives: Part 2", "summary"=>"Directives (cont.): attach specific Angular behavior to DOM elements", "body"=>"<!-- { ids:[2146], name:'Directives: Part 2', summary:'Directives (cont.): attach specific Angular behavior to DOM elements' } -->\n\nWe can drag and click on the seek bars, but they're not yet functional. When we interact with the seek bars, we need to change the song position and the volume. We'll start by working on the ability to alter the song position.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Pass Attributes to a Directive\n\nIn the previous checkpoint, we discussed the three arguments that we can pass to a directive's `link` function: `scope`, `element`, and `attributes`. We'll explore the third argument, `attributes`, to modify the `seekBar` directive so we can change the playback position of the currently playing song.\n\nRecall from the previous checkpoint that we've already declared `scope.value` and `scope.max` attributes. We'll add these attributes to the directive in the view:\n\n```html(~/bloc/bloc-jams-angular/app/templates/player_bar.html)\n ...\n-<seek-bar></seek-bar>\n+<seek-bar value=\"{{ playerBar.songPlayer.currentTime }}\" max=\"{{ playerBar.songPlayer.currentSong.duration }}\"></seek-bar>\n ...\n```\n\nWhen we declared `scope.value` and `scope.max` we gave them default values of `0` and `100`, respectively. In the view, however, we've set the value of `value` to `{{ playerBar.songPlayer.currentTime }}` and the value of `max` to `{{ playerBar.songPlayer.currentSong.duration }}`.\n\nThe second expression, `{{ playerBar.songPlayer.currentSong.duration }}`, is one with which we are already familiar. The expression will evaluate to the length of the currently playing song.\n\nThe first expression, `{{ playerBar.songPlayer.currentTime }}`, however, does not yet exist. Update the `SongPlayer` service with this new attribute:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n ...\n SongPlayer.currentSong = null;\n+/**\n+* @desc Current playback time (in seconds) of currently playing song\n+* @type {Number}\n+*/\n+SongPlayer.currentTime = null;\n ...\n```\n\n> When the page first loads, the timecode will show 'NaN'; this is expected, and we will modify it in the next checkpoint.\n\nIf the length of a song is the `max` value of the seek bar, then the current playback time of the song is the `value` of the seek bar, which determines the position of the seek bar thumb.\n\n## \"Observe\" Attribute Changes\n\nTo monitor the value changes of these attributes in a manner specific to this directive, we have to \"observe\" them. We can notify the directive of all changes to attribute values by using the `$observe` method on the Angular attributes object:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/directives/seekBar.js)\n ...\n var seekBar = $(element);\n\n+attributes.$observe('value', function(newValue) {\n+    scope.value = newValue;\n+});\n+\n+attributes.$observe('max', function(newValue) {\n+    scope.max = newValue;\n+});\n ...\n```\n\nThis code observes the values of the attributes we declare in the HTML by specifying the attribute name in the first argument. When the observed attribute is set or changed, we execute a callback (the second argument) that sets a new scope value (`newValue`) for the `scope.value` and `scope.max` attributes. We use the directive's scope to determine the location of the seek bar thumb, and correspondingly, the playback position of the song.\n\n## Set the Playback Position of a Song\n\nOne priority in programming is reusability. It saves time (in the form of future programming and planning) when a function or other unit is devised to be broadly usable.\n\nOur `seekBar` directive is a general tool. Our goal is to design it so that a user can use it in any instance that requires the ability to control the state of something using a seek bar interface. So far, for Bloc Jams, this only includes song position and volume. To maintain the universality of the seek bar as a tool, we don't want to include instance-specific behavior in the directive. Instead, we want to pass in the behavior dynamically.\n\nIn other words, we want to specify an external function that the directive will call when the seek bar position changes. In doing so, the directive can remain a general visualization that supports a broad set of use cases.\n\nAdd an attribute named `on-change` that takes an expression to execute when we change the `value` of the seek bar. In this case, we'll pass it a callback that [sets the time of the song](https://github.com/Bloc/bloc-jams-source/blob/master/scripts/album.js#L86-L90) to correspond to the `value` of the seek bar:\n\n```html(~/bloc/bloc-jams-angular/app/templates/player_bar.html)\n ...\n-<seek-bar value=\"{{ playerBar.songPlayer.currentTime }}\" max=\"{{ playerBar.songPlayer.currentSong.duration }}\"></seek-bar>\n+<seek-bar value=\"{{ playerBar.songPlayer.currentTime }}\" max=\"{{ playerBar.songPlayer.currentSong.duration }}\" on-change=\"playerBar.songPlayer.setCurrentTime(value)\"></seek-bar>\n ...\n```\n\n> Note that `value` passed into the `onChange` call is not inherently the same as `scope.value`. It is a variable that shares the name. We can (and will, shortly) pass in `scope.value` as the `value` that is the argument for this function, but the two are not the same by definition.\n\nThe `SongPlayer` service doesn't yet have a `setCurrentTime` method, so we'll add it to the service now. Add the method below the `SongPlayer.next` method:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n ...\n+/**\n+* @function setCurrentTime\n+* @desc Set current time (in seconds) of currently playing song\n+* @param {Number} time\n+*/\n+SongPlayer.setCurrentTime = function(time) {\n+    if (currentBuzzObject) {\n+        currentBuzzObject.setTime(time);\n+    }\n+};\n ...\n```\n\nThe `setCurrentTime` method checks if there is a current Buzz object, and, if so, uses the Buzz library's [`setTime` method](http://buzz.jaysalvat.com/documentation/sound/) to set the playback position in seconds.\n\n## Evaluate the `on-change` Expression\n\nWe want Angular to treat the `on-change` attribute differently than the `value` or `max` attributes. We don't want `on-change` to act like a number, string, or static object. Instead, we want the directive to evaluate the `on-change` expression and execute it.\n\nTo make sure the directive evaluates the attribute, we'll attach it to the directive's scope, rather than the attributes object. Scoping the attribute allows us the flexibility to specify how we want to handle the value passed to the `on-change` attribute:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/directives/seekBar.js)\n ...\n return {\n     templateUrl: '/templates/directives/seek_bar.html',\n     replace: true,\n     restrict: 'E',\n-    scope: { },\n+    scope: {\n+        onChange: '&'\n+    },\n ...\n```\n\nThe `&` in the isolate scope object is a [type of directive scope binding](https://docs.angularjs.org/api/ng/service/$compile#-scope). The three types of directive scope bindings – `@`, `=`, and `&` – allow us to treat the value of the given attribute differently. The `&` binding type provides a way to execute an expression in the context of the parent scope.\n\n## Pass Updated `value` to `onChange`\n\nThe function we evaluate through `onChange` may seem like the final piece of the puzzle, but if we use the web inspector to view the value of `value`, we find that there isn't one!\n\n<center>![no value](https://bloc-global-assets.s3.amazonaws.com/images-frontend/screenshots/Angular%20Project/no-value.png)</center>\n\nRecall the `onClickSeekBar` and `trackThumb` methods we created in `seekBar.js`. We update the value of `scope.value` and yet we don't see that update reflected on the attribute in the view.\n\nWe need to pass the updated `value` to the `onChange` attribute. To do so, we'll write a function to call in the `onClickSeekBar` and `trackThumb` methods that will send the updated `scope.value` to the function evaluated by `onChange`:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/directives/seekBar.js)\n ...\n scope.onClickSeekBar = function(event) {\n     var percent = calculatePercent(seekBar, event);\n     scope.value = percent * scope.max;\n+    notifyOnChange(scope.value);\n };\n\n scope.trackThumb = function() {\n     $document.bind('mousemove.thumb', function(event) {\n         var percent = calculatePercent(seekBar, event);\n         scope.$apply(function() {\n             scope.value = percent * scope.max;\n+            notifyOnChange(scope.value);\n         });\n     });\n\n     $document.bind('mouseup.thumb', function() {\n         $document.unbind('mousemove.thumb');\n         $document.unbind('mouseup.thumb');\n     });\n };\n ...\n```\n\nWe name the function `notifyOnChange` because its purpose is to notify `onChange` that `scope.value` has changed. Add the function to the directive's logic:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/directives/seekBar.js)\n ...\n scope.trackThumb = function() {\n     ...\n };\n\n+var notifyOnChange = function(newValue) {\n+    if (typeof scope.onChange === 'function') {\n+        scope.onChange({value: newValue});\n+    }\n+};\n ...\n```\n\nThis function is short but dense. Let's break it down:\n\n- We test to make sure that `scope.onChange` is a function. If a future developer fails to pass a function to the `on-change` attribute in the HTML, the next line will not be reached, and no error will be thrown.\n- We pass a full function call to the `on-change` attribute in the HTML – `scope.onChange()` calls the function in the attribute.\n- The function we pass in the HTML has an argument, `value`, which isn't defined in the view (remember that it's not the same as `scope.value`). Using built-in Angular functionality, we specify the value of this argument using hash syntax. Effectively, we're telling Angular to insert the local `newValue` variable as the `value` argument we pass into the `SongPlayer.setCurrentTime()` function called in the view.\n\nView Bloc Jams in the browser and test the click and mousedown events. The song playback position should update accordingly.\n\n## Broadcast the Time Change to the Application\n\nWe've added the ability to set the song playback time via the seek bar, but once we've set a song position, the thumb and fill don't update with the progress of the song. We also have yet to address the undefined value of `{{ playerBar.songPlayer.currentTime }}` in our seek bar directive.\n\nThe `SongPlayer` service needs to handle updating time as the song progresses. We want to know, in any part of our Angular application, when the time updates. This ensures that regardless of where we reference the time (in this case, we reference it with `{{ playerBar.songPlayer.currentTime }}`), our application is aware that it is changing on a second-by-second basis.\n\nIn Angular, one way to scope a variable to all parts of an application is to use the `$rootScope` service. Every Angular application has just one `$rootScope`, from which all other scopes inherit. Any Angular component, then, can access `$rootScope` variables, events, and functions.\n\n> `$rootScope` is not to be used lightly, however. In the Foundation we learned that polluting a namespace is not good practice, and the same is true for an application's `$rootScope`. Only append to the `$rootScope` if absolutely necessary.\n\nBecause `$rootScope` is a service, we must inject it as a dependency before we can use it:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n (function() {\n-    function SongPlayer(Fixtures) {\n+    function SongPlayer($rootScope, Fixtures) {\n         ...\n     };\n\n     angular\n         .module('blocJams')\n-        .factory('SongPlayer', ['Fixtures', SongPlayer]);\n+        .factory('SongPlayer', ['$rootScope', 'Fixtures', SongPlayer]);\n })();\n```\n\nTo update the song's playback progress from anywhere, we'll add a `$rootScope.$apply` event in the `SongPlayer` service. This creates a custom event that other parts of the Angular application can \"listen\" to. We've dealt with common JavaScript events before, like click, mouseover, and mousedown. This will be our first custom event. Add the `$apply` to the `SongPlayer.setSong` method so that it starts \"applying\" the time update once we know which song to play:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/services/SongPlayer.js)\n ...\n var setSong = function(song) {\n     if (currentBuzzObject) {\n         currentBuzzObject.stop();\n         SongPlayer.currentSong.playing = null;\n     }\n\n     currentBuzzObject = new buzz.sound(song.audioUrl, {\n         formats: ['mp3'],\n         preload: true\n     });\n\n+    currentBuzzObject.bind('timeupdate', function() {\n+        $rootScope.$apply(function() {\n+            SongPlayer.currentTime = currentBuzzObject.getTime();\n+        });\n+    });\n\n     SongPlayer.currentSong = song;\n };\n ...\n```\n\nWe used the Buzz library [`bind()` method](http://buzz.jaysalvat.com/documentation/sound/#events) in [the Foundation as well](https://github.com/Bloc/bloc-jams-source/blob/master/scripts/album.js#L148-L155). [`timeupdate`](http://buzz.jaysalvat.com/documentation/events/) is one of a number of HTML5 audio events we can use with Buzz's `bind()` method.\n\nThe `bind()` method adds an event listener to the Buzz sound object – in this case, we listen for a `timeupdate` event. When the song playback time updates, we execute a callback function. This function sets the value of `SongPlayer.currentTime` to the current playback time of the current Buzz object using another one of the Buzz library methods: `getTime()`, which gets the current playback position in seconds. Using `$apply`, we apply the time update change to the `$rootScope`.\n\nReload the app in the browser. We should now see the seek bar update as the song plays!\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n1. Use {{ }} markup so that the `<div class=\"current-time\">` element displays the current time (in seconds) of the currently playing song.\n2. Add volume control to Bloc Jams. You'll need:\n    - A `SongPlayer.volume` attribute to hold the value of the volume.\n    - A `SongPlayer.setVolume()` method to update the volume on change. (The Buzz library has a `setVolume` method.)\n    - A `value` attribute on the directive element.\n    - A `max` attribute on the directive element. (The Buzz library sets volume on a scale from 0-100.)\n3. To get a better sense for how the newValue `argument` is passed into the `SongPlayer.setCurrentTime` function, try renaming the arguments in the view and in both the key and value of the hash passed into `onChange()` in `notifyOnChange()`. Which elements need to be consistent and why? Send your answer to your mentor.\n4. Why do we refer to `on-change` in the view but `onChange` in the JavaScript? Send your explanation to your mentor.\n5. __Optional__: We've stressed the importance of not polluting the `$rootScope` namespace if it can be avoided – and it can be avoided in Bloc Jams. It's possible to refactor the `$rootScope.$apply` method to not use `$rootScope` at all. The premise lies with the concept of \"registering\" only the controllers that need to watch the current time of a song update. The solution is advanced and requires forethought for proper implementation. We suggest creating an additional feature branch if you choose to attempt this refactoring.\n\nCommit your assignment work in Git. __Merge this assignment.__ See [Git Checkpoint Workflow: Mergeable Assignments](https://www.bloc.io/resources/git-checkpoint-workflow#mergeable-assignments) for details.", "roadmap_section_id"=>186, "roadmap_section_ref"=>"0d47c2cb-2c63-46c3-a883-b9b5da818a2b|0", "default_student_access"=>"locked", "active_index"=>10, "checkpoint_type"=>"normal", "position"=>10, "points"=>1, "ref"=>"0bd95b9a-910c-49b9-bb0c-b6f42fec7141|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2146", "assessment"=>nil}, {"id"=>2147, "name"=>"Filters", "summary"=>"Filters: format the value of an expression displayed to the user", "body"=>"<!-- { ids:[2147], name:'Filters', summary:'Filters: format the value of an expression displayed to the user' } -->\n\nThe seek bar now updates as a song plays, but the song playback and total time are still represented in seconds, which isn't the way we'd normally view the duration of a song. To solve this, we'll add an [Angular filter](https://docs.angularjs.org/guide/filter#creating-custom-filters).\n\nFilters format data used in Angular applications. We can use them either directly with an expression in a view, or as an injectable service in the JavaScript logic of other Angular components. Angular has [several built-in filters](https://docs.angularjs.org/api/ng/filter) that illustrate the types of intended use cases for filters, like formatting numbers for [currency](https://code.angularjs.org/1.2.24/docs/api/ng/filter/currency) and [dates](https://code.angularjs.org/1.2.24/docs/api/ng/filter/date), or strings with a particular [capitalization](https://code.angularjs.org/1.2.24/docs/api/ng/filter/lowercase).\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Create a `timecode` Filter\n\nLike controllers, services, and directives, filters are defined on an Angular module.\n\nWithin the `scripts` directory, create a `filters` directory. Within the `filters` directory, create a file named `timecode.js` and register a `timecode` filter:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/filters/timecode.js)\n+(function() {\n+    function timecode() {\n+        return function(seconds) {\n+            return output;\n+        };\n+    }\n+\n+    angular\n+        .module('blocJams')\n+        .filter('timecode', timecode);\n+})();\n```\n\nFilter functions must return another function which takes at least one argument, the input of the filter – in this case, our input is `seconds`. We'll take the number of seconds (e.g. \"61\") and convert it to a time-readable format (e.g. \"1:01\").\n\nReview the [`filterTimeCode` function](https://github.com/Bloc/bloc-jams-source/blob/master/scripts/album.js#L130-L144) created in the Foundation. We've already written the exact logic that we need to use in our filter. Copy the logic from the `filterTimeCode` function and add it to the Angular filter:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/filters/timecode.js)\n (function() {\n     function timecode() {\n         return function(seconds) {\n+            var seconds = Number.parseFloat(seconds);\n+            var wholeSeconds = Math.floor(seconds);\n+            var minutes = Math.floor(wholeSeconds / 60);\n+            var remainingSeconds = wholeSeconds % 60;\n+\n+            var output = minutes + ':';\n+\n+            if (remainingSeconds < 10) {\n+                output += '0';   \n+            }\n+\n+            output += remainingSeconds;\n+\n             return output;\n         };\n     }\n\n     angular\n         .module('blocJams')\n         .filter('timecode', timecode);\n })();\n```\n\n> Note that we've changed the argument from `timeInSeconds` to just `seconds`.\n\nAdd the `timecode.js` script source to `index.html`, as we've done with all the other JavaScript files so far.\n\n## Use a Filter in an Angular View\n\nWe can use filters directly in a view's HTML with Angular expressions. In the expression, filters are delimited by the vertical pipe character (`|`), provided after a variable in the view's scope, for example:\n\n```html\n{{ exampleVar | exampleFilter }}\n```\n\nMany filters [take optional arguments](https://docs.angularjs.org/guide/filter#using-filters-in-view-templates), which are delimited by a colon (`:`) that follows the filter name:\n\n```html\n{{ exampleVar | exampleFilter:arg }}\n```\n\nMultiple arguments are possible, and are passed in with repeated colons:\n\n```html\n{{ exampleVar | exampleFilter:argOne:argTwo }}\n```\n\n## Use the `timecode` Filter in The View\n\nUnlike services, we do not need to inject a filter as a dependency unless we use it within the code of an Angular component, such as a service, directive, or controller. For Bloc Jams, we'll use the filter in the view only, and therefore won't need to inject it as a dependency anywhere.\n\nTo use the `timecode` filter in the view, add a vertical pipe (`|`) after each expression of time, followed by the name of the filter: `timecode`. We display time in the song rows for each song, as well as in the player bar for the current and total time of the currently playing song – __update all instances in which we display time in the view to use the `timecode` filter__.\n\nFor example, in the player bar template, update the current time and total time of the song with the `timecode` filter by adding the following code:\n\n```html(~/bloc/bloc-jams-angular/app/templates/player_bar.html)\n ...\n-<div class=\"current-time\">{{ playerBar.songPlayer.currentTime }}</div>\n+<div class=\"current-time\">{{ playerBar.songPlayer.currentTime | timecode }}</div>\n-<div class=\"total-time\">{{ playerBar.songPlayer.currentSong.duration }}</div>\n+<div class=\"total-time\">{{ playerBar.songPlayer.currentSong.duration | timecode }}</div>\n ...\n```\n\nView Bloc Jams in the browser and play a song to test the filter. The timecode filter should work. Notice that when the view first loads, however, that \"NaN:NaN\" appears. \"NaN\" means \"not a number\" and does not, unfortunately, refer to the tasty Indian flat bread. When the view first loads and there is no current Buzz object, there is no time to display. We need to add a statement that checks for this condition.\n\n## Add a Condition that Checks for `NaN`\n\nAdd the following conditional statement to `timecode.js`:\n\n```javascript(~/bloc/bloc-jams-angular/app/scripts/filters/timecode.js)\n ...\n return function(seconds) {\n     var seconds = Number.parseFloat(seconds);\n\n+    if (Number.isNaN(seconds)) {\n+        return '-:--';\n+    }\n\n     var wholeSeconds = Math.floor(seconds);\n     var minutes = Math.floor(wholeSeconds / 60);\n     var remainingSeconds = wholeSeconds % 60;\n\n     var output = minutes + ':';\n\n     if (remainingSeconds < 10) {\n         output += '0';   \n     }\n\n     output += remainingSeconds;\n\n     return output;\n }\n ...\n```\n\nIf `seconds` is not a number, then we return \"-:--\" to the view. Reload Bloc Jams in the browser and view our working filter in action. Then go get some delicious naan to celebrate, if you feel so inclined.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.", "assignment"=>"1. Read the [AngularJS Developer Guide on filters](https://docs.angularjs.org/guide/filter).\n2. Take a look at [some of Angular's included filters](https://docs.angularjs.org/api/ng/filter) to get a sense for the contexts in which a filter is appropriate.\n3. __Optional__: The Buzz library has a method named `toTimer()` that formats seconds in an easy to read timer like \"00:00\", which is what we've just accomplished with the `timecode` filter. Read the [documentation for the `toTimer()` method](http://buzz.jaysalvat.com/documentation/buzz/#helpers) and rework the `timecode` filter logic to use the Buzz method instead of your custom code.", "roadmap_section_id"=>186, "roadmap_section_ref"=>"0d47c2cb-2c63-46c3-a883-b9b5da818a2b|0", "default_student_access"=>"locked", "active_index"=>11, "checkpoint_type"=>"normal", "position"=>11, "points"=>1, "ref"=>"54df9c1e-8234-463d-b676-3ef51efe0d41|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2147", "assessment"=>nil}, {"id"=>2148, "name"=>"Extra Credit", "summary"=>"Extra Credit: user stories to challenge you", "body"=>"<!-- { ids:[2148], name:'Extra Credit', summary:'Extra Credit: user stories to challenge you' } -->\n\n## Extra Credit User Stories\n\nThe goal of extra credit is to push you towards self-reliance, so outside of a brief description, we don't provide additional resources. If you finish your project early, challenge yourself to complete these additional user stories:\n\n| __User Story__ | [__Difficulty Rating__](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As a developer, when one song finishes, I want the next song to autoplay | 2 |\n| As a user, I want to mute the volume | 2 |\n| As a user, I want to have an account so that I can manage my music | 4 |\n| As a user, I want to have a profile page for other users to view information about me | 3 |\n| As a user, I want to search a database for a particular song, album, or artist | 4 |\n| As a user, I want to rate songs, albums, and artists | 3 |\n| As a user, I want to create custom playlists | 3 |\n| As a user, I want to add and remove songs from playlists | 2 |", "assignment"=>"Optional: Complete one or more of the extra credit user stories.", "roadmap_section_id"=>186, "roadmap_section_ref"=>"0d47c2cb-2c63-46c3-a883-b9b5da818a2b|0", "default_student_access"=>"locked", "active_index"=>nil, "checkpoint_type"=>"extra_credit", "position"=>nil, "points"=>0, "ref"=>"478f657a-aa36-4b97-98d8-a700b22ca6ed|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2148", "assessment"=>nil}]}, {"id"=>187, "roadmap_id"=>38, "name"=>"Project: Frontend Web Development Bloc Chat", "time_estimate"=>"40 Hours", "point_ratio"=>0.0, "description"=>"", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"locked", "ref"=>"bda2225e-c669-4b54-b6bf-bd2bdca76532|0", "section_type"=>"project", "checkpoints"=>[{"id"=>2149, "name"=>"Introduction", "summary"=>"Introduction", "body"=>"<!-- { ids:[2149], name:\"Introduction\", summary:\"Introduction\" } -->\n\n## Overview and Purpose\n\nIn this project you'll use Firebase to build an application that sends and receives messages in real time.\n\n## Objectives\n\nAfter this project, you should be able to:\n\n- Register Firebase as a module in an Angular application.\n- Inject the `$firebaseArray` service into a controller.\n- Understand and use the Firebase JavaScript and AngularFire APIs – methods such as `child()` and `$add()`.\n- Query a Firebase array.\n- Use UI Bootstrap to create a modal.\n- Use cookies to store information in the user's web browser.\n\n## Use Case\n\nBloc Chat uses Firebase and AngularJS to create a real-time chat application.\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As a user, I want to see a list of **available chat rooms** | 3 |\n| As a user, I want to **create** chat rooms | 3 |\n| As a user, I want to see a **list of messages** in each chat room | 3 |\n| As a user, I want to set my **username** to display in chat rooms | 2 |\n| As a user, I want to **send messages** associated with my username in a chat room | 2 |\n\nBefore you begin working on user stories, complete this project's [Getting Started guide](https://www.bloc.io/resources/getting-started-with-frontend-projects). Later user stories often rely on the completion of the former, therefore, work on them in the order prescribed.\n\n## Wireframes\n\nThese wireframes are meant to suggest a design, not dictate one.\n\n| **Wireframe** | **Description** |\n| :-- | :-- |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloc-chat/bloc-chat-sidebar-with-rooms-tn.jpg)](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloc-chat/bloc-chat-sidebar-with-rooms.jpg) | List of chat rooms. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloc-chat/bloc-chat-new-room-button-tn.jpg)](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloc-chat/bloc-chat-new-room-button.jpg) | New chat room button. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloc-chat/bloc-chat-new-room-modal-tn.jpg)](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloc-chat/bloc-chat-new-room-modal.jpg) | New chat room modal. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloc-chat/bloc-chat-room-with-messages-tn.jpg)](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloc-chat/bloc-chat-room-with-messages.jpg) | Chat room with messages. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloc-chat/bloc-chat-set-username-tn.jpg)](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloc-chat/bloc-chat-set-username.jpg) | Set username modal. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloc-chat/bloc-chat-room-with-messages-with-send-tn.jpg)](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloc-chat/bloc-chat-room-with-messages-with-send.jpg) | Chat room with the ability to send a new message. |", "assignment"=>"Acquaint yourself with the user stories for this project.\n\nOptional: Sketch your own wireframes.\n\nMessage your mentor, letting him/her know that you’ve chosen to work on this project.", "roadmap_section_id"=>187, "roadmap_section_ref"=>"bda2225e-c669-4b54-b6bf-bd2bdca76532|0", "default_student_access"=>"locked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"adc13a29-de10-4319-b543-f2fae9fa5e84|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2149", "assessment"=>nil}, {"id"=>2150, "name"=>"List Chat Rooms", "summary"=>"As a user, I want to see a list of available chat rooms", "body"=>"<!-- { ids:[2150], name:\"List Chat Rooms\", summary:\"As a user, I want to see a list of available chat rooms\" } -->\n\n> As a user, I want to see a list of **available chat rooms**<br>\n> [Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Create a Factory\n\n<center>![list of chat rooms mockup](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloc-chat/bloc-chat-sidebar-with-rooms.jpg)</center>\n\n> How can I query a list of Rooms from Firebase?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nCreate a `Room` factory in Angular that defines all Room-related API queries. Create a reference to your Firebase database inside, and inject the `$firebaseArray` service provided by AngularFire:\n\n```js\n(function() {\n  function Room($firebaseArray) {\n    var ref = firebase.database().ref();\n  }\n\n  angular\n    .module('blocChat')\n    .factory('Room', ['$firebaseArray', Room]);\n})();\n```\n\n> The styles we use for Angular differ from the styles used in the Firebase documentation. Follow the style guide we've proposed, as they are more recently accepted by the Angular development community as best practices.\n\nUse Firebase's [`child()` method](https://firebase.google.com/docs/reference/js/firebase.database.Reference#child) (called on an instance of its API object) to either query an existing set of data or reference one you intend to populate with data in the future. Use the [`$firebaseArray` service](https://github.com/firebase/angularfire/blob/master/docs/reference.md#firebasearray) to ensure the data is returned as an array:\n\n```js\n(function() {\n  function Room($firebaseArray) {\n    var ref = firebase.database().ref().child(\"rooms\");\n    var rooms = $firebaseArray(ref);\n\n    return {\n      all: rooms\n    };\n  }\n\n  angular\n    .module('blocChat')\n    .factory('Room', ['$firebaseArray', Room]);\n})();\n```\n\n### Create a Controller\n\n> How can I display my queried Rooms in the view?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nCreate a controller and associate it with the home template in a `$state`. Inject the Room service so that you can assign the array of objects retrieved by the `all` method to a `$scope` variable. Display the rooms in the template using `ng-repeat`.\n\n### Test Your Code\n\n- Launch Bloc Chat, verify that empty chat rooms appear.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>187, "roadmap_section_ref"=>"bda2225e-c669-4b54-b6bf-bd2bdca76532|0", "default_student_access"=>"locked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"207b6417-372b-4ec7-8ef5-e0f350b35ec9|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2150", "assessment"=>nil}, {"id"=>2151, "name"=>"Create Chat Rooms", "summary"=>"As a user, I want to create chat rooms", "body"=>"<!-- { ids:[2151], name:\"Create Chat Rooms\", summary:\"As a user, I want to create chat rooms\" } -->\n>As a user, I want to create chat rooms<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Modify the Factory\n\n>How do I create Room objects with AngularFire?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nYou can call [AngularFire's `$add()`](https://github.com/firebase/angularfire/blob/master/docs/reference.md#addnewdata) on any array created or retrieved with the `$firebaseArray` service. In this case, the array is the data stored in the `rooms` variable in the `Room` service. Use `$add()` in an abstracted method that you define on the `Room` factory.\n\n### Include Bootstrap\n\n>How can I initiate room creation in the app's interface?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\n<center>![new room button screenshot](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloc-chat/bloc-chat-new-room-button.jpg)</center>\n\n<center>![new room modal](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloc-chat/bloc-chat-new-room-modal.jpg)</center>\n\nThere needs to be a form that you can use to submit the new room's data using `ngClick` or `ngSubmit`. Presenting a modal is an unobtrusive way to trigger a form on the interface. Use [UI Bootstrap's `$uibModal` service](http://angular-ui.github.io/bootstrap/#/modal) to define a method for toggling a modal on the frontend. To fully integrate a UI Bootstrap modal:\n\n  1. Include the [UI Bootstrap library](http://angular-ui.github.io/bootstrap/) via a `<script>` tag on `index.html`\n  2. Inject the module into your Angular app's dependency array\n  3. Create a separate controller for the modal\n  4. Inject the proper dependencies for using the modal (see the [UI Bootstrap](http://angular-ui.github.io/bootstrap/#/modal) documentation)\n  5. Add methods to open, close and submit data to Firebase from the modal\n\nWhen you've finished, you should see your array of rooms update in real time.\n\n### Test Your Code\n\n- Launch Bloc Chat, verify that your array of rooms updates in real time as soon as you create one.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>187, "roadmap_section_ref"=>"bda2225e-c669-4b54-b6bf-bd2bdca76532|0", "default_student_access"=>"locked", "active_index"=>3, "checkpoint_type"=>"normal", "position"=>3, "points"=>1, "ref"=>"a7b79d76-b2f4-4e8e-97f8-4c5f83163985|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2151", "assessment"=>nil}, {"id"=>2152, "name"=>"List Messages", "summary"=>"As a user, I want to see a list of messages in each chat room", "body"=>"<!-- { ids:[2152], name:\"List Messages\", summary:\"As a user, I want to see a list of messages in each chat room\" } -->\n>As a user, I want to see a **list of messages** in each chat room<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Create a Container\n\n>How can I display an individual room's content?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\n<center>![room with message list](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloc-chat/bloc-chat-room-with-messages.jpg)</center>\n\nChat rooms tend to be designed so that only one room's messages show at a time. Create and style a container for holding a list of messages to the right of the list of available chat rooms. The active room should be stored in a `$scope` object in the main controller, so that the title of the active room changes every time you visit a different room. The active room should be triggered by clicking on the name of the room in the sidebar.\n\n### Associate Messages With a Room\n\n>How can I associate messages with a room so that only an active room's messages show when I've selected it?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nAssociating objects with other related objects, like rooms with messages, requires using a reference to the parent data (in this case, the room) in the child data. When creating a message object, each message object in your Firebase database should have four properties:\n\n```js\n{\n    username: \"<USERNAME HERE>\",\n    content: \"<CONTENT OF THE MESSAGE HERE>\",\n    sentAt: \"<TIME MESSAGE WAS SENT HERE>\",\n    roomId: \"<ROOM UID HERE>\"\n}\n```\n\nThe last property, `roomId`, references the room where the message was sent. The ID is generated every time an object saves to Firebase, and can be viewed on the Firebase web interface.\n\n>If you haven't already, create a few rooms using the method you programmed in the last story so that you can use the IDs generated from those rooms to complete this story. Firebase UIDs (or unique identifiers) are strings of randomly generated characters like `-Jf1GqAZWtS94xlfZA4a`.\n\n[Create a few messages manually](https://www.bloc.io/resources/creating-firebase-data-using-the-dashboard-ui) on the Firebase dashboard with the above data structure, and associate them all with one of your rooms so you can test querying messages with the rooms.\n\nFor help with structuring data, read Firebase's [guide on the subject](https://firebase.google.com/docs/database/web/structure-data).\n\n### Query Messages with a Factory\n\nCreate a `Message` factory in Angular that defines all Message-related API queries. Create a reference to your Firebase database inside, and inject the `$firebaseArray` service provided by AngularFire:\n\n```js\n(function() {\n  function Message($firebaseArray) {\n    var ref = firebase.database().ref().child(\"messages\");\n  }\n\n  angular\n    .module('blocChat')\n    .factory('Message', ['$firebaseArray', Message]);\n})();\n```\n\n>How can I query messages for an active room?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nUsing the `child()` method on the `$firebaseArray` service again, query `messages` instead of `rooms` this time. To get the messages for a given room, you need to chain the `child()` method with Firebase's [`orderByChild()`](https://firebase.google.com/docs/reference/js/firebase.database.Reference#orderByChild)<sup>[1](#footnote-1)</sup> method, targeting the `roomId` child.\n\n>Recall that `roomId` is a nested property of each message object. A nested property in Firebase is equivalent to a child, hence its compatibility with the `orderByChild()` method.\n\nMessages depend on the ID of a room, you will need to pass an argument into the `getByRoomId` method that contains the `roomId` associated with a rooms message. With the `roomId`, use Firebase's [`equalTo()`](https://firebase.google.com/docs/reference/js/firebase.database.Reference#equalTo) method to find all messages whose `roomId` property is equal to the `roomId` in the argument:\n\n```js\n(function() {\n  function Message($firebaseArray) {\n    var ref = firebase.database().ref().child(\"messages\");\n    var messages = $firebaseArray(ref);\n\n    return {\n      getByRoomId: function (roomId) {\n        // Filter the messages by their room ID.\n      }\n    };\n  }\n\n  angular\n    .module('blocChat')\n    .factory('Message', ['$firebaseArray', Message]);\n})();\n```\n\nRead how `orderByChild()` and `equalTo()` are used [in this StackOverflow question](http://stackoverflow.com/questions/26910242/querying-nested-data-in-firebase) to get an idea of how to chain them to query the proper messages by a `roomId`.\n\n### Test Your Code\n\n- Launch Bloc Chat.\n  - Verify that messages appear when selecting a conversation.\n  - Verify that switching chat rooms replaces the messages with those associated with the new chat room.\n\n### Footnotes\n\n1. <a name=\"footnote-1\"></a>The event listener (`.on('<event name>')`) chained to the `orderByChild()` method is not required because messages will always be ordered by `roomId` in this application.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>187, "roadmap_section_ref"=>"bda2225e-c669-4b54-b6bf-bd2bdca76532|0", "default_student_access"=>"locked", "active_index"=>4, "checkpoint_type"=>"normal", "position"=>4, "points"=>1, "ref"=>"1ecf370b-d70b-49bf-9416-984aeb9488c8|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2152", "assessment"=>nil}, {"id"=>2153, "name"=>"Set Username", "summary"=>"As a user, I want to set my username to display in chat rooms", "body"=>"<!-- { ids:[2153], name:\"Set Username\", summary:\"As a user, I want to set my username to display in chat rooms\" } -->\n\n> As a user, I want to set my **username** to display in chat rooms<br>\n> [Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Use Cookies\n\n> How can I efficiently store a username?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nA username is a string identifying a user. A common way to store a string in your browser is to use cookies. Angular has an external module for including the services and methods associated with cookies. To integrate the module:\n\n1. Include the Angular cookies module via a `<script>` tag in `index.html`: `https://ajax.googleapis.com/ajax/libs/angularjs/X.Y.Z/angular-cookies.js`, where X.Y.Z is the AngularJS version you are running.\n2. Inject the [`ngCookies` module](https://docs.angularjs.org/api/ngCookies) into your Angular app's dependency array.\n\n> How can I require each user to enter a username when they visit Bloc Chat for the first time?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nAngular modules have a `.run()` method that runs code when the app instance is created. Use a `.run()` block to make sure that a username is set at the time the app is initialized. You will need to inject the [`$cookies` service](https://docs.angularjs.org/api/ngCookies/service/$cookies) into the [run block's](https://docs.angularjs.org/guide/module#module-loading-dependencies) dependencies to check for the presence of the cookie holding the username:\n\n```js\n(function() {\n  function BlocChatCookies($cookies) {\n    var currentUser = $cookies.get('blocChatCurrentUser');\n    if (!currentUser || currentUser === '') {\n      // Do something to allow users to set their username\n    }\n  }\n\n  angular\n    .module('blocChat')\n    .run(['$cookies', BlocChatCookies]);\n})();\n```\n\n### Prompt the User\n\n> How can a user enter a username?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\n<center>![username modal mockup](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloc-chat/bloc-chat-set-username.jpg)</center>\n\nIf the app detects that a username isn't present, there needs to be a way to enter one. Inside the conditional that checks for the presence of a username, trigger another [UI Bootstrap modal](http://angular-ui.github.io/bootstrap/#/modal) that requires a user to enter one. Do not provide a “cancel” option this time, so the user cannot access the chat until their username has been set. To create a fully functional modal:\n\n1. Inject the `$uibModal` service in the `.run()` block.\n2. Call `$uibModal.open()` and pass in a configuration object.\n3. Create a template and a controller for the modal.\n\n```js\n(function() {\n  function BlocChatCookies($cookies, $uibModal) {\n    var currentUser = $cookies.get('blocChatCurrentUser');\n    if (!currentUser || currentUser === '') {\n      $uibModal.open({\n        // Modal configuration object properties\n      })\n    }\n  }\n\n  angular\n    .module('blocChat')\n    .run(['$cookies', '$uibModal', BlocChatCookies]);\n})();\n```\n\n### Test Your Code\n\n- Launch Bloc Chat.\n  - Verify that a modal prompts you for a username.\n  - Verify that you cannot dismiss the modal.\n  - Verify that submitting an empty username (or whitespace) does not succeed.\n  - Verify that providing a username grants access to Bloc Chat.\n  - Verify that the username is saved to the appropriate cookie.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>187, "roadmap_section_ref"=>"bda2225e-c669-4b54-b6bf-bd2bdca76532|0", "default_student_access"=>"locked", "active_index"=>5, "checkpoint_type"=>"normal", "position"=>5, "points"=>1, "ref"=>"df48fdcd-258c-40c8-af51-7f575c226c9d|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2153", "assessment"=>nil}, {"id"=>2154, "name"=>"Send Messages", "summary"=>"As a user, I want to send messages associated with my username in a chat room", "body"=>"<!-- { ids:[2154], name:\"Send Messages\", summary:\"As a user, I want to send messages associated with my username in a chat room\" } -->\n>As a user, I want to **send messages** associated with my username in a chat room<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Message Factory\n\n![message bar at the bottom of the chat](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloc-chat/bloc-chat-room-with-messages-with-send.jpg)\n\n>How can I send messages?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nAdd a method to your `Message` factory called `send`, that takes a message object as an argument and submits it to your Firebase server:\n\n```js\n(function() {\n  function Message($firebaseArray) {\n    var ref = firebase.database().ref().child(\"messages\");\n    var messages = $firebaseArray(ref);\n\n    return {\n      getByRoomId: function (roomId) {\n        // .. logic for filtering messages\n      },\n      send: function(newMessage) {\n        // Send method logic\n      }\n    };\n  }\n\n  angular\n    .module('blocChat')\n    .factory('Message', ['$firebaseArray', Message]);\n})();\n```\n\nCreate a controller method that is invoked via `ngClick` or `ngSubmit` on the frontend.\n\n### Associate Messages with Usernames\n\n>How can I make sure that the messages that a user sends are associated with their username?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nIn the message object detailed earlier, there was a `username` property that held a string referring to the user crafting the message. Populate that property with the current user's username by injecting the `$cookies` service and referencing the current user object on it.\n\n### Test Your Code\n\n- Launch Bloc Chat, open a chat room.\n  - Verify that messages are submitted to the active chat room.\n  - Verify that your username is associated with each message you create.\n  - Verify that new messages are associated with no chat rooms other than the active.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>187, "roadmap_section_ref"=>"bda2225e-c669-4b54-b6bf-bd2bdca76532|0", "default_student_access"=>"locked", "active_index"=>6, "checkpoint_type"=>"normal", "position"=>6, "points"=>1, "ref"=>"0306cfba-71b8-434e-bb40-08f324b6023c|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2154", "assessment"=>nil}, {"id"=>2155, "name"=>"Extra Credit", "summary"=>"If you finish early, attempt these extra credit user stories", "body"=>"<!-- { ids:[2155], name:\"Extra Credit\", summary:\"If you finish early, attempt these extra credit user stories\" } -->\nThe goal of extra credit is to push you towards self-reliance, so outside of a brief description, we don't provide additional resources. If you finish your project early, challenge yourself to complete these additional user stories:\n\n| **User Story** | **Difficulty Rating** |\n| :-- | :-- |\n| As a user, I want to create and authenticate accounts for my chat rooms using [AngularFire's Authentication API](https://github.com/firebase/angularfire/blob/master/docs/reference.md#firebaseauth) | 3 |\n| As a developer, I want to create admin users | 3 |\n| As an admin, I want to create private rooms for authorized participants | 3 |\n| As a user, I want to see if another chat room participant is online | 2 |\n| As a user, I want to see when another user is typing a message in my current chat room | 3 |", "assignment"=>"Optional: Complete one or more of the extra credit user stories.", "roadmap_section_id"=>187, "roadmap_section_ref"=>"bda2225e-c669-4b54-b6bf-bd2bdca76532|0", "default_student_access"=>"locked", "active_index"=>nil, "checkpoint_type"=>"extra_credit", "position"=>nil, "points"=>0, "ref"=>"c180df4f-701b-4da3-a9bc-b7792197b149|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2155", "assessment"=>nil}]}, {"id"=>215, "roadmap_id"=>38, "name"=>"Module 3: Backend Foundations", "time_estimate"=>"1 Hour", "point_ratio"=>0.0, "description"=>"", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"unlocked", "ref"=>"b69d958c-b6cd-44c2-80a4-ec7a33a72a2f|0", "section_type"=>"foundation", "checkpoints"=>[{"id"=>2352, "name"=>"Progress Check-In", "summary"=>"Before you continue, check-in with your mentor!", "body"=>"## Process\r\n\r\nSome of our mentors specialize in only one of our modules. Before you proceed to the next module, please make sure your current mentor is able to mentor you through Backend Foundations.\r\n\r\nIf you have one of the following mentors that specialize in Frontend-only, please reach out to <a href=\"mailto:help@bloc.io?subject=Switch mentors for Module 3: Backend Foundations\">help@bloc.io</a> with your preferred meeting time(s) and our team with help make your transition as smooth as possible.\r\n- Jason LaChapelle\r\n- Jeff Lau\r\n- John Uke\r\n- Kevin McGillivray\r\n- Matthew Maxwell\r\n- Ryan Balfanz\r\n- Zach Zimbler", "assignment"=>"If you have one of the following mentors that specialize in Frontend-only, please reach out to <a href=\"mailto:help@bloc.io?subject=Switch mentors for Module 3: Backend Foundations\">help@bloc.io</a> with your preferred meeting time(s) and our team with help make your transition as smooth as possible.\r\n- Jason LaChapelle\r\n- Jeff Lau\r\n- John Uke\r\n- Kevin McGillivray\r\n- Matthew Maxwell\r\n- Ryan Balfanz\r\n- Zach Zimbler", "roadmap_section_id"=>215, "roadmap_section_ref"=>"b69d958c-b6cd-44c2-80a4-ec7a33a72a2f|0", "default_student_access"=>"unlocked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"868fe02d-c31e-4709-81e3-6f104fea3773|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2352", "assessment"=>nil}, {"id"=>2353, "name"=>"Welcome to Module 3", "summary"=>"Introduction to Module 3: Backend Foundations", "body"=>"<mentor-checkpoint-note>\r\n###Suggested Student Resources\r\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\r\n* [Overcoming Impostor Syndrome](https://medium.com/@aliciatweet/overcoming-impostor-syndrome-bdae04e46ec5#.fbiad55kf)\r\n* [You Don’t Have Impostor Syndrome](https://medium.com/@aliciatweet/you-don-t-have-impostor-syndrome-126e4c4bdcc#.vhcpezeev)\r\n</mentor-checkpoint-note>\r\n\r\n> We've repeated some information in this checkpoint because it serves as a reminder of how to be successful in Bloc. Make sure you complete the assignment before moving on. This checkpoints marks the start of **Module 2: Frontend Foundations**. During this module, you'll apply your fundamental programming skills to web development as we guide you through two projects and help you build four others. We wrote this curriculum specifically for Bloc students.\r\n\r\n### Your Time Commitment\r\n\r\n<center>![time](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-2.jpg)</center>\r\n\r\n<br>\r\n\r\nBloc is an immersive experience, and requires a serious time commitment. Students spend approximately 540 hours in Bloc before graduating. You'll achieve the best results with disciplined time management; review the following time commitments, based on your pace:\r\n\r\n| Weekly Appointments | Weekly Time Commitment |\r\n|---------------------|------------------------|\r\n| 2 | 20 hours |\r\n| 1 | 12 hours |\r\n\r\nWe can't stress enough the importance of a disciplined schedule. Committing 12 or 20 hours a week is no easy task. You'll need to sacrifice TV, parties, video games, or even vacations. Remember that you'll maximize your results if you stay truly immersed throughout Bloc. You _must_ put in the time, or you will not achieve your desired results; there's too much to learn and build. We recommend that you schedule regular study times on your calendar, and diligently follow that schedule. Share this schedule with your mentor so they know when you'll be working.\r\n\r\n### Curriculum\r\n\r\nOur curriculum is built specifically for students and mentors to promote effective learning and collaboration. The curriculum is your roadmap through the Bloc experience; it defines the direction, topics, and sequence you'll need to learn and achieve your goals.\r\n\r\nThe curriculum consists of four modules. Each module contains checkpoints with explicit assignments that you must complete to move on:\r\n\r\n- **Module 1: Programming Fundamentals** – learn HTML, CSS, the command line, Git, GitHub, Ruby, and JavaScript. You'll use all of these tools extensively throughout Bloc as you build projects. Your mentor will be with you every step of the way, and will help you master these fundamental concepts.\r\n- **Module 2: Frontend Foundations** – apply your fundamental programming skills to web development as we guide you through a project and help you build two others. By the end of this module, you will have learned JavaScript, jQuery, and AngularJS. We wrote this curriculum specifically for Bloc students.\r\n- **Module 3: Backend Foundations** – apply your fundamental programming skills to web development as we guide you through a project and help you build two others. By the end of this module, you will have learned Ruby, Rails, and MVC Web Development. We wrote this curriculum specifically for Bloc students.\r\n- **Module 4: Specialization** – you'll work with your mentor and our Outcomes team to select at least two more projects based on your outcome goal. These projects will stand out in your portfolio and position you for interviews with companies.\r\n\r\nEach of the modules consists of checkpoints, assignments, and quizzes. You should discuss each checkpoint with your mentor and resolve any questions you have before progressing. After submitting a checkpoint assignment, your mentor will review your work and provide you with feedback. Quizzes will help us understand your strengths and weaknesses, and we may adjust your program based on your quiz results.\r\n\r\nThe curriculum is constantly assessed and improved. The technologies you're learning move fast, and thus, we must keep the curriculum current. We update the curriculum frequently, and will notify you when there are major changes.\r\n\r\nWe illustrate some tips for successful learning in the following video. We recommend that you come back to read this checkpoint and watch this video throughout Bloc:\r\n\r\n<center>\r\n  <iframe src=\"https://fast.wistia.net/embed/iframe/u53k9sb8uy\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\r\n</center>\r\n\r\n### Mentor Appointments\r\n\r\n<center>![appointment](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-4.jpg)</center>\r\n\r\n<br>\r\n\r\nAppointments are live, one-on-one meetings with your mentor. Each appointment is usually 30 minutes in length, though the actual duration will depend on the topic and your mentor's judgement.\r\n\r\nAppointments are virtual, and have software requirements:\r\n\r\n- [Google Chrome Web Browser](https://www.google.com/intl/en/chrome/browser/) - We think Chrome is the best browser for developers and designers, and we recommend using it in general.\r\n- __A screensharing application__ like Screenhero. Message your mentor to determine their preference, and download the software.\r\n- [Google Hangouts](https://www.google.com/hangouts/) or [Skype](https://www.skype.com) for video chat.\r\n\r\nIf you and your mentor prepare, have an agenda, and arrive on time, an appointment will be a high-leverage learning experience. Do not lose respect for your appointments; productive appointments are essential for a great experience. An appointment's agenda is not limited, but often includes:\r\n\r\n- checkpoint review\r\n- assignment review\r\n- project review\r\n- pair programming\r\n- code review\r\n- design critique\r\n- debugging and troubleshooting\r\n- best practice technique sharing\r\n\r\nYour mentor will often lead the appointment, but you should come with a list of questions and issues.\r\n\r\n### Communication\r\n\r\n<center>![communication](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-5.jpg)</center>\r\n\r\nMuch of your communication in Bloc will be asynchronous. You'll write a message, submit an assignment, or ask a question, and your mentor will respond. The recommended way to communicate asynchronously is to use our [messages feature](https://www.bloc.io/message_threads). You'll also have the ability to submit checkpoint-specific messages at the bottom of each checkpoint. (You'll see this in action below, in this checkpoint.)\r\n\r\nTo speak with someone at Bloc who is not your mentor, you can email [Bloc Help](mailto:help@bloc.io) anytime. You will **always** have someone to speak with at Bloc, no matter what the issue is.\r\n\r\nYou will establish other means of communication with your mentor, based on your mutual preferences. We encourage you to use the Bloc messages feature as much as possible, but realize that other communication tools may sometimes be necessary. The following section lists some alternative communication tools.\r\n\r\n### Ecosystem\r\n\r\nBloc's ecosystem includes tools that make it easier to collaborate and get help when you need it. The ecosystem is always evolving, and you should explore its tools. Review the [Ecosystem resource](https://www.bloc.io/resources/ecosystem) and ask your mentor which tools they use.\r\n\r\n### Expectations\r\n\r\n<center>![mentor-apprentice](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-6.jpg)</center>\r\n\r\n<br>\r\n\r\nYour expectations must align with your mentor's to be successful in Bloc. It's important to understand what's expected of you, and what you should expect of your mentor.\r\n\r\n### Mentor Expectations\r\n\r\nMentors will:\r\n\r\n* Inspire and lead students.\r\n* Prepare for appointments and arrive on time.\r\n* Hold students accountable.\r\n* Respond to all questions and issues.\r\n* Provide feedback on submitted checkpoints and assignments.\r\n\r\n### Student Expectations\r\n\r\nStudents will:\r\n\r\n* Commit the requisite time to Bloc.\r\n* Trust their mentor.\r\n* Accept the assignments and projects provided by Bloc.\r\n* Prepare for appointments and arrive on time.\r\n* Communicate openly with their mentor.\r\n\r\n### Succeeding in Bloc and Beyond\r\n\r\n<center>![success](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-7.jpg)</center>\r\n\r\n<br>\r\n\r\nMaintaining a healthy perspective on yourself and your work is crucial for getting a job, starting a company, building a product, or winning client work. Students who excel portray the following traits:\r\n\r\n* I am responsible for my own learning.\r\n* I embrace challenges.\r\n* I am focused and disciplined.\r\n* I share what I learn with the Bloc community.\r\n* I celebrate accomplishments.", "assignment"=>"Send a message to your mentor explaining what you think your strengths and weaknesses are, regarding the programming fundamentals you learned in Module 2. Be verbose, the more insight the mentor has into your self-assessment, the better they will be to help you grow.", "roadmap_section_id"=>215, "roadmap_section_ref"=>"b69d958c-b6cd-44c2-80a4-ec7a33a72a2f|0", "default_student_access"=>"unlocked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"2a62185c-70a5-49f9-8b2b-2fd3961903a2|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2353", "assessment"=>nil}]}, {"id"=>212, "roadmap_id"=>38, "name"=>"Backend Programming Fundamentals", "time_estimate"=>"12 hours", "point_ratio"=>0.0, "description"=>"", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"locked", "ref"=>"ba74a988-3813-4997-abfe-e79098eb308f|0", "section_type"=>"foundation", "checkpoints"=>[{"id"=>2356, "name"=>"Introductory Ruby", "summary"=>"An introduction to the basics of the Ruby language.", "body"=>"<!-- { ids:['2356', '2357'], name:'Introductory Ruby', summary:'An introduction to the basics of the Ruby language.' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [#inject walkthrough gist](https://gist.github.com/gadtfly/200a94011242b6b8c29c)\n* [Bloc Ruby Warrior](https://www.bloc.io/ruby-warrior)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint teaches you the fundamentals of Ruby.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Define the data types available in Ruby.\n- Understand how to define methods.\n- Understand how to pass arguments.\n- Understand how to return a value from a method.\n- Understand how to debug syntax errors.\n- Apply conditional expressions and operators.\n- Demonstrate how to access elements in an array.\n- Demonstrate how to access elements in a hash.\n- Apply the `each` method to iterate over an array.\n- Understand the concept of iteration.\n- Explain what a block is and how it can be used as an argument.", "assignment"=>"Complete the [Ruby](https://www.codecademy.com/learn/ruby) course using your Codecademy account listed in your Bloc profile. Submit a link to your public profile to your mentor. In your submission message, ask your mentor questions about specific exercises that you struggled with.\nReview [Writing the Perfect Question](https://codeblog.jonskeet.uk/2010/08/29/writing-the-perfect-question/) by the prolific Stack Overflow contributor [Jon Skeet](http://stackoverflow.com/users/22656/jon-skeet) as it will help you craft great questions.", "roadmap_section_id"=>212, "roadmap_section_ref"=>"ba74a988-3813-4997-abfe-e79098eb308f|0", "default_student_access"=>"locked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"d6e4f9a8-8d32-47aa-8f22-1d6e71616825|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2356", "assessment"=>nil}, {"id"=>2197, "name"=>"Intermediate Ruby", "summary"=>"Learn the fundamentals of object-oriented programming with Ruby, and common mechanisms like loops, conditionals, functions, and arrays", "body"=>"<!-- { ids:[2197], name:'Intermediate Ruby', summary:'Learn the fundamentals of object-oriented programming with Ruby, and common mechanisms like loops, conditionals, functions, and arrays' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Why's (poignant) Guide to Ruby](http://poignant.guide)\n</mentor-checkpoint-note>\n\n\n## Overview and Purpose\n\nThis checkpoint teaches you the fundamentals of object-oriented programming with Ruby, and common mechanisms like loops, conditionals, functions, and arrays.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Understand best practices for writing expressions.\n- Raise exceptions.\n- Understand encapsulation, method types, and inheritance.\n- Leverage ActiveSupport helpers.\n- Namespace methods.", "assignment"=>"Complete the [Ruby Bits](https://www.codeschool.com/courses/ruby-bits) course using your Code School account provided by Bloc. Submit a link to your public report card to your mentor. In your submission message, ask your mentor questions about specific exercises that you struggled with. Review [Writing the Perfect Question](https://codeblog.jonskeet.uk/2010/08/29/writing-the-perfect-question/) by the prolific Stack Overflow contributor [Jon Skeet](http://stackoverflow.com/users/22656/jon-skeet) as it will help you craft great questions.", "roadmap_section_id"=>212, "roadmap_section_ref"=>"ba74a988-3813-4997-abfe-e79098eb308f|0", "default_student_access"=>"locked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"d07d641d-e7c4-41fa-8e50-d38e3a48046d|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2197", "assessment"=>nil}, {"id"=>2301, "name"=>"Quiz: Ruby Programming Fundamentals", "summary"=>"Quiz: Ruby Programming Fundamentals", "body"=>"", "assignment"=>"", "roadmap_section_id"=>212, "roadmap_section_ref"=>"ba74a988-3813-4997-abfe-e79098eb308f|0", "default_student_access"=>"locked", "active_index"=>3, "checkpoint_type"=>"quiz", "position"=>3, "points"=>1, "ref"=>"8011b23d-5b22-42db-a7d8-6910cd3fee77|0", "exercises"=>false, "quiz_id"=>13, "path"=>"/checkpoints/2301", "assessment"=>nil}]}, {"id"=>188, "roadmap_id"=>38, "name"=>"Foundation: Backend Web Development", "time_estimate"=>"60 Hours", "point_ratio"=>0.0, "description"=>"", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"locked", "ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "section_type"=>"foundation", "checkpoints"=>[{"id"=>2097, "name"=>"Programming Reinforcement: Introduction", "summary"=>"Reinforce Ruby programming and problem solving fundamentals through curated exercises", "body"=>"<!-- { ids:[2097], name:'Programming Reinforcement: Introduction', summary:'Reinforce Ruby programming and problem solving fundamentals through curated exercises' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [The Imposter's Handbook](https://bigmachine.io/products/the-imposters-handbook)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint introduces the Codewars platform and three coding challenges to practice conditionals, string and array manipulation, and basic algorithms in Ruby.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Understand conditional logic and the importance of sequence.\n- Understand the differences and similarities between strings and arrays.\n- Assess the advantages of various conditional statements in Ruby.\n- Understand how to read test specifications in Ruby.\n\n## Programming Reinforcement\n\nEach foundation checkpoint introduces new concepts, patterns, and assignments. We designed Bloc’s curriculum to push you to your learning limits. With that in mind, we’ve included breaks between lessons to reinforce programming concepts; this is the first of those breaks, known as Programming Reinforcement checkpoints.\n\nIn these checkpoints, you will complete coding challenges that help you master Ruby and learn to think like a programmer. After you complete the challenges, you will meet with your mentor to discuss your solutions.\n\n- [Codewars](#codewars)\n- [Challenges](#challenges)\n- [Bonus Challenge: Find the Sum](#bonus-challenge)\n- [Assignment](#assignment)\n  - [For Mentors](#for-mentors)\n\n<a name=\"codewars\"></a>\n## Codewars\n\n<center>\n    <iframe src=\"//fast.wistia.net/embed/iframe/0sysb0t39z\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe>\n    <script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center><br><br>\n\nSign up for a free account at [Codewars](http://codewars.com). Codewars is a community of developers who help each other complete coding challenges. These challenges require you to apply Ruby’s core features and your strong, analytical thinking to solve them properly.\n\nIf this is your first time creating an account, you must solve two initial coding challenges to complete sign up: [Multiply](http://www.codewars.com/kata/multiply/train/ruby) and [Broken Greetings](http://www.codewars.com/kata/broken-greetings/train/ruby).\n\n<a name=\"challenges\"></a>\n## Challenges\n\nYou must solve these three Kata (challenges) before submitting the checkpoint. At this point in your program, your skill level meets or exceeds that required by each Kata. While they may challenge you, know that you are capable of completing each one.\n\n>Your mentor may help you, but we strongly encourage you attempt these on your own.\n\n| Kata                                                                                    | Difficulty[*](#difficulty) | Hint                                                                                                        |\n|:----------------------------------------------------------------------------------------|:---------------------------|:------------------------------------------------------------------------------------------------------------|\n| [Jenny’s Secret Message](http://www.codewars.com/kata/jennys-secret-message/train/ruby) | 8                          | The order of our code is critical.                                                                          |\n| [Count by X](http://www.codewars.com/kata/count-by-x/train/ruby)                        | 8                          | We can append items to the end of an array with an operator, brush up on arrays and how to manipulate them. |\n| [Stringy Strings](http://www.codewars.com/kata/stringy-strings/train/ruby)              | 8                          | Conditional expressions help us determine whether we should do one thing or another.                        |\n\n<a name=\"difficulty\"></a>\n\\*<sub> Difficult problems have lower ratings.</sub>\n\n<a name=\"bonus-challenge\"></a>\n## Bonus Challenge: [Find the Sum](http://www.codewars.com/kata/find-sum-of-top-left-to-bottom-right-diagonals/train/ruby)\n\n>This bonus challenge is optional, but we strongly encourage you to attempt it.\n\nIn this exercise, you must calculate the sum of diagonal values in a square [matrix](http://www.purplemath.com/modules/matrices.htm). A square matrix looks like this:\n\n| **1** | 2 | 3 |<br>\n| 4 | **5** | 6 |<br>\n| 7 | 8 | **9** |<br>\n\nWe highlighted the diagonal values. If we sum them together, we get `1 + 5 + 9 = 15`. A two-dimensional array (an array of arrays) stores each matrix. For example, to generate this matrix in Ruby, we could use the following syntax:\n\n```ruby\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ]\ndiagonal_sum = matrix[0][0] + matrix[1][1] + matrix[2][2]\n#=> 15\n```\n\n`matrix` is an array with three arrays inside of it. Your code must calculate the diagonal sum regardless of the size of the matrix. This 3x3 is one option, but an 1800x1800 matrix is possible as well.\n\n>Extra Credit: Try to complete this exercise in three lines or less!\n\n<a name=\"assignment\"></a>", "assignment"=>"- Navigate to your Bloc student account page to add your Codewars username. This will help your mentor find you on Codewars.\n- Complete all [mandatory challenges](#challenges).\n  - Submit the [link](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/programming-reinforcement-solution-link.png) to each of your solutions as part of your assignment.\n- Attempt the [Bonus Challenge](#bonus-challenge).\n  - Keep a log as you work through it and consider these questions when writing your report:\n    - What approaches did you try?\n    - Did you ever restart the process? If so, why?\n    - What steps did you take to solve the problem before you began coding?\n    - What was the most challenging aspect of the problem?\n    - Etc.\n  - If you complete the [Bonus Challenge](#bonus-challenge), submit the [link](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/programming-reinforcement-solution-link.png) to your solution.\n- Discuss your solutions and your struggles with your mentor.\n\n>Articulating your problem solving process is a valuable skill on the job and during technical interviews.\n\nRemember to click **Submit Final** on every challenge you complete, and notify your mentor when you do so. For challenges you *do not* complete, you may ask your mentor to review them with you.\n\n<a name=\"for-mentors\"></a>\n### For Mentors\n\nConsult this [document for reference](https://www.bloc.io/resources/ruby-programming-reinforcement-mentor-s-guide) for this and all future Ruby Programming Reinforcement checkpoints.", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"a9165018-2888-4d49-854d-a45cfc8e64c3|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2097", "assessment"=>nil}, {"id"=>2098, "name"=>"Development Environment", "summary"=>"Development Environment: configuring a computer to develop and run Ruby on Rails apps", "body"=>"<!-- { ids:[2098], name:'Development Environment', summary:'Development Environment: configuring a computer to develop and run Ruby on Rails apps' } -->\n\n## Overview and Purpose\n\nThis checkpoint introduces you to some of the tools you'll use for development.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Discuss the `git` command.\n- Explain the difference of Ruby and Ruby on Rails.\n- Discuss `rvm` and its purpose.\n\n## There Will be Code, but First...\n\nA development environment is a cohesive set of tools for building and deploying software. A development environment for Ruby on Rails requires the installation of a few programs. Properly configuring a development environment can be a challenge for new developers, so follow the instructions carefully. You should ask your mentor if you have problems or questions.\n\n> Environment setup can be unpredictable and frustrating. We strongly recommend setting up your environment with your mentor.\n\n## Mac and Linux Users\n\nMost tools related to Ruby on Rails (commonly referred to as \"Rails\") are optimized for Unix-based operating systems, like OS X and Linux. If you are using a Unix-based operating system, we advise you to create a *local* developer environment. This means you'll install software on your computer, and won't use a virtual machine or a cloud service.\n\nBecause many installation instructions are dependent on the version of your OS, we'll refer you to the instructions on [Install Rails](http://installrails.com/), which will provide you with customized installation steps. Follow the instructions, stopping at the section on Sublime Text.\n\nTools we will install and use:\n\n| **Tool** | **Description** |\n| :-- | :-- |\n| __Git__ | A version tracking software, essential for tracking and sharing your changes with your mentor and other programmers. We'll use Git on a regular basis.\n| __RVM__ | Ruby Version Manager, a tool for installing and switching between versions of Ruby. |\n| __Ruby__ | The multi-purpose programming language with which Rails is built. Installed using RVM. It comes with the RubyGems software, which allows you to download, install and use ruby software packages (\"gems\") on your system. |\n| __Rails__ | One of the world's most powerful and user-friendly web-development frameworks, written in Ruby. Packaged as a gem. |\n\nOnly on Mac:\n\n| **Tool** | **Description** |\n| :-- | :-- |\n| __Xcode__ (Mac only) | An integrated development environment (IDE) containing a suite of software development tools developed by Apple for developing software. |\n| __Homebrew__ (Mac only) | A software package management system that simplifies the installation of software on the Mac OS X operating system. It is actually written in Ruby! |\n\nOnce you've installed those tools with the help of [Install Rails](http://installrails.com/), you've completed this checkpoint.\n\n## Windows Users\n\nWhile it's possible to install Rails on a Windows computer, it is _much_ more difficult. Installation bugs on Windows are highly unpredictable and can take many hours to fix - often incompletely. This is not the sort of frustration you want when you're just getting started.\n\nAs a consequence, we suggest using Cloud9, which is a browser-based development environment. You can quickly set up a free account with Cloud9. Cloud9 allows you to easily log in, edit, save, and collaborate on code. We __strongly__ advise students on Windows computers to get started with Cloud9.\n\nCheck out our resource on [Cloud9 with Rails](/resources/cloud9-on-rails) for instructions on how to set up your Cloud9 development environment.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| Development Environment | A development environment is a cohesive set of tools for building and deploying software. |\n| Xcode | Apple's Integrated Development Environment (IDE), which includes a large number of generic software development tools. |\n| [Ruby](https://www.ruby-lang.org/en/) | Ruby is a dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write. |\n| [Ruby on Rails](https://github.com/rails/rails) | Rails is a web-application framework that includes everything needed to create database-backed web applications, according to the Model-View-Controller (MVC) pattern. |", "assignment"=>"In addition to giving us compartmentalized independent Ruby setups, RVM allows us to create separate named gemsets. Explore the power of RVM by creating a Rails 4.2.5 gemset:\n\n* Create a gemset for Rails 4.2.5:\n\n  ```bash(Terminal)\n  $ rvm gemset create rails425\n  ```\n\n* Switch to the `rails425` gemset:\n\n  ```bash(Terminal)\n  $ rvm @rails425\n  $ rvm current\n  ruby-2.2.1@rails425\n  ```\n\n* Install Rails 4.2:\n\n  ```bash(Terminal)\n  $ gem install rails -v 4.2.5\n  ...\n  Fetching: rails-4.2.5.gem (100%)\n  Successfully installed rails-4.2.5\n  29 gems installed\n  ```\n\nOnce your assignment is complete, message your mentor.", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"2d15ce61-428f-4a94-a7aa-a49a40759f64|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2098", "assessment"=>nil}, {"id"=>2099, "name"=>"Atom", "summary"=>"Atom: a text editor for coding", "body"=>"<!-- { ids:[2099], name:'Atom', summary:'Atom: a text editor for coding' } -->\n<center>![welcome-to-atom](https://bloc-global-assets.s3.amazonaws.com/images-rails/atom/welcome-to-atom.png)</center>\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Github's Atom - Why Atom.Io Will Be Your Favorite Text Editor!](https://www.youtube.com/watch?v=bo5MM2N_3tw)\n* [My Code Editor: Atom, Setup & Packages](https://www.youtube.com/watch?v=hPC6keUUiTA)\n* [Atom: My New Favorite Code Editor](http://www.jonobacon.org/2015/11/16/atom-my-new-favorite-code-editor/)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint introduces you to Atom, the editor you'll use as part of your web development process.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Use Atom command line commands.\n- Use the package manager in Atom.\n\n## Why Atom?\n\nBrackets provides an excellent environment for Frontend development, but our priorities change in Backend development. Design-focused features like live-preview are ideal for user-facing work, but now we need a fast, general-purpose code editor with minimum overhead.\n\nA robust text editor makes writing code more efficient and pleasant. Most options have merit, but Bloc chooses [Atom](https://atom.io/). Atom is modern, approachable, customizable, open source, and free. It's built and maintained by GitHub.\n\n> If you've set up your environment using a cloud IDE, we suggest sticking with the default text editor. Instead of installing Atom, go to the [assignment](#assignment) and complete it.\n\nIf you have a **local** environment setup, the first step is to [download Atom](https://atom.io) and install it.\n\n## Take Atom for a Test Drive\n\nOpen Atom and create a new file named `hello_world.rb`. Type the following lines of code in the editor:\n\n```ruby(hello_world.rb)\ndef hello_world\n  puts \"hello world\"\nend\n```\n\nAtom automatically highlights and colors important syntax elements of the code. Syntax highlighting improves the readability and context of code. It also helps us find mistakes in code.\n\n## Atom Command Line Shortcut\n\nYou can use Atom to open files from the command line, which is extremely useful. To open a file in Atom, use the `atom` command that was installed with Atom:\n\n```bash(Terminal)\n$ atom hello_world.rb\n```\n\n`atom` can also be used to open an entire directory:\n\n```bash(Terminal)\n$ atom .\n```\n\n## Package Manager\n\nAtom ships with a built-in package manager which makes it easy to install plugins that make Atom pleasant and productive to work with. Hit `CMD+SHFT+P` if you're on a Mac or `CTRL+SHFT+P` if you're using a Windows machine. Start typing \"Install Package\", select \"Setting View: Install Packages and Themes\" and hit `enter`. This opens the \"Install\" section of \"Setting\":\n\n<center>![install package](https://bloc-global-assets.s3.amazonaws.com/images-rails/atom/install-packages.png)</center>\n\nIn the search box, enter \"minimap\", click enter and scroll down to the \"minimap\" package and install it:\n\n<center>![install package](https://bloc-global-assets.s3.amazonaws.com/images-rails/atom/install-mini-map.png)</center>\n\n`minimap` displays a smaller map of the current file to the right of the main window. This is helpful for navigating large files.\n\nThere are many other Atom packages and themes, experiment with changing the default Atom theme.\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Atom](https://atom.io/) | Atom is a sophisticated text editor for code, markup, and prose. |\n| [`atom` command](https://atom.io/docs/latest/getting-started-atom-basics#opening-modifying-and-saving-files) | The `atom` command opens files and directories in Atom, from the command line. |\n| [Atom Package Manager](https://atom.io/packages) | The Atom Package Manager makes it simple to find, install, and keep packages up-to-date. |", "assignment"=>"Atom is just one text editor among many others you can use. In this assignment, we'll explore another, Vim. Vim is a command line based text editor, and is installed on almost all Unix and Unix-like operating systems. It is a powerful text editor which you will inevitably encounter during your development journey. If you don't have Vim installed on your computer, search the internet for installation instructions or reach out to your mentor for help on how to get it installed.\n\n1. Open your command line and create a new file with Vim:\n```bash(Terminal)\n$ vim hello_world_with_vim.rb\n```\n\n2. Vim has [several modes](http://en.wikibooks.org/wiki/Learning_the_vi_Editor/Vim/Modes) in which it can operate. By default it starts in normal mode. To enter text in the file, switch to insert mode by hitting the `i` key.\n\n3. Enter the following code:\n  ```ruby(hello_world_with_vim.rb)\n  def hello_world\n    puts \"hello world, vim is cool!\"\n  end\n  ```\n\n4. To leave insert mode and return to normal mode, hit the `ESC` key.\n\n5. To save the file and close Vim, enter: `:wq`. This tells Vim to write the changes to disk, and then quit. The `:wq` command is one of many available [vim commands](http://www.fprintf.net/vimCheatSheet.html).\n\n6. Read what you created:\n  ```bash(Terminal)\n  $ cat hello_world_with_vim.rb\n  ```\n\n7. We've barely scratched the surface of Vim's power. Explore the [vimtutor](http://linuxcommand.org/man_pages/vimtutor1.html) to discover more of the power Vim offers developers.\n\nMessage your mentor the contents of `hello_world_with_vim.rb` to complete this assignment.", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>3, "checkpoint_type"=>"normal", "position"=>3, "points"=>1, "ref"=>"ebfb5b6a-b924-4295-a6a0-f9fafc657d11|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2099", "assessment"=>nil}, {"id"=>2100, "name"=>"Address Bloc: Basic Ruby App", "summary"=>"Basic Ruby App: Running a Ruby App from the command line", "body"=>"<!-- { ids:[1625, 2100], name:'Address Bloc: Basic Ruby App', summary:'Basic Ruby App: Running a Ruby App from the command line' } -->\n\n> “I hope to see Ruby help every programmer in the world to be productive, and to enjoy programming, and to be happy. That is the primary purpose of Ruby language.”\n>\n> — Yukihiro Matsumoto, the creator of Ruby\n\n## Overview and Purpose\n\nThis checkpoint introduces you to building and running local Ruby programs.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Explain IRB.\n- Execute a basic Ruby program.\n- Pass arguments to a command-line Ruby program.\n\n## Introduction\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/fejbqamrfs\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWe've spent the last several checkpoints learning Ruby in the browser, but now it's time to start using it locally. Over the next six checkpoints we'll build our first Ruby application, an address book application called Address Bloc. We'll learn how to run a Ruby program from the command line, create an interactive menu, represent the address book and entries with Ruby models, import entries from a file, search the address book, and testing.\n\n## IRB\n\nThe best tool to start working with Ruby locally is the Interactive Ruby Shell (IRB). IRB allows us to immediately execute Ruby commands on the fly.\n\n> While working through the Ruby browser exercises you might have wondered how Ruby developers can memorize the massive collection of Ruby classes and methods. The secret is; they don't! If you ask a Ruby developer about an obscure class or method, you're likely to see them run IRB and start experimenting with it to remind themselves what it does.\n\nStart IRB from the command line:\n\n```bash(Terminal)\n$ irb\nirb(main):001 >\n```\n\n> `irb(main):001 >` is the IRB prompt. `:001` is the current line number.\n\nYou can use IRB as a simple calculator:\n\n```bash(Terminal)\nirb(main):001 > 3 + 3\n => 6\nirb(main):002 >\n```\n\n`=> 6` is the value returned after we add `3` and `3` together.\n\nOr to create and use variables:\n\n```bash(Terminal)\nirb(main):002 > name = \"John Jay\"\n => \"John Jay\"\nirb(main):003 > name.length\n => 8\nirb(main):004 >\n```\n\nOr even to define and call methods. Let's create the [classic \"Hello, World! program](http://en.wikipedia.org/wiki/%22Hello,_World!%22_program) in IRB:\n\n```bash(Terminal)\nirb(main):004 > def hello\nirb(main):005?>   puts \"Hello, World!\"\nirb(main):006?>   end\n => :hello\n irb(main):007 > hello\n Hello, World!\n  => nil\n```\n\n> `hello` doesn't return a value. Instead, it returns `nil`, as the `=> nil` line shows.\n\nLet's watch a video that demonstrates how to use IRB from the command line:\n\n<center>\n<a href=\"//fast.wistia.net/embed/iframe/ow4pjc3b7x?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Objects Solutions</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>\n\n## Running a Ruby Program\n\nIRB is a great tool for experimentation and learning, but when you exit IRB everything you wrote will be erased. To save code you'll write it in a Ruby file, which ends with an `.rb` extension. Exit IRB using the `exit` command and then create a new Ruby file:\n\n```bash(Terminal)\n$ touch hello_world.rb\n```\n\nAnd then adding Ruby code inside of it:\n\n```ruby(hello_world.rb)\n+def hello_world\n+  puts \"Hello, World!\"\n+end\n+\n+hello_world\n```\n\nThat's it! We've created our first stand-alone Ruby program.\n\nRuby is an [interpreted language](http://en.wikipedia.org/wiki/Interpreted_language), which means we can execute it directly, without needing to compile it first. Running it is simple as:\n\n```bash(Terminal)\n$ ruby hello_world.rb\nHello, World!\n```\n\n## Command-line Arguments\n\nIt's often useful to be able to pass arguments to our programs when we run them, via command-line arguments:\n\n```bash(Terminal)\n$ ruby hello_world.rb arg1 arg2 arg3\n```\n\nCommand-line arguments have many uses. They can be used to pass in the name of files to modify, provide options to change how the program is executed, or just pass in simple values to be used. Let's modify the hello world program so that can say hello to any number of people:\n\n```ruby(hello_world.rb)\n def hello_world\n # #1\n+  ARGV.each do |arg|\n+    puts \"Hello, \#{arg}!\"\n+  end\n-  puts \"Hello, World!\"\n end\n\nhello_world\n```\n\n__#1__, Command-line variables are stored in an array called `ARGV`. We can access and treat `ARGV` just like any other array.\n\nRun the improved program and provide some people to say hello to via command-line arguments:\n\n```bash(Terminal)\n$ ruby hello_world.rb Kermit Piggy Statler Waldorf Janice Fozzie Camilla\n```\n\n## AddressBloc\n\nNow that we've explored IRB and written our first Hello World program, it's time to start Address Bloc. Follow the [Git Checkpoint Workflow resource to create a repository](https://www.bloc.io/resources/git-checkpoint-workflow#create-a-repository) to create a repository on GitHub and clone it locally. Name it \"address-bloc\".\n\n`cd` into `address-bloc` and create a new Git feature branch. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\nAddress Bloc will consist of multiple Ruby files, but for now we'll create the main Ruby program to run AddressBloc:\n\n```bash(Terminal)\n$ touch address_bloc.rb\n```\n\nOpen `address_bloc.rb` and add a message to welcome users to Address Bloc:\n\n```ruby(address_bloc/address_bloc.rb)\n+puts \"Welcome to AddressBloc!\"\n```\nRun Address Bloc:\n\n```bash(Terminal)\n$ ruby address_bloc.rb\nWelcome to AddressBloc!\n$\n```\n\nWe've laid the foundation for our first Ruby program. In the next checkpoint, we'll add more functionally and create an interactive menu for Address Bloc users.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.\n\n## Recap\n| **Concept** | **Description** |\n| :-- | :-- |\n| [IRB](http://ruby-doc.org/stdlib-2.0/libdoc/irb/rdoc/IRB.html) | IRB is a tool used to interactively execute Ruby expressions read from the standard input. |\n| `ruby` | The `ruby` command invokes the Ruby interpreter to run Ruby programs from the command line. |", "assignment"=>"Write a program named `greeting.rb` that takes multiple command-line arguments. The first argument should be the greeting to be used. The rest of the arguments should be the names of people to greet. The program should print out a greeting for each person. For example:\n\n```bash(Terminal)\n$ ruby greeting.rb Hey Sterling Cheryl Lana\n```\n\nshould output:\n\n```bash(Terminal)\nHey Sterling\nHey Cheryl\nHey Lana\n```\n\nand\n\n```bash(Terminal)\n$ ruby greeting.rb Yo Cyril Archer Krieger\n```\n\nshould output:\n\n```bash(Terminal)\nYo Cyril\nYo Archer\nYo Krieger\n```\n\nCreate `greeting.rb` in your `code` directory. Once your assignment is complete, submit your code to your mentor via the Discussion tab.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/zup5t4wk2r?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Address Bloc: Basic Ruby App Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>4, "checkpoint_type"=>"normal", "position"=>4, "points"=>1, "ref"=>"b4cdb370-5a8c-4f55-b742-0b368be58b44|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2100", "assessment"=>nil}, {"id"=>2101, "name"=>"Address Bloc: Models", "summary"=>"Models: storing data in a structured interface for easy manipulation", "body"=>"<!-- { ids:[1626, 2101], name:'Address Bloc: Models', summary:'Models: storing data in a structured interface for easy manipulation' } -->\n\n> “Maybe there's more to life than being really, really, really ridiculously good looking?”\n>\n> — Derek Zoolander, Model\n\n## Overview and Purpose\n\nThis checkpoint covers Test Driven Development.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Explain Test Driven Development.\n- Write a basic test using Rspec.\n- Install a gem.\n\n## Introduction\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/4je0ptx3ym\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nAddress Bloc will need to [model](http://en.wikipedia.org/wiki/Data_modeling) an internal address book and all its entries. Models provide a structured interface to the data source in a project which allows for easier manipulation of the underlying data.\n\nWe'll practice [Test-Driven Development (TDD)](http://www.agiledata.org/essays/tdd.html) by creating tests before we write functional code. TDD might seem like a backward way to write code, but programming this way encourages us to think carefully about expected behavior and desired design. The resulting code base tends to be very modular and easy to change, making the app's development smoother and more sustainable. It keeps our work's scope tight, making it hard to drift into tangential or irrelevant changes.\n\nFor testing, we'll use the popular and powerful testing framework [RSpec](http://rspec.info/). Install it using the `gem` command:\n\n```bash(Terminal)\n$ gem install rspec\n```\n\n> After installing the gem, consider running the `rspec --init` command to generate an `.rspec` file, which should contain the default color setting of `--color`. This will colorize the RSpec output. Additionally, consider installing the [Nyan Cat Formatter](https://github.com/mattsears/nyan-cat-formatter) because it's fun.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## The `Entry` Model\n\nWe'll start by creating a model to store our address book entries, `Entry`.\n\nLet's create directories to store our models and specs (RSpec's names for tests):\n\n```bash(Terminal)\n$ cd address-bloc\n$ mkdir models\n$ mkdir spec\n```\n\nCreate two files: one for `Entry`, and one for `entry_spec.rb`:\n\n```bash(Terminal)\n$ touch models/entry.rb\n$ touch spec/entry_spec.rb\n```\n\n### `Entry` Attributes\n\nWe'll keep our tests in the `spec` directory. Open `entry_spec.rb` and add the following:\n\n```ruby(spec/entry_spec.rb)\n+require_relative '../models/entry'\n+\n+RSpec.describe Entry do\n+\n+end\n```\n\nAll we have here is the skeleton of our test file. It uses `require_relative` to load our entry model for testing. The [require_relative](https://ruby-doc.org/core-2.3.1/Kernel.html#method-i-require_relative) method loads files using a relative path: a path that's relative to the file that contains the `require_relative` statement. We'll use `require_relative` whenever we need to load our own project files. Later on in the project, we'll use the [require](https://ruby-doc.org/core-2.3.1/Kernel.html#method-i-require) method to load external dependencies.\n\nWe'll use [RSpec](http://rspec.info/) to test our code. We can run the spec by using `rspec` with the following command:\n\n```bash(Terminal)\n$ rspec spec/entry_spec.rb\nentry_spec.rb:3:in `<top (required)>': uninitialized constant Entry (NameError)\n...\n```\n\nOur output shows a `NameError` which indicates that our spec failed when we executed it. This is because we reference `Entry` in the spec, but `Entry` is not defined anywhere in Address Bloc. Let's define `Entry` in `models/entry.rb` by creating a _stub_ of the class. A [stub](https://en.wikipedia.org/wiki/Method_stub) in programming terminology is an empty class, or method. A stub is sort of like a pencil sketch for a painting: we create a sketch of what we're going to paint first and then fill in the rest with actual paint later.\n\n```ruby(models/entry.rb)\n+class Entry\n+\n+end\n```\n\nLet's execute our spec again:\n\n```bash(Terminal)\n$ rspec spec/entry_spec.rb\nNo examples found.\n\nFinished in 0.00015 seconds (files took 0.1186 seconds to load)\n0 examples, 0 failures\n```\n\nRSpec tells us that there are no examples found. This is because we haven't added a test to `entry_spec.rb`. The term `example` in this context is synonymous with test.\n\nLet's create our first set of tests for `Entry`. `Entry` will need attributes, including `name`, `phone_number`, and `email`. Our first specs will test that `Entry` responds to these attributes. Open `entry_spec.rb` and add the following:\n\n```ruby(spec/entry_spec.rb)\nrequire_relative '../models/entry'\n # #1\n RSpec.describe Entry do\n   # #2\n+  describe \"attributes\" do\n     # #3\n+    it \"responds to name\" do\n+      entry = Entry.new\n       # #4\n+      expect(entry).to respond_to(:name)\n+    end\n\n+    it \"responds to phone number\" do\n+      entry = Entry.new\n+      expect(entry).to respond_to(:phone_number)\n+    end\n+\n+    it \"responds to email\" do\n+      entry = Entry.new\n+      expect(entry).to respond_to(:email)\n+    end\n+  end\n end\n```\n\n__#1__ is the standard first line of an RSpec test file. We are saying that the file is a spec file and that it tests `Entry`.\n\nAt __#2__, we use `describe` to give our test structure. In this case, we're using it to communicate that the specs test the `Entry` attributes.\n\nAt __#3__, we separate our individual tests using the `it` method. Each `it` represents a unique test.\n\nAt __#4__ each RSpec test ends with one or more `expect` method, which we use to declare the expectations for the test. If those expectations are met, our test passes, if they are not, it fails.\n\n> Under the hood, `expect(entry).to respond_to(:name)` will check whether `entry.name` is valid code. One could have tried to run `entry.name` directly, but RSpec provides us with a set of methods, such as `expect` , `to` and `respond_to`, to better express our intents. It is known as a [domain-specific language](https://en.wikipedia.org/wiki/Domain-specific_language) (DSL). A DSL is a specialized language in which a class of problems (here, testing) is expressed succinctly: the method names match the vocabulary of the problem domain and the resulting code is highly descriptive.\n\nRun the entry specs from the command line using the `rspec` command, the spec we want to run, and the file we're testing:\n\n```bash(Terminal)\n$ rspec spec/entry_spec.rb\n```\n\nYou should see three failing tests, each with output similar to the following:\n\n```bash(Terminal)\n  1) Entry attributes should respond to name\n     Failure/Error: expect(entry).to respond_to(:name)\n       expected #<Entry:0x007fcb0340c790> to respond to :name\n```\n\nFailing tests are what we expect to see since we haven't added those attributes to `Entry`. We're currently in the \"red\" phase of the TDD [Red-Green-Refactor cycle](http://www.jamesshore.com/Blog/Red-Green-Refactor.html). Now it's time to turn our tests green. We expect an `Entry` instance to have a few methods for accessing a name, a phone number and an email. Let's leverage `attr_accessor` to handle those attributes:\n\n```ruby(models/entry.rb)\nclass Entry\n-\n+  # These must be accessors since we mutate them\n+  attr_accessor :name, :phone_number, :email\n end\n```\n\nRun your tests again and watch them pass!\n\n```bash(Terminal)\n$ rspec spec/entry_spec.rb\n...\n\nFinished in 0.00122 seconds (files took 0.1039 seconds to load)\n3 examples, 0 failures\n$\n```\n\nWatch the following video to see the above steps in practice:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/9zvar8xnqc\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n### `Entry` Initializer\n\nAn entry without initialized attributes isn't useful. Modify the tests so they assume entries will always be created with values for the `name`, `phone_number`, and `email` attributes:\n\n```ruby(spec/entry_spec.rb)\n RSpec.describe Entry do\n   describe \"attributes\" do\n     it \"responds to name\" do\n-      entry = Entry.new\n+      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry).to respond_to(:name)\n     end\n\n     it \"responds to phone number\" do\n-      entry = Entry.new\n+      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry).to respond_to(:phone_number)\n     end\n\n     it \"responds to email\" do\n-      entry = Entry.new\n+      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry).to respond_to(:email)\n     end\n   end\nend\n```\n\nRunning the tests again will result in failures because we haven't defined an `initialize` method that takes three arguments:\n\n```bash(Terminal)\nrspec spec/entry_spec.rb\nFFF\n\nFailures:\n\n  1) Entry attributes should respond to name\n     Failure/Error: entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n     ArgumentError:\n     ...\n```\n\nAdd the `initialize` method to `Entry`:\n\n```ruby(models/entry.rb)\n class Entry\n   # These must be accessors since we mutate them\n   attr_accessor :name, :phone_number, :email\n+\n+  def initialize(name, phone_number, email)\n+  end\n+\n end\n```\nRun the tests again to confirm that they pass. We wrote only the *minimal* implementation required for the tests to pass. Although the code doesn't do anything with the arguments, we are able to call `Entry.new` with three parameters.\n\n### Testing the attributes\n\nThe core idea is to be able to read an attribute's value. Let's add three tests:\n\n```ruby(spec/entry_spec.rb)\n require_relative '../models/entry'\n\n RSpec.describe Entry do\n  describe \"attributes\" do\n    it \"responds to name\" do\n      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry).to respond_to(:name)\n     end\n\n+    it \"reports its name\" do\n+      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n+      expect(entry.name).to eq('Ada Lovelace')\n+    end\n+\n     it \"responds to phone number\" do\n       entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry).to respond_to(:phone_number)\n     end\n\n+    it \"reports its phone_number\" do\n+      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n+      expect(entry.phone_number).to eq('010.012.1815')\n+    end\n+\n     it \"responds to email\" do\n       entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry).to respond_to(:email)\n     end\n+\n+    it \"reports its email\" do\n+      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n+      expect(entry.email).to eq('augusta.king@lovelace.com')\n+    end\n   end\n end\n```\n\nRunning the tests again will report three failures because we never set the attributes. Let's add the required code to make them pass:\n\n```ruby(models/entry.rb)\n class Entry\n    # These must be accessors since we mutate them\n    attr_accessor :name, :phone_number, :email\n\n    def initialize(name, phone_number, email)\n+     @name = name\n+     @phone_number = phone_number\n+     @email = email\n    end\n\n end\n```\n\nMake sure to run the tests and check they all pass.\n\nAfter we go from red to green, it's beneficial to ask whether there's some refactoring we can do. This time, the `Entry` class looks clean and consistent with the tests, so there's no need for any refactoring.\n\nThe tests now showcase serious duplication though, as we are repeating the same `Entry.new(…)` instruction. Fortunately, RSpec allows us to keep our tests DRY (Don't Repeat Yourself) by defining efficient helper methods using `let`. Instead of creating an `entry` local variable within each test, let's define an `entry` method once:\n\n```ruby(spec/entry_spec.rb)\n require_relative '../models/entry'\n\n RSpec.describe Entry do\n   describe \"attributes\" do\n+    let(:entry) { Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com') }\n+\n     it \"responds to name\" do\n-      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry).to respond_to(:name)\n     end\n\n     it \"reports its name\" do\n-      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry.name).to eq('Ada Lovelace')\n     end\n\n     it \"responds to phone number\" do\n-      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry).to respond_to(:phone_number)\n     end\n\n     it \"reports its phone_number\" do\n-      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry.phone_number).to eq('010.012.1815')\n     end\n\n     it \"responds to email\" do\n-      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry).to respond_to(:email)\n     end\n\n     it \"reports its email\" do\n-      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry.email).to eq('augusta.king@lovelace.com')\n     end\n   end\n end\n```\n\nThe term \"refactoring\" only applies to code, but enhancing tests like that is a good habit to make. Run them all again to ensure they still pass.\n\n### The `to_s` Method\n\nTo build the menu we'll need a method to return a string representation of an `Entry`, to be displayed in the terminal. It's standard convention to name such a method `to_s`, short for \"(convert) to string\". Create a test for `to_s`:\n\n```ruby(spec/entry_spec.rb)\n require_relative '../models/entry'\n\n RSpec.describe Entry do\n  describe \"attributes\" do\n    let(:entry) { Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com') }\n\n    it \"responds to name\" do\n      expect(entry).to respond_to(:name)\n    end\n\n    it \"reports its name\" do\n      expect(entry.name).to eq('Ada Lovelace')\n    end\n\n    it \"responds to phone number\" do\n      expect(entry).to respond_to(:phone_number)\n    end\n\n    it \"reports its phone_number\" do\n      expect(entry.phone_number).to eq('010.012.1815')\n    end\n\n    it \"responds to email\" do\n      expect(entry).to respond_to(:email)\n    end\n\n    it \"reports its email\" do\n       expect(entry.email).to eq('augusta.king@lovelace.com')\n     end\n   end\n+\n   # #5\n+  describe \"#to_s\" do\n+    it \"prints an entry as a string\" do\n+      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n+      expected_string = \"Name: Ada Lovelace\\nPhone Number: 010.012.1815\\nEmail: augusta.king@lovelace.com\"\n   # #6\n+      expect(entry.to_s).to eq(expected_string)\n+    end\n+  end\n end\n```\n\nAt __#5__, we use a new describe block to separate the `to_s` test from the initializer tests. The `#` in front of `to_s` indicates that it is an instance method.\n\nAt __#6__, we use `eq` to check that `to_s` returns a string equal to `expected_string`.\n\nRun the tests and we'll see that three still pass, but our new test fails because we haven't defined `to_s`. Let's do that now:\n\n```ruby(models/entry.rb)\n class Entry\n   # These must be accessors since we mutate them\n   attr_accessor :name, :phone_number, :email\n\n   def initialize(name, phone_number, email)\n     @name = name\n     @phone_number = phone_number\n     @email = email\n   end\n\n   # #7\n+  def to_s\n+    \"Name: \#{name}\\nPhone Number: \#{phone_number}\\nEmail: \#{email}\"\n+  end\n end\n```\n\nAt __#7__, we create the string we want. The `\\n` character is the `newline` character. It prints a [newline](https://en.wikipedia.org/wiki/Newline) to the console.\n\nRun the tests again to confirm that they pass.\n\n## The `AddressBook` Model\n\nWe need an address book model to store entries. Create the address book model and specs:\n\n```bash(Terminal)\n$ touch models/address_book.rb\n$ touch spec/address_book_spec.rb\n```\n\nCreate the skeleton of `AddressBook`:\n\n```ruby(models/address_book.rb)\n+class AddressBook\n+\n+end\n```\n\n### `AddressBook` Attributes\n\n`AddressBook` needs an attribute to hold the array of entries. The `entries` array will store entries. It also provides an easy way to add, remove, and count entries.\n\nCreate a test to confirm that `AddressBook` responds to `entries`:\n\n```ruby(spec/address_book_spec.rb)\n+require_relative '../models/address_book'\n+\n+RSpec.describe AddressBook do\n+  describe \"attributes\" do\n+    it \"responds to entries\" do\n+      book = AddressBook.new\n+      expect(book).to respond_to(:entries)\n+    end\n+  end\n+\n+end\n```\n\nRun the specs and we'll see the expected failure:\n\n```bash(Terminal)\n$ rspec spec/address_book_spec.rb\n```\n\nMake this spec pass by adding a read-only `entries` attribute to `AddressBook`:\n\n```ruby(models/address_book.rb)\n class AddressBook\n+  attr_reader :entries\n\n end\n```\n\nRun the specs again and see that they pass.\n\n`AddressBook` should initialize `entries` as an empty array so that it's ready to be used. Add a couple new tests to confirm this behavior:\n\n```ruby(spec/address_book_spec.rb\n require_relative '../models/address_book'\n\n RSpec.describe AddressBook do\n   describe \"attributes\" do\n     it \"responds to entries\" do\n       book = AddressBook.new\n       expect(book).to respond_to(:entries)\n     end\n+\n+    it \"initializes entries as an array\" do\n+      book = AddressBook.new\n+      expect(book.entries).to be_an(Array)\n+    end\n+\n+    it \"initializes entries as empty\" do\n+      book = AddressBook.new\n+      expect(book.entries.size).to eq(0)\n+    end\n   end\n\n end\n```\n\nRunning the specs will confirm that our two new tests fail. Let's make them pass:\n\n```ruby(models/address_book.rb)\n class AddressBook\n   attr_reader :entries\n\n+  def initialize\n+    @entries = []\n+  end\n end\n```\n\nHaving an array of entries is only useful if we can add items to that array. We need a method, `add_entry`, to update our `entries` array. Let's add some tests to define the expected behavior:\n\n```ruby(spec/address_book_spec.rb)\n require_relative '../models/address_book'\n\n RSpec.describe AddressBook do\n   describe \"attributes\" do\n     it \"responds to entries\" do\n       book = AddressBook.new\n       expect(book).to respond_to(:entries)\n     end\n\n     it \"initializes entries as an array\" do\n       book = AddressBook.new\n       expect(book.entries).to be_an(Array)\n     end\n\n     it \"initializes entries as empty\" do\n       book = AddressBook.new\n       expect(book.entries.size).to eq(0)\n      end\n    end\n\n-end\n+  describe \"#add_entry\" do\n+    it \"adds only one entry to the address book\" do\n+      book = AddressBook.new\n+      book.add_entry('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n+\n+      expect(book.entries.size).to eq(1)\n+    end\n+\n+    it \"adds the correct information to entries\" do\n+      book = AddressBook.new\n+      book.add_entry('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n+      new_entry = book.entries[0]\n+\n+      expect(new_entry.name).to eq('Ada Lovelace')\n+      expect(new_entry.phone_number).to eq('010.012.1815')\n+      expect(new_entry.email).to eq('augusta.king@lovelace.com')\n+    end\n+  end\n+end\n```\n\nWe've wrapped these tests in a separate describe to keep our specs organized. We've also included multiple expects in the second test, if any of them fail, then the entire `it` test will fail.\n\nRun the specs again to confirm that the new tests fail. Now let's turn them green by creating `add_entry`. To keep `entries` nicely ordered we'll code `add_entry` to insert entries in [lexicographical order](http://en.wikipedia.org/wiki/Lexicographical_order).\n\n```ruby(models/address_book.rb)\n # #8\n+require_relative 'entry'\n+\n   class AddressBook\n     attr_reader :entries\n\n     def initialize\n       @entries = []\n     end\n -end\n+\n+  def add_entry(name, phone_number, email)\n     # #9\n+    index = 0\n+    entries.each do |entry|\n     # #10\n+      if name < entry.name\n+        break\n+      end\n+      index+= 1\n+    end\n     # #11\n+    entries.insert(index, Entry.new(name, phone_number, email))\n+  end\n+end\n```\n\nAt __#8__, we tell Ruby to load the library named `entry.rb` relative to `address_book.rb`'s file path using [`require_relative`](http://ruby-doc.org/core-2.1.2/Kernel.html#method-i-require_relative).\nAt __#9__, we create a variable to store the insertion `index`.\nAt __#10__, we compare `name` with the name of the current `entry`. If `name` lexicographically proceeds `entry.name`, we've found the `index` to insert at. Otherwise we increment `index` and continue comparing with the other entries.\nAt __#11__, we insert a new entry into `entries` using the calculated `index.\n\nRun the specs a final time and confirm that they pass.\n\n## Conclusion\n\nNice work! We've now created both models AddressBloc will need using TDD. TDD allowed us to keep our code focused and ensured complete test coverage. With our `Entry` and `AddressBook` models, we're ready to start creating a menu for users to use.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| Model | Models provide an interface for getting and setting data. |\n| [RSpec](http://rspec.info/) | RSpec is a [behavior-driven development (BDD)](http://en.wikipedia.org/wiki/Behavior-driven_development) framework for the Ruby programming language. |\n| [Test-Driven Development](http://en.wikipedia.org/wiki/Test-driven_development) | Test-Driven development (TDD) is a software development process that relies on the repetition of a very short development cycle. First we write a failing test case. Then we produce the minimum amount of code to pass the test. Finally, we refactor the new code. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nIn addition to adding entries to `AddressBook`, let's create a method, `remove_entry(name, phone_number, email)`, to remove entries.\n\n* Write your tests first. The tests should confirm that a single entry is removed when `remove_entry(name, phone_number, email)` is called. You can use `entries.size` to determine if an item was successfully removed.\n\n* Iterate over `entries` until you find the match. Use the index of the match to remove the entry from `entries`. Use the following method definition for `remove_entry`:\n\n```ruby(models/address_book.rb)\n...\n\n  def remove_entry(name, phone_number, email)\n    # Implementation goes here\n  end\n\n...\n```\n\n* Confirm that all your tests pass.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/n4fad0on89?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Address Bloc Models Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>5, "checkpoint_type"=>"normal", "position"=>5, "points"=>1, "ref"=>"443c4170-35a5-4833-bf8b-91f70af22286|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2101", "assessment"=>nil}, {"id"=>2102, "name"=>"Address Bloc: Menu", "summary"=>"Menu: a command-line menu that allows users to manipulate data", "body"=>"<!-- { ids:[1627, 2102], name:'Address Bloc: Menu', summary:'Menu: a command-line menu that allows users to manipulate data' } -->\n\n> “I don't want to hear the specials. If they're so special, put 'em on the menu.”\n>\n> — Jerry Seinfeld\n\n## Overview and Purpose\n\nThis checkpoint teaches you how to programmatically fetch input from the user.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Use the Ruby `case` statement.\n- Discuss standard input.\n- Handle user input in a Ruby program.\n\n## Introduction\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/n8dqh64ffd\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWith models to store and retrieve data, we have the foundation we need to make Address Bloc an _interactive_ experience. We will give users a command-line menu that allows them to view entries, create entries, search for a specific entry, import entries from a file, and exit the program. To do this, we'll create a `MenuController` to process user selections, update the models, and present information to the user.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Create MenuController\n\nCreate a directory to store `MenuController`:\n\n```bash(Terminal)\n$ cd address-bloc\n$ mkdir controllers\n$ touch controllers/menu_controller.rb\n```\n\n`MenuController` will need to connect to `AddressBook`. It will also need methods to display the main menu and process user input:\n\n```ruby(controllers/menu_controller.rb)\n # #1\n+require_relative '../models/address_book'\n+\n+class MenuController\n+  attr_reader :address_book\n+\n+  def initialize\n+    @address_book = AddressBook.new\n+  end\n+\n+  def main_menu\n     # #2\n+    puts \"Main Menu - \#{address_book.entries.count} entries\"\n+    puts \"1 - View all entries\"\n+    puts \"2 - Create an entry\"\n+    puts \"3 - Search for an entry\"\n+    puts \"4 - Import entries from a CSV\"\n+    puts \"5 - Exit\"\n+    print \"Enter your selection: \"\n+\n     # #3\n+    selection = gets.to_i\n+    puts \"You picked \#{selection}\"\n+  end\n+end\n```\n\nAt __#1__, include `AddressBook` using `require_relative`.\nAt __#2__, display the main menu options to the command line.\nAt __#3__, retrieve user input from the command line using `gets`. `gets` reads the next line from [standard input](http://en.wikipedia.org/wiki/Standard_streams#Standard_input_.28stdin.29).\n\nLet's watch a video that explains the difference between `puts` and `gets`:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/j2lrcy9oid\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nUse `MenuController` in the driver program we created:\n\n```ruby(address_bloc.rb)\n+require_relative 'controllers/menu_controller'\n+\n # #4\n+menu = MenuController.new\n # #5\n+system \"clear\"\n puts \"Welcome to AddressBloc!\"\n # #6\n+menu.main_menu\n```\n\nAt __#4__, create a new `MenuController` when `AddressBloc` starts.\nAt __#5__, use `system \"clear\"` to clear the command line.\nAt __#6__, call `main_menu` to display the menu.\n\nGive `AddressBloc` a quick test run:\n\n```bash(Terminal)\n$ ruby address_bloc.rb\nWelcome to AddressBloc!\nMain Menu - 0 entries\n1 - View all entries\n2 - Create an entry\n3 - Search for an entry\n4 - Import entries from a CSV\n5 - Exit\nEnter your selection:\n```\n\n## Handling User Input\n\n`MenuController` asks for user input, and then exits. Update `main_menu` to process user input and stub out the methods we'll need:\n\n```ruby(controllers/menu_controller.rb)\n require_relative '../models/address_book'\n\n class MenuController\n   attr_reader :address_book\n\n   def initialize\n     @address_book = AddressBook.new\n   end\n\n   def main_menu\n     puts \"Main Menu - \#{address_book.entries.count} entries\"\n     puts \"1 - View all entries\"\n     puts \"2 - Create an entry\"\n     puts \"3 - Search for an entry\"\n     puts \"4 - Import entries from a CSV\"\n     puts \"5 - Exit\"\n     print \"Enter your selection: \"\n\n     selection = gets.to_i\n-    puts \"You picked \#{selection}\"\n+\n     # #7\n+    case selection\n+      when 1\n+        system \"clear\"\n+        view_all_entries\n+        main_menu\n+      when 2\n+        system \"clear\"\n+        create_entry\n+        main_menu\n+      when 3\n+        system \"clear\"\n+        search_entries\n+        main_menu\n+      when 4\n+        system \"clear\"\n+        read_csv\n+        main_menu\n+      when 5\n+        puts \"Good-bye!\"\n         # #8\n+        exit(0)\n       # #9\n+      else\n+        system \"clear\"\n+        puts \"Sorry, that is not a valid input\"\n+        main_menu\n+    end\n+  end\n+\n   # #10\n+  def view_all_entries\n+  end\n+\n+  def create_entry\n+  end\n+\n+  def search_entries\n+  end\n+\n+  def read_csv\n end\n```\n\nAt __#7__, use a [`case` statement operator](http://ruby-doc.com/docs/ProgrammingRuby/html/tut_expressions.html#S5) to determine the proper response to the user's input.\nAt __#8__, terminate the program using `exit(0)`. `0` signals the program is exiting without an error.\nAt __#9__, use an `else` to catch invalid user input and prompt the user to retry.\nAt __#10__, stub the rest of the methods called in `main_menu`.\n\nRun `AddressBloc` again. Confirm that you can make selections and that the program will continue to run until you tell it to exit.\n\n## Create an Entry\n\nAn address book is only useful if we can create new entries. Let's give our users a way to add entries to `AddressBloc`:\n\n```ruby(controllers/menu_controller.rb)\n ...\n   def create_entry\n     # #11\n+    system \"clear\"\n+    puts \"New AddressBloc Entry\"\n     # #12\n+    print \"Name: \"\n+    name = gets.chomp\n+    print \"Phone number: \"\n+    phone = gets.chomp\n+    print \"Email: \"\n+    email = gets.chomp\n+\n     # #13\n+    address_book.add_entry(name, phone, email)\n+\n+    system \"clear\"\n+    puts \"New entry created\"\n   end\n ...\n```\n\nAt __#11__, clear the screen for before displaying the create entry prompts.\nAt __#12__, use `print` to prompt the user for each `Entry` attribute. `print` works just like `puts`, except that it doesn't add a newline.\nAt __#13__, add a new entry to `address_book` using `add_entry` to ensure that the new entry is added in the proper order.\n\n## View Entries\n\nNow that we can add entries, we want to be able to view them as well:\n\n```ruby(controllers/menu_controller.rb)\n ...\n   def view_all_entries\n     # #14\n+    address_book.entries.each do |entry|\n+      system \"clear\"\n+      puts entry.to_s\n     # #15\n+      entry_submenu(entry)\n+    end\n+\n+    system \"clear\"\n+    puts \"End of entries\"\n   end\n```\n\nAt __#14__, iterate through all entries in `AddressBook` using `each`.\nAt __#15__, we call `entry_submenu` to display a submenu for each entry. Let's add this method at the bottom of `MenuController`.\n\n```ruby(controllers/menu_controller.rb)\n+\n+  def entry_submenu(entry)\n     # #16\n+    puts \"n - next entry\"\n+    puts \"d - delete entry\"\n+    puts \"e - edit this entry\"\n+    puts \"m - return to main menu\"\n+\n     # #17\n+    selection = gets.chomp\n+\n+    case selection\n+    # #18\n+      when \"n\"\n     # #19\n+      when \"d\"\n+      when \"e\"\n     # #20\n+      when \"m\"\n+        system \"clear\"\n+        main_menu\n+      else\n+        system \"clear\"\n+        puts \"\#{selection} is not a valid input\"\n+        entry_submenu(entry)\n+    end\n+  end\n end\n```\n\n__#16__, display the submenu options.\n__#17__, `chomp` removes any trailing whitespace from the string `gets` returns. This is necessary because `\"m \"` or `\"m\\n\"` won't match `\"m\"`.\n__#18__, when the user asks to see the next entry, we can do nothing and control will be returned to `view_all_entries`.\nAt __#19__, we'll handle deleting and editing in another checkpoint, for now the user will be shown the next entry.\nAt __#20__, we return the user to the main menu.\n\nRun `AddressBloc` and test adding and viewing users.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| Controller | [Controllers](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller#Components) process user input, update the model, and presents model information. |\n| [Standard input](http://en.wikipedia.org/wiki/Standard_streams#Standard_input_.28stdin.29) | Standard input is data going into a program. By default standard input is expected from the same keyboard which started the program. |\n| [`case` statement operator](http://ruby-doc.org/docs/keywords/1.9/Object.html#method-i-case) | Ruby's `case` statement operator is used to manage more complicated control flow. It can be used as a cleaner alternative to multiple `if` statements. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nModify `main_menu` to give users the ability to view a specific entry by number:\n\n* Add a new option to the main menu: \"View Entry Number n\".\n\n* Once the user selects the new option, ask for the entry number and display that entry to the user.\n\n* Handle invalid input by prompting the user to enter a valid entry number.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/b26jrdybz9?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Media Queries Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>6, "checkpoint_type"=>"normal", "position"=>6, "points"=>1, "ref"=>"d2ee6ee1-ed52-4ffa-9377-1ca11ce51a35|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2102", "assessment"=>nil}, {"id"=>2103, "name"=>"Address Bloc: Reading CSVs", "summary"=>"Reading CSVs: importing data from CSV files", "body"=>"<!-- { ids:[1628, 2103], name:'Address Bloc: Reading CSVs', summary:'Reading CSVs: importing data from CSV files' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Comma Separated Values (CSV) Standard File](http://edoceo.com/utilitas/csv-file-format)\n* [stdlib gist](https://gist.github.com/gadtfly/afbcbde2a7607d7acc9b)\n</mentor-checkpoint-note>\n\n<center>\n![To write it, it took three months; to conceive it three minutes; to collect the data in it all my life. - F. Scott Fitzgerald](https://bloc-global-assets.s3.amazonaws.com/images-rails/24-arguments-and-csv/24-banner.jpg)\n</center>\n\n## Overview and Purpose\n\nThis checkpoint teaches you how to import values from a file.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Explain what a CSV is.\n- Read input from a file on disk\n\n## Introduction\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/5j4oi4p1ox\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Populating Address Bloc with Data\n\nOpen the command line and navigate to the Address Bloc project:\n\n```bash(~)\n$ cd ~/address-bloc\n```\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint for details](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint).\n\n## Test\n\nWe'll use test-driven development to write the part of Address Bloc that will pull in data. First we'll write a test for `import_from_csv`.\n\nUltimately, we want the method to create entries in our `AddressBook` class. Let's assume that `AddressBook` will have five initial entries:\n\n```ruby(spec/address_book_spec.rb)\n require_relative '../models/address_book'\n\n RSpec.describe AddressBook do\n   # #1\n+  let(:book) { AddressBook.new }\n+\n   # #2\n   describe \"attributes\" do\n     it \"responds to entries\" do\n-      book = AddressBook.new\n       expect(book).to respond_to(:entries)\n     end\n\n     it \"initializes entries as an array\" do\n-      book = AddressBook.new\n       expect(book.entries).to be_an(Array)\n     end\n\n     it \"initializes entries as empty\" do\n-      book = AddressBook.new\n       expect(book.entries.size).to eq(0)\n     end\n   end\n\n   describe \"#add_entry\" do\n     it \"adds only one entry to the address book\" do\n-      book = AddressBook.new\n       book.add_entry('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n\n       expect(book.entries.size).to eq(1)\n     end\n\n     it \"adds the correct information to entries\" do\n-      book = AddressBook.new\n       book.add_entry('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       new_entry = book.entries[0]\n\n      expect(new_entry.name).to eq('Ada Lovelace')\n      expect(new_entry.phone_number).to eq('010.012.1815')\n       expect(new_entry.email).to eq('augusta.king@lovelace.com')\n     end\n   end\n+\n+  # Test that AddressBook's .import_from_csv() method is working as expected\n+  describe \"#import_from_csv\" do\n+    it \"imports the correct number of entries\" do\n       # #3\n+      book.import_from_csv(\"entries.csv\")\n+      book_size = book.entries.size\n+\n+      # Check the size of the entries in AddressBook\n+      expect(book_size).to eq 5\n+    end\n+\n+  end\n end\n```\n\nAt **#1**, we create new instance of the AddressBook model and assign it to the variable named `book` using the `let` syntax provided by RSpec. This lets us use `book` in all our tests, removing the duplication of having to instantiate a new `AddressBook` for each test.\n\nAt **#2**, we see `describe` and `it` statements which are an RSpec paradigm to explain what we are testing. `it` explains the functionality of the method we're testing in a human readable form. RSpec will take the content from `describe` and `it` and output them nicely to the command line when we execute the test. [Read more about the differences between them](http://betterspecs.org/).\n\nAt **#3**, after the `describe` and `it` statements, we call the `import_from_csv` method on the `book` object which is of type `AddressBook` (our data model). We pass `import_from_csv` the string `entries.csv` as a parameter. `CSV` files are a fairly typical way of dealing with data and you can read more about them [`here`](http://en.wikipedia.org/wiki/Comma-separated_values). On the next line we reference the `AddressBook.entries` variable to get its size. This variable will be an [array](http://en.wikipedia.org/wiki/Array). Next, we save the size of the `AddressBook.entries` to our local variable `book_size`.\n\nWatch the following video to see us walk through the refactoring steps above:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/6bclroewv8\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nRun the spec. We should see it fail:\n\n```\n$ rspec spec/address_book_spec.rb\n.....F\n\nFailures:\n\n  1) AddressBook#import_from_csv imports the correct number of entries\n     Failure/Error: book.import_from_csv(\"entries.csv\")\n\n     NoMethodError:\n       undefined method `import_from_csv' for #<AddressBook:0x007ff393940618 @entries=[]>\n     # ./spec/address_book_spec.rb:40:in `block (3 levels) in <top (required)>'\n\nFinished in 0.00545 seconds (files took 0.16404 seconds to load)\n6 examples, 1 failure\n\nFailed examples:\n\nrspec ./spec/address_book_spec.rb:39 # AddressBook#import_from_csv imports the correct number of entries\n```\n\nLet's stub `import_from_csv` to get rid of the `NoMethodError`.\n\n## Stub\n\nOpen `AddressBook` and add the following:\n\n```ruby(models/address_book.rb)\n require_relative 'entry'\n+require \"csv\"\n\n class AddressBook\n   attr_reader :entries\n\n  def initialize\n    @entries = []\n  end\n\n  def add_entry(name, phone_number, email)\n    index = 0\n    entries.each do |entry|\n      if name < entry.name\n        break\n      end\n      index += 1\n     end\n     entries.insert(index, Entry.new(name, phone_number, email))\n   end\n+\n+  def import_from_csv(file_name)\n+    # Implementation goes here\n+  end\n end\n```\n\nChange the working directory back to the project root if you're not already in it:\n\n```bash(Terminal)\n$ cd ~/address-bloc\n```\n\nRun the spec we just created:\n\n```bash(Terminal)\n$ rspec spec/address_book_spec.rb\n.....F\n\nFailures:\n\n  1) AddressBook#import_from_csv imports the correct number of entries\n     Failure/Error: expect(book_size).to eq 5\n\n       expected: 5\n            got: 0\n\n       (compared using ==)\n     # ./spec/address_book_spec.rb:44:in `block (3 levels) in <top (required)>'\n\nFinished in 0.02073 seconds (files took 0.11983 seconds to load)\n6 examples, 1 failure\n\nFailed examples:\n\nrspec ./spec/address_book_spec.rb:39 # AddressBook#import_from_csv imports the correct number of entries\n```\n\nWe see that the spec fails. This is logical since `import_from_csv` is stubbed out but has no implementation. Let's add another test:\n\n```ruby(spec/address_book_spec.rb)\n ...\n     # #4\n+    it \"imports the 1st entry\" do\n+      book.import_from_csv(\"entries.csv\")\n+      # Check the first entry\n+      entry_one = book.entries[0]\n+\n       # #5\n+      expect(entry_one.name).to eq \"Bill\"\n+      expect(entry_one.phone_number).to eq \"555-555-4854\"\n+      expect(entry_one.email).to eq \"bill@blocmail.com\"\n+    end\n   end\n+\n end\n```\n\nAt **#4**, we access the first entry in the array of entries that our `AddressBook` stores.\n\n> Remember, arrays in Ruby use zero based numbering. The first element is located at index zero, the second element at index one, and so on.\n![Arrays](https://bloc-global-assets.s3.amazonaws.com/images-rails/24-arguments-and-csv/Arrays.png)\n\nAt **#5**, we've added three `expect`s to verify that the first entry has the name \"Bill\", the phone number \"555-555-4854\", and the email address \"bill@blocmail.com\". If we run this test, it will still fail. Using the same pattern above, we can add four similar tests:\n\n```ruby(spec/address_book_spec.rb)\n ...\n+    it \"imports the 2nd entry\" do\n+      book.import_from_csv(\"entries.csv\")\n+      # Check the second entry\n+      entry_two = book.entries[1]\n+      expect(entry_two.name).to eq \"Bob\"\n+      expect(entry_two.phone_number).to eq \"555-555-5415\"\n+      expect(entry_two.email).to eq \"bob@blocmail.com\"\n+    end\n+\n+    it \"imports the 3rd entry\" do\n+      book.import_from_csv(\"entries.csv\")\n+      # Check the third entry\n+      entry_three = book.entries[2]\n+      expect(entry_three.name).to eq \"Joe\"\n+      expect(entry_three.phone_number).to eq \"555-555-3660\"\n+      expect(entry_three.email).to eq \"joe@blocmail.com\"\n+    end\n+\n+    it \"imports the 4th entry\" do\n+      book.import_from_csv(\"entries.csv\")\n+      # Check the fourth entry\n+      entry_four = book.entries[3]\n+      expect(entry_four.name).to eq  \"Sally\"\n+      expect(entry_four.phone_number).to eq \"555-555-4646\"\n+      expect(entry_four.email).to eq \"sally@blocmail.com\"\n+    end\n+\n+    it \"imports the 5th entry\" do\n+      book.import_from_csv(\"entries.csv\")\n+      # Check the fifth entry\n+      entry_five = book.entries[4]\n+      expect(entry_five.name).to eq \"Sussie\"\n+      expect(entry_five.phone_number).to eq \"555-555-2036\"\n+      expect(entry_five.email).to eq \"sussie@blocmail.com\"\n+    end\n+  end\n end\n```\n\nWe've added tests to test for four more entries. Our test now expects our data to have five total entries with varying names, numbers, and email addresses.\n\nOur tests have a large amount of [redundancy](http://en.wikipedia.org/wiki/Redundancy_%28engineering%29) (code duplication). Let's use a helper method to check each entry and reduce the clutter:\n\n```ruby(spec/address_book_spec.rb)\nRSpec.describe AddressBook do\n   let(:book) { AddressBook.new }\n\n   # #6\n+  def check_entry(entry, expected_name, expected_number, expected_email)\n+    expect(entry.name).to eq expected_name\n+    expect(entry.phone_number).to eq expected_number\n+    expect(entry.email).to eq expected_email\n+  end\n+\n   describe \"attributes\" do\n     it \"responds to entries\" do\n       expect(book).to respond_to(:entries)\n       book.import_from_csv(\"entries.csv\")\n       # Check the first entry\n       entry_one = book.entries[0]\n-\n-      expect(entry_one.name).to eq \"Bill\"\n-      expect(entry_one.phone_number).to eq \"555-555-4854\"\n-      expect(entry_one.email).to eq \"bill@blocmail.com\"\n+      check_entry(entry_one, \"Bill\", \"555-555-4854\", \"bill@blocmail.com\")\n     end\n\n     it \"imports the 2nd entry\" do\n       book.import_from_csv(\"entries.csv\")\n       # Check the second entry\n       entry_two = book.entries[1]\n-      expect(entry_two.name).to eq \"Bob\"\n-      expect(entry_two.phone_number).to eq \"555-555-5415\"\n-      expect(entry_two.email).to eq \"bob@blocmail.com\"\n+      check_entry(entry_two, \"Bob\", \"555-555-5415\", \"bob@blocmail.com\")\n     end\n\n     it \"imports the 3rd entry\" do\n       book.import_from_csv(\"entries.csv\")\n       # Check the third entry\n       entry_three = book.entries[2]\n-      expect(entry_three.name).to eq \"Joe\"\n-      expect(entry_three.phone_number).to eq \"555-555-3660\"\n-      expect(entry_three.email).to eq \"joe@blocmail.com\"\n+      check_entry(entry_three, \"Joe\", \"555-555-3660\", \"joe@blocmail.com\")\n     end\n\n     it \"imports the 4th entry\" do\n       book.import_from_csv(\"entries.csv\")\n       # Check the fourth entry\n       entry_four = book.entries[3]\n-      expect(entry_four.name).to eq  \"Sally\"\n-      expect(entry_four.phone_number).to eq \"555-555-4646\"\n-      expect(entry_four.email).to eq \"sally@blocmail.com\"\n+      check_entry(entry_four, \"Sally\", \"555-555-4646\", \"sally@blocmail.com\")\n     end\n\n     it \"imports the 5th entry\" do\n       book.import_from_csv(\"entries.csv\")\n       # Check the fifth entry\n       entry_five = book.entries[4]\n-      expect(entry_five.name).to eq \"Sussie\"\n-      expect(entry_five.phone_number).to eq \"555-555-2036\"\n-      expect(entry_five.email).to eq \"sussie@blocmail.com\"\n+      check_entry(entry_five, \"Sussie\", \"555-555-2036\", \"sussie@blocmail.com\")\n     end\n   end\n end\n```\n\nAt **#6**, we create a helper method named `check_entry` which consolidates the redundant code. We can now pass in the particular name, number, and email address we want into this reusable helper method. We have our basic tests set up. The next step is to build the implementation of the `import_from_csv` method.\n\n## Implement\n\nLet's add the code to `AddressBook`:\n\n```ruby(models/address_book.rb)\n ...\n   # #7\n    def import_from_csv(file_name)\n      # Implementation goes here\n+    csv_text = File.read(file_name)\n+    csv = CSV.parse(csv_text, headers: true, skip_blanks: true)\n   # #8\n+    csv.each do |row|\n+      row_hash = row.to_hash\n+      add_entry(row_hash[\"name\"], row_hash[\"phone_number\"], row_hash[\"email\"])\n+    end\n   end\n end\n```\n\nLet's break down the code above.\n\nAt **#7**, we defined `import_from_csv`. The method starts by reading the file, using `File.read`. The file will be in a `CSV` format. We use the `CSV` class to [parse](https://en.wikipedia.org/wiki/Parsing) the file. The result of `CSV.parse` is an object of type `CSV::Table`.\n\nAt **#8**, we [iterate](http://en.wikipedia.org/wiki/Iteration) over the `CSV::Table` object's rows. On the next line we create a [hash](http://en.wikipedia.org/wiki/Hash) for each row. We convert each `row_hash` to an `Entry` by using the `add_entry` method which will also add the Entry to the AddressBook's entries.\n\n## Create a Data Source for Address Bloc\n\nAs we have already alluded to, we'll use a `CSV` file in our Address Bloc Ruby app. We have a functional test and a functional `import_from_csv` method. If you run the test we just created, it will fail since `entries.csv` does not exist and the code attempts to use this as its `CSV` file. Let's create the `entries.csv` file.\n\nPlace the `entries.csv` file in the same directory as the `address_bloc.rb` file. Open a text editor and enter the following into the file:\n\n```\nname,phone_number,email\nBill,555-555-4854,bill@blocmail.com\nBob,555-555-5415,bob@blocmail.com\nJoe,555-555-3660,joe@blocmail.com\nSally,555-555-4646,sally@blocmail.com\nSussie,555-555-2036,sussie@blocmail.com\n```\n\nRun the `address_book_spec.rb`:\n\n```bash(Terminal)\n$ rspec spec/address_book_spec.rb\n.\n\nFinished in 0.00514 seconds (files took 0.10853 seconds to load)\n11 examples, 0 failures\n```\n\nThe test passes so we know that the implementation is reading `entries.csv` and storing its values properly.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| TDD | We stubbed out `import_from_csv` to act as a placeholder. Then we defined the expected behavior of `import_from_csv` using tests. We built the tests first so that they could constrain the structure of `import_from_csv`. This forced us to build the method in a way that fulfilled our desired outcome. We call this practice [Test Driven Development](http://en.wikipedia.org/wiki/Test-driven_development). With our tests in place, we built the implementation of `import_from_csv` until the tests passed. |\n| Data Source | Lastly, we connected the actual data to our application by creating the `CSV` file and ran the test using the real data. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nWe may want to parse another `CSV` file at some point.\n\n* Add tests to `address_book_spec.rb` that will use data from a new `CSV` file named `entries_2.csv` (do not delete the existing tests in `address_book_spec.rb`).\n* Add a `CSV` file named `entries_2.csv` with three entries (do not delete `entries.csv`).\n* Ensure the new test passes with the new data.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/1uwuuxuff0?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Media Queries Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>7, "checkpoint_type"=>"normal", "position"=>7, "points"=>1, "ref"=>"bf48c699-d59c-47c4-a9d5-2694ffaf70fa|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2103", "assessment"=>nil}, {"id"=>2104, "name"=>"Address Bloc: Searching", "summary"=>"Searching: finding entries in AddresBloc", "body"=>"<!-- { ids:[1629, 2104], name:'Address Bloc: Searching', summary:'Searching: finding entries in AddresBloc' } -->\n\n![Larry Page](https://bloc-global-assets.s3.amazonaws.com/images-rails/25-search/25-banner.jpg)\n\n> “The ultimate search engine would basically understand everything in the world, and it would always give you the right thing. And we're a long, long ways from that.”\n>\n> — Larry Page, cofounder of Google Inc.\n\n## Overview and Purpose\n\nThis checkpoint uses TDD to import values from a file.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Explain the concept of stubbing.\n- Practice writing tests.\n\n## Introduction\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/mswxr58d5d\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWhat use is an address book if it's not searchable? Let's add the ability to search Address Bloc.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint for details](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint).\n\nWe'll use a technique called *binary search* to implement our search functionality. We'll learn more about binary search as this checkpoint continues.\n\n## Test\n\nLet's create some tests that will help define `binary_search`'s behavior. Since we are testing a method that is a part of `AddressBook`, our tests belong in `address_book_spec.rb`:\n\n```ruby(spec/address_book_spec.rb)\n ...\n+  # Test the binary_search method\n+  describe \"#binary_search\" do\n+    it \"searches AddressBook for a non-existent entry\" do\n+      book.import_from_csv(\"entries.csv\")\n+      entry = book.binary_search(\"Dan\")\n+      expect(entry).to be_nil\n+    end\n+  end\n end\n```\n\nRun the test and verify that it fails:\n\n```bash(Terminal)\n $ rspec spec/address_book_spec.rb\n ...........F\n\n Failures:\n\n   1) AddressBook#binary_search searches AddressBook for a non-existent entry\n      Failure/Error: entry = book.binary_search(\"Dan\")\n\n      NoMethodError:\n        undefined method `binary_search' for #<AddressBook:0xc756ab3>\n      # ./spec/address_book_spec.rb:94:in `(root)'\n```\n\nWe see an undefined method error since `binary_search` is undefined.\n\n## Stub\n\nLet's add the [stub](http://en.wikipedia.org/wiki/Method_stub) of `binary_search` to `AddressBook`. It will return `nil` for now:\n\n```ruby(models/address_book.rb)\n+  # Search AddressBook for a specific entry by name\n+  def binary_search(name)\n+  end\n end\n```\n\n## Test Again\n\nRun the test again. The test searches for `Entry` \"Dan\" that does not exist and our stubbed out `binary_search` returned `nil`, thus the test passes:\n\n```bash(Terminal)\n$ rspec spec/address_book_spec.rb\n............\n\nFinished in 0.0037 seconds (files took 0.10661 seconds to load)\n12 examples, 0 failures\n```\n\n## More Tests\n\nLet's add another test:\n\n```ruby(spec/address_book_spec.rb)\n ...\n+    it \"searches AddressBook for Bill\" do\n+      book.import_from_csv(\"entries.csv\")\n+      entry = book.binary_search(\"Bill\")\n+      expect(entry).to be_a Entry\n+      check_entry(entry, \"Bill\", \"555-555-4854\", \"bill@blocmail.com\")\n+    end\n   end\n end\n```\n\nWe added a test for \"Bill\". We expect `binary_search` to return an object of type `Entry`. We also use `check_entry` to validate our expectation that this object has its attributes set properly. Run the tests again:\n\n```bash(Terminal)\n$ rspec spec/address_book_spec.rb\n............F\n\nFailures:\n\n  1) AddressBook#binary_search searches AddressBook for Bill\n     Failure/Error: expect(entry).to be_a Entry\n       expected nil to be a kind of Entry\n     # ./spec/address_book_spec.rb:101:in `(root)'\n\nFinished in 0.204 seconds (files took 0.608 seconds to load)\n13 examples, 1 failure\n\nFailed examples:\n\nrspec ./spec/address_book_spec.rb:98 # AddressBook#binary_search searches AddressBook for Bill\n\n```\n\nOur new test fails since `binary_search` still returns`nil`, but it will pass when we write the implementation of the method.\n\nRepeat this pattern for the other entries in `entries.csv`:\n\n```ruby(spec/address_book_spec.rb)\n+    it \"searches AddressBook for Bob\" do\n+      book.import_from_csv(\"entries.csv\")\n+      entry = book.binary_search(\"Bob\")\n+      expect(entry).to be_a Entry\n+      check_entry(entry, \"Bob\", \"555-555-5415\", \"bob@blocmail.com\")\n+    end\n+\n+    it \"searches AddressBook for Joe\" do\n+      book.import_from_csv(\"entries.csv\")\n+      entry = book.binary_search(\"Joe\")\n+      expect(entry).to be_a Entry\n+      check_entry(entry, \"Joe\", \"555-555-3660\", \"joe@blocmail.com\")\n+    end\n+\n+    it \"searches AddressBook for Sally\" do\n+      book.import_from_csv(\"entries.csv\")\n+      entry = book.binary_search(\"Sally\")\n+      expect(entry).to be_a Entry\n+      check_entry(entry, \"Sally\", \"555-555-4646\", \"sally@blocmail.com\")\n+    end\n+\n+    it \"searches AddressBook for Sussie\" do\n+      book.import_from_csv(\"entries.csv\")\n+      entry = book.binary_search(\"Sussie\")\n+      expect(entry).to be_a Entry\n+      check_entry(entry, \"Sussie\", \"555-555-2036\", \"sussie@blocmail.com\")\n+    end\n+\n   end\n end\n```\n\nFinally, add a test for an entry that is similar to something that we know exists, but not exactly the same:\n\n```ruby(spec/address_book_spec.rb)\n+    it \"searches AddressBook for Billy\" do\n+      book.import_from_csv(\"entries.csv\")\n+      entry = book.binary_search(\"Billy\")\n+      expect(entry).to be_nil\n+    end\n   end\n end\n```\n\nLet's run our spec again and see the list of failing tests:\n\n```bash(Terminal)\n $ rspec spec/address_book_spec.rb\n ............FFFFF\n\n Failures:\n\n   1) AddressBook#binary_search searches AddressBook for Bill\n      Failure/Error: expect(entry).to be_a Entry\n        expected nil to be a kind of Entry\n      # ./spec/address_book_spec.rb:101:in `(root)'\n\n   2) AddressBook#binary_search searches AddressBook for Bob\n      Failure/Error: expect(entry).to be_a Entry\n        expected nil to be a kind of Entry\n      # ./spec/address_book_spec.rb:108:in `(root)'\n\n   3) AddressBook#binary_search searches AddressBook for Joe\n      Failure/Error: expect(entry).to be_a Entry\n        expected nil to be a kind of Entry\n      # ./spec/address_book_spec.rb:115:in `(root)'\n\n   4) AddressBook#binary_search searches AddressBook for Sally\n      Failure/Error: expect(entry).to be_a Entry\n        expected nil to be a kind of Entry\n      # ./spec/address_book_spec.rb:122:in `(root)'\n\n   5) AddressBook#binary_search searches AddressBook for Sussie\n      Failure/Error: expect(entry).to be_a Entry\n        expected nil to be a kind of Entry\n      # ./spec/address_book_spec.rb:129:in `(root)'\n\n Finished in 0.257 seconds (files took 0.649 seconds to load)\n 17 examples, 5 failures\n ...\n```\n\n## Implement\n\nSince the `add_entry` method inserts items alphabetically, we can use a search algorithm that is optimal for sorted lists. Many [search algorithms](http://en.wikipedia.org/wiki/Search_algorithm) exist, but we'll implement [binary search](http://en.wikipedia.org/wiki/Binary_search_algorithm) in Address Bloc. `binary_search` uses a [divide and conquer](http://en.wikipedia.org/wiki/Divide_and_conquer_algorithms) design pattern. Add the following code to implement `binary_search`:\n\n```ruby(models/address_book.rb)\n# Search AddressBook for a specific entry by name\n def binary_search(name)\n     # #1\n+    lower = 0\n+    upper = entries.length - 1\n+\n     # #2\n+    while lower <= upper\n       # #3\n+      mid = (lower + upper) / 2\n+      mid_name = entries[mid].name\n+\n       # #4\n+      if name == mid_name\n+        return entries[mid]\n+      elsif name < mid_name\n+        upper = mid - 1\n+      elsif name > mid_name\n+        lower = mid + 1\n+      end\n+    end\n+\n     # #5\n+    return nil\n   end\n end\n```\n\nAt **#1**, we save the index of the leftmost item in the array in a variable named `lower`, and the index of rightmost item in the array in `upper`. If we think of the array in terms of left-to-right where the leftmost item is the zeroth index and the rightmost item is the `entries.length-1` index.\n\nAt **#2**, we loop while our `lower` index is less than or equal to our `upper` index.\n\nAt **#3**, we find the middle index by taking the sum of `lower` and `upper` and dividing it by two. Ruby will truncate any decimal numbers, so if `upper` is five and `lower` is zero then `mid` will get set to two. Then we retrieve the name of the entry at the middle index and store it in `mid_name`.\n\nAt **#4**, we compare the name that we are searching for, `name`, to the name of the middle index, `mid_name`. We use the `==` operator when comparing the names which makes the search [case sensitive](http://en.wikipedia.org/wiki/Case_sensitivity)\n\n* If `name` is equal to `mid_name` we've found the name we are looking for so we return the entry at index `mid`.\n* If `name` is alphabetically before `mid_name`, then we set `upper` to `mid - 1` because the name must be in the lower half of the array.\n* If `name` is alphabetically after `mid_name`, then we set `lower` to `mid + 1` because the name must be in the upper half of the array.\n\nAt **#5**, if we divide and conquer to the point where no match is found, we return `nil`.\n\nRunning the specs a final time shows them all passing:\n\n```bash(Terminal)\n rspec spec/address_book_spec.rb\n .................\n\n Finished in 0.326 seconds (files took 1.23 seconds to load)\n 17 examples, 0 failures\n```\n\nThe following video elaborates on binary search in greater detail:\n\n<iframe src=\"//fast.wistia.net/embed/iframe/vcvrxz808k\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe>\n<script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nLet's walk through `binary_search` using the values in `entries.csv` as our sorted list and search for \"Bill\".\n\n![Step One](https://bloc-global-assets.s3.amazonaws.com/images-rails/25-search/binary_search_one.jpg)\n<br >\n![Step Two](https://bloc-global-assets.s3.amazonaws.com/images-rails/25-search/binary_search_two.jpg)\n<br >\n![Step Three](https://bloc-global-assets.s3.amazonaws.com/images-rails/25-search/binary_search_three.jpg)\n\n`binary_search` took three steps to find \"Bill\" with five entries.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| TDD | We stubbed out `binary_search` to act as a placeholder. Then we built tests to define the expected behavior of `binary_search`. |\n| Binary Search | With our tests in place, we built the implementation of `binary_search` until the tests passed. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nAs we alluded to, many search algorithms exist. Your assignment is to create a method that performs an iterative search:\n\n* Start by stubbing `iterative_search` in `address_book.rb`.\n\n* Create tests for `iterative_search` in `address_book_spec.rb`. You can use the same pattern we used for testing `binary_search`.\n\n* Fill in the body of `iterative_search`:\n\n> Starting from the first entry in `AddressBook.entries`, iterate over the entries until you find the match. When the match is found, return it. If no match is ever found, return `nil`.\n\n* Ensure the new tests pass with your `iterative_search` method.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\nAfter submitting your commit, consider the following questions:\n\n- Which algorithm is more efficient: binary search or iteration? How do you know?\n- How might you measure the difference?\n\nMessage your mentor with your answers (at the very least, your thoughts) to these questions.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/xprszf32k9?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Media Queries Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>8, "checkpoint_type"=>"normal", "position"=>8, "points"=>1, "ref"=>"cd8c4052-9df0-43f1-922f-80dc7819b22d|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2104", "assessment"=>nil}, {"id"=>2105, "name"=>"AddressBloc: Menu Continued", "summary"=>"Menu Continued: putting the finishing touches on the command-line menu", "body"=>"<!-- { ids:[1630, 2105], name:'AddressBloc: Menu Continued', summary:'Menu Continued: putting the finishing touches on the command-line menu' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Eloquent Ruby](https://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional/dp/0321584104)\n</mentor-checkpoint-note>\n>>>>>>> bcc5aa3c4dfec85990763f646939ff8c0ddcd32b\n\n<center>![Reef Knot](https://bloc-global-assets.s3.amazonaws.com/images-rails/menu-continued/banner.jpg)</center>\n\n> “The closer one gets to the speed of light, the slower time travels. The exact thing is true when completing a book.”\n>\n> — [Daniel Ionson](https://www.facebook.com/daniel.ionson)\n\n## Overview and Purpose\n\nThis checkpoint covers exception handling and introduces views.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Explain exception handling.\n- Explain views within in a MVC framework.\n\n## Introduction\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/vf7ajnmwvh\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n\nWe're almost done! We need to write the rest of the methods in `menu_controller.rb` to connect the user interface of Address Bloc to the methods in `AddressBook`.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint for details](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint).\n\n## Import\n\nStart by writing the body of the stubbed `read_csv` method:\n\n```ruby(controllers/menu_controller.rb)\n ...\n   def read_csv\n     # #1\n+    print \"Enter CSV file to import: \"\n+    file_name = gets.chomp\n+\n     # #2\n+    if file_name.empty?\n+      system \"clear\"\n+      puts \"No CSV file read\"\n+      main_menu\n+    end\n+\n     # #3\n+    begin\n+      entry_count = address_book.import_from_csv(file_name).count\n+      system \"clear\"\n+      puts \"\#{entry_count} new entries added from \#{file_name}\"\n+    rescue\n+      puts \"\#{file_name} is not a valid CSV file, please enter the name of a valid CSV file\"\n+      read_csv\n+    end\n   end\n ...\n```\n\nAt **#1**, we prompt the user to enter a name of a `CSV` file to import. We get the filename from [`STDIN`](http://en.wikipedia.org/wiki/Standard_streams) and call the `chomp` method which removes [`newlines`](http://en.wikipedia.org/wiki/Newline).\n\nAt **#2**, we check to see if the file name is empty. If it is then we return the user back to the main menu by calling `main_menu`.\n\nAt **#3**, we import the specified file with `import_from_csv` on `address_book`. We then clear the screen and print the number of entries that were read from the file. All of these commands are wrapped in a `begin/rescue` block. `begin` will protect the program from crashing if an exception is thrown.\n\n> An exception is like a yellow card in soccer. When a player commits a foul, the referee gives the player a warning by issuing a yellow card, but the player is allowed to continue to play.\n\nIn Ruby, if the program performs an operation that is illegal (such as dividing a rational number by zero) then Ruby will throw an exception, but the program is allowed to continue executing at the `rescue` statement. Our `begin` and `rescue` block catches potential exceptions and handles them by printing an error message and calling `import_from_csv` again.\n\nLet's explore Ruby exception handling:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/b2u1cdn3x6\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Delete\n\nLet's add the ability to delete an entry:\n\n```ruby(controllers/menu_controller.rb)\n ...\n+  def delete_entry(entry)\n+    address_book.entries.delete(entry)\n+    puts \"\#{entry.name} has been deleted\"\n+  end\n+\n end\n```\n\nWe remove `entry` from `address_book` and print out a message to the user that says `entry` has been removed. Let's add the ability to edit an entry.\n\n## Edit\n\n```ruby(controllers/menu_controller.rb)\n ...\n+  def edit_entry(entry)\n     # #4\n+    print \"Updated name: \"\n+    name = gets.chomp\n+    print \"Updated phone number: \"\n+    phone_number = gets.chomp\n+    print \"Updated email: \"\n+    email = gets.chomp\n     # #5\n+    entry.name = name if !name.empty?\n+    entry.phone_number = phone_number if !phone_number.empty?\n+    entry.email = email if !email.empty?\n+    system \"clear\"\n     # #6\n+    puts \"Updated entry:\"\n+    puts entry\n+  end\n+\n end\n```\n\nAt **#4**, we perform a series of `print` statements followed by `gets.chomp` assignment statements. Each `gets.chomp` statement gathers user input and assigns it to an appropriately named variable.\n\nAt **#5**, we use `!attribute.empty?` to set attributes on entry only if a valid attribute was read from user input.\n\nAt **#6**, we print out `entry` with the updated attributes.\n\n## Connect the Delete and Edit Methods\n\nWe wrote `delete_entry` and `edit_entry` but we still need to connect them to `main_menu`. An entry can only be deleted or edited directly from the submenu. Let's connect them directly from `entry_submenu`:\n\n```ruby(controllers/menu_controller.rb)\n ...\n     case selection\n       when \"n\"\n       when \"d\"\n         # #7\n+        delete_entry(entry)\n       when \"e\"\n         # #8\n+        edit_entry(entry)\n+        entry_submenu(entry)\n ...\n```\n\nAt **#7**, when a user is viewing the submenu and they press `d`, we call `delete_entry`. After the entry is deleted, control will return to `view_all_entries` and the next entry will be displayed.\n\nAt **#8**, we call `edit_entry` when a user presses `e`. We then display a sub-menu with `entry_submenu` for the entry under edit.\n\n## Search\n\nThe last task is to write the remainder of `search_entries`.\n\n```ruby(controllers/menu_controller.rb)\n ...\n   def search_entries\n     # #9\n+    print \"Search by name: \"\n+    name = gets.chomp\n     # #10\n+    match = address_book.binary_search(name)\n+    system \"clear\"\n     # #11\n+    if match\n+      puts match.to_s\n+      search_submenu(match)\n+    else\n+      puts \"No match found for \#{name}\"\n+    end\n   end\n ...\n```\n\nAt **#9**, we get the name that the user wants to search for and store it in `name`.\n\nAt **#10**, we call `search` on `address_book` which will either return a match or `nil`, it will never return an empty string since `import_from_csv` will fail if an entry does not have a name.\n\nAt **#11**, we check if `search` returned a match. This expression evaluates to _false_ if `search` returns `nil` since `nil` evaluates to _false_ in Ruby. If `search` finds a match then we call a helper method called `search_submenu`. `search_submenu` displays a list of operations that can be performed on an `Entry`. We want to give the user the ability to delete or edit an entry and return to the main menu when a match is found. Let's write `search_submenu`:\n\n```ruby(controllers/menu_controller.rb)\n+  def search_submenu(entry)\n     # #12\n+    puts \"\\nd - delete entry\"\n+    puts \"e - edit this entry\"\n+    puts \"m - return to main menu\"\n     # #13\n+    selection = gets.chomp\n+\n     # #14\n+    case selection\n+      when \"d\"\n+        system \"clear\"\n+        delete_entry(entry)\n+        main_menu\n+      when \"e\"\n+        edit_entry(entry)\n+        system \"clear\"\n+        main_menu\n+      when \"m\"\n+        system \"clear\"\n+        main_menu\n+      else\n+        system \"clear\"\n+        puts \"\#{selection} is not a valid input\"\n+        puts entry.to_s\n+        search_submenu(entry)\n+    end\n+  end\n end\n```\n\nAt **#12**, we print out the submenu for an entry.\n\nAt **#13**, we save the user input to `selection`.\n\nAt **#14**, we use a `case` statement and take a specific action based on user input. If the user input is `d` we call `delete_entry` and after it returns we call `main_menu`. If the input is `e` we call `edit_entry`. `m` will return the user to the main menu. If the input does not match anything (see the `else` statement) then we clear the screen and ask for their input again by calling `search_submenu`.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| `begin` and `rescue` | `begin` and `rescue` blocks are Ruby's implementation of try/catch blocks in other languages. [Exception handling](http://en.wikipedia.org/wiki/Exception_handling) is a very important part of any programming language and allows your program to dynamically rebound from any sort of unexpected error that gets *raised* during execution. `begin/rescue` blocks should not be abused. They should only be used when we know that there is a chance that a particular exception may occur. |\n| `View` | A `View` \"requests information from the model that it uses to generate an output representation to the user\" in [`MVC`](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller). In Address Bloc, the command line menu we built operates as our `View` in the `MVC` pattern. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n* Create a menu option to delete all entries. Name it something extreme like `detonate`, `demolish` or `nuke`.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/yt6g7ou6sk?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Menu Continued Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>9, "checkpoint_type"=>"normal", "position"=>9, "points"=>1, "ref"=>"ef96db32-939c-457c-91d0-0179f0a5d50e|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2105", "assessment"=>nil}, {"id"=>2316, "name"=>"Quiz: MVC Application Fundamentals", "summary"=>"Quiz: MVC Application Fundamentals", "body"=>"", "assignment"=>"", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>10, "checkpoint_type"=>"quiz", "position"=>10, "points"=>1, "ref"=>"2fa6eb28-c24d-4cfb-abb9-3ceb7d332773|0", "exercises"=>false, "quiz_id"=>14, "path"=>"/checkpoints/2316", "assessment"=>nil}, {"id"=>2106, "name"=>"Programming Reinforcement: Checkpoint 2", "summary"=>"Reinforce Ruby programming and problem solving fundamentals through curated exercises", "body"=>"<!-- { ids:[2106], name:'Programming Reinforcement: Checkpoint 2', summary:'Reinforce Ruby programming and problem solving fundamentals through curated exercises' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [I am a puts debuggerer](https://tenderlovemaking.com/2016/02/05/i-am-a-puts-debuggerer.html)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint introduces three coding challenges to practice algorithms, advanced control flow, regular expressions, loops, and basic data structures.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Understand the purpose of an algorithm.\n- Apply advanced control flow to an algorithm.\n- Assess regular expressions for string analysis and modification.\n- Understand how to loop through an array in Ruby.\n\n<mentor-checkpoint-note>The programming reinforcement checkpoints in the Frontend and Rails courses are not the same. In order to be career support eligible, students must complete them all <b>before graduating a course</b>. They gradually increase in difficulty, so we recommend doing them in order.</mentor-checkpoint-note>\n\n## Programming Reinforcement\n\nEach foundation checkpoint introduces new concepts, patterns, and assignments. We designed Bloc’s curriculum to push you to your learning limits. With that in mind, we’ve included breaks between lessons to reinforce programming concepts; this is the second of those breaks, known as Programming Reinforcement checkpoints.\n\nIn these checkpoints, you will complete coding challenges that help you master Ruby and learn to think like a programmer. After you complete the challenges, you will meet with your mentor to discuss your solutions.\n\n- [Challenges](#challenges)\n- [Bonus Challenge: Word A10n Abbreviation](#bonus-challenge)\n- [Assignment](#assignment)\n  - [For Mentors](#for-mentors)\n\n<a name=\"challenges\"></a>\n## Challenges\n\nYou must solve these three Kata (challenges) before submitting the checkpoint. At this point in your program, your skill level meets or exceeds that required by each Kata. While they may challenge you, know that you are capable of completing each one.\n\n>Your mentor may help you, but we strongly encourage you attempt these on your own.\n\n| Kata                                                                                                             | Difficulty[*](#difficulty) | Hint                                                                                                                                     |\n|:-----------------------------------------------------------------------------------------------------------------|:---------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------|\n| [Tube Strike Options](http://www.codewars.com/kata/tube-strike-options-calculator/train/ruby)                    | 7                          | Pay close attention to the units (kilometers per hour) and use division to recover the length of time for each method of transportation. |\n| [Character Counter](http://www.codewars.com/kata/character-counter/train/ruby)                                   | 7                          | You can use `downcase` on a String to convert all characters to lower-case.                                                              |\n| [Most Frequent Item Count](http://www.codewars.com/kata/find-count-of-most-frequent-item-in-an-array/train/ruby) | 7                          | You can track the number of character appearances in a Hash.                                                                             |\n\n<a name=\"difficulty\"></a>\n\\*<sub> Difficult problems have lower ratings.</sub>\n\n<a name=\"bonus-challenge\"></a>\n## Bonus Challenge: [Word A10n Abbreviation](http://www.codewars.com/kata/word-a10n-abbreviation/train/ruby)\n\n>This bonus challenge is optional, but we strongly encourage you to attempt it.\n\nThis challenge is difficult. It asks you to replace all words of length four or greater found within a String with their abbreviated forms. For example, “Hello,” becomes “H3o.” You must replace the characters between the first and last letters with the number of characters removed.\n\nThis method must work with full sentences, including punctuation. Where hyphens are present (`-`), your code will abbreviate words on either side of the hyphens independently. Here are some examples:\n\n```ruby\nAbbreviator.abbreviate('Animals')\n#=> 'A5s'\n\nAbbreviator.abbreviate('How are you today?')\n#=> 'How are you t3y?'\n\nAbbreviator.abbreviate('Tony Stark is an anti-hero.')\n#=> 'T2y S3k is an a2i-h2o.'\n\nAbbreviator.abbreviate('Remember, this is abbreviation, this is important!')\n#=> 'R6r, t2s is a10n, t2s is i7t!'\n```\n\nYou may consider a solution that loops through the String, replacing one word at a time until it completes the work. That is one viable option, but one of the most cumbersome. We recommend investigating [regular expressions](https://www.bloc.io/resources/regular-expressions-regex) and [testing them](http://rubular.com/).\n\nString has methods, [`split`](http://ruby-doc.org/core-2.2.3/String.html#method-i-split) for example, that allow you to supply a regular expression (regex) to select and replace a String’s contents.\n\n<a name=\"assignment\"></a>", "assignment"=>"- Complete all [mandatory challenges](#challenges).\n  - Submit the [link](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/programming-reinforcement-solution-link.png) to each of your solutions as part of your assignment.\n- Attempt the [Bonus Challenge](#bonus-challenge).\n  - Keep a log as you work through it and consider these questions when writing your report:\n    - What approaches did you try?\n    - Did you ever restart the process? If so, why?\n    - What steps did you take to solve the problem before you began coding?\n    - What was the most challenging aspect of the problem?\n    - Etc.\n  - If you complete the [Bonus Challenge](#bonus-challenge), submit the [link](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/programming-reinforcement-solution-link.png) to your solution.\n- Discuss your solutions and your struggles with your mentor.\n\n>Articulating your problem solving process is a valuable skill on the job and during technical interviews.\n\nRemember to click **Submit Final** on every challenge you complete, and notify your mentor when you do so. For challenges you *do not* complete, you may ask your mentor to review them with you.\n\n<a name=\"for-mentors\"></a>\n### For Mentors\n\nConsult this [document for reference](https://www.bloc.io/resources/ruby-programming-reinforcement-mentor-s-guide) for this and all future Ruby Programming Reinforcement checkpoints.", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>10, "checkpoint_type"=>"normal", "position"=>10, "points"=>1, "ref"=>"3430a9d3-fcef-456a-9463-319cb925f1a7|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2106", "assessment"=>nil}, {"id"=>2107, "name"=>"Rails: Basic Rails App", "summary"=>"Basic Rails App: creating and deploying a new Rails app", "body"=>"<!-- { ids:[2107], name:'Rails: Basic Rails App', summary:'Basic Rails App: creating and deploying a new Rails app' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Getting Started with Rails](http://edgeguides.rubyonrails.org/getting_started.html)\n* [The Rails Command Line](http://guides.rubyonrails.org/command_line.html)\n</mentor-checkpoint-note>\n\n<center>\n  ![public-index](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-basic-rails-app/rubyrails.png)\n</center>\n\n> “Rails is the most well thought-out web development framework I’ve ever used. Nobody has done it like this before.”\n>\n> — [James Duncan Davidson](https://en.wikipedia.org/wiki/James_Duncan_Davidson)\n\n## Overview and Purpose\n\nIn this checkpoint you'll start creating a new application using Ruby on Rails.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Explain how Rails complements Ruby.\n- Discuss the purpose of a README.\n- Create a development database in Rails.\n- Explain what the asset pipeline in Rails is.\n- Deploy a Rails app to Heroku.\n- Run a Rails server locally.\n\n## Bloccit\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/8f520xus4k\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nIn this checkpoint, you'll start a new project, similar to [Reddit](http://www.reddit.com/), named Bloccit.\n\nJust like Reddit, Bloccit will be an app where people can post, vote on, share and save links and comments. Bloccit will have many features needed to make it a cool web app, but the first thing you need to do is design a basic user-interface (UI) as a foundation to build on.\n\n## Create Bloccit\n\nThe first step is to create a new Rails app. Run the `rails new` command in the `code` directory we created earlier:\n\n```bash(Terminal)\n$ cd code\n$ rails new bloccit -T\n```\n\nThe app name is `bloccit`. The `-T` option specifies that the app should not be created with standard test packages since we'll be testing our app with `RSpec`.\n\nWhen we ran the `rails new` command, we should've seen a long output in your console. Among other things, `rails new` creates the Rails app structure. Open the project in the editor to explore the Rails app structure.\n\nWe should see a full Rails app structure. We'll explore the various directories as we progress through the Roadmap. We'll begin to make changes, but before you do, we'll want to establish the README, and update the database file and Git repositories\n\n## Create a New README\n\nA `README` file should describe what the app or program does. It should also provide directions on how to install it, run tests, or anything else that another developer would need to know.\n\nRename the `README` to use Markdown:\n\n```bash(Terminal)\n$ mv README.rdoc README.md\n```\n\nOpen `README.md` and update it with the following content:\n\n```md\n+## Bloccit: a Reddit replica to teach the fundamentals of web development and Rails.\n+\n+Made with my mentor at [Bloc](http://bloc.io).\n```\n\n> Feel free to change the style or content of `README.md` as you see fit.\n\n## Create the Development Database\n\nReplace the contents of your `Gemfile` with the following:\n\n```ruby(Gemfile)\n+source 'https://rubygems.org'\n+\n+# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'\n+gem 'rails', '4.2.5'\n+\n # #1\n+group :production do\n+  gem 'pg'\n+end\n+\n # #2\n+group :development do\n+  gem 'sqlite3'\n+end\n+\n+# Use SCSS for stylesheets\n+gem 'sass-rails', '~> 5.0'\n+# Use Uglifier as compressor for JavaScript assets\n+gem 'uglifier', '>= 1.3.0'\n+# Use CoffeeScript for .coffee assets and views\n+gem 'coffee-rails', '~> 4.1.0'\n+# Use jquery as the JavaScript library\n+gem 'jquery-rails'\n+# Turbolinks makes following links in your web application faster. Read more: https://github.com/rails/turbolinks\n+gem 'turbolinks'\n```\n\nAt __#1__ and __#2__ we specify different databases for our Development and Production environments. We use `sqlite3` for our Development environment because it is an easy to use database perfect for rapid testing. Heroku only supports Postgres, so we use `pg` in our Production environment.\n\nBecause we changed your `Gemfile`, we must update our application with `bundle install --without production`. This command installs everything specified in the `Gemfile` and ensures that all of the gems work harmoniously. The `--without production` option ignores gems in `group :production`. These gems aren't needed or used in our Development environment. Our Production environment will automatically run `bundle install` when we deploy, and will account for gems declared in `group :production` at that point. On the command line, in the root `Bloccit` directory, type:\n\n```bash(Terminal)\n$ bundle install --without production\n```\n\nRun the following command in your terminal to create the database:\n\n```bash(Terminal)\n$ rake db:create\n```\n\nThis creates a new local database for our app to use. We have to run this command after creating a new app, or after dropping an existing database.\n\n## The Asset Pipeline\n\nAs stated in the [Rails Guide](http://guides.rubyonrails.org/asset_pipeline.html):\n\n> The asset pipeline provides a framework to concatenate and minify, or compress, JavaScript and CSS assets. It also adds the ability to write these assets in other languages such as CoffeeScript, Sass, and ERB.\n\nThe purpose of the asset pipeline is to make Rails apps fast by default while allowing developers to write \"assets\" (images, styles, and JavaScript, mostly) in a variety of languages.\n\nRails 4 requires some minor configuration changes to properly serve assets on Heroku:\n\n```ruby(Gemfile)\n ...\n group :production do\n   gem 'pg'\n+  gem 'rails_12factor'\n end\n\n group :development do\n   gem 'sqlite3'\n end\n ...\n```\n\nWe added `rails_12factor` to the Gemfile; let's install it in our application:\n\n```bash(Terminal)\n$ bundle install\n```\n\nHeroku provides a [detailed explanation](https://devcenter.heroku.com/articles/rails-4-asset-pipeline) of the Rails 4 configuration changes.\n\n## Test Locally\n\nStart the Rails server from your command line:\n\n```bash(Terminal)\n$ rails s\n```\n\n> If you're [using Cloud9](https://www.bloc.io/resources/cloud9-on-rails), remember to start the Rails server with the `-p $PORT -b $IP` flags.\n\nNavigate to [localhost:3000](http://localhost:3000/) to make sure the app is working locally.\n\n> Starting the web server with `rails s` will leave your terminal in an \"open\" state. That is, you won't see a command prompt until you stop the server. Open your app on localhost and view it next to the terminal where you started the server. Refresh the page on localhost, and you'll see the server logs update in your terminal. While you're running the Rails web server, the terminal logs all activity in your app.\n\n## Git and GitHub\n\nSign into your [GitHub](https://github.com/) account and create a new repo named `bloccit`. You've already created a README, so make sure the \"Initialize this repository with a README\" is _unchecked_.\n\nCommit and push your code up to your GitHub repo:\n\n> If your Rails server is still running, you can either stop it by pressing `CTRL-C` or leave it running and open a new Terminal tab. Either way, you'll need a Terminal prompt before moving forward.\n\n```bash(Terminal)\n$ git init\n$ git add .\n$ git commit -m 'First commit and README update'\n$ git remote add origin git@github.com:<user name>/<repo_name>.git\n$ git push -u origin master\n```\n\n> Use the URL from GitHub's instructions.\n\nReload the repo homepage on GitHub. It should display the content from `README.md` at the bottom of the page and you should see all of this repo's files.\n\n## Deploying to Heroku\n\nIt is time to deploy and share your app with the world. There are many choices for deploying and hosting Rails applications, and Bloc recommends the popular [Heroku](https://www.heroku.com/) platform. Heroku makes it easy to manage and deploy Rails apps using the command line.\n\n[Sign up for a free Heroku account](https://signup.heroku.com). Then install the [Heroku Toolbelt](https://toolbelt.heroku.com) for your OS. This toolbelt will allow you to run Heroku commands from the command line.\n\n> If you're using Cloud9, the Heroku toolbelt is already installed.\n\nLog into your new Heroku account:\n\n```bash(Terminal)\n$ heroku login\n```\n\nAfter you've logged in, create a new application in Heroku:\n\n```bash(Terminal)\n$ heroku create\n```\n\n> Because we did not specify a name with `heroku create`, Heroku created one for us.\n\nWe have a Production environment to `push` our application to. Type this command to push the code from the master branch of your Git repo to Heroku:\n\n```bash(Terminal)\n$ git push heroku master\n```\n\n> It may take a few minutes for the new application to propagate in Heroku. If you receive an error that says `Permission denied (publickey)`, [go here](https://devcenter.heroku.com/articles/keys#adding-keys-to-heroku) to learn how to fix it.\n\nHere is a video recap of how to deploy to Heroku:\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/xbb8g1je9s\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nYou can see the web address for your application in Production by typing the following:\n\n```bash(Terminal)\n$ heroku apps:info\n```\n\nCongratulations, you've deployed an application to your Production environment. For now, you'll receive an error message when you visit your Heroku URL.  This is because the static index page [is not used in production](https://devcenter.heroku.com/articles/getting-started-with-rails4#welcome-page). We'll fix that soon.\n\nMake sure you've added your [GitHub](https://github.com) account to your Bloc account page. Use the \"Submit your work\" tab to submit your first Bloccit commit for your mentor to review.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [`rails new`](http://guides.rubyonrails.org/command_line.html#rails-new) | `rails new` creates a new Rails application with the entire default Rails directory structure. |\n| [README](http://en.wikipedia.org/wiki/README) | A `README` is a text file commonly distributed with a program. It contains information that describes what the program does, provides directions on how to install it, run tests, or anything else that another developer would need to know. |\n| [Asset Pipeline](http://guides.rubyonrails.org/asset_pipeline.html) | The asset pipeline provides a framework to concatenate and minify, or compress JavaScript and CSS assets. It also adds the ability to write these assets in other languages such as CoffeeScript, Sass, and ERB. |\n| [`rails server`](http://guides.rubyonrails.org/command_line.html#rails-server) | The `rails server` command launches a small web server named WEBrick, which comes bundled with Ruby. |\n| [Heroku](https://www.heroku.com/) | Heroku (pronounced her-OH-koo) is a platform-as-a-service (PaaS) that enables developers to build and run applications entirely in the cloud. |\n| [Gems](http://guides.rubygems.org/what-is-a-gem/)  | Gems are Ruby libraries that can be used to extend or modify functionality within a Ruby application. |\n| [Rails Environments](http://teotti.com/use-of-rails-environments/) | Rails ships with three environments: \"Development\", \"Test\", and \"Production\". These environments are used to tell your app to behave differently in different circumstances, primarily by setting different configuration options and variables. |", "assignment"=>"After starting the Rails server, we can use `Ctrl-C` to shutdown the server. A common issue encountered by Rails developers is starting the Rails server and then accidentally closing the command line window in which it is running. The Rails server is still running in the background, but with the command line window closed, you can no longer use `Ctrl-C` to shut it down.  You could restart your computer, which kills all running processes. However, there is a better way, and we'll explore that in this assignment.\n\n1. Simulate losing track of your Rails server by starting it using the `-d` option:\n  > If you're using Cloud9, remember to start the Rails server with the `-p $PORT -b $IP` flags.\n\n  ```bash(Terminal)\n  $ rails s -d\n  ```\n\n  Using <thead></thead> `-d` option starts the Rails server as a [daemon](http://en.wikipedia.org/wiki/Daemon_%28computing%29), a computer program that runs as a background process.\n\n2. Start your Rails server again. You will see an error message:\n\n  ```bash(Terminal)\n  $ A server is already running. Check [local path]/tmp/pids/server.pid.\n  $ Exiting\n  ```\n\n3. To kill the lost server, find its [process id (PID)](http://en.wikipedia.org/wiki/Process_identifier) using the [`lsof` command](http://linux.die.net/man/8/lsof). `lsof -i :3000` returns the PID of the process using port 3000 (the port Rails server uses).\n  > If you're using Cloud9, the server will be running on whatever port number is in the `$PORT` environment variable, which may not be 3000.  Instead of lsof -i :3000, use `lsof -i :$PORT` to find the PID.\n\n4. We have the PID for your lost Rails server; terminate it using the [`kill -9 PID` command](http://linux.die.net/man/1/kill) using the PID we found with `lsof`.\n\nOnce you have completed the steps in this assignment, message your mentor with questions you have about the Rails server. If you have questions about starting the server, stopping the server, server logs, PID, etc. be sure to discuss them with your mentor before moving to the next checkpoint.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/yxaws8lqqm?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Basic Rails App Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>11, "checkpoint_type"=>"normal", "position"=>11, "points"=>1, "ref"=>"fe74eca8-f485-4bd7-9ffc-236213744992|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2107", "assessment"=>nil}, {"id"=>2108, "name"=>"Rails: Static Pages", "summary"=>"Static Pages: using controllers and views to provide a static landing page", "body"=>"<!-- { ids:[2108], name:'Rails: Static Pages', summary:'Static Pages: using controllers and views to provide a static landing page' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Rails Routing from the Outside In](http://guides.rubyonrails.org/routing.html)\n* [Action Controller Overview](http://guides.rubyonrails.org/action_controller_overview.html)\n* [Options Hash Gist](https://gist.github.com/gadtfly/ebeed092a9215cd953c0)\n</mentor-checkpoint-note>\n\n<center>\n  ![static](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-static-pages/static.jpg)\n</center>\n\n> “I make static art, not dynamic art. That's what I do.”\n>\n> — [Michael Heizer](http://en.wikipedia.org/wiki/Michael_Heizer)\n\n## Overview and Purpose\n\nIn this checkpoint you'll start creating a new application using Ruby on Rails.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Explain MVC.\n- Discuss the V in MVC.\n- Discuss the C in MVC.\n- Use Git branching.\n- Explain routing in Rails.\n- Explain what `localhost` means.\n- Use `rails generate`.\n- Manually create the same files as `rails generate`.\n\n## Static Views\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/vvsobl2zzc\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWe have a working Rails app, but other than the default index page there's not much to show. The purpose of this checkpoint is to build static views, and in the process we'll learn the fundamentals of MVC architecture.\n\n## MVC Architecture\n\nMVC, which is an acronym for \"Model View Controller\", is the basic architectural pattern that guides the creation of all Rails applications. You worked with basic MVC when you built Address Bloc. In this checkpoint, we'll focus on views and controllers and learn about models later.\n\nA view is equivalent to a web page, and a controller determines what view should be shown. Consider the diagram below and focus on the flow of the request and response, as they pertain to views and controllers.\n\n![rails_mvc](https://bloc-global-assets.s3.amazonaws.com/images-rails/25-static-pages/rails_mvc.png)\n\nWhen you visit a website, you initiate a chain of actions. In an MVC application, a request is handled by a controller, which receives information from the model layer, and then uses that information to display a view.\n\nMVC architecture is analogous to the basic function in a restaurant:\n\n1. A customer (user) places an order with the waiter (controller).\n2. The waiter informs the kitchen (model) of the order.\n3. After the kitchen makes the order, the waiter serves the dish (view) to a customer.\n\n> The waiter doesn't need to know how the order will be prepared, or how it will be consumed, and that's just fine. Controllers, like waiters, should only be concerned with passing things to other parties.\n\nWe review MVC components and examples of their corresponding code in the next video:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/4kyyo3l6bz\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Generating a Controller and Views\n\nThe best way to understand the relationship between controllers and views is to create them. We could create controller and view files manually, but Rails provides a handy generator which ensures that _all_ necessary files are generated for a given controller. To generate a controller and its views, type the following on your command line in your project's directory:\n\n```bash(Terminal)\n$ rails generate controller welcome index about\n```\n\nThe output should look like this:\n\n```bash(Terminal)\n      create  app/controllers/welcome_controller.rb\n       route  get \"welcome/about\"\n       route  get \"welcome/index\"\n      invoke  erb\n      create    app/views/welcome\n      create    app/views/welcome/index.html.erb\n      create    app/views/welcome/about.html.erb\n      invoke  helper\n      create    app/helpers/welcome_helper.rb\n      invoke  assets\n      invoke    coffee\n      create      app/assets/javascripts/welcome.coffee\n      invoke    scss\n      create      app/assets/stylesheets/welcome.scss\n```\n\nWe passed three arguments to the `rails generate` command. The first argument represents the controller name, which is `welcome`. The next two arguments (`index` and `about`) represent views corresponding with the `welcome` controller. We could've named the controller and views anything, but the names should correspond with their primary function, as a best practice.\n\n## Exploring Controllers and Views\n\nOpen your project in your text editor. You should see a file named `welcome_controller.rb` in `app/controllers/`. You should also see the two views you created in `app/views/welcome/`. The generator created some code:\n\n```ruby(app/controllers/welcome_controller.rb)\nclass WelcomeController < ApplicationController\n  def index\n  end\n\n  def about\n  end\nend\n```\n\n`WelcomeController` is a Ruby class, and contains two empty methods that correspond to view names. These identically named methods and views are an example of a Rails convention called [default rendering](http://guides.rubyonrails.org/layouts_and_rendering.html#rendering-by-default-convention-over-configuration-in-action). When a controller method's purpose is to invoke a view, _it must be named with respect to the view_. The `index` method in the `WelcomeController` will invoke the **index** view inside the `app/views/welcome` directory.\n\nOpen the **index** and **about** views and read the placeholder code:\n\n```erb(app/views/welcome/index.html.erb)\n<h1>Welcome#index</h1>\n<p>Find me in app/views/welcome/index.html.erb</p>\n```\n\n```erb(app/views/welcome/about.html.erb)\n<h1>Welcome#about</h1>\n<p>Find me in app/views/welcome/about.html.erb</p>\n```\n\nStart the Rails server from your command line:\n\n```bash(Terminal)\n$ rails s\n```\n\nVisit [localhost:3000/welcome/index](http://localhost:3000/welcome/index) and  [localhost:3000/welcome/about](http://localhost:3000/welcome/about) to view the HTML code that was created by the controller generator.\n\n## Routing in Rails\n\nThe controller generator created the basic code needed for the `WelcomeController` and its views, and it also created code in the `config/routes.rb` file:\n\n```ruby(config/routes.rb)\nRails.application.routes.draw do\n  get \"welcome/index\"\n\n  get \"welcome/about\"\n  ...\nend\n```\n\nThis code creates HTTP `GET` routes for the **index** and **about** views. HTTP is the protocol that the Internet uses to communicate with websites. The `get` action corresponds to the HTTP `GET` verb. `GET` requests are used to retrieve information identified by the URL.\n\n> The HTTP protocol has other actions which we'll explore later.\n\nIf `routes.rb` doesn't specify a `GET` action, the view will not be served because the application won't know what to `get` when a user sends a request. Test this by commenting out these lines:\n\n```ruby(config/routes.rb)\n  # get \"welcome/index\"\n\n  # get \"welcome/about\"\n```\n\nRestart the server and visit [localhost:3000/welcome/index](http://localhost:3000/welcome/index). We'll see a Rails \"Routing Error\" page. This error occurs when our app doesn't understand what we're requesting, because there is no corresponding `get` action.\n\nUncomment those two lines and **delete all the other commented lines in the file**. Add a `root` path to the `routes.rb` file:\n\n```ruby(config/routes.rb)\n Rails.application.routes.draw do\n   get \"welcome/index\"\n\n   get \"welcome/about\"\n\n+  root 'welcome#index'\n ...\n end\n```\n\nThe `root` method allows us to declare the default page the app loads when we navigate to the home page URL. Test it by going to `localhost:3000`. You should see the welcome **index** view by default.\n\n> `root` is a method that takes a hash as an argument, here using the \"implied hash\" syntax. The line could be rewritten without using an implied hash as: `root({to: 'welcome#index'})`. You'll see implied hashes frequently in Rails because they enhance readability.\n\nView your app's available routes by typing `rake routes` from the command line. Stop the Rails server (`CTRL+C`) and give it a try. You should see the following output:\n\n```bash(Terminal)\n$ rake routes\n       Prefix Verb URI Pattern              Controller#Action\nwelcome_index GET /welcome/index(.:format) welcome#index\nwelcome_about GET /welcome/about(.:format) welcome#about\n         root GET /                        welcome#index\n```\n\n* The first column represents the route name: `welcome_index`\n* The second column represents the HTTP action associated with the route: `GET`\n* The third column represents the URI pattern, which is the URL used to request the view: `/welcome/index`\n* The fourth column represents the route destination, which translates to the controller and associated view: `welcome#index`\n\n> By default, Rails will present a searchable list of valid routes if an invalid route is requested. This is handy for troubleshooting large applications with many routes, and is also a nice fail-safe. Try it on `localhost`:\n\n![fake-routes](http://bloc-global-assets.s3.amazonaws.com/images-rails/25-static-pages/rake-routes.png)\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku.\n\n## Recap\n| **Concept** | **Description** |\n| :-- | :-- |\n| [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) | MVC (Model–view–controller) is an architectural pattern that divides a given application into three interconnected parts with distinct responsibilities. |\n| [Git Branching](http://git-scm.com/book/en/Git-Branching) | Diverges the master branch, so that you can work on new features without affecting the master branch. Git branches require little memory or disk space, making branching operations nearly instantaneous. |\n| [`rails generate`](http://guides.rubyonrails.org/command_line.html#rails-generate) | The `rails generate` command creates controllers from templates. The `generate` command can also generate controller actions and their corresponding views. |\n| [Controller](http://guides.rubyonrails.org/action_controller_overview.html#what-does-a-controller-do-questionmark) | Controllers are represented by the C in MVC. Controllers process requests and produce the appropriate output. Controllers communicate with the database and perform CRUD actions where necessary, via models. |\n| [Views](http://guides.rubyonrails.org/action_view_overview.html) | Views are responsible for rendering templates. View templates are written using embedded Ruby in tags and integrated with HTML. |\n| [`rake routes`](http://guides.rubyonrails.org/routing.html#inspecting-and-testing-routes) | The `rake routes` command lists all routes, in the same order as `routes.rb`. |\n| [localhost](http://en.wikipedia.org/wiki/Localhost) | **localhost** is a hostname that represents \"this computer\". |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nUse what you learned in this checkpoint to create a Contact page, do not use `rails generate`:\n\n1. Manually create `app/views/welcome/contact.html.erb`.\n2. Manually create the route to your new page in `routes.rb`.\n3. Add a `contact` action to `WelcomeController`.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/hbrjtl9t5d?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Static Pages Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>12, "checkpoint_type"=>"normal", "position"=>12, "points"=>1, "ref"=>"3e843862-6554-4b82-8cd9-a7927aaa3b28|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2108", "assessment"=>nil}, {"id"=>2109, "name"=>"Rails: Testing", "summary"=>"Testing: writing Rails features using Test-Driven Development", "body"=>"<!-- { ids:[2109], name:'Rails: Testing', summary:'Testing: writing Rails features using Test-Driven Development' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [TDD is dead. Long live testing.](http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html)\n</mentor-checkpoint-note>\n\n<center>\n  ![Testing](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-testing/testing.png)\n</center>\n\n> “Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.”\n>\n> — Martin Golding\n\n## Overview and Purpose\n\nIn this checkpoint you'll learn more about the power of TDD and RSpec.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Create a test group in your Gemfile.\n- Explain the red-green-refactor pattern.\n- Explain  the DRY philosophy.\n\n## Why We Test\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/24m9zodgw5\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nTest code is used to state expectations that are to be met when production code - the code that runs an application - is executed. Test code raises errors when its stated expectations are not met by production code. The two primary reasons to write test code are:\n\n1. To ensure that production code does what it's intended to do; and\n2. To ensure that production code doesn't break when you **refactor** it. [Refactoring](https://en.wikipedia.org/wiki/Code_refactoring) is \"the process of restructuring existing computer code – changing the factoring – without changing its external behavior\".\n\n> Like life, the one constant in programming is change. Code will evolve in ways you can't predict. If you have multiple dependencies, a small change to one file can create unexpected consequences in many files.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## RSpec\n\nThere are several testing frameworks for developing web applications with Rails, but we'll focus on [RSpec](http://rspec.info/) because it is the canonical framework, and thus the most likely framework you will encounter as a professional Rails developer.\n\nAdd the `rspec-rails` gem to your Gemfile:\n\n```ruby(Gemfile)\n source 'https://rubygems.org'\n\n # Bundle edge Rails instead: gem 'rails', github: 'rails/rails'\n gem 'rails', '4.2.5'\n\n group :production do\n   gem 'pg'\n   gem 'rails_12factor'\n end\n\n group :development do\n   gem 'sqlite3'\n end\n\n+group :development, :test do\n+  gem 'rspec-rails', '~> 3.0'\n+end\n\n # Use SCSS for stylesheets\n gem 'sass-rails', '~> 5.0'\n # Use Uglifier as compressor for JavaScript assets\n gem 'uglifier', '>= 1.3.0'\n # Use CoffeeScript for .coffee assets and views\n gem 'coffee-rails', '~> 4.1.0'\n # Use jquery as the JavaScript library\n gem 'jquery-rails'\n # Turbolinks makes following links in your web application faster. Read more: https://github.com/rails/turbolinks\n gem 'turbolinks'\n```\n\n> We added `rspec-rails` to the `:development` and `:test` groups because we want its tasks and generators to be available in both environments. We specified a version (`~> 3.0`) to maintain predictable behavior despite new RSpec releases.\n\nRun `bundle` from the command line to update your application with the installation of RSpec. Use the RSpec generator to configure Bloccit for testing:\n\n```bash(Terminal)\n$ rails generate rspec:install\n      create  .rspec\n      create  spec\n      create  spec/spec_helper.rb\n      create  spec/rails_helper.rb\n```\n\nThis generator creates a spec directory where we will write our tests.\n\n> RSpec will now automatically add test files for our models and controllers when we run `rails generate model...` or `rails generate controller...`.\n\n## The Test Database\n\nTests should be run in isolation because they can alter data stored in a database. That is, if we were to run tests in a Production environment, the tests could alter _production_ data - that would be a very bad thing to do. Running tests in isolation is somewhat standard behavior for web development in general, so by default Rails designates a separate database for testing.\n\nThe test database is _completely empty_ before you run your specs. Therefore, a spec must create the necessary data to test functionality. When the test is complete, the data is destroyed.\n\n> The Test database is isolated from the Development and Production databases. RSpec empties the Test database before running each spec. **Each test must create the data it needs.**\n\n## Test-Driven Development\n\nTest-Driven Development is the process of writing tests _before_ writing production code. Writing tests first might sound illogical, but it has many advantages:\n\n* Only the production code needed to pass a test is written. This leads to a leaner and more efficient codebase because you only code what you need – nothing more and nothing less.\n* Test-Driven Development allows developers to segment problems into small and testable steps.\n* Testing early and often allows developers to catch bugs earlier, preventing more expensive problems later when the codebase is large and hard to navigate.\n* Writing tests for code that doesn't exist can produce a [flow state](http://en.wikipedia.org/wiki/Flow_%28psychology%29). Writing tests _before_ writing production code can systematize your thought process, forcing you to be more explicit about how a function or page should behave.\n\n## Red, Green, Refactor\n\nThe TDD process involves three steps:\n\n1. Write a failing test for production functionality that does not exist. (Red)\n  - Ensure that the test _actually fails_. This verifies two aspects of the test: first, it demonstrates that the new spec does not pass with the existing code you've written, saving you from writing unnecessary code; second, it precludes the possibility that your test always passes, which could be an indication of a poorly-written test.\n2. Create the production functionality such that the test passes. (Green)\n3. Refactor the production code to make it cleaner and more sustainable. With a well-written test, you can refactor production code with the confidence that you will not break the application. If you refactor your code in such a way that would break the application, your test would fail and you would know to fix the problem that caused the failure.\n\n> We call this three-step process \"Red, Green, Refactor\", because of the colored command line output of running tests.\n\n## Basic Testing Principles\n\n1. __Keep tests as low-level as possible__: Test models thoroughly (we'll learn about models soon), test controllers moderately, and test complete application flow lightly. If we know the foundation (models) of our application is solid, we can put more trust in higher functions like controller actions and application flow.\n2. __Respect object limits__: When testing an object, try not to test any other objects, even if they're related. Narrow the scope of the test to be as small and self-contained as possible.\n3. __Don't test \"how\", test \"what\"__: We want to test what a method returns, not how it returns it. The internal implementation of a method is subjective, and while we believe in idioms and programming style, it is not the test's job to assess those things - only to assess what the code returns.\n4. __Write [DRY](http://en.wikipedia.org/wiki/Don%27t_repeat_yourself) tests__: Wherever possible, avoid repetition in tests, just like production code.\n5. __Test early and often__: Tests function as our safety net, but they can't help us if we don't use them. At a minimum, we'll want to run our specs before each commit. Running tests before each commit allows us to reduce bugs proactively before we add them to the codebase.\n\n## Our First Test\n\nLet's create our first set of specs to test the `WelcomeController` actions. Generate a spec for `WelcomeController`:\n\n```bash(Terminal)\n$ rails generate rspec:controller welcome\n      create  spec/controllers/welcome_controller_spec.rb\n```\n\nThis command generates a spec file - `welcome_controller_spec.rb` - and places it in the `spec/controllers` directory. All specs will be written in the `spec` directory and are nested according to which part of the codebase they test. Open `welcome_controller_spec.rb` and add a test for the `index` action:\n\n```ruby(spec/controllers/welcome_controller_spec.rb)\n require 'rails_helper'\n\n # #1\n RSpec.describe WelcomeController, type: :controller do\n+  describe \"GET index\" do\n+    it \"renders the index template\" do\n # #2\n+      get :index\n # #3\n+      expect(response).to render_template(\"index\")\n+    end\n+  end\n end\n```\n\n- At __#1__, we describe the subject of the spec, `WelcomeController`.\n- We use `get`, at __#2__, to call the `index` method of `WelcomeController`.\n- At __#3__, we `expect` the controller's `response` to render the `index` template.\n\nRun `welcome_controller_spec.rb` to confirm that the new test passes:\n\n```bash(Terminal)\n$ rspec spec/controllers/welcome_controller_spec.rb\n.\n\nFinished in 0.0162 seconds (files took 2.75 seconds to load)\n1 example, 0 failures\n```\n\n> If you receive a message that says \"...db/schema.rb doesn't exist yet\" disregard it for now. We'll address it in a later checkpoint.\n\nLet's add a similar test for the `about` method:\n\n```ruby(spec/controllers/welcome_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe WelcomeController, type: :controller do\n   describe \"GET index\" do\n     it \"renders the index template\" do\n       get :index\n       expect(response).to render_template(\"index\")\n     end\n   end\n+\n+  describe \"GET about\" do\n+    it \"renders the about template\" do\n+      get :about\n+      expect(response).to render_template(\"about\")\n+    end\n+  end  \nend\n```\n\nRun the spec again:\n\n```bash(Terminal)\n$ rspec spec/controllers/welcome_controller_spec.rb\n..\n\nFinished in 0.0199 seconds (files took 2.96 seconds to load)\n2 examples, 0 failures\n```\n\nCongratulations, your first two tests are a complete success! You'll find that seeing green results from your tests can be very satisfying and therapeutic.\n\nThe following video demonstrates the principles of TDD in more detail:\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/a2xe9743ca\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [RSpec](http://rspec.info/) | RSpec is a test framework written in and for Ruby. |\n| [Rails Test Database](http://guides.rubyonrails.org/testing.html#the-test-environment) | Rails' dedicated test database allows developers to initiate and interact with test data in isolation so that production data is not compromised. |\n| [Test-Driven Development](http://en.wikipedia.org/wiki/Test-driven_development) | Test-Driven Development (TDD) is a software development process where test code is written prior to production code. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nCreate an FAQ page using TDD, do not use `rails generate`, instead, create the necessary files manually:\n\n1. Add a test to `welcome_controller_spec.rb` to test the `faq` action\n2. Run test to see it fail. If you don't see a test fail in the expected way, it's hard to trust that it is testing what you intended.\n3. Add the FAQ route to `routes.rb`\n4. Run test again. You should see a new failure.\n5. Add an `faq` action to `WelcomeController`\n6. Run test again.\n7. Create `app/views/welcome/faq.html.erb`\n8. Run `welcome_controller_spec.rb` to confirm the new test passes\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/m6tf4nykvk?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Testing Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>13, "checkpoint_type"=>"normal", "position"=>13, "points"=>1, "ref"=>"fb8922ac-73fb-446f-8028-55cd092364c6|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2109", "assessment"=>nil}, {"id"=>2110, "name"=>"Rails: HTML and CSS", "summary"=>"HTML and CSS: common HTML tags and CSS", "body"=>"<!-- { ids:[2110], name:'Rails: HTML and CSS', summary:'HTML and CSS: common HTML tags and CSS' } -->\n![Taylor Swift Style](https://bloc-global-assets.s3.amazonaws.com/images-rails/hmtl-and-css/ts-style.png)\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Layouts and Rendering in Rails](http://guides.rubyonrails.org/layouts_and_rendering.html)\n</mentor-checkpoint-note>\n\n> “We never go out of style.”\n>\n> — Taylor Swift\n\n## Overview and Purpose\n\nIn this checkpoint you'll add HTML and CSS to stylize your application.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Incorporate HTML within a Rails application.\n- Use CSS selectors within your Rails application.\n- Install a CSS framework from a gem, such as Bootstrap.\n\n## Structure and Style\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/rs1jc9hmbs\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nThe two basic building blocks of web development are HTML (Hypertext Markup Language) and CSS (Cascading Style Sheets). They provide the structure (HTML) and the style (CSS) for all web pages.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## HTML\n\n![header-links](https://bloc-global-assets.s3.amazonaws.com/images-rails/hmtl-and-css/header-links.gif)\n\nHTML is code that a browser can interpret and display as a web page. HTML by itself is not dynamic, but when used in conjunction with a language like Ruby and a framework like Rails, it can be _rendered_ dynamically. Based on the type of request made by a user, an app will respond with different HTML.\n\n### HTML, Ruby, and `application.html.erb`\n\nThe __index__ and __about__ views have an `.html.erb` file extension. This file extension allows us to use HTML and Ruby (ERB stands for \"embedded Ruby\") in the same file. By integrating Ruby code with HTML, we can dynamically change the behavior of static HTML code, based on user input.\n\nNearly every view in a Rails application will have some unique HTML and Ruby code, but there is also common code that needs to be included in _all views_. Rather than repeating the same code in every view, we use `application.html.erb`. Each view (like __index__ and __about__) is called from, and rendered inside, `application.html.erb`. In this way, you can think of `application.html.erb` as a container file that has HTML and Ruby code needed to run every view in a Rails app.\n\nTo help you understand the rendering process in `application.html.erb`, consider the following actions:\n\n1. A user requests a view\n2. The controller corresponding to the requested view invokes `application.html.erb`\n3. `application.html.erb` inserts the appropriate view using `yield`\n4. The complete web page is rendered and returned to the user\n\n`yield` is used to invoke a block, which renders a given view inside the `application.html.erb` container. Code between `<%` and `%>` is interpreted as Ruby. If the `<% %>` contains an `=`, such as `<%= %>`, the result of the Ruby code is printed to the screen (i.e. rendered as HTML). If there is no `=` (only `<% %>`) then the Ruby code will be _executed_ but not printed.\n\nModify the `application.html.erb` file to include additional HTML and Ruby that we need in every view in Bloccit:\n\n```erb(app/views/layouts/application.html.erb)\n <!DOCTYPE html>\n <html>\n <head>\n   <title>Bloccit</title>\n   <%= stylesheet_link_tag    \"application\", media: \"all\" %>\n   <%= javascript_include_tag \"application\" %>\n   <%= csrf_meta_tags %>\n </head>\n <body>\n+  <ul>\n+     <li><%= link_to \"Home\", welcome_index_path %></li>\n+     <li><%= link_to \"About\", welcome_about_path %></li>\n+  </ul>\n\n   <%= yield %>\n\n </body>\n </html>\n```\n\nThe `<ul>` and `<li>` tags render content as bulleted lists; ([`ul`](http://www.w3schools.com/tags/tag_ul.asp)) stands for \"unordered list\"). Inside of the [`<li>`](http://www.w3schools.com/tags/tag_li.asp) (list item) tags, you called Rails' `link_to` method. `link_to` is a helper method available in views, and returns a valid HTML hyperlink (called an [anchor tag](http://www.w3schools.com/tags/tag_a.asp)). For example:\n\n```erb\n<%= link_to \"Home\", welcome_index_path %>\n```\n\nWill render the following HTML:\n\n```erb\n<a href=\"/welcome/index\">Home</a>\n```\n\n### Rails Helper Methods\n\n`link_to` is a Rails helper method that returns a string of HTML code. `link_to` takes two arguments, a string (`\"Home\"`) which will be the display name of the hyperlink, and a path (`welcome_index_path`). `welcome_index_path` is a Rails method, generated by the `routes` file. Type `rake routes` on your command line again, and you'll see that the route name in the first column is `welcome_index`. When you add `_path` to the route name, it's recognized as a helper method that returns `\"/welcome/index\"`.\n\n> We could have typed `link_to \"Home\", \"/welcome/index\"` instead. The resulting link would have been identical, but Rails helpers are generally easier to use, and idiomatically correct.\n\nStart the Rails server and make sure that you are directed to the correct pages when you click the \"Home\" and \"About\" links.\n\n```bash(Terminal)\n$ rails s\n```\n\n> Rather than starting and stopping your server frequently, you can open multiple tabs in your terminal. You can leave one open for Git and Rails commands and one for the Rails server. Remember, if you change a route or a config file, or add a new Ruby gem, you'll need to restart your server. For all other changes - like changes to controller, view, or model files, a restart is _not_ necessary.\n\n\n## CSS Selectors in Rails\n\nLet's use CSS to modify the font color of `<h1>` tags :\n\n```scss(app/assets/stylesheets/welcome.scss)\n ...\n+h1 {\n+  color: red;\n+}\n```\n\nView the __index__ and __about__ pages. The content between the `<h1>` tags should be red now. There are a few important things to note about the code above:\n\n1. The CSS we added was in the `welcome.scss` file. When we ran `rails generate controller`, `welcome.scss` was created. By Rails convention, each controller has a corresponding stylesheet and view.\n2. Similar to the `.html.erb` extension, the `.scss` extension provides us with some additional syntax options (known as [Sass](http://sass-lang.com/)) to enhance default CSS capabilities. Sass is not a core part of this program, but you'll have a chance to experiment with it in the projects phase with your mentor, if you choose to do so.\n3. We wrote a CSS _selector_ and _declaration_. The selector, `h1`, specifies which element to modify. The declaration, composed of a _property_ (`color`) and _value_ (`red`), specifies how to modify it. We turned all `<h1>` tags red by using the `h1 { }` selector.\n\n### CSS Frameworks and Bootstrap\n\nWe've added some simple styles above, but we have a long way to go in making Bloccit look presentable. While you could write comprehensive style sheets from scratch, it's much more efficient to use a CSS framework. A CSS framework comes with many different style and position classes that you can use directly or customize further.\n\nOne of the most popular CSS frameworks is [Bootstrap](http://getbootstrap.com/), which we'll use for Bloccit. Bootstrap also provides layouts, forms, buttons, icons, Javascript functions, and more. Let's start by installing bootstrap and using a few basic style classes:\n\n1. Stop the Rails server, open `Gemfile` and add the [bootstrap-sass](https://github.com/twbs/bootstrap-sass) gem at the bottom of the `Gemfile` (make sure it is **outside** of a `group`):\n\n  ```ruby(Gemfile)\n   ...\n  +gem 'bootstrap-sass'\n  ```\n2. Run `bundle install` to install the new gem.\n3. Rename `application.css` to `application.scss`:\n\n  ```bash(Terminal)\n  $ mv app/assets/stylesheets/application.css app/assets/stylesheets/application.scss\n  ```\n4. Add the following lines to the bottom of `application.scss`, to integrate the newly installed Bootstrap with our application:\n\n  ```scss(app/assets/stylesheets/application.scss)\n  +@import \"bootstrap-sprockets\";\n  +@import \"bootstrap\";\n  ```\n5. Include the Bootstrap file in `app/assets/javascripts/application.js`:\n\n```js(app/assets/javascripts/application.js)\n //= require jquery\n //= require jquery_ujs\n //= require turbolinks\n+//= require bootstrap\n //= require_tree .\n```\n\nTo use Bootstrap's styles, add some of its layout classes to our container HTML:\n\n```erb(app/views/layouts/application.html.erb)\n <!DOCTYPE html>\n <html>\n <head>\n   <title>Bloccit</title>\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n   <%= stylesheet_link_tag    \"application\", media: \"all\" %>\n   <%= javascript_include_tag \"application\" %>\n   <%= csrf_meta_tags %>\n </head>\n <body>\n-  <ul>\n+  <div class=\"container\">\n+    <ul class=\"nav nav-tabs\">\n       <li><%= link_to \"Bloccit\", welcome_index_path %></li>\n       <li><%= link_to \"About\", welcome_about_path %></li>\n     </ul>\n\n     <%= yield %>\n+  </div>\n\n </body>\n </html>\n```\n\nThe \"viewport meta\" tag added inside the `<head>` with a `content` attribute value of `width=device-width, initial-scale=1` instructs browsers on small, high-pixel density screens (such as retina iPhones) to display our pages at a regular, readable size. Without this tag, our pages won't scale properly.\n\n[`container`](http://getbootstrap.com/css/#overview-type-links), [`nav`](http://getbootstrap.com/components/#nav-tabs), and [`nav-tabs`](http://getbootstrap.com/components/#nav-tabs) are classes provided by Bootstrap. By assigning these classes to HTML elements like `<div>` and `<ul>`, you are styling them with default Bootstrap properties and values.\n\nRemove the CSS rules you added to `welcome.scss` as well as the HTML changes you made in the `index` view (leaving the two `@import` lines). They were for demonstration only.\n\nRestart the Rails server and observe the changes.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Deploy to Heroku with `git push heroku master`.", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nUse CSS and HTML to create a button in your `about.html.erb` page that links to one of your social media accounts:\n\n1. Read about [CSS positioning](http://alistapart.com/article/css-positioning-101) and the [Box Model](http://www.addedbytes.com/articles/for-beginners/the-box-model-for-beginners/) and use what you learn to center the text inside of the button.\n2. Create a CSS class in `welcome.scss` called `.social-btn` and use the attributes you read about to shape and position it. Attributes like display, height, width, background, border, color, text-align and font will help you create a basic button.\n3. Read our resource on Chrome's [Web Inspector](https://www.bloc.io/resources/web-inspector). Start Rails Server and experiment with paddings, margins, and other stylings in the inspector.\n4. Use the `ActionView` helper method [`link_to`](http://guides.rubyonrails.org/getting_started.html#adding-links) to link your button to your favorite social media account. This link should be on the welcome __about__ view.\n\n> Hint: You can pass an external link as the URL parameter to the `link_to` method in a string:\n\n```erb\n<%= link_to \"Follow me\", \"https://www.facebook.com/trybloc\", class: \"social-btn\" %>\n```\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/eujs0yhvk5?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">HTML & CSS Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>14, "checkpoint_type"=>"normal", "position"=>14, "points"=>1, "ref"=>"b0742b9a-ae00-4442-b180-b29f53ec4d01|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2110", "assessment"=>nil}, {"id"=>2111, "name"=>"Rails: Models", "summary"=>"Models: storing Rails data in a structured interface for easy manipulation", "body"=>"<!-- { ids:[2111], name:'Rails: Models', summary:'Models: storing Rails data in a structured interface for easy manipulation' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [ActiveRecord Basics](http://guides.rubyonrails.org/active_record_basics.html)\n* [Migration Syntax Gist](https://gist.github.com/gadtfly/5a154f560b5f9233c8fb)\n</mentor-checkpoint-note>\n\n![Derek Zoolander](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-models/banner.jpg)\n\n> People come up to me all the time and say 'you should be a model', or 'you look just like a model,' or 'maybe you should try to be a man who models.' And I always have to laugh because I'm so good looking. Of course I'm a model.\n>\n> — [Derek Zoolander](http://en.wikipedia.org/wiki/Zoolander)\n\n## Overview and Purpose\n\nIn this checkpoint you'll learn about models in a Ruby on Rails application.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Create a model in a Rails application.\n- Define `ActiveRecord` objects.\n- Explain what `ActiveRecord` migrations are.\n- Explain what a foreign key is on a table.\n\n## Models\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/wf4d31ja8p\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nBloccit users will need to be able to _post_ information and _comment_ on those posts. Posts and comments will need to persist; that is, they'll need to be saved to a database so users can interact with them across sessions. When we need to persist data, we should immediately think about data models. Data models, or more simply \"models\", are the \"M\" in MVC architecture. Recall the diagram of MVC architecture to consider a model's place with respect to controllers and views:\n\n<center>![MVC](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-models/MVC.png)</center>\n\nModels are a programmatic representation of a table in a database. Models are also Ruby classes, similar to the classes we programmed earlier in the roadmap. In other words, the `Post` model will handle data pertaining to an instance of the `Post` class.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## `Post`\n\nThe first model we'll create is `Post`. Users should have the ability to submit posts to Bloccit with titles and descriptions, so the `Post` model and its corresponding database table will need two attributes: `title` and `body`.\n\n> An attribute is synonomous with database table column. You can also imagine a database table as a tab on a spreadsheet. Attributes like \"title\" and \"body\" would be column headers on that spreadsheet tab.\n\nUse a generator to create `Post` and its corresponding spec:\n\n```bash(Terminal)\n$ rails generate model Post title:string body:text\n      invoke  active_record\n   identical    db/migrate/20150606010447_create_posts.rb\n   identical    app/models/post.rb\n      invoke    rspec\n      create      spec/models/post_spec.rb\n```\n\nWe used a generator to create a model named \"Post\" with two attributes: `title` and `body`.\n- The `title` attribute is a string data type, because we expect it to be short. That is, we would probably not want to allow post titles with hundreds of characters.  \n- The `body` attribute is a text data type, because we expect a post's body to be verbose. It's possible that a user will need the ability to write hundreds of characters to provide context for a post.\n\nThe programmatic representation of the Post model was created by the generator above, in several files:\n- `post.rb` is a Ruby class which represents the Post model. This class will handle the logic and define the behavior for posts.\n- `post_spec.rb` is the test spec for the Post class.\n- `20150606010447_create_posts.rb` is the database migration file. A migration file defines the action taken on the database for a given model. An application will have many migration files, and comprehensively they serve as a set of instructions for building a database. We'll explore migration files in detail later.\n\nUse `cat` to see the contents of the spec file:\n\n```bash(Terminal)\n$ cat spec/models/post_spec.rb\n require 'rails_helper'\n\n RSpec.describe Post, type: :model do\n   pending \"add some examples to (or delete) \#{__FILE__}\"\n end\n```\n\nThis is the template for a simple spec. We'll use TDD to define the behavior for `Post`. Add the following tests:\n\n```ruby(spec/models/post_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Post, type: :model do\n-  pending \"add some examples to (or delete) \#{__FILE__}\"\n # #1\n+  let(:post) { Post.create!(title: \"New Post Title\", body: \"New Post Body\") }\n+\n # #2\n+  describe \"attributes\" do\n+    it \"has title and body attributes\" do\n+      expect(post).to have_attributes(title: \"New Post Title\", body: \"New Post Body\")\n+    end\n+  end\n end\n```\n\n- At **#1**, using the `let` method, we create a new instance of the Post class, and name it `post`. [let](https://www.relishapp.com/rspec/rspec-core/v/2-5/docs/helper-methods/let-and-let) dynamically defines a method (in this case, `post`), and, upon first call *within a spec* (the `it` block), computes and stores the returned value.\n\n- At **#2**, we test whether `post` has attributes named `title` and `body`. This tests whether `post` will return a non-nil value when `post.title` and `post.body` is called.\n\nUse `cat` to see the contents of `post.rb`, which was also created with a basic template:\n\n```bash(Terminal)\n$ cat app/models/post.rb\nclass Post < ActiveRecord::Base\nend\n```\n\nWhen the generator created this template, it made the Post class **inherit** from [ActiveRecord::Base](http://api.rubyonrails.org/classes/ActiveRecord/Base.html). Because we used a model generator, Rails assumed that we wanted our class to be used as a **model**. ActiveRecord::Base essentially handles interaction with the database and allows us to persist data through our class. Run the spec:\n\n```bash(Terminal)\n$ rspec spec/models/post_spec.rb\n```\n\nYou will see a verbose error, but focus on the first line:\n\n```bash(Terminal)\nschema.rb doesn't exist yet. Run `rake db:migrate` to create it, then try again.\n```\n\nRSpec reported that `schema.rb` doesn't exist. `schema.rb` is a file located in the `db` directory that represents an application's complete database architecture; the tables it uses and how those tables relate to each other. We don't have `schema.rb` because we have not yet created the database or any tables. The generator created the migration file, but we haven't executed that file yet. We'll do that now:\n\n```bash(Terminal)\n$ rake db:migrate\n== 20150606010447 CreatePosts: migrating ======================================\n-- create_table(:posts)\n   -> 0.0016s\n== 20150606010447 CreatePosts: migrated (0.0017s) =============================\n```\n\n> Rake is a Ruby build command. It allows us to execute administrative tasks for our application. To see a complete list of rake tasks, type `rake --tasks` from the command line.\n\n`rake db:migrate` created a new table named \"posts\". Let's review the migration file, which is the only file in the `db/migrate` directory (its name begins with a timestamp, and so will differ from the one below):\n\n```ruby(db/migrate/20150606010447_create_posts.rb)\n$ cat db/migrate/20150606010447_create_posts.rb\nclass CreatePosts < ActiveRecord::Migration\n  def change\n    create_table :posts do |t|\n      t.string :title\n      t.text :body\n\n      t.timestamps null: false\n    end\n  end\nend\n```\n\nThe migration is written in Ruby. The migration file is actually a class named `CreatePosts`. When we run the migration, the `change` method calls the `create_table` method. `create_table` takes a block that specifies the attributes we want our table to possess.\n\n> Rails automatically adds timestamp attributes named `created_at` and `updated_at` to the migration. We'll discuss these attributes in depth later.\n\nRun the tests in `post_spec.rb` again:\n\n```bash(Terminal)\n$ rspec spec/models/post_spec.rb\n..\n\nFinished in 0.00817 seconds (files took 1.67 seconds to load)\n2 examples, 0 failures\n```\n\nOur tests passed, so we know that the Post model has the attributes we expected.\n\n## `Comment`\n\nThe `Comment` model needs one attribute - `body` - and a reference to `Post`. Let's create the spec, model, and migration files with the model generator:\n\n```bash(Terminal)\n$ rails generate model Comment body:text post:references\n      invoke  active_record\n      create    db/migrate/20150608215948_create_comments.rb\n      create    app/models/comment.rb\n      invoke    rspec\n      create      spec/models/comment_spec.rb\n```\n\nOpen `comment_spec.rb` and add the following test:\n\n```ruby(spec/models/comment_spec.rb)\n RSpec.describe Comment do\n-  pending \"add some examples to (or delete) \#{__FILE__}\"\n+  let(:post) { Post.create!(title: \"New Post Title\", body: \"New Post Body\") }\n+  let(:comment) { Comment.create!(body: 'Comment Body', post: post) }\n+\n+  describe \"attributes\" do\n+    it \"has a body attribute\" do\n+      expect(comment).to have_attributes(body: \"Comment Body\")\n+    end\n+  end\n end\n```\n\nReview `comment.rb`:\n\n```ruby(app/models/comment.rb)\n$ cat app/models/comment.rb\nclass Comment < ActiveRecord::Base\n  belongs_to :post\nend\n```\n\nWe say that _\"a comment belongs to a post\"_ or, conversely, _\"a post has many comments.\"_ Both of these phrases relate to a data concept known as \"relationships\" or \"associations.\"\n\nEach model instance in a Rails app automatically gets an `id` attribute to uniquely identify it. Each `post` will have a unique `id`, as will each `comment`. To make a comment belong to a post, we need to provide the post `id` to the `comment`. This is done using a **foreign key**.\n\nA foreign key is the `id` of one model, used as an attribute in another model, in order to look up the relationship. In the Post/Comment example, this means that the `Comment` model needs to have an attribute named `post_id`. The `post_id` attribute exists so that a `comment` can belong to a `post` (the post specified by its `post_id`). To allow many comments to belong to one `post`, you'd have multiple comment records with the same `post_id`. The diagram below illustrates how the post's `id` attribute relates to a comment's `post_id` attribute:\n\n<center>![Foreign Key Relationship](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-models/foreign_key.png)</center>\n\n> Rails is an opinionated framework that enforces many conventions by design. The foreign key naming convention of `post_id` was enforced when you ran the model generator. The `post_id` attribute was automatically created in the `Comment` model when you generated it with the `post:references` argument.\n\nReview the `create_comments` migration in the `db/migrate` directory and add a foreign key:\n\n```ruby(db/migrate/20140624203804_create_comments.rb)\n class CreateComments < ActiveRecord::Migration\n   def change\n     create_table :comments do |t|\n       t.text :body\n # #3\n       t.references :post, index: true, foreign_key: true\n\n       t.timestamps null: false\n     end\n   end\n end\n```\n\nAt **#3**, the `index` on the references line tells the database to index the `post_id` column, so it can be searched efficiently. This is always a good idea for foreign keys, and is added automatically when you generate with the `references` argument.\n\nIn reviewing the comment and post migrations, we see that the `create_table` method takes a `Symbol` argument which represents the table name, and a block argument that contains the details to be added to the table. This is one of the many reasons why Rails developers can code so efficiently - rather than creating the tables manually, and making sure all the attributes are set properly, we can rely on Rails' model generator to handle this mundane work.\n\nSince we have a new migration file, we shall once again run the migrations, adding the comments table to the database:\n\n```bash(Terminal)\n$ rake db:migrate\n== 20150608215948 CreateComments: migrating ===================================\n-- create_table(:comments)\n   -> 0.0021s\n== 20150608215948 CreateComments: migrated (0.0022s) ==========================\n```\n\nThe results above tell us that the tables and attributes have been created successfully.\n\nRun `comment_spec.rb`:\n\n```bash(Terminal)\n$ rspec spec/models/comment_spec.rb\n.\n\nFinished in 0.01325 seconds (files took 1.78 seconds to load)\n1 example, 0 failures\n```\n\nGit does not create empty directories by default. As a consequence, Rails automatically generates a blank `.keep` file in important directories that start as empty in a new application. Our `app/models` directory has one such file. Now that we've added two files to `app/models`, we should remove it:\n\n```bash(Terminal)\n$ rm app/models/.keep\n```\n\nYou've successfully created two database tables and associated them using a foreign key. In the next section we'll update the models to reflect the attributes and associations we just created in the console.\n\n## Updating `Post`\n\nRemember that when we use a model generator, the resulting model inherits from a class named `ActiveRecord::Base` by default. This inheritance pattern provides methods that the model will need in order to interact with tables in the database. Our comment class already relates to our post class, thanks to the model generator, but the post class does not yet relate to the comment class. Let's create that relation:\n\n```ruby(app/models/post.rb)\n class Post < ActiveRecord::Base\n+  has_many :comments\n end\n```\n\nThe `has_many` method allows a post instance to have many comments related to it, and also provides methods that allow us to retrieve comments that belong to a post.\n\n> This dynamic generation is similar to the way `attr_accessor` generates 'getter' and 'setter' methods for instance variables. We'll explore the precise methods created by `has_many` in the next checkpoint.\n\n## Visualizing the Database\n\nIt can be helpful to think about databases visually: What tables does the database have? What attributes do the tables have? How are the tables related? Here's a sample visualization for the two tables we've created in our application:\n\n<center>![comments-posts](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/24-models/comments-posts-database.png)</center>\n\nWhen we say that a comment belongs to a post, we mean that the comment stores that post's unique identifier in an attribute. The visualization makes this obvious.\n\nIn the proceeding video, we use a popular Ruby IDE, [RubyMine](https://www.jetbrains.com/ruby/), to visualize the database for demonstrative purposes only.\n\n> You do not need to download RubyMine during your Bloc course. Feel free to discuss it with your mentor and of course download it if you both feel like it will be helpful, but it is not a requirement for Bloc.\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/8stk62hgwj\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku.\n\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Active Record Models](http://guides.rubyonrails.org/active_record_basics.html) | Active Record Models are the layer responsible for representing business data and logic. They facilitate the creation and use of objects whose data requires persistent storage to the database. |\n| [Generating Models](http://guides.rubyonrails.org/command_line.html#rails-generate) | The `rails generate` command uses templates to create models, controllers, mailers, and more. When used to generate a model, it creates the Ruby class, test spec, and Active Record database migration. |\n| [Active Record Migrations](http://guides.rubyonrails.org/active_record_migrations.html) | Active Record Migrations allow you to evolve your database schema over time. They use Ruby so that you don't have to write SQL by hand. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nUsers may desire the ability to ask questions in Bloccit. The Questions model will be similar to the Posts model, but Questions should also have a `resolved` attribute that allows an administrator to mark the question as resolved.\n\n1. Create a new model named `Question`. It should have `title:string`, `body:text`, and `resolved:boolean` attributes.\n2. Create another new model named `Answer`. It should reference `Question` and have a `body` attribute.\n3. Write the specs for the `Question` and `Answer` models. The specs should ensure that the model attributes can be called as methods, as we did in the checkpoint with `Post` and `Comment` specs.\n4. Update `Question` so that it `has_many :answers`.\n5. Confirm that `Answer` `belongs_to :question`, in the Rails console.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/i8singb0k4?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Models Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>15, "checkpoint_type"=>"normal", "position"=>15, "points"=>1, "ref"=>"2bb73447-6325-4b16-aeeb-0dc843be3672|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2111", "assessment"=>nil}, {"id"=>2112, "name"=>"Rails: Object Relational Mapping", "summary"=>"ORM: translating from Ruby to SQL", "body"=>"<!-- { ids:[2112], name:'Rails: Object Relational Mapping', summary:'ORM: translating from Ruby to SQL' } -->\n![Babel Fish](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-orm/babel-fish.jpg)\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Active Record Query Interface](http://guides.rubyonrails.org/active_record_querying.html)\n</mentor-checkpoint-note>\n\n> “Meanwhile, the poor [Babel fish](http://en.wikipedia.org/wiki/List_of_races_and_species_in_The_Hitchhiker%27s_Guide_to_the_Galaxy#Babel_fish), by effectively removing all barriers to communication between different races and cultures, has caused more and bloodier wars than anything else in the history of creation.”\n>\n> — [Douglas Adams](http://en.wikiquote.org/wiki/Douglas_Adams)\n\n## Overview and Purpose\n\nIn this checkpoint you'll learn more about the concept of an ORM, Object Relational Map.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Use the Rails console to fetch data.\n- Give the definition of an ORM.\n- Discuss the benefits and pitfalls of an ORM.\n- Use `pry-rails` to interact with your Rails application.\n\n## Object Relational Mapping\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/3657zu3oh5\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nAs we learned in the last checkpoint, a model is a Ruby class that must also be represented as a database table. This implies that Rails must communicate with a database - and it does - but not without some complexity.\n\nCommunication between two systems which \"speak different languages\" is inherently complex because a translation service is required. As a Rails developer, you are essentially using two systems - Rails, which speaks Ruby, and a database, which speaks SQL.\n\nObject Relational Mapping, or ORM is similar to a translation service, in that it provides a way for Rails developers to manipulate a database using Ruby, rather than writing SQL. Rails employs an ORM library named `ActiveRecord` to provide this translation service. To explore how Rails leverages ORM, we'll experiment with the Rails console. Let's watch a video introducing SQL and the `ActiveRecord` ORM:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/xvnu5eokfs\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Rails Console\n\nThe Rails console loads our application in a shell, and provides access to Rails methods, app-specific methods, persisted data, and Ruby. To launch the console from the command line, enter:\n\n```bash(Terminal)\n$ rails c\n```\n\nAnd you should see the following message and prompt, or something very similar:\n\n```ruby(Console)\nLoading development environment (Rails 4.2.5)\n2.2.1 :001 >\n```\n\nBecause the console provides access to our application code, we can create posts and comments within the console, from the command line. Let's create a new post instance:\n\n```ruby(Console)\n> Post.create(title: \"First Post\", body: \"This is the first post in our system\")\n```\n\n> Creating a post would not be possible in IRB because posts and comments are specific to our application. Ruby (which is the only language that IRB understands) would not know what a \"Post\" is, and would throw an error.\n\nHere's what we did:\n\n- Called the `create` method on `Post`. This created a new row in the `posts` table. The `create` method is not Ruby - it's part of the `ActiveRecord` class that `Post` inherits from. The first line in our `post.rb` file - `class Post < ActiveRecord::Base` - declares this inheritance and gives `Post` access to the `create` method.\n- Passed a hash to the `create` method. The hash was comprised of two keys: `title` and `body`, and two values.\n\nEarlier we stated that Rails and the database don't speak the same language - but we just created a new database row via a Rails method, in the Rails console. This is ORM at work. The [`create` method](http://api.rubyonrails.org/classes/ActiveRecord/Persistence/ClassMethods.html) is part of the `ActiveRecord`, which is Rails' ORM library. `create` translates this: `Post.create(title: \"First Post\", body: \"This is the first post in our system\")` into SQL. We'll evaluate the resulting SQL in the next section.\n\n## SQL\n\nStructure Query Language, or SQL, is the common language for all databases. Though some database technologies employ their own flavor of SQL, all SQL flavors are similar in syntax and usage. Active Record is a robust ORM library, and translates Rails code into a specific flavor of SQL, which it detects automatically from the database. This means that we don't need to worry about the nuanced SQL flavors. Let's review the SQL that was executed when we called `create` - it was printed in our Rails console:\n\n```ruby(Console)\n   (0.1ms)  begin transaction\n # #1\n  SQL (0.8ms)  INSERT INTO \"posts\" (\"title\", \"body\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"title\", \"First Post\"], [\"body\", \"This is the first post in our system\"], [\"created_at\", \"2015-06-10 18:30:38.756344\"], [\"updated_at\", \"2015-06-10 18:30:38.756344\"]]\n # #2\n   (0.6ms)  commit transaction\n => #<Post id: 1, title: \"First Post\", body: \"This is the first post in our system\", created_at: \"2015-06-10 18:30:38\", updated_at: \"2015-06-10 18:30:38\">\n```\n\n**At #1**, we add a row to the posts table using the `INSERT INTO` SQL statement. `\"title\", \"body\", \"created_at\", \"updated_at\"`, are the column names (i.e. attributes) on the `posts` table. The list of values after `VALUES (?, ?, ?, ?)` in brackets (`[[\"title\", \"First Post\"] ... ]`) are values that correspond to the column names. The `created_at` and `updated_at` columns are default columns that Rails adds automatically, which is why we didn't need to specify them in the `create` call.\n\n**At #2**, we commit the transaction which executes `INSERT INTO`. Commit statements end a SQL transaction and make all changes permanent. A transaction is one or more SQL statements that a database treats as a single unit.\n\nWe now have one row in the posts table.\n\n## Retrieving Information\n\nIt is important to remember that a row in a table corresponds to an instance of a class. Like a class instance, a row in a database table is unique. ORM allows us to retrieve information stored in a row and map it to a class instance that we create in our application. Let's retrieve a row from the posts table and map it to an instance of the `Post` class:\n\n```ruby(Console)\n> post = Post.first\n\n  # #3\n  Post Load (0.2ms)  SELECT  \"posts\".* FROM \"posts\"  ORDER BY \"posts\".\"id\" ASC LIMIT 1\n => #<Post id: 1, title: \"First Post\", body: \"This is the first post in our system\", created_at: \"2015-06-10 18:30:38\", updated_at: \"2015-06-10 18:30:38\">\n```\n\n**At #3** `Post.first` executes a `SELECT` SQL statement and fetches the first row from the posts table. `SELECT` is used to fetch a set of records from one or more tables.\n\nAfter the first row is fetched, `ActiveRecord` converts the row's data into an instance of `Post`, or a post object. This post object is then assigned to the `post` variable. `ActiveRecord` makes this conversion from a database record to Ruby object possible.\n\nNow that our instance is assigned, print it to view its value:\n\n```ruby(Console)\n> post\n => #<Post id: 1, title: \"First Post\", body: \"This is the first post in our system\", created_at: \"2015-06-10 18:30:38\", updated_at: \"2015-06-10 18:30:38\">\n```\n\n`post` is populated by the first row of data (currently the _only_ row of data) in our posts database table.\n\nLet's add a comment to the post we retrieved:\n\n```ruby(Console)\n> post.comments.create(body: \"First comment!\")\n   (0.1ms)  begin transaction\n  SQL (0.4ms)  INSERT INTO \"comments\" (\"body\", \"post_id\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"body\", \"First comment!\"], [\"post_id\", 1], [\"created_at\", \"2015-06-10 19:50:29.881194\"], [\"updated_at\", \"2015-06-10 19:50:29.881194\"]]\n   (0.7ms)  commit transaction\n => #<Comment id: 1, body: \"First comment!\", post_id: 1, created_at: \"2015-06-10 19:50:29\", updated_at: \"2015-06-10 19:50:29\">\n```\n\nBecause we chained the method calls - `post.comments.create` - ActiveRecord interpreted this as \"create a new comment for the first post\". If we didn't specify the post to create a comment for, ActiveRecord would not have been able to update the `post_id`, which is critical because it defines the relationship between posts and comments. Inspect `post.comments`:\n\n```ruby(Console)\n> post.comments\nComment Load (2.6ms)  SELECT \"comments\".* FROM \"comments\" WHERE \"comments\".\"post_id\" = ?  [[\"post_id\", 1]]\n=> #<ActiveRecord::Associations::CollectionProxy [#<Comment id: 1, body: \"First comment!\", post_id: 1, created_at: \"2015-07-21 12:00:56\", updated_at: \"2015-07-21 12:00:56\">]>\n```\n\n`post.comments` returns an `ActiveRecord::Association` because a comment _depends_ on a given post. We'll explore associations in the next section.\n\n## `ActiveRecord` Associations\n\nWe defined the relationships between posts and comments in their respective classes, with `has_many` and `belongs_to`. These relationships are known as [associations](http://guides.rubyonrails.org/association_basics.html).\n\nThe `belongs_to :post` declaration in `Comment` generates a `post` method for each comment, giving us the ability to call `.post` on an instance of `Comment` and retrieve the associated post. The database stores this relationship, by keeping a `post_id` (foreign key) for each comment.\n\nRetrieve the first comment in the comments table, and assign it to a `comment` variable:\n\n```ruby(Console)\n> comment = Comment.first\n```\n\nFetch the post that is associated with `comment`:\n\n```ruby(Console)\n> comment.post\n  Post Load (0.4ms)  SELECT  \"posts\".* FROM \"posts\" WHERE \"posts\".\"id\" = ? LIMIT 1  [[\"id\", 1]]\n => #<Post id: 1, title: \"First Post\", body: \"This is the first post in our system\", created_at: \"2015-06-10 18:30:38\", updated_at: \"2015-06-10 18:30:38\">\n```\n\nLet's create another comment on `post`:\n\n```ruby(Console)\n> post.comments.create(body: \"Second comment!\")\n```\n\nThe `has_many :comments` declaration in `Post` is the counterpart of `belongs_to :post`. The posts table makes no reference to comments. There's no comment_id column or array of comment_ids in the posts table. Instead, this relationship is stored in the comments table exclusively. A post retrieves its associated comments by fetching all the comments with a post_id that matches the id of the post. Storing the relationship in the comments table is a database strategy to allow data to be intersected or joined in an efficient manner.\n\nNow that we have two comments associated with a single post, let's iterate over them using Ruby:\n\n```ruby(Console)\n# #4\n>  post.comments.each { |comment| p comment.body }\n# #5\n  Comment Load (0.2ms)  SELECT \"comments\".* FROM \"comments\" WHERE \"comments\".\"post_id\" = ?  [[\"post_id\", 1]]\n\"First comment!\"\n\"Second comment!\"\n => [#<Comment id: 1, body: \"First comment!\", post_id: 1, created_at: \"2015-06-10 19:50:29\", updated_at: \"2015-06-10 19:50:29\">, #<Comment id: 2, body: \"Second comment!\", post_id: 1, created_at: \"2015-06-10 22:31:36\", updated_at: \"2015-06-10 22:31:36\">]\n```\n**At #4**, the `|comment|` block argument represents an instance of `Comment` with each iteration.  We call `body` on each comment instance to retrieve the comment's body attribute from the database.\n\n**At #5**, the `SELECT` statement fetches all the comments with the given `post_id`.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Rails Console](http://guides.rubyonrails.org/command_line.html#rails-console) | Provides command line access to a Rails application and Ruby. |\n| [SQL](http://en.wikipedia.org/wiki/SQL) | SQL is a language for communicating with a relational database. |\n| [Object Relational Mapping](http://guides.rubyonrails.org/active_record_basics.html#object-relational-mapping) | Object-Relational Mapping (ORM) is a design pattern that connects the objects of an application to tables in a database. Using ORM, the properties and relationships of objects in an application can be connected to a database without the need to write SQL statements. |\n| [`ActiveRecord`](http://guides.rubyonrails.org/active_record_basics.html) | `ActiveRecord` is Rails' ORM library. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nBy default, the Rails console uses the standard IRB shell, but it can also use alternative shells. One alternative is [Pry](https://github.com/pry/pry), which adds many extra features that aren't available using the IRB shell.\n\n### Install Pry\n1. Open Bloccit's **Gemfile** in your editor.\n2. Add `gem pry-rails` to the **:development** group and save (see [pry-rails installation](https://github.com/rweng/pry-rails#installation)).\n3. Run `$ bundle` to install it.\n4. Run `$ rails c` to open the rails console. *Now that the Pry shell is installed, it will used by default.*\n5. Run `> help` to see a list of the commands Pry provides. Some of the most useful are <a href=\"#pry-commands\">listed below</a>.\n\n### Test out Pry's capabilities\n1. Run `> nesting` (pry command) and analyze it's output\n2. Run `> post = Post.first` to assign the first post to a variable.\n3. Run `> cd post` which \"changes directories\" into your post object.\n4. Run `> nesting` again and analyze it's output.  (the cd command above just changed the context of **self** to the post object)\n5. Run `self.to_s` to show that **self** is a **Post**.\n6. Run `self.title = 'some new title'` to change the value of the posts's title.\n7. Run `self.body = 'some new body'` to change the value of the post's body.\n8. Run `self.changes` to show pending changes to the post.\n9. Run `self.save!` to save the changes to the database.\n\nCopy the console output of items 4-8 to a [Gist](https://gist.github.com/) named `bloccit-rails-console-assignment` and submit the Gist link to your mentor.\n\n| **<a name=\"pry-commands\"></a>Pry Command** | **Description** |\n| :-- | :-- |\n| `help` | Show a list of commands or information about a specific command. |\n| `cd` | Move into a new context (object or scope). |\n| `ls` | Show the list of vars and methods in the current scope. |\n| `nesting` | Show nesting information. |\n| `reset` | Reset the REPL to a clean state. |\n| `whereami` | Show code surrounding the current context. |\n| `wtf?` | Show the backtrace of the most recent exception. |\n| `exit` | Pop the previous binding. |\n| `exit-program` | Exit Pry unconditionally. |\n| `recognize-path` | See which route matches a URL. |\n| `show-models` | Show all models. |\n| `show-routes` | Show all routes in match order. |\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/vj5cm7x9pf?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">ORM Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>16, "checkpoint_type"=>"normal", "position"=>16, "points"=>1, "ref"=>"811a1724-3f8f-45d1-8a85-aedb291f0d18|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2112", "assessment"=>nil}, {"id"=>2113, "name"=>"Rails: Seeding Data", "summary"=>"Seeding Data: creating fake data for use in development", "body"=>"<!-- { ids:[2113], name:'Rails: Seeding Data', summary:'Seeding Data: creating fake data for use in development' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Railscasts: Seed Data](http://railscasts.com/episodes/179-seed-data?autoplay=true)\n</mentor-checkpoint-note>\n\n<center>\n  ![Seed](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-seeds/seeds.jpg)\n</center>\n\n> “If you want to grow a giant redwood, you need to make sure the seeds are ok, nurture the sapling, and work out what might potentially stop it from growing all the way along. Anything that breaks it at any point stops that growth.”\n>\n> — [Elon Musk](http://en.wikipedia.org/wiki/Elon_Musk)\n\n## Overview and Purpose\n\nIn this checkpoint you'll learn how to populate your application with data for testing purposes.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Seed a Ruby on Rails application with test data.\n\n## Seed Data\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/x3dz68yq84\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWe've added database records manually through the Rails Console, but in a development environment it's helpful to have lots of data to work with. It would be monotonous to add many records manually, so we'll programmatically add fake data to Bloccit.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Generating Seed Data\n\nOpen `db/seeds.rb` and remove the commented lines. `seeds.rb` is a script (a small utility program) we can run to seed the database with test data. Add the following code:\n\n```ruby(db/seeds.rb)\n+require 'random_data'\n\n+# Create Posts\n+50.times do\n # #1\n+  Post.create!(\n # #2\n+    title:  RandomData.random_sentence,\n+    body:   RandomData.random_paragraph\n+  )\n+end\n+posts = Post.all\n+\n+# Create Comments\n # #3\n+100.times do\n+  Comment.create!(\n # #4\n+    post: posts.sample,\n+    body: RandomData.random_paragraph\n+  )\n+end\n+\n+puts \"Seed finished\"\n+puts \"\#{Post.count} posts created\"\n+puts \"\#{Comment.count} comments created\"\n```\n\n**At #1**, we use `create!` with a _bang_ (`!`). Adding a `!` instructs the method to raise an error if there's a problem with the data we're seeding.  Using create without a _bang_ could fail without warning, causing the error to surface later.\n\n**At #2**, we use methods from a class that does not exist yet, `RandomData`, that will create random strings for `title` and `body`. Writing code for classes and methods that don't exist is known as \"wishful coding\" and can increase productivity because it allows you to stay focused on one problem at a time.\n\n**At #3**, we call [`times`](http://www.ruby-doc.org/core-2.1.1/Integer.html#method-i-times) on an `Integer` (a number object). This will run a given block the specified number of times, which is 100 in this case. The end result of calling `times` is similar to that of a loop, but in this use-case, it is easier to read and thus more idiomatic.\n\n**At #4**, we call [`sample`](http://www.ruby-doc.org/core-2.1.1/Array.html#method-i-sample) on the array returned by `Post.all`, in order to pick a random post to associate each comment with. `sample` returns a random element from the array every time it's called.\n\n## `RandomData`\n\n`RandomData` does not exist, so let's create it. Create a file named `random_data.rb` in the `lib` (short for \"library\") directory:\n\n```bash(Terminal)\n$ touch lib/random_data.rb\n```\n\nOpen `random_data.rb` and add the following code:\n\n```Ruby\n # #5\n+module RandomData\n # #6\n+  def self.random_paragraph\n+    sentences = []\n+    rand(4..6).times do\n+      sentences << random_sentence\n+    end\n+\n+    sentences.join(\" \")\n+  end\n+\n # #7\n+  def self.random_sentence\n+    strings = []\n+    rand(3..8).times do\n+      strings << random_word\n+    end\n+\n+    sentence = strings.join(\" \")\n+    sentence.capitalize << \".\"\n+  end\n+\n # #8\n+  def self.random_word\n+    letters = ('a'..'z').to_a\n+    letters.shuffle!\n+    letters[0,rand(3..8)].join\n+  end\n+end\n```\n\nAt __#5__, we define `RandomData` as a module because it is a standalone library with no dependencies or inheritance requirements. Modules help keep common functions organized and reusable throughout our application. Unlike classes, we can't instantiate or inherit from modules. Instead we use them as [mixins](https://en.wikipedia.org/wiki/Mixin) to add functions to multiple classes.\n\nAt __#6__, we define `random_paragraph`. We set `sentences` to an array. We create four to six random sentences and append them to `sentences`. We call `join` on `sentences` to combine each sentence in the array, passing a space to separate each sentence. `join` combines each sentence into a full paragraph (as a string).\n\nAt __#7__, we follow the same pattern as we did in #6 to create a sentence with a random number of words. After we generate a sentence, we call `capitalize` on it and append a period. `capitalize` returns a copy of `sentence` with the first character converted to uppercase and the remainder of the sentence converted to lowercase.\n\nAt __#8__, we define `random_word`. We set `letters` to an array of the letters `a` through `z` using `to_a`. We call `shuffle!` on `letters` _in place_. If we were to call `shuffle` without the _bang_ (`!`), then `shuffle` would return an array rather than shuffle in place. We `join` the zeroth through nth item in `letters`. The nth item is the result of `rand(3..8)` which returns a random number greater than or equal to three and less than eight.\n\nLet's make `random_data.rb` accessible to all our of specs going forward. Adding it to `application.rb` autoloads any references to the `lib` directory used by our code:\n\n```ruby(config/application.rb\n ...\n     # Do not swallow errors in after_commit/after_rollback callbacks.\n     config.active_record.raise_in_transactional_callbacks = true\n+    config.autoload_paths << File.join(config.root, \"lib\")\n   end\n end\n```\n\nDrop the database and run `seeds.rb` by typing:\n\n```bash(Terminal)\n$ rake db:reset\nSeed finished\n50 posts created\n100 comments created\n```\n\nOpen the Rails console to randomly check some results:\n\n```ruby(Console)\n$ rails c\n\n> p = Post.find 3\n```\n\nWe called another `ActiveRecord` class method, `find`, on `Post` and passed it a value which represents a unique post id. `find` will return the instance (row) of post data which corresponds to an id of 3. You should see an output with a funny looking `title` and `body` as that's what  `RandomData` created in `seeds.rb`. Run the following methods to view how many comments the given post has:\n\n```ruby(Console)\n> p.comments.count\n```\n\n`count` is an `ActiveRecord` method that can be called on an `ActiveRecord` relation. `p.comments` returns an `ActiveRecord` relation, so `count` is a valid method to call on it.\n\nType `exit` to exit the console.\n\nIn the following video, we demonstrate seeding:\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/hwgk14se88\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Modules](https://en.wikipedia.org/wiki/Modular_programming) | A module is independent code that contains everything necessary to implement only one feature. |\n| [Seeding Data](http://guides.rubyonrails.org/active_record_migrations.html#migrations-and-seed-data) | Rails' seeding feature allows the database to be populated with initial data based on the contents of `seeds.rb`. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nBy running `rake db:seed`, new data is added to your database. Occasionally you'll seed unique data using `seeds.rb` without erasing or duplicating existing data. This concept is called [idempotence](http://en.wikipedia.org/wiki/Idempotence).\n\nIdempotent code can be run many times or one time with identical results. For example, `i = 4` is idempotent but `i = i + 2` is not.\n\nWhen developing web apps, it's important to think about what code is idempotent because code might get run more than once, like when a user refreshes a page.\n\n1. Add a post with a unique **title** and **body** to `seeds.rb`. Before creating a unique post, check whether it already exists in the database using the **title** and **body**. Only seed the post if it doesn't already exist. Use the [`find_or_create_by`](http://apidock.com/rails/v4.2.1/ActiveRecord/Relation/find_or_create_by) method.\n2. Run `rake db:seed` a couple of times, confirm that your unique post has only been seeded once using the Rails console.\n3. Repeat steps one and two to create a comment with a unique **body**. Your comment should use the unique post you created as its post reference. Using the Rails console, confirm that your unique comment is also only seeded once after running `rake db:seed` several times.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/xteele4hvb?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Seeding Data Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>17, "checkpoint_type"=>"normal", "position"=>17, "points"=>1, "ref"=>"2793382b-d5a7-4a6b-bab7-411f2eba69c3|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2113", "assessment"=>nil}, {"id"=>2318, "name"=>"Quiz: Building a Basic Rails App", "summary"=>"Quiz: Building a Basic Rails App", "body"=>"", "assignment"=>"", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>18, "checkpoint_type"=>"quiz", "position"=>18, "points"=>1, "ref"=>"f57db8bc-b6c4-4a5b-8504-382d25f81b2e|0", "exercises"=>false, "quiz_id"=>16, "path"=>"/checkpoints/2318", "assessment"=>nil}, {"id"=>2114, "name"=>"Rails: Introduction to CRUD", "summary"=>"CRUD: introduction to reading data", "body"=>"<!-- { ids:[2114], name:'Rails: Introduction to CRUD', summary:'CRUD: introduction to reading data' } -->\n\n<center>\n  ![CRUD](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-crud-intro/banner.png)\n</center>\n\n> “Physicists analyze systems. Web scientists, however, can create the systems.”\n>\n> — [Tim Berners-Lee](https://en.wikipedia.org/?title=Tim_Berners-Lee)\n\n## Overview and Purpose\n\nIn this checkpoint you'll learn about CRUD.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Define CRUD.\n- Elaborate on resourceful routing in Rails.\n- Explain how HTTP requests are used.\n- Explain HTTP status codes and their purpose.\n\n## Viewing Posts\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/rd67qlucv9\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n  </center>\n\n## Resources\n\n\"Resource\" is a term used to describe an object that needs to be accessible by users and thus requires interactive capabilities.\n\nIt's an abstract term that encapsulates different parts of a Rails application. A resource is not one single entity, but rather, a collection of models, views, controllers, and routes.\n\nFor example, in Bloccit we have posts. We already created a model for our posts, and now we need to write the other pieces to complete the post resource. This includes the views, which visually represent posts within Bloccit; the controller, that will perform operations on a post such as creation or deletion; and the routes, which will map requests from clients (a web browser on a computer or mobile device) to the posts to perform the actions the client requests.\n\nIn this checkpoint, we'll learn how to build resources, and how to interact with them through a concept known as CRUD. CRUD stands for __C__reate __R__ead __U__pdate __D__elete. Bloccit needs to be able to perform CRUD operations on our models (such as posts) so that users can perform these actions from the GUI we present to them (the views).\n\nBloccit also needs routes so that when a client makes a request to our application, such as requesting to delete a post, Bloccit knows where to look to perform that action. In other words, our routes act like a traffic controller. Like a traffic controller telling cars where to go, our routes tell the client requests where to go within Bloccit.\n\nLet's say a user wants to delete a post. From a high level, the user clicks a button that says \"Delete Post\". The button sends a request to our server (application) across the Internet that points to a specific web URL. Our routing maps the URL to a controller action within Bloccit. In this example, the web URL will map to an action that deletes a post.\n\nFor example, imagine the web URL is `www.myapplication.com/posts/1/delete/`. When a user sends a request to that URL, our application looks for the route (using a table which we will explore later) and determines which controller action it should perform. This action in turn interacts with the model and ultimately the database, modifying the state of our application by deleting the post. These pieces work together to form the posts resource within our application.\n\n> This [Stack Overflow post](http://stackoverflow.com/questions/4686945/what-is-a-resource-in-rails) provides further explanation of resources in Rails.\n\n## Git\n\nCreate a new Git branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Generating a Resource\n\nA resource has three components which align to MVC architecture: a model, view(s), and a controller. We'll build a resource for posts first, and because we already have a post model, we'll create a controller next:\n\n```bash(Terminal)\n$ rails generate controller Posts index show new edit\n```\n\nWe passed the controller generator five arguments, including the resource name, `Posts`. Review the following output:\n\n```bash(Terminal)\n      create  app/controllers/posts_controller.rb\n       route  get \"posts/edit\"\n       route  get \"posts/new\"\n       route  get \"posts/show\"\n       route  get \"posts/index\"\n      invoke  erb\n      create    app/views/posts\n      create    app/views/posts/index.html.erb\n      create    app/views/posts/show.html.erb\n      create    app/views/posts/new.html.erb\n      create    app/views/posts/edit.html.erb\n      invoke  rspec\n      create    spec/controllers/posts_controller_spec.rb\n      create    spec/views/posts\n      create    spec/views/posts/index.html.erb_spec.rb\n      create    spec/views/posts/show.html.erb_spec.rb\n      create    spec/views/posts/new.html.erb_spec.rb\n      create    spec/views/posts/edit.html.erb_spec.rb\n      invoke  helper\n      create    app/helpers/posts_helper.rb\n      invoke  assets\n      invoke    coffee\n      create      app/assets/javascripts/posts.coffee\n      invoke    scss\n      create      app/assets/stylesheets/posts.scss\n```\n\nOpen `routes.rb` and view the `get` method calls the controller generator added:\n\n```ruby(config/routes.rb)\nRails.application.routes.draw do\n  get \"posts/index\"\n\n  get \"posts/show\"\n\n  get \"posts/new\"\n\n  get \"posts/edit\"\n\n  get \"welcome/index\"\n  get \"welcome/about\"\n\n  root 'welcome#index'\nend\n```\n\nThe generated `get` method calls create routes for the post resource, but Rails offers a more succinct syntax. Let's refactor `routes.rb` with the `resources` method:\n\n```ruby(config/routes.rb)\n Rails.application.routes.draw do\n-  get \"posts/index\"\n-\n-  get \"posts/show\"\n-\n-  get \"posts/new\"\n-\n-  get \"posts/edit\"\n\n # #1\n+  resources :posts\n\n # #2\n-  get \"welcome/index\"\n-\n-  get \"welcome/about\"\n+  get 'about' => 'welcome#about'\n\n   root 'welcome#index'\n end\n```\n\nAt **#1**, we call the `resources` method and pass it a `Symbol`. This instructs Rails to create post routes for creating, updating, viewing, and deleting instances of `Post`. We'll review the precise URIs created in a moment.\n\nAt **#2**, we remove `get \"welcome/index\"` because we've declared the index view as the root view. We also modify the `about` route to allow users to visit `/about`, rather than `/welcome/about`.\n\nThe Rails router uses `routes.rb`. Let's watch a video exploring the important role the Rails router plays:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/1yaz0evj1f\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nRun `rake routes` from the command line:\n\n```bash(Terminal)\n$ rake routes\n # #3\n   Prefix Verb   URI Pattern               Controller#Action\n # #4\n    posts GET    /posts(.:format)          posts#index\n          POST   /posts(.:format)          posts#create\n new_post GET    /posts/new(.:format)      posts#new\nedit_post GET    /posts/:id/edit(.:format) posts#edit\n     post GET    /posts/:id(.:format)      posts#show\n # #5\n          PATCH  /posts/:id(.:format)      posts#update\n          PUT    /posts/:id(.:format)      posts#update\n          DELETE /posts/:id(.:format)      posts#destroy\n    about GET    /about(.:format)          welcome#about\n     root GET    /                         welcome#index\n```\n\nAt **#3**, we see a header with Prefix, Verb, URI Pattern, and Controller#Action. The verbs correspond to HTTP Request Methods. They specify the action to be done on the specified resource. For example, a GET asks for data, a POST creates data, a PATCH or PUT updates data, and a DELETE deletes data. Standard HTTP verbs make it simpler for different systems to interact. By using a well-documented and well-known system like HTTP, the behavior of different operations is clear and reliable.\n\nAt **#4**, Rails created a route to `/posts` which requires a GET. The route maps to the `index` method in  `PostsController`.\n\nAt **#5**, we see PATCH and PUT verbs, which are similar. PUT updates data by sending the complete resource, whereas PATCH sends just the changes.\n\n## CRUD\n\nCRUD stands for Create Read Update Delete. CRUD actions align with controller HTTP verbs and controller actions in a Rails app.\n\n\nCRUD Action   | HTTP Verb     | Rails Action(s)\n------------- | ------------- | -------------\nCreate        | POST          | create\nRead          | GET           | new/show/index/edit\nUpdate        | PUT/PATCH     | update\nDelete        | DELETE        | destroy\n\n\nStart your Rails server and visit [`http://localhost:3000/posts`](http://localhost:3000/posts). We see a `NameError` like the one below:\n\n<center>\n![path-error](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-crud-intro/path-error.png)\n</center>\n\nThis error happens because we're using a generated path helper that no longer exists. When we changed our routes, we changed our path helpers. In particular, we changed `welcome_index_path` to `root_path` and `welcome_about_path` to `about_path`.\n\nUpdate the application layout to reflect the new paths:\n\n```erb(app/views/layouts/application.html.erb)\n ...\n-      <li><%= link_to \"Home\", welcome_index_path %></li>\n-      <li><%= link_to \"About\", welcome_about_path %></li>\n+      <li><%= link_to \"Bloccit\", root_path %></li>\n+      <li><%= link_to \"About\", about_path %></li>\n ...\n```\n\nSave the changes and refresh the page. We see the default HTML created by the controller generator at [`http://localhost:3000/posts`](http://localhost:3000/posts) – this view is the index page. We can deduce this from the `rake routes` output above, specifically this line:\n\n```bash(Output)\n        posts GET    /posts(.:format)          posts#index\n```\n\nWe can see that the `/posts` route (column three) is associated with the posts#index controller action (column four).\n\n## Index Action\n\nLet's use TDD to write the `index` action in `PostsController`. When we generated our controller, Rails created a basic spec for `PostsController`:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n require 'rails_helper'\n\n # #6\n RSpec.describe PostsController, type: :controller do\n\n   describe \"GET index\" do\n     it \"returns http success\" do\n # #7\n       get :index\n       expect(response).to have_http_status(:success)\n     end\n   end\n\n   describe \"GET show\" do\n     it \"returns http success\" do\n       get :show\n       expect(response).to have_http_status(:success)\n     end\n   end\n\n   describe \"GET new\" do\n     it \"returns http success\" do\n       get :new\n       expect(response).to have_http_status(:success)\n     end\n   end\n\n   describe \"GET edit\" do\n     it \"returns http success\" do\n       get :edit\n       expect(response).to have_http_status(:success)\n     end\n   end\n\n end\n```\n\nAt **#6**, RSpec created a test for `PostsController`. `type: :controller` tells RSpec to treat the test as a `controller` test. This allows us to simulate controller actions such as HTTP requests.\n\nAt **#7**, the test performs a `GET` on the index view and expects the response to be successful.\n\n> `have_http_status` is an RSpec [matcher](http://www.rubydoc.info/gems/rspec-rails/RSpec/Rails/Matchers:have_http_status) which encapsulates this logic. `have_http_status(:success)` checks for a response code of [200](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes), which is the standard HTTP response code for success.\n\nThe remaining tests follow the same pattern.\n\nLet's add another test to `posts_controller_spec.rb` to define the expected behavior of the `PostsController#index` :\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe PostsController, type: :controller do\n # #8\n+  let(:my_post) { Post.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph) }\n\n   describe \"GET index\" do\n     it \"returns http success\" do\n       get :index\n       expect(response).to have_http_status(:success)\n     end\n\n+    it \"assigns [my_post] to @posts\" do\n+      get :index\n # #9\n+      expect(assigns(:posts)).to eq([my_post])\n+    end\n   end\n\n # #10\n-  describe \"GET show\" do\n-    it \"returns http success\" do\n-      get :show\n-      expect(response).to have_http_status(:success)\n-    end\n-  end\n\n-  describe \"GET new\" do\n-    it \"returns http success\" do\n-      get :new\n-      expect(response).to have_http_status(:success)\n-    end\n-  end\n\n-  describe \"GET edit\" do\n-    it \"returns http success\" do\n-      get :edit\n-      expect(response).to have_http_status(:success)\n-    end\n-  end\n\n+#  describe \"GET show\" do\n+#    it \"returns http success\" do\n+#      get :show\n+#      expect(response).to have_http_status(:success)\n+#    end\n+#  end\n\n+# describe \"GET new\" do\n+#   it \"returns http success\" do\n+#     get :new\n+#     expect(response).to have_http_status(:success)\n+#   end\n+# end\n\n+#  describe \"GET edit\" do\n+#    it \"returns http success\" do\n+#      get :edit\n+#      expect(response).to have_http_status(:success)\n+#    end\n+#  end\n\n end\n```\n\nAt **#8**, we create a post and assign it to `my_post` using `let`. We use `RandomData` to give `my_post` a random title and body.\n\nAt **#9**, because our test created one post (`my_post`), we `expect` `index` to return an array of one item. We use `assigns`, a method in `ActionController::TestCase`. `assigns` gives the test access to [\"instance variables assigned in the action that are available for the view\"](http://api.rubyonrails.org/classes/ActionController/TestCase.html).\n\nAt **#10**, we comment out the tests for `show`, `new`, and `edit` since we won't write the implementation until later.\n\nRun the spec:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb\n```\n\nWe see output indicating our new test is failing. Let's write the implementation of `index` to get both tests passing. In the `PostsController`, add the following to the `index` method:\n\n```ruby(app/controllers/posts_controller.rb)\n class PostsController < ApplicationController\n   def index\n # #11\n+    @posts = Post.all\n   end\n\n   def show\n   end\n\n   def new\n   end\n\n   def edit\n   end\n end\n```\n\nAt **#11**, we declare an instance variable `@posts` and assign it a collection of `Post` objects using the `all` method provided by `ActiveRecord`. `all` returns a collection of `Post` objects.\n\nRun the spec again. The tests for `index` now pass. Our controller functions per the expectations of our spec for `index`. Let's write the associated view:\n\n```ruby(app/views/posts/index.html.erb)\n-<h1>Posts#index</h1>\n-<p>Find me in app/views/posts/index.html.erb</p>\n+<h1>All Posts</h1>\n # #12\n+<% @posts.each do |post| %>\n+  <p><%= link_to post.title, post_path(post.id) %></p>\n+<% end %>\n```\n\nAt **#12**, we iterate over each post in `@posts`. For each post we create a link with `post.title` as the text that links to `/posts/id`, with the id from the `post.id`. Instance variables created in a controller method are available in its associated view. Since we create and assign `@posts` in `PostsController#index`, we can use it in the posts __index__ view.\n\nRefresh [`http://localhost:3000/posts`](http://localhost:3000/posts) to see all the posts in the database.\n\nInspect the `post_path` method using `rake routes | grep 'posts#show'`. It requires an id to route to the correct post:\n\n```bash(terminal)\n$ rake routes | grep 'posts#show'\n  post GET    /posts/:id(.:format)      posts#show\n```\n\nWe passed the id of the post instance to the `post_path` method. `post_path` used this id to create the path. We can pass the post instance to get the same path. The `post_path` method will derive the id:\n\n```ruby\nlink_to post.title, post_path(post)\n```\n\nRails simplifies this further by allowing us to skip the `post_path` method altogether. If we call `link_to` with the object to which we're linking as a second argument, the `link_to` method will detect the object, parse its id, and create the path using the id. Using that shortcut, we can simplify the posts __index__ view:\n\n```erb(app/views/posts/index.html.erb)\n <h1>All Posts</h1>\n <% @posts.each do |post| %>\n+  <p><%= link_to post.title, post %></p>\n-  <p><%= link_to post.title, post_path(post.id) %></p>\n <% end %>\n```\n\n> This is an example of the advantages of Rails' \"convention over configuration\" approach.\n\nLet's use Bootstrap to style the posts __index__ view:\n\n```erb(app/views/posts/index.html.erb)\n <h1>All Posts</h1>\n <% @posts.each do |post| %>\n-  <p><%= link_to post.title, post %></p>\n+  <div class=\"media\">\n+    <div class=\"media-body\">\n+      <h4 class=\"media-heading\">\n+        <%= link_to post.title, post %>\n+      </h4>\n+    </div>\n+  </div>\n <% end %>\n```\n\n<center>\n![posts-index](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-crud-intro/posts-index.png)\n</center>\n\nBootstrap provides the classes we added to the `<div>` and `<h4>` tags to improve our view.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku.\n\n## Heroku\n\nPush your app to production:\n\n```bash(Terminal)\n$ git push heroku master\n```\n\nOpen your production app in your browser. If you can't remember the URL, use `heroku apps:info`.\n\n> If you're using Cloud9, open your app in a browser window outside of the Cloud9 window.\n\nWhen you visit the `/posts` URL, you should see \"We're sorry, but something went wrong.\" This is because you haven't migrated your database changes in production. As a consequence, your production app's database doesn't have posts or comments tables in it. Let's run the migrations:\n\n```bash(Terminal)\n$ heroku run rake db:migrate\n```\n\nRefresh the page on production. Although the error has gone away, there are no posts! This is because you ran `rake db:seed` in your development environment, and not the production environment. It's not a good idea to seed your production environment with fake data. You don't want fake data intertwined with real data, but you'll create real data in production soon.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [`rails generate`](http://guides.rubyonrails.org/command_line.html#rails-generate) | The `rails generate` command creates controllers from templates. The `generate` command can also generate controller actions and their corresponding views. |\n| [Resourceful Routing](http://guides.rubyonrails.org/routing.html#resource-routing-the-rails-default) | Rails' resource routing permits the declaration of common routes for a controller. It allows you to declare the routes for the \"index\", \"show\", \"new\", \"edit\", \"create\", \"update\" and \"destroy\" actions in a single line of code. |\n| [`rake routes`](http://guides.rubyonrails.org/routing.html#inspecting-and-testing-routes) | The `rake routes` command lists all routes, in the same order as `routes.rb`. |\n| [CRUD](http://en.wikipedia.org/wiki/Create,_read,_update_and_delete) | Create, Read, Update, and Delete are the four basic functions of persistant storage. |\n| [HTTP Request Methods](http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods) | HTTP defines methods (verbs) to indicate the desired action to be performed on the identified resource. |\n| [HTTP Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) | Status codes are numbers returned by HTTP which indicate the result of a request. |", "assignment"=>"Create a new Git branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nBecause our posts will be user generated, some of them may contain offensive or sensitive content. Since we don't have real content, we will pretend that every fifth post contains sensitive content to test a potential censorship feature. Your assignment is to overwrite the `title` of the first post and every fifth post after it with the text __SPAM__. You should change the data itself, not just change the display of the data.\n\nHere are some hints to help you:\n\n1. Does this logic belong in a model, a view, or a controller?\n2. Which classes should encapsulate this logic?\n3. Recall our usage of the [modulus](http://www.tutorialspoint.com/ruby/ruby_operators.htm) operator from the Ruby checkpoints. This may help you identify each fifth instance of `Post`.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/lmu5w5gisj?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Intro to CRUD Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>18, "checkpoint_type"=>"normal", "position"=>18, "points"=>1, "ref"=>"59401fcf-bff0-4035-9cee-f8b4c37953c3|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2114", "assessment"=>nil}, {"id"=>2115, "name"=>"Rails: CRUD", "summary"=>"CRUD: reading and creating data using models, controllers, and views", "body"=>"<!-- { ids:[2115], name:'Rails: CRUD', summary:'CRUD: reading and creating data using models, controllers, and views' } -->\n<center>\n  ![Creation](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-crud-cr/banner.png)\n</center>\n\n> “It's easy to attack and destroy an act of creation. It's a lot more difficult to perform one.”\n>\n> — [Chuck Palahniuk](https://en.wikipedia.org/wiki/Chuck_Palahniuk)\n\n## Overview and Purpose\n\nIn this checkpoint you'll learn more about the CR in CRUD.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Explain the C in CRUD.\n- Explain the R in CRUD.\n- Describe the `params` hash.\n- Use `form_for` to create HTML forms.\n\n## Reading and Creating posts\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/0ulnybhade\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Git\n\nCreate a new Git branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Creating Posts\n\nIn this checkpoint we'll develop, test-first, the functionality for creating posts. We'll also implement a user interface (UI) so that Bloccit users can create posts.\n\nLet's write the controller tests:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n...\n\n-#  describe \"GET new\" do\n-#    it \"returns http success\" do\n-#      get :new\n-#      expect(response).to have_http_status(:success)\n-#    end\n-#  end\n\n # #1\n+   describe \"GET new\" do\n+     it \"returns http success\" do\n+       get :new\n+       expect(response).to have_http_status(:success)\n+     end\n+\n # #2\n+     it \"renders the #new view\" do\n+       get :new\n+       expect(response).to render_template :new\n+     end\n+\n # #3\n+     it \"instantiates @post\" do\n+       get :new\n+       expect(assigns(:post)).not_to be_nil\n+     end\n+   end\n+\n+   describe \"POST create\" do\n # #4\n+     it \"increases the number of Post by 1\" do\n+       expect{post :create, post: {title: RandomData.random_sentence, body: RandomData.random_paragraph}}.to change(Post,:count).by(1)\n+     end\n+\n # #5\n+     it \"assigns the new post to @post\" do\n+       post :create, post: {title: RandomData.random_sentence, body: RandomData.random_paragraph}\n+       expect(assigns(:post)).to eq Post.last\n+     end\n+\n # #6\n+     it \"redirects to the new post\" do\n+       post :create, post: {title: RandomData.random_sentence, body: RandomData.random_paragraph}\n+       expect(response).to redirect_to Post.last\n+     end\n+   end\n\n ...\n```\n\nThere are separate `new` and `create` sections at __#1__ and __#4__. When `new` is invoked, a new and unsaved `Post` object is created. When `create` is invoked, the newly created object is persisted to the database. This implementation mimics the [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) parts of HTTP. REST is a software architecture style and practice that imposes a set of constraints for building web applications. RESTful architectures follow constraints such as using HTTP verbs and making sure web URLs follow a certain pattern. Discussing all of the constraints that REST recommends is outside the scope of this checkpoint, but we'll continue to use and explore RESTful practices as we build Bloccit.\n\n> There are many resources on the web that elaborate on REST and RESTful practices, such as [this video](https://www.youtube.com/watch?v=YCcAE2SCQ6k).\n\nPer HTTP, GET requests should not generate new data, thus `new` (which is a GET) does not create data. POST requests are used to create new data, thus `create` actually creates the fields in a post.\n\n> What do you think would happen if we used post `:new` or get `:create`?\n\nAt __#2__, we `expect` `PostsController#new` to render the posts __new__ view. We use the [`render_template`](http://rspec.rubyforge.org/rspec-rails/1.1.12/files/lib/spec/rails/matchers/render_template_rb.html) method to verify that the correct template (view) is rendered.\n\nAt __#3__, we `expect` the `@post` instance variable to be initialized by `PostsController#new`. `assigns` gives us access to the `@post` variable, assigning it to `:post`.\n\nAt __#4__, we `expect` that after `PostsController#create` is called with the parameters `{post: {title: RandomData.random_sentence, body: RandomData.random_paragraph}}`, the `count` of `Post` instances (i.e. rows in the posts table) in the database will increase by one.\n\nAt __#5__, when `create` is POSTed to, we `expect` the newly created post to be assigned to `@post`.\n\nAt __#6__, we `expect` to be redirected to the newly created post.\n\nRun the spec and see four failing tests that are caused because we haven't finished `new` or `create` in `PostsController`.\n\n> The first two tests pass without our need to add any code to `PostsController.` By default, `new` will render the post's __new__ view and return an HTTP success code. If we were to override this default behavior, we'd need to update these tests.\n\nLet's implement the rest of the logic needed in `new`:\n\n```ruby(app/controllers/posts_controller.rb)\n ...\n\n def new\n # #7\n+  @post = Post.new\n end\n\n ...\n```\n\nAt __#7__, we create an instance variable, `@post`, then assign it an empty post returned by `Post.new`.\n\nRun the specs for `new` and observe that all three `Get new` tests pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e 'GET new'\n```\n\n> `-e 'GET new'` runs only the specs in the `describe \"GET new\" do` block. This allows us to run only the specs covering the method we're working on.\n\n### The `form_for` Helper Method\n\nThanks to our updated `new` method in `PostsController`, we have the ability to access a new `Post` instance in the related posts __new__ view. Open the __new__ view and add the following code:\n\n```erb(app/views/posts/new.html.erb)\n-<h1>Posts#new</h1>\n-<p>Find me in app/views/posts/new.html.erb</p>\n+<%= form_for @post do |f| %>\n+  <%= f.label :title %>\n+  <%= f.text_field :title %>\n+\n+  <%= f.label :body %>\n+  <%= f.text_area :body %>\n+\n+  <%= f.submit \"Save\" %>\n+<% end %>\n```\n\nStart the Rails server and go to [`http://localhost:3000/posts/new`](http://localhost:3000/posts/new). View the source of the resulting page by right clicking anywhere on the page, and selecting __Inspect Element__. Search for a form HTML tag and you should see the following HTML code:\n\n```html\n <!-- #8 -->\n <form class=\"new_post\" id=\"new_post\" action=\"/posts\" accept-charset=\"UTF-8\" method=\"post\" abineguid=\"67A412E19800485B8BEF9569F6FA75CC\"><input name=\"utf8\" type=\"hidden\" value=\"✓\"><input type=\"hidden\" name=\"authenticity_token\" value=\"u5qH11P+xwMWIZjSHS1DssY3qrmCUpY4k7iXuyqvc9OZl1CPWfXekmZ2XLbdblOfNE/jsX6vqkqy9YYY05QyJw==\">\n   <label for=\"post_title\">Title</label>\n   <input type=\"text\" name=\"post[title]\" id=\"post_title\">\n\n   <label for=\"post_body\">Body</label>\n   <textarea name=\"post[body]\" id=\"post_body\"></textarea>\n\n   <input type=\"submit\" name=\"commit\" value=\"Save\">\n </form>\n```\n\n`form_for` generates this HTML code starting at __#8__. `form_for`, like `link_to`, is a Rails helper method that generates HTML code. This code allows a user to submit a post title and body, thus creating a new post.\n\nWe examine `form_for` in more depth in the following video:\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/pa402c0vo5\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nOn [`http://localhost:3000/posts/new`](http://localhost:3000/posts/new), enter some text into the title and body fields, then click the __Save__ button. You should see an error message:\n\n<center>\n![pic](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-crud-cr/no-create-action.png)\n</center>\n\nThe form attempted to submit the data to a create action, but Rails couldn't find a `create` method in `PostsController`. Let's write `create`:\n\n```ruby(app/controllers/posts_controller.rb)\n ...\n\n   def new\n     @post = Post.new\n   end\n\n+  def create\n # #9\n+    @post = Post.new\n+    @post.title = params[:post][:title]\n+    @post.body = params[:post][:body]\n\n # #10\n+    if @post.save\n # #11\n+      flash[:notice] = \"Post was saved.\"\n+      redirect_to @post\n+    else\n # #12\n+      flash.now[:alert] = \"There was an error saving the post. Please try again.\"\n+      render :new\n+    end\n+  end\n\n ...\n```\n\nAt __#9__, we call `Post.new` to create a new instance of `Post`.\n\nAt __#10__, if we successfully save `Post` to the database, we display a success message using `flash[:notice]` and redirect the user to the route generated by `@post`. Redirecting to `@post` will direct the user to the posts __show__ view.\n\nAt __#11__, we assign a value to `flash[:notice]`. The `flash` hash provides a way to pass temporary values between actions. Any value placed in `flash` will be available in the next action and then deleted.\n\nAt __#12__, if we do not successfully save `Post` to the database, we display an error message and `render` the `new` view again.\n\nWhen the user clicks __Save__, the `create` method is called. `create` either updates the database with the `save` method, or returns an error. Unlike `new`, `create` does not have a corresponding view. `create` works behind the scenes to collect the data submitted by the user and update the database. `create` is a POST action.\n\nRun the specs for `create` and observe that all three `POST create` tests pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e 'POST create'\n```\n\nUse the form on [`http://localhost:3000/posts/new`](http://localhost:3000/posts/new) to create a post. You will be redirected to the, as of yet, unfinished posts __show__ page.\n\n### Styling the New View\n\nNow that `new` and `create` are implemented, we can style the corresponding view with Bootstrap:\n\n```erb(app/views/posts/new.html.erb)\n-<%= form_for @post do |f| %>\n-  <%= f.label :title %>\n-  <%= f.text_field :title %>\n-\n-  <%= f.label :body %>\n-  <%= f.text_area :body %>\n-\n-  <%= f.submit \"Save\" %>\n-<% end %>\n+<h1>New Post</h1>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-4\">\n+    <p>Guidelines for posts</p>\n+    <ul>\n+      <li>Make sure it rhymes.</li>\n+      <li>Don't use the letter \"A\".</li>\n+      <li>The incessant use of hashtags will get you banned.</li>\n+    </ul>\n+  </div>\n+  <div class=\"col-md-8\">\n+    <%= form_for @post do |f| %>\n+      <div class=\"form-group\">\n # #13\n+        <%= f.label :title %>\n # #14\n+        <%= f.text_field :title, class: 'form-control', placeholder: \"Enter post title\" %>\n+      </div>\n+      <div class=\"form-group\">\n+        <%= f.label :body %>\n+        <%= f.text_area :body, rows: 8, class: 'form-control', placeholder: \"Enter post body\" %>\n+      </div>\n+      <div class=\"form-group\">\n # #15\n+        <%= f.submit \"Save\", class: 'btn btn-success' %>\n+      </div>\n+    <% end %>\n+  </div>\n+</div>\n```\n\nAt __#13__, we use `f.label` to display `title`. This functionality is provided by `form_for`, which yields a form builder object that, in turn, provides `f.label`. `f.label`, in turn, creates an HTML `<label>` tag for the object that is specified. In this case it will be:\n\n```HTML\n<label for=\"post_title\">Title</label>\n```\n\nAt __#14__, `f.text_field` is another method that `FormHelper` provides and creates an `<input>` tag of type `text`. It will yield:\n\n```HTML\n<input class=\"form-control\" placeholder=\"Enter post title\" type=\"text\" name=\"post[title]\" id=\"post_title\">\n```\n\nAt __#15__, `f.submit` yields an `input` tag of type `submit`. It will yield:\n\n```HTML\n <input type=\"submit\" name=\"commit\" value=\"Save\" class=\"btn btn-success\">\n```\n\nRefresh [`http://localhost:3000/posts/new`](http://localhost:3000/posts/new) to see your changes. Then use the form to create a new post.\n\n## Displaying the Flash Message\n\nWhen you create a post, no success message is displayed. This is because, while we're placing a value into `flash`, we're not displaying it in the view yet. Because every view may have a `flash` message at some point, we'll add it someplace universal. Let's add it to `application.html.erb`.\n\nOpen `app/views/layouts/application.html.erb` and add the flash code:\n\n```erb(app/views/layouts/application.html.erb)\n <!DOCTYPE html>\n <html>\n <head>\n   <title>Bloccit</title>\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n   <%= stylesheet_link_tag    \"application\", media: \"all\" %>\n   <%= javascript_include_tag \"application\" %>\n   <%= csrf_meta_tags %>\n </head>\n <body>\n   <div class=\"container\">\n     <ul class=\"nav nav-tabs\">\n       <li><%= link_to \"Bloccit\", root_path %></li>\n       <li><%= link_to \"About\", about_path %></li>\n     </ul>\n+\n+    <% if flash[:notice] %>\n+      <div class=\"alert alert-success\">\n+        <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n+        <%= flash[:notice] %>\n+      </div>\n+    <% elsif flash[:alert] %>\n+      <div class=\"alert alert-warning\">\n+        <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n+        <%= flash[:alert] %>\n+      </div>\n+    <% end %>\n\n     <%= yield %>\n   </div>\n\n </body>\n </html>\n```\n\n> Note that the class names (`alert`, `alert-*`, and `close`) as well as the `data-dismiss` attribute are [Bootstrap markup](http://getbootstrap.com/javascript/#alerts) commonly used when creating alerts.\n\nCreate a post from [`http://localhost:3000/posts/new`](http://localhost:3000/posts/new) and we'll see a green flash message.\n\n## Reading Posts\n\nWe have the ability to create new posts, so a logical next step is to implement the ability to read them. Recall the CRUD acronym - \"create read update delete\"; we've completed \"create\" and are moving on to \"read\". First, let's write the tests:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n ...\n\n-#  describe \"GET show\" do\n-#    it \"returns http success\" do\n-#      get :show\n-#      expect(response).to have_http_status(:success)\n-#    end\n-#  end\n+  describe \"GET show\" do\n+    it \"returns http success\" do\n # #16\n+      get :show, {id: my_post.id}\n+      expect(response).to have_http_status(:success)\n+    end\n+    it \"renders the #show view\" do\n # #17\n+      get :show, {id: my_post.id}\n+      expect(response).to render_template :show\n+    end\n+\n+    it \"assigns my_post to @post\" do\n+      get :show, {id: my_post.id}\n # #18\n+      expect(assigns(:post)).to eq(my_post)\n+    end\n+  end\n\n ...\n\n end\n```\n\nAt __#16__, we pass `{id: my_post.id}` to `show` as a parameter. These parameters are passed to the  [`params`](http://guides.rubyonrails.org/action_controller_overview.html#parameters) hash.\n\n> The `params`  hash contains all parameters passed to the application's controller (`application_controller.rb`), whether from GET, POST, or any other HTTP action.\n\nAt __#17__, we `expect` the `response` to return the __show__ view using the [`render_template`](http://rspec.rubyforge.org/rspec-rails/1.1.12/files/lib/spec/rails/matchers/render_template_rb.html) matcher.\n\nAt __#18__, we `expect` the `post` to equal `my_post` because we call `show` with the id of `my_post`. We are testing that the post returned to us is the post we asked for.\n\nRun the spec:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e 'GET show'\n```\n\nWe see that the first two tests pass, but the last one fails. Let's fix it by implementing `show`:\n\n```ruby(app/controllers/posts_controller.rb)\n class PostsController < ApplicationController\n   def index\n     @posts = Post.all\n   end\n\n   def show\n # #19\n+    @post = Post.find(params[:id])\n   end\n\n   def new\n   end\n\n   def edit\n   end\n end\n```\n\nAt __#19__, we find the post that corresponds to the id in the `params` that was passed to `show` and assign it to `@post`. Unlike in the `index` method, in the `show` method, we populate an instance variable with a single post, rather than a collection of posts.\n\nRun the spec again and see that our tests for `show` pass.\n\nOpen [`http://localhost:3000/posts`](http://localhost:3000/posts) and click on a post's link. We are taken to the __show__ view, thanks to the `link_to` method. The __show__ view still has boilerplate HTML code.\n\nLet's view the `params` hash by adding this line:\n\n```erb(app/views/posts/show.html.erb)\n <h1>Posts#show</h1>\n <p>Find me in app/views/posts/show.html.erb</p>\n\n+<%= params %>\n```\n\nWhen you refresh the page, you should see this:\n\n```ruby\n{\"action\"=>\"show\", \"controller\"=>\"posts\", \"id\"=>\"1\"}\n```\n\nThis hash communicates which action and controller was called. It also has the id of the post we clicked - it's encoded in the URL. In our controller, we accessed that id by calling `params[:id]`, which, in the above case, returned \"1\". We then assigned the post found with that id to the `@post` variable.\n\nLet's replace `<%= params %>` in `app/views/posts/show.html.erb` with some post-specific code:\n\n```erb(app/views/posts/show.html.erb)\n-<h1>Posts#show</h1>\n-<p>Find me in app/views/posts/show.html.erb</p>\n-\n-<%= params %>\n+<h1><%= @post.title %></h1>\n+<p><%= @post.body %></p>\n```\n\nGo back to the __index__ view at [`http://localhost:3000/posts`](http://localhost:3000/posts) and click on a post. You should see an updated __show__ view with data specific to the `Post` instance that was clicked.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku. Open your production app to view the updates. Create a new post, and ensure that you can access it on the __index__ and __show__ views.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Form Helpers](http://guides.rubyonrails.org/form_helpers.html) | Form helpers are view helper methods that generate HTML markup for input forms. |\n| [`form_for`](http://guides.rubyonrails.org/form_helpers.html#binding-a-form-to-an-object) | The `form_for` method is a form helper which binds a form to a model object. |\n| [`params`](http://guides.rubyonrails.org/action_controller_overview.html#parameters) | The Rails `params` hash is available in controllers and contains both [query string paramaters](http://en.wikipedia.org/wiki/Query_string) and [POST data](http://en.wikipedia.org/wiki/POST_%28HTTP%29). |\n| [`ActionDispatch::Flash`](http://api.rubyonrails.org/classes/ActionDispatch/Flash.html) | `ActionDispatch::Flash` provides a data structure to pass temporary primitive types (`String`, `Array`, `Hash`) between controller actions. Anything placed in the `flash` param will be exposed to the next action and then removed. It is commonly used for notices and alerts. |", "assignment"=>"Create a new Git branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nIt's never too early to monetize! For this assignment, you'll add advertisements to Bloccit.\n\n1. Use TDD for this assignment.\n2. Create a new model called `Advertisement`. It should have the following attributes: `title:string`, `body:text`, `price:integer`.\n3. Generate a controller for `Advertisement` with `index`, `show`, `new`, and `create` actions. Should the controller class and file names have a singular (advertisement) or plural (advertisements) prefix? Be consistent with the naming pattern used for `PostsController`.\n4. Update `routes.rb` to use [resourceful routing](http://guides.rubyonrails.org/routing.html#resource-routing-the-rails-default) for `Advertisement`.\n5. Complete the `index`, `show`, `new`, and `create` actions in `AdvertisementsController`.\n6. Update the advertisement __index__, __show__ and __new__ views.\n7. Seed your app with instances of `Advertisement`.\n8. Test your changes in the browser. Confirm that you can see an index of all advertisements, view individual advertisements, and create new advertisements.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/b72o1p2x92?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">CRUD Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>19, "checkpoint_type"=>"normal", "position"=>19, "points"=>1, "ref"=>"f5430667-40e9-40e4-86a6-9bf25354b61b|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2115", "assessment"=>nil}, {"id"=>2116, "name"=>"Rails: More CRUD", "summary"=>"CRUD: updating and destroying data using models, controllers, and views", "body"=>"<!-- { ids:[2116], name:'Rails: More CRUD', summary:'CRUD: updating and destroying data using models, controllers, and views' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Rails For Zombies](http://railsforzombies.org/)\n</mentor-checkpoint-note>\n\n<center>\n  ![Godzilla](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-crud-ud/banner.jpg)\n</center>\n\n> “The urge to destroy is also a creative urge.”\n>\n> — Pablo Picasso\n\n## Overview and Purpose\n\nIn this checkpoint you'll learn more about the UD in CRUD.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Explain the U in CRUD.\n- Explain the D in CRUD.\n\n## Updating and Deleting posts\n\nNow that we can create and view posts, we'll implement the ability to edit and update them.\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/9s0r4a5dla\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Editing and Updating Posts\nTo edit existing posts we'll need to implement two actions, `edit` and `update`. The `edit` action uses the **edit** view to allow users to update an existing post. Just as the **new** view submits a form to the `create` action, the **edit** view submits a form to the `update` action.\n\n### `edit` Action\n\nLet's create the tests for `edit`:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n ...\n-#  describe \"GET edit\" do\n-#    it \"returns http success\" do\n-#      get :edit\n-#      expect(response).to have_http_status(:success)\n-#    end\n-#  end\n+  describe \"GET edit\" do\n+    it \"returns http success\" do\n+      get :edit, {id: my_post.id}\n+      expect(response).to have_http_status(:success)\n+    end\n+\n+    it \"renders the #edit view\" do\n+      get :edit, {id: my_post.id}\n # #1\n+      expect(response).to render_template :edit\n+    end\n+\n # #2\n+    it \"assigns post to be updated to @post\" do\n+      get :edit, {id: my_post.id}\n+\n+      post_instance = assigns(:post)\n+\n+      expect(post_instance.id).to eq my_post.id\n+      expect(post_instance.title).to eq my_post.title\n+      expect(post_instance.body).to eq my_post.body\n+    end\n+  end\n ...\n```\n\nAt __#1__, we `expect` the **edit** view to render when a post is edited.\n\nAt __#2__, we test that `edit` assigns the correct post to be updated to `@post`.\n\nRun the `edit` specs:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e 'GET edit'\n```\n\nThe first two tests pass because of the stubbed `edit` action in `PostsController` and Rails' default rendering. The last test fails because we haven't finished the `edit` action.\n\nModify the `edit` action:\n\n```ruby(app/controllers/posts_controller.rb)\n   def edit\n+    @post = Post.find(params[:id])\n   end\n```\n\nRerun the `edit` specs to confirm all three pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e 'GET edit'\n```\n\n### `update` Action\n\nWith the `edit` action implemented and the specs passing, it's time to implement `update` to receive the edited posts. Let's TDD `update`:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n ...\n+  describe \"PUT update\" do\n+    it \"updates post with expected attributes\" do\n+      new_title = RandomData.random_sentence\n+      new_body = RandomData.random_paragraph\n+\n+      put :update, id: my_post.id, post: {title: new_title, body: new_body}\n+\n # #3\n+      updated_post = assigns(:post)\n+      expect(updated_post.id).to eq my_post.id\n+      expect(updated_post.title).to eq new_title\n+      expect(updated_post.body).to eq new_body\n+    end\n+\n+    it \"redirects to the updated post\" do\n+      new_title = RandomData.random_sentence\n+      new_body = RandomData.random_paragraph\n+\n # #4\n+      put :update, id: my_post.id, post: {title: new_title, body: new_body}\n+      expect(response).to redirect_to my_post\n+    end\n+  end\n ...\n```\n\nAt __#3__, we test that `@post` was updated with the title and body passed to `update`. We also test that `@post`'s id was not changed.\n\nAt __#4__, we `expect` to be redirected to the posts **show** view after the `update`.\n\nRun the `update` specs.\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e 'PUT update'\n```\n\nThese tests both fail because we haven't implemented the `update` action in `PostsController`. Let's implement it:\n\n```ruby(app/controllers/posts_controller.rb)\n+  def update\n+    @post = Post.find(params[:id])\n+    @post.title = params[:post][:title]\n+    @post.body = params[:post][:body]\n+\n+    if @post.save\n+      flash[:notice] = \"Post was updated.\"\n+      redirect_to @post\n+    else\n+      flash.now[:alert] = \"There was an error saving the post. Please try again.\"\n+      render :edit\n+    end\n+  end\n```\n\nRun the `update` tests and verify that they both pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e 'PUT update'\n```\n\n## Edit and Update Views\n\nUpdate the posts **edit** view to display a form that allows users to update posts:\n\n```erb(app/views/posts/edit.html.erb)\n-<h1>Posts#edit</h1>\n-<p>Find me in app/views/posts/edit.html.erb</p>\n+<h1>Edit Post</h1>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-4\">\n+    <p>Guidelines for posts</p>\n+    <ul>\n+      <li>Make sure it rhymes.</li>\n+      <li>Don't use the letter \"A\".</li>\n+      <li>The incessant use of hashtags will get you banned.</li>\n+    </ul>\n+  </div>\n+  <div class=\"col-md-8\">\n+    <%= form_for @post do |f| %>\n+      <div class=\"form-group\">\n+        <%= f.label :title %>\n+        <%= f.text_field :title, class: 'form-control', placeholder: \"Enter post title\" %>\n+      </div>\n+      <div class=\"form-group\">\n+        <%= f.label :body %>\n+        <%= f.text_area :body, rows: 8, class: 'form-control', placeholder: \"Enter post body\" %>\n+      </div>\n+      <div class=\"form-group\">\n+        <%= f.submit \"Save\", class: 'btn btn-success' %>\n+      </div>\n+    <% end %>\n+  </div>\n+</div>\n```\n\nLet's add a link to edit a post on the __show__ view:\n\n```erb(app/views/posts/show.html.erb)\n-<h1><%= @post.title %></h1>\n-<p><%= @post.body %></p>\n+<h1><%= @post.title %></h1>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-8\">\n+    <p><%= @post.body %></p>\n+  </div>\n+  <div class=\"col-md-4\">\n <!-- #5 -->\n+    <%= link_to \"Edit\", edit_post_path(@post), class: 'btn btn-success' %>\n+  </div>\n+</div>\n```\n\nAt __#5__, we format a link as an **Edit** button which directs a user to `/posts/@post.id/edit`.  `edit_post_path(@post)` is a helper method that is generated in `routes.rb` by `resources :posts`. (Run `rake routes` from the command line to view the post routes, if you need a refresher.)\n\nOpen [http://localhost:3000/posts](http://localhost:3000/posts), click on a post, edit, and save it.\n\n## Destroy\n\nWe should provide users with the ability to delete posts. Let's write the tests for the `Post#destroy` action:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n...\n\n+  describe \"DELETE destroy\" do\n+    it \"deletes the post\" do\n+      delete :destroy, {id: my_post.id}\n # #6\n+      count = Post.where({id: my_post.id}).size\n+      expect(count).to eq 0\n+    end\n+\n+    it \"redirects to posts index\" do\n+      delete :destroy, {id: my_post.id}\n # #7\n+      expect(response).to redirect_to posts_path\n+    end\n+  end\n\n...\n```\n\nAt __#6__, we search the database for a post with an id equal to `my_post.id`. This returns an `Array`. We assign the `size` of the array to `count`, and we `expect` `count` to equal zero. This test asserts that the database won't have a matching post after `destroy` is called.\n\nAt __#7__, we `expect` to be redirected to the posts __index__ view after a post has been deleted.\n\nRun these tests and confirm they both fail because we haven't defined the `destroy` action yet:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e 'DELETE destroy'\n```\n\nOpen `PostsController` and implement the `destroy` action to make the previous tests pass:\n\n```ruby(app/controllers/posts_controller.rb)\n...\n\n+  def destroy\n+    @post = Post.find(params[:id])\n+\n # #8\n+    if @post.destroy\n+      flash[:notice] = \"\\\"\#{@post.title}\\\" was deleted successfully.\"\n+      redirect_to posts_path\n+    else\n+      flash.now[:alert] = \"There was an error deleting the post.\"\n+      render :show\n+    end\n+  end\n\n...\n```\n\nAt __#8__, we call `destroy` on `@post`. If that call is successful, we set a `flash` message and redirect the user to the posts __index__ view. If `destroy` fails then we redirect the user to the **show** view using `render :show`.\n\nComments are dependent on a post's existence because of the `has_many :comments` declaration in `Post`. When we delete a post, we also need to delete all related comments. We'll perform a \"cascade delete\", which ensures that when a post is deleted, all of its comments are too. Let's modify `Post` to handle this:\n\n```ruby(app/models/post.rb)\n-  has_many :comments\n+  has_many :comments, dependent: :destroy\n```\n\nLet's use `link_to` to add a link to delete posts on the **show** view:\n\n```erb(app/views/posts/show.html.erb)\n <h1><%= @post.title %></h1>\n\n <div class=\"row\">\n   <div class=\"col-md-8\">\n     <p><%= @post.body %></p>\n   </div>\n <div class=\"col-md-4\">\n   <%= link_to \"Edit\", edit_post_path(@post), class: 'btn btn-success' %>\n <!-- #9 -->\n+  <%= link_to \"Delete Post\", @post, method: :delete, class: 'btn btn-danger', data: {confirm: 'Are you sure you want to delete this post?'} %>\n   </div>\n </div>\n```\n\nAt __#9__, we use `link_to` to create a delete button. The text on the button is __Delete Post__. We override the default `method` (`:post`) with `:delete` so that when the button is pressed the route called is the delete route. We style the button by setting `class:` to 'btn btn-danger'. We pass a `Hash` with the `confirm:` key to the `data:` argument. This confirms the action with a JavaScript confirmation dialog when a user presses the button.  Let's watch a video exploring `link_to`:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/mgdflul4kt\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center> <br>\n\nGo to [http://localhost:3000/posts](http://localhost:3000/posts), pick a post, and delete it.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [HTTP DELETE request](http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods) | The HTTP DELETE request is used to remove the identified resource from the web server. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nIn addition to posts, we'll allow Bloccit users to ask questions. A question will be similar to a post, but will also have a \"resolved\" attribute to signal that other answers are no longer needed.\n\n1. Use TDD for this assignment.\n\n2. Create a new model called `Question`. It should have `title:string`, `body:text`, and `resolved:boolean` attributes.\n\n3. Generate a controller for `Question` with the [default CRUD controller actions](http://guides.rubyonrails.org/routing.html#crud-verbs-and-actions).\n\n4. Update `routes.rb` to use [resourceful routing](http://guides.rubyonrails.org/routing.html#resource-routing-the-rails-default) for `Question`.\n\n5. Complete `QuestionsController` and its corresponding views. Accept input for the `resolved` attribute in the Question form using a [checkbox](http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-check_box).\n\n6. Seed your application with questions.\n\n7. Test your changes in the browser. Confirm that you can:\n  - see an index of all questions\n  - view an individual question\n  - create new questions\n  - edit and update questions\n  - mark a question as \"resolved\"\n  - delete questions\n\n8. Ensure that all question-related tests pass.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/hu6nb142cj?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">More CRUD Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>20, "checkpoint_type"=>"normal", "position"=>20, "points"=>1, "ref"=>"4871cf20-4778-4d39-b710-9aebdfe4689b|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2116", "assessment"=>nil}, {"id"=>2317, "name"=>"Quiz: CRUD", "summary"=>"Quiz: CRUD", "body"=>"", "assignment"=>"", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>21, "checkpoint_type"=>"quiz", "position"=>21, "points"=>1, "ref"=>"2e7d5423-3807-4af1-a6e2-e940587c9156|0", "exercises"=>false, "quiz_id"=>15, "path"=>"/checkpoints/2317", "assessment"=>nil}, {"id"=>2117, "name"=>"Programming Reinforcement: Checkpoint 3", "summary"=>"Reinforce Ruby programming and problem solving fundamentals through curated exercises", "body"=>"<!-- { ids:[2117], name:'Programming Reinforcement: Checkpoint 3', summary:'Reinforce Ruby programming and problem solving fundamentals through curated exercises' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Enumerator: Ruby’s Versatile Iterator](http://blog.carbonfive.com/2012/10/02/enumerator-rubys-versatile-iterator/)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nThis checkpoint introduces three coding challenges to practice algorithms, advanced control flow, regular expressions, loops, and basic data structures.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Explain the difference between an array and an enumerator in Ruby.\n- Apply efficient enumeration in the control flow of an algorithm.\n- Understand regular expressions in Ruby.\n\n## Programming Reinforcement\n\nEach foundation checkpoint introduces new concepts, patterns, and assignments. We designed Bloc’s curriculum to push you to your learning limits. With that in mind, we’ve included breaks between lessons to reinforce programming concepts; this is the third of those breaks, known as Programming Reinforcement checkpoints.\n\nIn these checkpoints, you will complete coding challenges that help you master Ruby and learn to think like a programmer. After you complete the challenges, you will meet with your mentor to discuss your solutions.\n\n- [Challenges](#challenges)\n- [Bonus Challenge: Sudoku Solution Validator](#bonus-challenge)\n- [Assignment](#assignment)\n  - [For Mentors](#for-mentors)\n\n<a name=\"challenges\"></a>\n## Challenges\n\nYou must solve these three Kata (challenges) before submitting the checkpoint. At this point in your program, your skill level meets or exceeds that required by each Kata. While they may challenge you, know that you are capable of completing each one.\n\n>Your mentor may help you, but we strongly encourage you attempt these on your own.\n\n| Kata                                                                             | Difficulty[*](#difficulty) | Hint                                                                                                                                              |\n|:---------------------------------------------------------------------------------|:---------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Longest Palindrome](http://www.codewars.com/kata/longest-palindrome/train/ruby) | 6                          | Detect the smallest palindromes first (e.g. “aa”, “aba”), then check the ends as you progress through the string.                                 |\n| [Sequence Generator](http://www.codewars.com/kata/sequence-generator/train/ruby) | 6                          | The [`Enumerator`](http://apidock.com/ruby/Enumerator/new/class) class provides a `yield` object, each iteration must pass the next result to it. |\n| [Checkered Board](http://www.codewars.com/kata/checkered-board/train/ruby)       | 6                          | Use the [`is_a?`](http://stackoverflow.com/questions/3893278/ruby-kind-of-vs-instance-of-vs-is-a) function to check for type.                     |\n\n<a name=\"difficulty\"></a>\n\\*<sub> Difficult problems have lower ratings.</sub>\n\n<a name=\"bonus-challenge\"></a>\n## Bonus Challenge: [Sudoku Solution Validator](http://www.codewars.com/kata/sudoku-solution-validator/train/ruby)\n\n>This bonus challenge is optional, but we strongly encourage you to attempt it.\n\nSudoku is a fun puzzle game in which a 9×9 board begins partially filled with numbers ranging from one through nine:\n\n<center>![Sudoku Unsolved](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/rails/checkpoint-four/sudoku-unsolved.png)</center>\n\nPlayers must fill each empty square with a number, one through nine, such that each of the numbers appears once in each row, each column, and in each of the nine 3×3 sub-boards:\n\n<center>![Sudoku Unsolved](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/rails/checkpoint-four/sudoku-solved.png)</center>\n\nIn this challenge, write a method that will receive a proposed Sudoku solution in this format:\n\n```ruby\nvalidSolution([[5, 3, 4, 6, 7, 8, 9, 1, 2],\n               [6, 7, 2, 1, 9, 5, 3, 4, 8],\n               [1, 9, 8, 3, 4, 2, 5, 6, 7],\n               [8, 5, 9, 7, 6, 1, 4, 2, 3],\n               [4, 2, 6, 8, 5, 3, 7, 9, 1],\n               [7, 1, 3, 9, 2, 4, 8, 5, 6],\n               [9, 6, 1, 5, 3, 7, 2, 8, 4],\n               [2, 8, 7, 4, 1, 9, 6, 3, 5],\n               [3, 4, 5, 2, 8, 6, 1, 7, 9]])\n```\n\nReturn `true` if the solution follows the rules, otherwise return `false`.", "assignment"=>"- Complete all [mandatory challenges](#challenges).\n  - Submit the [link](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/programming-reinforcement-solution-link.png) to each of your solutions as part of your assignment.\n- Attempt the [Bonus Challenge](#bonus-challenge).\n  - Keep a log as you work through it and consider these questions when writing your report:\n    - What approaches did you try?\n    - Did you ever restart the process? If so, why?\n    - What steps did you take to solve the problem before you began coding?\n    - What was the most challenging aspect of the problem?\n    - Etc.\n  - If you complete the [Bonus Challenge](#bonus-challenge), submit the [link](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/programming-reinforcement-solution-link.png) to your solution.\n- Discuss your solutions and your struggles with your mentor.\n\n>Articulating your problem solving process is a valuable skill on the job and during technical interviews.\n\nRemember to click **Submit Final** on every challenge you complete, and notify your mentor when you do so. For challenges you *do not* complete, you may ask your mentor to review them with you.\n\n<a name=\"for-mentors\"></a>\n### For Mentors\n\nConsult this [document for reference](https://www.bloc.io/resources/ruby-programming-reinforcement-mentor-s-guide) for this and all future Ruby Programming Reinforcement checkpoints.", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>21, "checkpoint_type"=>"normal", "position"=>21, "points"=>1, "ref"=>"c107bd7a-f640-45fc-b5d1-49e5402ae7b2|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2117", "assessment"=>nil}, {"id"=>2118, "name"=>"Rails: Topics and Posts", "summary"=>"Topics and Posts: associating topics and posts", "body"=>"<!-- { ids:[2118], name:'Rails: Topics and Posts', summary:'Topics and Posts: associating topics and posts' } -->\n\n<center>\n  ![hot-topic](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-topics-and-posts/hot-topic.jpg)\n</center>\n\n> “Like religion, politics, and family planning, cereal is not a topic to be brought up in public. It's too controversial.”\n>\n> — Erma Bombeck\n\n## Overview and Purpose\n\nIn this checkpoint you'll learn more about nested routing in Rails and code refactoring.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Explain what nested routes are.\n- Explain code refactoring and how it's useful.\n\n## Topics\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/szywaooqlq\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWe've built the functionality to create posts, but we don't have a way to organize them. We anticipate that Bloccit users will create a large number of posts, and will therefore need a way to organize, or categorize them. In this checkpoint, we'll create a **topics** resource that will be used to organize posts. Along the way, we'll learn how to nest resources and refactor code.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Topic Model\n\nThe first step in creating a new topic resource is to create a topic model. An instance of `Topic` will require a `name` and `description` attribute. We'll also create a `public` attribute, of a `Boolean` data type, to allow users to restrict access to topics.\n\nCreate the topic model:\n\n```bash(Terminal)\n$ rails generate model topic name:string public:boolean description:text\n      invoke  active_record\n      create    db/migrate/20150625221905_create_topics.rb\n      create    app/models/topic.rb\n      invoke    rspec\n      create      spec/models/topic_spec.rb\n```\n\n> We can call the `generate` command with either capitalized (e.g. `Topic`) or uncapitalized (e.g. `topic`) model names. It makes no different to the generator.\n\nOpen the migration file and set the `public` attribute to `true` by default:\n\n```ruby(db/migrate/20150729181446_create_topics.rb)\n class CreateTopics < ActiveRecord::Migration\n   def change\n     create_table :topics do |t|\n       t.string :name\n-      t.boolean :public\n+      t.boolean :public, default: true\n       t.text :description\n\n       t.timestamps\n     end\n   end\n end\n```\n\nRun the migration using `rake db:migrate`:\n\n```bash(Terminal)\n$ rake db:migrate\n```\n\n## Topic Specs\n\nAdd the following tests to `topic_spec.rb`:\n\n```ruby(spec/models/topic_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Topic, type: :model do\n+  let(:name) { RandomData.random_sentence }\n+  let(:description) { RandomData.random_paragraph }\n+  let(:public) { true }\n+  let(:topic) { Topic.create!(name: name, description: description) }\n\n # #1\n+  describe \"attributes\" do\n+    it \"has name, description, and public attributes\" do\n+      expect(topic).to have_attributes(name: name, description: description, public: public)\n+    end\n\n # #2\n+    it \"is public by default\" do\n+      expect(topic.public).to be(true)\n+    end\n+  end\n end\n```\n\nAt __#1__, we confirm that a topic responds to the appropriate attributes.\n\nAt __#2__, we confirm that the `public` attribute is set to `true` by default.\n\nRun `topic_spec.rb` to confirm all four tests pass:\n\n```bash(Terminal)\n$ rspec spec/models/topic_spec.rb\n```\n\nTo organize posts by topic we will need to build an association between topics and posts. To TDD this association we'll use the [Shoulda gem](https://github.com/thoughtbot/shoulda). Shoulda makes it easier for us to write association tests by providing some handy methods that RSpec doesn't have. Add Shoulda to `Gemfile` and run `bundle install`:\n\n```ruby(Gemfile)\n group :development, :test do\n   gem 'rspec-rails', '~> 3.0'\n+  gem 'shoulda'\n end\n```\n\n```bash(Terminal)\n$ bundle install\n```\n\nUse methods provided by Shoulda and add the following tests to `topic_spec.rb`:\n\n```ruby(spec/models/topic_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Topic, type: :model do\n   let(:name) { RandomData.random_sentence }\n   let(:description) { RandomData.random_paragraph }\n   let(:public) { true }\n   let(:topic) { Topic.create!(name: name, description: description) }\n\n+  it { is_expected.to have_many(:posts) }\n ...\n```\n\nNow add tests for `post_spec.rb`:\n\n```ruby(spec/models/post_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Post, type: :model do\n-  let(:post) { Post.create!(title: \"New Post Title\", body: \"New Post Body\") }\n+  let(:name) { RandomData.random_sentence }\n+  let(:description) { RandomData.random_paragraph }\n+  let(:title) { RandomData.random_sentence }\n+  let(:body) { RandomData.random_paragraph }\n # #3\n+  let(:topic) { Topic.create!(name: name, description: description) }\n # #4\n+  let(:post) { topic.posts.create!(title: title, body: body) }\n+\n+  it { is_expected.to belong_to(:topic) }\n\n   describe \"attributes\" do\n     it \"has a title and body attribute\" do\n-      expect(post).to have_attributes(title: \"New Post Title\", body: \"New Post Body\")\n+      expect(post).to have_attributes(title: title, body: body)\n     end\n   end\n end\n```\n\nAt __#3__, we create a parent topic for `post`.\n\nAt __#4__, we associate `post` with `topic` via `topic.posts.create!`. This is a chained method call which creates a post for a given topic.\n\nFinally, we'll need to update `comment_spec.rb` to account for the new association:\n\n```ruby(spec/models/comment_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Comment, type: :model do\n-  let(:post) { Post.create!(title: \"New Post Title\", body: \"New Post Body\") }\n+  let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n+  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph) }\n   let(:comment) { Comment.create!(body: 'Comment Body', post: post) }\n\n   describe \"attributes\" do\n ...\n```\n\nRun the spec and confirm that the test doesn't pass.\n\nRun `topic_spec.rb` and `post_spec.rb`. There will be error messages for each spec because topics and posts are not associated. Let's fix these errors by creating the association.\n\n## Associations\n\nDatabase tables are associated via __foreign keys__. Recall that a foreign key is an attribute that references an attribute, most often the primary key, of another table. For example:\n\n![topic_id foreign key](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-topics-and-posts/topic-post-relationship.jpg)\n\nIn the above association, `Post.topic_id` is a **foreign_key** that references `Topic.id`.\n\nBecause posts belong to topics, we'll add a topic_id foreign key attribute to the posts table:\n\n```bash(Terminal)\n$ rails generate migration AddTopicToPosts topic_id:integer:index\n      invoke  active_record\n      create    db/migrate/20150729184746_add_topic_to_posts.rb\n```\n\nThis generated the following migration file:\n\n```ruby(db/migrate/20150729184746_add_topic_to_posts.rb)\nclass AddTopicToPosts < ActiveRecord::Migration\n  def change\n # #5\n    add_column :posts, :topic_id, :integer\n # #6\n    add_index :posts, :topic_id\n  end\nend\n```\n\nAt __#5__, we see that the name we gave the migration, `AddTopicToPosts`, is very important. Using this specific naming format:\n\n```ruby\n\"Add\" + [table whose id we want to add] + \"To\" + [table we want to add the foreign key to]\n```\n\n...we instructed the generator to create a migration that adds a topic_id column to the posts table.\n\nAt __#6__, we created an index on topic_id with the generator. An index improves the speed of operations on a database table.\n\n> You should always index your [foreign key columns](https://tomafro.net/2009/08/using-indexes-in-rails-index-your-associations).\n\nRun the migration to add the foreign key:\n\n```bash(Terminal)\n$ rake db:migrate\n```\n\nUpdate `Post` and `Topic` to reflect the association:\n\n```ruby(app/models/post.rb)\n class Post < ActiveRecord::Base\n+  belongs_to :topic\n   has_many :comments, dependent: :destroy\n end\n```\n\n```ruby(app/models/topic.rb)\n class Topic < ActiveRecord::Base\n+  has_many :posts\n end\n```\n\nRun `topic_spec.rb` and `post_spec.rb` to confirm that all the tests are passing:\n\n```bash(Terminal)\n$ rspec spec/models/topic_spec.rb\n$ rspec spec/models/post_spec.rb\n```\n\n## Seeds\n\nWe also need to update `seeds.rb`, because none of the posts in the database have an associated topic. Create some new topics and assign each post to a random topic:\n\n```ruby(db/seeds.rb)\n+# Create Topics\n+15.times do\n+  Topic.create!(\n+    name:         RandomData.random_sentence,\n+    description:  RandomData.random_paragraph\n+  )\n+end\n+topics = Topic.all\n\n # Create Posts\n 50.times do\n   Post.create!(\n+    topic:  topics.sample,\n     title:  RandomData.random_sentence,\n     body:   RandomData.random_paragraph\n   )\n end\n\n posts = Post.all\n\n # Create Comments\n 100.times do\n   Comment.create!(\n     post: posts.sample,\n     body: RandomData.random_paragraph\n   )\n end\n\n puts \"Seed finished\"\n+puts \"\#{Topic.count} topics created\"\n puts \"\#{Post.count} posts created\"\n puts \"\#{Comment.count} comments created\"\n```\n\nEmpty the existing database of posts and topics and reseed it with the `reset` command:\n\n```bash(Terminal)\n$ rake db:reset\n```\n\n## The Topics Resource\n\nOur topics resource has a model, but not a controller. Let's generate a topics controller to complete our topics resource, as well as the necessary routes and views to present topics to users:\n\n```bash(Terminal)\n$ rails generate controller Topics\n```\n\nWe didn't pass any action arguments to the controller generator. Instead, we'll create the actions and views that topics require manually.\n\nBuild the resourceful routes:\n\n```ruby(config/routes.rb)\n Rails.application.routes.draw do\n+  resources :topics\n   resources :posts\n\n   get 'about' => 'welcome#about'\n\n   root 'welcome#index'\n end\n```\n\nRun `rake routes` from the command line to examine the routes we created for topics. `resources` creates the seven standard CRUD routes we need for topics.\n\n## Topics Index\n\nAs with `PostsController`, we'll TDD the actions in `TopicsController`, starting with the `index` action:\n\n```ruby(spec/controllers/topics_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe TopicsController, type: :controller do\n+  let(:my_topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n+\n+  describe \"GET index\" do\n+    it \"returns http success\" do\n+      get :index\n+      expect(response).to have_http_status(:success)\n+    end\n+\n+    it \"assigns my_topic to @topics\" do\n+      get :index\n+      expect(assigns(:topics)).to eq([my_topic])\n+    end\n+  end\n end\n```\n\nThis test follows the pattern we established when testing `PostsController`. Using `let`, we create a `my_topic` variable to use in our tests. We then write two tests to confirm the expected behavior of the `index` action.\n\nRun the `index` section of the `TopicsContollerSpec` to confirm that both tests fail:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'GET index'\n```\n\nAdd the `index` action to `TopicsController` and provide an array of topics to the **index** view to pass the tests:\n\n```ruby(app/controllers/topics_controller.rb)\n class TopicsController < ApplicationController\n+  def index\n+    @topics = Topic.all\n+  end\n end\n```\n\nTo pass the tests, we need to create the topics __index__ view to display a list of all topics with their names and descriptions:\n\n```bash(Terminal)\n$ touch app/views/topics/index.html.erb\n```\n\nWith this view created, `topics_controller_spec.rb` will now pass both `index` tests:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'GET index'\n```\n\nFill out the view to display a list of all topics:\n\n```erb(app/views/topics/index.html.erb)\n+<h1>Topics</h1>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-8\">\n <!-- #7 -->\n+    <% @topics.each do |topic| %>\n+      <div class=\"media\">\n+        <div class=\"media-body\">\n+          <h4 class=\"media-heading\">\n <!-- #8 -->\n+            <%= link_to topic.name, topic %>\n+          </h4>\n+          <small>\n+            <%= topic.description %>\n+          </small>\n+        </div>\n+      </div>\n+    <% end %>\n+  </div>\n+  <div class=\"col-md-4\">\n <!-- #9 -->\n+    <%= link_to \"New Topic\", new_topic_path, class: 'btn btn-success' %>\n+  </div>\n+</div>\n```\n\nAt __#7__, we loop over each topic in `@topics`.\n\nAt __#8__, we create a link to the **show** view for each `topic`.\n\nAt __#9__, we create a link to create a new topic.\n\nVisit [http://localhost:3000/topics](http://localhost:3000/topics). You should see the topics that were created in `seeds.rb` and a **New Topic** button.\n\n## Show Topic\n\nWhen a user clicks on a topic, they should be taken to its **show** view and shown the posts that belong to that topic.\n\nAdd tests for the topic **show** action:\n\n```ruby(spec/controllers/topics_controller_spec.rb)\n ...\n+  describe \"GET show\" do\n+    it \"returns http success\" do\n+      get :show, {id: my_topic.id}\n+      expect(response).to have_http_status(:success)\n+    end\n+\n+    it \"renders the #show view\" do\n+      get :show, {id: my_topic.id}\n+      expect(response).to render_template :show\n+    end\n+\n+    it \"assigns my_topic to @topic\" do\n+      get :show, {id: my_topic.id}\n+      expect(assigns(:topic)).to eq(my_topic)\n+    end\n+  end\n end\n```\n\nThese three tests should fail:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'GET show'\n```\n\nUpdate `TopicsController` to add a `show` action\n\n```ruby(app/controllers/topics_controller.rb)\n class TopicsController < ApplicationController\n   def index\n     @topics = Topic.all\n   end\n+\n+  def show\n+    @topic = Topic.find(params[:id])\n+  end\n end\n```\n\nOur tests will still fail because of the missing __show__ view, so we'll create that view next:\n\n```bash(Terminal)\n$ touch app/views/topics/show.html.erb\n```\n\nWith the __show__ view created, `topics_controller_spec.rb` will now pass all three `show` tests:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'GET show'\n```\n\nFill out the view to display the topic information and all associated posts:\n\n```erb(app/views/topics/show.html.erb)\n+<h1><%= @topic.name %></h1>\n+\n+<%= link_to \"Edit Topic\", edit_topic_path, class: 'btn btn-success' %>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-8\">\n+    <p class=\"lead\"><%= @topic.description %></p>\n <!-- #10 -->\n+    <% @topic.posts.each do |post| %>\n+      <div class=\"media\">\n+        <div class=\"media-body\">\n+          <h4 class=\"media-heading\">\n+            <%= link_to post.title, post %>\n+          </h4>\n+        </div>\n+      </div>\n+    <% end %>\n+  </div>\n+  <div class=\"col-md-4\">\n+    <%= link_to \"New Post\", new_post_path(@topic), class: 'btn btn-success' %>\n+  </div>\n+</div>\n```\n\nAt __#10__, we iterate over the `posts` belonging to `@topic`, and display each post.\n\nOpen [http://localhost:3000/topics](http://localhost:3000/topics) and click on a topic to confirm that the topic **show** view works as expected.\n\n## New Topics\n\nUsers will want to be able to create new topics, so let's implement the `new` and `create` actions using TDD.\n\n### `new` Action\n\nAdd tests for the `new` action:\n\n```ruby(spec/controllers/topics_controller_spec.rb)\n ...\n+  describe \"GET new\" do\n+    it \"returns http success\" do\n+      get :new\n+      expect(response).to have_http_status(:success)\n+    end\n+\n+    it \"renders the #new view\" do\n+      get :new\n+      expect(response).to render_template :new\n+    end\n+\n+    it \"initializes @topic\" do\n+      get :new\n+      expect(assigns(:topic)).not_to be_nil\n+    end\n+  end\n end\n```\n\nThe three `new` tests will fail because `TopicsController` doesn't implement the `new` action yet:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'GET new'\n```\n\nImplement the `new` action:\n\n```ruby(app/controllers/topics_controller.rb)\n class TopicsController < ApplicationController\n   def index\n     @topics = Topic.all\n   end\n\n   def show\n     @topic = Topic.find(params[:id])\n   end\n+\n+  def new\n+    @topic = Topic.new\n+  end  \n end\n```\n\nOur tests are still failing because of the missing __new__ view, so let's create it now:\n\n```bash(Terminal)\n$ touch app/views/topics/new.html.erb\n```\n\nWith the __new__ view created, `topics_controller_spec.rb` will now pass all three `new` tests:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'GET new'\n```\n\nAdd a form for creating new topics:\n\n```erb(app/views/topics/new.html.erb)\n+<h1>New Topic</h1>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-4\">\n+    <p>Guidelines for topics:</p>\n+    <ul>\n+      <li>Make sure the topic is appropriate.</li>\n+      <li>Never insult dogs.</li>\n+      <li>Smile when you type.</li>\n+    </ul>\n+  </div>\n+  <div class=\"col-md-8\">\n+    <%= form_for @topic do |f| %>\n+      <div class=\"form-group\">\n+        <%= f.label :name %>\n+        <%= f.text_field :name, class: 'form-control', placeholder: \"Enter topic name\" %>\n+      </div>\n+      <div class=\"form-group\">\n+        <%= f.label :description %>\n+        <%= f.text_area :description, rows: 8, class: 'form-control', placeholder: \"Enter topic description\" %>\n+      </div>\n+      <div class=\"form-group\">\n+        <%= f.label :public, class: 'checkbox' do %>\n+          <%= f.check_box :public %> Public topic\n+        <% end %>\n+      </div>\n+      <%= f.submit \"Save\", class: 'btn btn-success' %>\n+    <% end %>\n+  </div>\n+</div>\n```\n\nOpen [http://localhost:3000/topics/new](http://localhost:3000/topics/new) and click on the **New Topic** button to confirm that the topic **new** view _looks_ as expected.\n\nThe user interface (UI) for creating new topics is complete, but if we try to submit the form, we'll get an error. This is because we haven't implemented the `create` action, which is used for inserting new records into the database.\n\n### `create` Action\n\nAdd three tests for `create`:\n\n```ruby(spec/controllers/topics_controller_spec.rb)\n ...\n+  describe \"POST create\" do\n+    it \"increases the number of topics by 1\" do\n+      expect{ post :create, {topic: {name: RandomData.random_sentence, description: RandomData.random_paragraph}}}.to change(Topic,:count).by(1)\n+    end\n+  \n+    it \"assigns Topic.last to @topic\" do\n+      post :create, {topic: {name: RandomData.random_sentence, description: RandomData.random_paragraph}}\n+      expect(assigns(:topic)).to eq Topic.last\n+    end\n+\n+    it \"redirects to the new topic\" do\n+      post :create, {topic: {name: RandomData.random_sentence, description: RandomData.random_paragraph}}\n+      expect(response).to redirect_to Topic.last\n+    end\n+  end\n end\n```\n\nRun these tests and confirm that they're failing:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'POST create'\n```\n\nPass these tests by implementing the `create` action:\n\n```ruby(app/controllers/topics_controller.rb)\n class TopicsController < ApplicationController\n   def index\n     @topics = Topic.all\n   end\n\n   def show\n     @topic = Topic.find(params[:id])\n   end\n\n   def new\n     @topic = Topic.new\n   end  \n+\n+  def create\n+    @topic = Topic.new\n+    @topic.name = params[:topic][:name]\n+    @topic.description = params[:topic][:description]\n+    @topic.public = params[:topic][:public]\n+\n+    if @topic.save\n+      redirect_to @topic, notice: \"Topic was saved successfully.\"\n+    else\n+      flash.now[:alert] = \"Error creating topic. Please try again.\"\n+      render :new\n+    end\n+  end\n end\n```\n\nThe `create` tests in `topics_controller_spec.rb` should now pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'POST create'\n```\n\nCreate a couple of new topics in your browser to confirm that `new` and `create` work as expected.\n\n## Edit Topic\n\nImplement the `edit` and `update` actions so users can edit existing topics, starting with `edit`.\n\n### `edit` Action\n\nLet's TDD the `edit` action first:\n\n```ruby(spec/controllers/topics_controller_spec.rb)\n ...\n+  describe \"GET edit\" do\n+    it \"returns http success\" do\n+      get :edit, {id: my_topic.id}\n+      expect(response).to have_http_status(:success)\n+    end\n+\n+    it \"renders the #edit view\" do\n+      get :edit, {id: my_topic.id}\n+      expect(response).to render_template :edit\n+    end\n+\n+    it \"assigns topic to be updated to @topic\" do\n+      get :edit, {id: my_topic.id}\n+      topic_instance = assigns(:topic)\n+\n+      expect(topic_instance.id).to eq my_topic.id\n+      expect(topic_instance.name).to eq my_topic.name\n+      expect(topic_instance.description).to eq my_topic.description\n+    end\n+  end\n end\n```\n\nThese tests will fail until we implement the `edit` action:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'GET edit'\n```\n\nImplement the `edit` action:\n\n```ruby(app/controllers/topics_controller.rb)\n class TopicsController < ApplicationController\n ...\n+\n+  def edit\n+    @topic = Topic.find(params[:id])\n+  end\n+\n end\n```\n\nOur tests are still failing because of the missing __edit__ view:\n\n```bash(Terminal)\n$ touch app/views/topics/edit.html.erb\n```\n\n`topics_controller_spec.rb` will now pass all three `edit` tests:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'GET edit'\n```\n\nUpdate the **edit** view to give users the ability to update a topic's `name`, `description`, and `public` attributes:\n\n```erb(app/views/topics/edit.html.erb)\n+<h1>Edit Topic</h1>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-4\">\n+    <p>Guidelines for topics:</p>\n+    <ul>\n+      <li>Make sure the topic is appropriate.</li>\n+      <li>Never insult dogs.</li>\n+      <li>Smile when you type.</li>\n+    </ul>\n+  </div>\n+  <div class=\"col-md-8\">\n+    <%= form_for @topic do |f| %>\n+      <div class=\"form-group\">\n+        <%= f.label :name %>\n+        <%= f.text_field :name, class: 'form-control', placeholder: \"Enter topic name\" %>\n+      </div>\n+      <div class=\"form-group\">\n+        <%= f.label :description %>\n+        <%= f.text_area :description, rows: 8, class: 'form-control', placeholder: \"Enter topic description\" %>\n+      </div>\n+      <div class=\"form-group\">\n <!-- #11 -->\n+        <%= f.label :public, class: 'checkbox' do %>\n+          <%= f.check_box :public %> Public topic\n+        <% end %>\n+      </div>\n+      <%= f.submit \"Save\", class: 'btn btn-success' %>\n+    <% end %>\n+  </div>\n+</div>\n```\n\nAt __#11__, we pass a block to `f.label` to generate the HTML for a checkbox.\n\nFrom [http://localhost:3000/topics](http://localhost:3000/topics) click on a topic and the click the **Edit Topic** button to confirm that the topic **edit** view and form _look_ as expected.\n\n### `update` Action\n\nLet's create the ability to update a topic's database record by implementing the `update` action. Add three tests for `update`:\n\n```ruby(spec/controllers/topics_controller_spec.rb)\n ...\n+  describe \"PUT update\" do\n+    it \"updates topic with expected attributes\" do\n+      new_name = RandomData.random_sentence\n+      new_description = RandomData.random_paragraph\n+\n+      put :update, id: my_topic.id, topic: { name: new_name, description: new_description }\n+\n+      updated_topic = assigns(:topic)\n+      expect(updated_topic.id).to eq my_topic.id\n+      expect(updated_topic.name).to eq new_name\n+      expect(updated_topic.description).to eq new_description\n+    end\n+\n+    it \"redirects to the updated topic\" do\n+      new_name = RandomData.random_sentence\n+      new_description = RandomData.random_paragraph\n+\n+      put :update, id: my_topic.id, topic: { name: new_name, description: new_description }\n+      expect(response).to redirect_to my_topic\n+    end\n+  end\n end\n```\n\nRun these tests and confirm that they fail:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'PUT update'\n```\n\nPass the tests by implementing the `update` action:\n\n```ruby(app/controllers/topics_controller.rb)\n class TopicsController < ApplicationController\n  ...\n+\n+  def update\n+    @topic = Topic.find(params[:id])\n+\n+    @topic.name = params[:topic][:name]\n+    @topic.description = params[:topic][:description]\n+    @topic.public = params[:topic][:public]\n+\n+    if @topic.save\n+       flash[:notice] = \"Topic was updated.\"\n+      redirect_to @topic\n+    else\n+      flash.now[:alert] = \"Error saving topic. Please try again.\"\n+      render :edit\n+    end\n+  end\n+\n end\n```\n\nThe `update` tests in `topics_controller_spec.rb` should now pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'PUT update'\n```\n\nEdit some topics in your browser to confirm that the `edit` and `update` work as expected.\n\n## Delete Topic\n\nUsers may want to delete topics, so we'll implement `destroy` using TDD:\n\n```ruby(spec/controllers/topics_controller_spec.rb)\n ...\n+  describe \"DELETE destroy\" do\n+    it \"deletes the topic\" do\n+      delete :destroy, {id: my_topic.id}\n+      count = Post.where({id: my_topic.id}).size\n+      expect(count).to eq 0\n+    end\n+  \n+    it \"redirects to topics index\" do\n+      delete :destroy, {id: my_topic.id}\n+      expect(response).to redirect_to topics_path\n+    end\n+  end\n end\n```\n\nRun these tests:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'DELETE destroy'\n```\n\nThey'll both fail until we implement `destroy`:\n\n```ruby(app/controllers/topics_controller.rb)\n...\n+  def destroy\n+    @topic = Topic.find(params[:id])\n+\n+    if @topic.destroy\n+      flash[:notice] = \"\\\"\#{@topic.name}\\\" was deleted successfully.\"\n+      redirect_to action: :index\n+    else\n+      flash.now[:alert] = \"There was an error deleting the topic.\"\n+      render :show\n+    end\n+  end\n end\n```\n\n> `redirect_to action: :index` is the same as `redirect_to topics_path` because `topics_path` routes to the `index` action per Rails' resourceful routing.\n\nOur tests should now pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'DELETE destroy'\n```\n\nUpdate the **show** view to display a **Delete Topic** button:\n\n```erb(app/views/topics/show.html.erb)\n <h1><%= @topic.name %></h1>\n\n <%= link_to \"Edit Topic\", edit_topic_path, class: 'btn btn-success' %>\n+<%= link_to \"Delete Topic\", @topic, method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure you want to delete this topic?' } %>\n ...\n```\n\nWhen we delete a topic, its associated posts should also be deleted:\n\n```ruby(models/topic.rb)\n class Topic < ActiveRecord::Base\n-  has_many :posts\n+  has_many :posts, dependent: :destroy\n end\n```\n\n> Because comments already depend on posts, they will also be deleted when a topic is deleted.\n\nVisit [http://localhost:3000/topics](http://localhost:3000/topics) and click on a topic and make sure you can delete it.\n\n## Nesting Posts\n\nNesting is a term we use when one object should be interacted with in the exclusive context of another object. Associated models, like posts and topics, don't _need_ to be nested, but we should nest posts in topics because we never want posts to be viewed, created, or edited in isolation. A nested post's URL will be scoped to topic, for example: `/topics/1/posts/3`. This URL still meets RESTful conventions, and is supported by Rails.\n\nTo nest posts under topics, we'll need to refactor `routes.rb`, the `PostsController`, and the topic and post views. Before we refactor, let's update our tests in anticipation of our nested posts:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe PostsController do\n # #12\n+  let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n # #13\n+  let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph) }\n\n-  let(:my_post) { Post.create( title:  RandomData.random_sentence, body:   RandomData.random_paragraph) }\n\n # #14\n-  describe \"GET index\" do\n-    it \"returns http success\" do\n-      get :index\n-      expect(response).to have_http_status(:success)\n-    end\n-\n-    it \"assigns [my_post] to @posts\" do\n-      get :index\n-      expect(assigns(:posts)).to eq([my_post])\n-    end\n-  end\n```\n\nBecause posts will be nested under topics, at __#12__ we create a parent topic named `my_topic`.\n\nAt __#13__, we update how we create `my_post` so that it will belong to `my_topic`.\n\nAt __#14__, we remove the `index` tests. Posts will no longer need an __index__ view because they'll be displayed on the __show__ view of their parent topic.\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n   describe \"GET show\" do\n     it \"returns http success\" do\n-      get :show, {id: my_post.id}\n # #15\n+      get :show, topic_id: my_topic.id, id: my_post.id\n       expect(response).to have_http_status(:success)\n     end\n\n     it \"renders the #show view\" do\n-      get :show, {id: my_post.id}\n # #16\n+      get :show, topic_id: my_topic.id, id: my_post.id\n       expect(response).to render_template :show\n     end\n\n     it \"assigns my_post to @post\" do\n-      get :show, {id: my_post.id}\n # #17\n+      get :show, topic_id: my_topic.id, id: my_post.id\n       expect(assigns(:post)).to eq(my_post)\n     end\n   end\n```\n\nPosts routes will now include the `topic_id` of the parent topic, so at __#15__, __#16__, and __#17__ we update our `get :show` request to include the id of the parent topic.\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n   describe \"GET new\" do\n     it \"returns http success\" do\n-      get :new\n # #18\n+      get :new, topic_id: my_topic.id\n       expect(response).to have_http_status(:success)\n     end\n\n     it \"renders the #new view\" do\n-      get :new\n # #19\n+      get :new, topic_id: my_topic.id\n       expect(response).to render_template :new\n     end\n\n     it \"initializes @post\" do\n-      get :new\n# #20\n+      get :new, topic_id: my_topic.id\n       expect(assigns(:post)).not_to be_nil\n     end\n   end\n```\n\nAt __#18__, __#19__, and __#20__ we update the `get :new` request to include the id of the parent topic.\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n   describe \"POST create\" do\n     it \"increases the number of Post by 1\" do\n-      expect{post :create, {post: {title: RandomData.random_sentence, body: RandomData.random_paragraph}} }.to change(Post,:count).by(1)\n # #21\n+      expect{post :create, topic_id: my_topic.id, post: {title: RandomData.random_sentence, body: RandomData.random_paragraph}}.to change(Post,:count).by(1)\n     end\n\n     it \"assigns the new post to @post\" do\n-      post :create, {post: title: RandomData.random_sentence, body: RandomData.random_paragraph}\n # #22\n+      post :create, topic_id: my_topic.id, post: {title: RandomData.random_sentence, body: RandomData.random_paragraph}\n       expect(assigns(:post)).to eq Post.last\n     end\n\n     it \"redirects to the new post\" do\n-      post :create, {post: name: RandomData.random_sentence, body: RandomData.random_paragraph}\n-      expect(response).to redirect_to Post.last\n # #23\n+      post :create, topic_id: my_topic.id, post: {title: RandomData.random_sentence, body: RandomData.random_paragraph}\n # #24\n+      expect(response).to redirect_to [my_topic, Post.last]\n     end\n   end\n```\n\nAt __#21__, __#22__, and __#23__ we update the `post :create` request to include the id of the parent topic.\n\nAt __#24__, because the route for the posts __show__ view will also be updated to reflect nested posts, instead of  redirecting to `Post.last`, we redirect to `[my_topic, Post.last]`. Rails' router can take an array of objects and build a route to the show page of the last object in the array, nesting it under the other objects in the array.\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n   describe \"GET edit\" do\n     it \"returns http success\" do\n-      get :edit, {id: my_post.id}\n # #25\n+      get :edit, topic_id: my_topic.id, id: my_post.id\n       expect(response).to have_http_status(:success)\n     end\n\n     it \"renders the #edit view\" do\n-      get :edit, {id: my_post.id}\n # #26\n+      get :edit, topic_id: my_topic.id, id: my_post.id\n       expect(response).to render_template :edit\n     end\n\n     it \"assigns post to be updated to @post\" do\n-      get :edit, {id: my_post.id}\n # #27\n+      get :edit, topic_id: my_topic.id, id: my_post.id\n       post_instance = assigns(:post)\n\n       expect(post_instance.id).to eq my_post.id\n       expect(post_instance.title).to eq my_post.title\n       expect(post_instance.body).to eq my_post.body\n     end\n   end\n```\n\nAt __#25__, __#26__, and __#27__ we update the `get :edit` request to include the id of the parent topic.\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n   describe \"PUT update\" do\n     it \"updates post with expected attributes\" do\n       new_title = RandomData.random_sentence\n       new_body = RandomData.random_paragraph\n\n-      put :update, id: my_post.id, post: {title: new_title, body: new_body}\n # #28\n+      put :update, topic_id: my_topic.id, id: my_post.id, post: {title: new_title, body: new_body}\n\n       updated_post = assigns(:post)\n       expect(updated_post.id).to eq my_post.id\n       expect(updated_post.title).to eq new_title\n       expect(updated_post.body).to eq new_body\n     end\n\n     it \"redirects to the updated post\" do\n       new_title = RandomData.random_sentence\n       new_body = RandomData.random_paragraph\n\n-      put :update, id: my_post.id, post: {title: new_title, body: new_body}\n-      expect(response).to redirect_to my_post\n # #29\n+      put :update, topic_id: my_topic.id, id: my_post.id, post: {title: new_title, body: new_body}\n # #30\n+      expect(response).to redirect_to [my_topic, my_post]\n     end\n   end\n```\n\nAt __#28__ and __#29__ we update the `put :update` request to include the id of the parent topic.\n\nAt __#30__, we replace `redirect_to my_post` with `redirect_to [my_topic, my_post]` so that we'll be redirected to the posts __show__ view after we nest posts.\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n   describe \"DELETE destroy\" do\n     it \"deletes the post\" do\n-      delete :destroy, id: my_post.id\n # #31\n+      delete :destroy, topic_id: my_topic.id, id: my_post.id\n       count = Post.where({id: my_post.id}).size\n       expect(count).to eq 0\n     end\n\n-    it \"redirects to posts index\" do\n-      delete :destroy, id: my_post.id\n-      expect(response).to redirect_to posts_path\n+    it \"redirects to topic show\" do\n # #32\n+      delete :destroy, topic_id: my_topic.id, id: my_post.id\n # #33\n+      expect(response).to redirect_to my_topic\n     end\n   end\n end\n```\n\nAt __#31__ and __#32__ we update the `delete :destroy` request to include the id of the parent topic.\n\nAt __#33__, we want to be redirected to the topics __show__ view instead of the posts __index__ view.\n\n\nWith our tests ready, let's update `routes.rb` to nest posts:\n\n```ruby(config/routes.rb)\n Rails.application.routes.draw do\n\n-  resources :topics\n-  resources :posts\n+  resources :topics do\n # #34\n+    resources :posts, except: [:index]\n+  end\n\n   get 'about' => 'welcome#about'\n\n   root 'welcome#index'\n end\n```\n\nAt __#34__ we pass `resources :posts` to the `resources :topics` block. This nests the post routes under the topic routes.\n\nExamine the new post routes:\n\n```bash(Terminal)\n$ rake routes | grep post\n             topic_posts POST   /topics/:topic_id/posts(.:format)          posts#create\n          new_topic_post GET    /topics/:topic_id/posts/new(.:format)      posts#new\n         edit_topic_post GET    /topics/:topic_id/posts/:id/edit(.:format) posts#edit\n              topic_post GET    /topics/:topic_id/posts/:id(.:format)      posts#show\n                         PATCH  /topics/:topic_id/posts/:id(.:format)      posts#update\n                         PUT    /topics/:topic_id/posts/:id(.:format)      posts#update\n                         DELETE /topics/:topic_id/posts/:id(.:format)      posts#destroy\n```\n\nAs you can see in the output above, all post URLs are now scoped to a topic.\n\nThere's no longer an `index` route for posts. This is because the posts __index__ view is no longer needed. All posts will be displayed with respect to a topic now, on the topics __show__ view. Remove the `index` action from the `PostsController`:\n\n```ruby(app/controllers/posts_controller.rb)\n class PostsController < ApplicationController\n-  def index\n-    @posts = Post.all\n-  end\n ...\n```\n\nRemove `app/views/posts/index.html.erb` and stage the removal:\n\n```bash(Terminal)\n$ git rm app/views/posts/index.html.erb\n```\n\nRun the tests and we'll see seven failures, caused by the `PostsController`:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb\n...\n16 examples, 7 failures\n```\n\nLet's implement the code to pass the tests:\n\n```ruby(app/controllers/posts_controller.rb)\n class PostsController < ApplicationController\n   def show\n     @post = Post.find(params[:id])\n   end\n\n   def new\n+    @topic = Topic.find(params[:topic_id])\n     @post = Post.new\n   end\n\n   def create\n     @post = Post.new\n     @post.title = params[:post][:title]\n     @post.body = params[:post][:body]\n+    @topic = Topic.find(params[:topic_id])\n # #35\n+    @post.topic = @topic\n\n     if @post.save\n       flash[:notice] = \"Post was saved.\"\n # #36\n-      redirect_to @post\n+      redirect_to [@topic, @post]\n     else\n       flash.now[:alert] = \"There was an error saving the post. Please try again.\"\n       render :new\n     end\n   end\n\n   def edit\n     @post = Post.find(params[:id])\n   end\n\n   def update\n     @post = Post.find(params[:id])\n     @post.title = params[:post][:title]\n     @post.body = params[:post][:body]\n\n     if @post.save\n       flash[:notice] = \"Post was updated.\"\n # #37\n-      redirect_to @post\n+      redirect_to [@post.topic, @post]\n     else\n       flash.now[:alert] = \"There was an error saving the post. Please try again.\"\n       render :edit\n     end\n   end\n\n   def destroy\n     @post = Post.find(params[:id])\n\n     if @post.destroy\n       flash[:notice] = \"\\\"\#{@post.title}\\\" was deleted successfully.\"\n # #38\n-       redirect_to posts_path\n+       redirect_to @post.topic\n     else\n       flash.now[:alert] = \"There was an error deleting the post.\"\n       render :show\n     end\n   end\n end\n```\n\nAt __#35__ we assign a topic to a post.\n\nAt __#36__ and __#37__ we change the `redirect` to use the nested post path.\n\nAt __#38__, when a post is deleted, we direct users to the topic **show** view.\n\nWith `PostsController` updated to reflect our nested routes, all the tests in `posts_controller_spec.rb` should pass. Run the tests again to confirm and then we'll proceed to updating our views:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb\n```\n\n## Refactor the Topics Show View\n\nThe topic **show** view includes a button that links to `new_post_path(@post)`. As the rake output shows, `new_post_path` is no longer available. (In fact, if you visit a topic's **show** view, you'll see a `NoMethodError` complaining about this.) We need to replace the old method with `new_topic_post_path` to reflect the nested route we generated in `routes.rb`:\n\n```erb(app/views/topics/show.html.erb)\n <h1><%= @topic.name %></h1>\n\n <%= link_to \"Edit Topic\", edit_topic_path, class: 'btn btn-success' %>\n <%= link_to \"Delete Topic\", @topic, method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure you want to delete this topic?' } %>\n\n <div class=\"row\">\n   <div class=\"col-md-8\">\n     <p class=\"lead\"><%= @topic.description %></p>\n     <% @topic.posts.each do |post| %>\n       <div class=\"media\">\n         <div class=\"media-body\">\n           <h4 class=\"media-heading\">\n <!-- #39 -->\n-            <%= link_to post.title, post %>\n+            <%= link_to post.title, topic_post_path(@topic, post) %>\n           </h4>\n <!-- #40 -->\n+          <small>\n+            submitted <%= time_ago_in_words(post.created_at) %> ago <br>\n+            <%= post.comments.count %> Comments\n+          </small>\n         </div>\n       </div>\n     <% end %>\n   </div>\n   <div class=\"col-md-4\">\n <!-- #41 -->\n-    <%= link_to \"New Post\", new_post_path(@topic), class: 'btn btn-success' %>\n+    <%= link_to \"New Post\", new_topic_post_path(@topic), class: 'btn btn-success' %>\n     <%= link_to \"Delete Topic\", @topic, method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure you want to delete this topic?' } %>\n   </div>\n </div>\n```\n\nAt __#39__, we refactor how we link to individual posts using the `topic_post_path` method. This helper takes a topic and a post and generates a path to the posts __show__ view.\n\nAt __#40__, we add submission and comment details for each post in the **show** view.\n\nAt __#41__, we replace `new_post_path` with `new_topic_post_path` to reflect the nested route we generated in `routes.rb`.\n\nVisit a topic's **show** view, and confirm that there is no longer an error.\n\n## Refactor the Posts Show View\n\nEach link in the topic **show** view contains a properly nested and RESTful URL for its associated posts. Click on one of the links to an individual post, and you'll see an `Undefined Method edit_post_path` error.\n\n```erb(app/views/posts/show.html.erb)\n <h1><%= @post.title %></h1>\n\n <div class=\"row\">\n   <div class=\"col-md-8\">\n     <p><%= @post.body %></p>\n   </div>\n   <div class=\"col-md-4\">\n-    <%= link_to \"Edit\", edit_post_path(@post), class: 'btn btn-success' %>\n-    <%= link_to \"Delete Post\", @post, method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure you want to delete this post?' } %>\n // #42\n+    <%= link_to \"Edit\", edit_topic_post_path(@post.topic, @post), class: 'btn btn-success' %>\n // #43\n+    <%= link_to \"Delete Post\", [@post.topic, @post], method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure you want to delete this post?' } %>\n   </div>\n </div>\n```\n\nAt __#42__, we replace `edit_post_path` with `edit_topic_post_path`, which takes two arguments, a topic and a post.\n\nAt __#43__, we update `link_to` to take an array consisting of a topic and post, which it uses to build the link to delete a nested post.\n\nRefresh the post **show** view and the error should be resolved because we used valid methods to generate the URLs for the **Edit** and **Delete Post** buttons.\n\n## Refactor the Posts Edit and New Views\n\nIf you click on the **Edit** button in the post **show** view, you'll get another undefined method error. This is because `form_for` uses similar path conventions as `link_to`. You've learned how to fix this with the `link_to` method, and we'll use the same approach for `form_for`:\n\n```erb(app/views/posts/edit.html.erb)\n ...\n-    <%= form_for @post do |f| %>\n+    <%= form_for [@post.topic, @post] do |f| %>\n ...\n```\n\n```erb(app/views/posts/new.html.erb)\n-    <%= form_for @post do |f| %>\n+    <%= form_for [@topic, @post] do |f| %>\n```\n\nJust like `link_to`, `form_for` can take an array of objects instead of a single object to generate the correct paths for nested resources.\n\nRefresh the posts __edit__ view to confirm that we've resolved the error.\n\n## Top Notch Topics\n\nThe topics __index__ view is the gateway to our application, so we should give users an easy way to access it from any page by updating `application.html.erb`:\n\n```erb(app/views/layouts/application.html.erb)\n <!DOCTYPE html>\n <html>\n <head>\n   <title>Bloccit</title>\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n   <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>\n   <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>\n   <%= csrf_meta_tags %>\n </head>\n <body>\n   <div class=\"container\">\n     <ul class=\"nav nav-tabs\">\n       <li><%= link_to \"Bloccit\", root_path %></li>\n+      <li><%= link_to \"Topics\", topics_path %></li>\n       <li><%= link_to \"About\", about_path %></li>\n ...\n```\n\nVisit any page in Bloccit we'll see a link to our topics __index__ view. Create, update, and delete some topics and posts to confirm that everything is working as expected.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku. Because we added a migration in this checkpoint, we'll need to update the Production database:\n\n```bash(Terminal)\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Rails Generate](http://guides.rubyonrails.org/command_line.html#rails-generate) |The `rails generate` command uses templates to create many things, including models and controllers. Using generators can save you time by auto-generating boilerplate code. |\n| [Nested Resources](http://guides.rubyonrails.org/routing.html#nested-resources) | Some objects should be operated on within the context of another object. Nested resources represent this relationship with URLs that scope one object within another. |\n| [Code Refactoring](http://en.wikipedia.org/wiki/Code_refactoring) | Code refactoring is the process of restructuring existing computer code, without changing its external behavior. Refactoring is the process of continuously improving code, and, when done with strict TDD, without breaking the application.  |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n> As always, complete this assignment using TDD.\n\nWe may want to monetize Bloccit someday, so let's give it the ability to host sponsored posts. For this assignment, we'll create `SponsoredPost` which `belongs_to` `Topic`.\n\n1. Create a new model named `SponsoredPost`. It should have `title:string`, `body:text`, and `price:integer` attributes and reference a `Topic`.\n2. Associate `Topic` and `SponsoredPost` using `has_many` and `belongs_to` in the `Topic` and `SponsoredPost` models respectively.\n3. Generate a controller for `SponsoredPosts` with `show`, `new`, and `edit` actions.\n4. Nest `SponsoredPost` under `Topic` in `routes.rb`.\n5. Seed the database with `SponsoredPosts` via `seeds.rb`.\n6. Complete the `SponsoredPostsController` CRUD methods and views. Use [the `number_field` helper](http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-number_field) for the price field in the **new** and **edit** views.\n7. Update `TopicsController` and the topic **show** view to display a __New Sponsored Post__ button.\n8. Update the topic **show** view to display sponsored posts, beneath regular posts.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>22, "checkpoint_type"=>"normal", "position"=>22, "points"=>1, "ref"=>"0a86fd89-36d7-4552-a63e-c02a97df2fdd|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2118", "assessment"=>nil}, {"id"=>2119, "name"=>"Rails: Validations", "summary"=>"Validations: ensuring data is valid before persisting", "body"=>"<!-- { ids:[2119], name:'Rails: Validations', summary:'Validations: ensuring data is valid before persisting' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Active Record Validations](http://guides.rubyonrails.org/active_record_validations.html)\n</mentor-checkpoint-note>\n\n<center>\n  ![Validation](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-validation/validation.png)\n</center>\n\n> “I work hard for the audience. It's entertainment. I don't need validation.”\n>\n> — Denzel Washington\n\n## Overview and Purpose\n\nIn this checkpoint you'll learn more about data validation and partials.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Explain data validation.\n- Discuss how partials are used within Rails.\n- Discuss how form helpers are used.\n\n## Validating Data\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/ttxaieex3p\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nThink of Bloccit's database as an exclusive club. To get in, you have to present yourself in the right way. The bouncer decides if you will be a good customer for the club or if you are likely to cause a ruckus and ruin the fun for everyone. Validation methods serve as a bouncer for our database and will not allow data to be inserted if the data doesn't look right.\n\nValidation methods are provided by `ActiveRecord` and allow us to define valid states for model attributes. Validations can prevent unwanted data from entering the database. Validation methods allow us to check for things like presence, length, numericality, format, and uniqueness.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n\n## Validation Specs\n\nLet's validate the `Post` model with the following rules. An instance of `Post` must:\n\n* have a title, body, and topic\n* have at least five characters in the title\n* have at least 20 characters in the body\n\n> There are numerous types of validations. The most common are `presence`, `length`, and `format`. The [Rails Guide](http://guides.rubyonrails.org/active_record_validations.html) on validations is a good reference to keep bookmarked.\n\nAdd the following tests to `post_spec.rb`:\n\n```ruby(spec/models/post_spec.rb)\n ...\n   it { is_expected.to belong_to(:topic) }\n\n+  it { is_expected.to validate_presence_of(:title) }\n+  it { is_expected.to validate_presence_of(:body) }\n+  it { is_expected.to validate_presence_of(:topic) }\n+\n+  it { is_expected.to validate_length_of(:title).is_at_least(5) }\n+  it { is_expected.to validate_length_of(:body).is_at_least(20) }\n+\n   describe \"attributes\" do\n     it \"has title and body attributes\" do\n       expect(post).to have_attributes(title: title, body: body)\n ...\n```\n\nAt __#1__, we test that `Post` validates the presence of `title`, `body`, and `topic`.\nAt __#2__, we test that `Post` validates the lengths of `title` and `body`.\n\nRun `post_spec.rb` to see that the five new tests fail:\n\n```bash(Terminal)\n$ rspec spec/models/post_spec.rb\n```\n\n## Validating Posts\n\nAdd the validations tested above to `Post` using the `validates` method:\n\n```ruby(app/models/post.rb)\n class Post < ActiveRecord::Base\n   belongs_to :topic\n   has_many :comments, dependent: :destroy\n\n+  validates :title, length: { minimum: 5 }, presence: true\n+  validates :body, length: { minimum: 20 }, presence: true\n+  validates :topic, presence: true\n end\n```\n\nRun `post_spec.rb` again to confirm that our validations satisfy our tests:\n\n```bash(Terminal)\n$ rspec spec/models/post_spec.rb\n```\n\n## Validations in Action\n\nExamine how these validations work by opening the Rails console and creating a new `Post` object:\n\n> Restart the console if it's already running.\n\n```ruby(Console)\n$ rails c\n>> my_post = Post.new\n=> #<Post id: nil, title: nil, body: nil, created_at: nil, updated_at: nil, topic_id: nil>\n```\n\nCheck to see if `my_post` is valid:\n\n```ruby(Console)\n>> my_post.valid?\n=> false\n```\n\nPrint the errors that make `my_post` invalid:\n\n```ruby(Console)\n>> my_post.errors\n=> #<ActiveModel::Errors:0x007fad729366c0 @base=#<Post id: nil, title: nil, body: nil, created_at: nil, updated_at: nil, topic_id: nil>, @messages={:title=>[\"is too short (minimum is 5 characters)\", \"can't be blank\"], :body=>[\"is too short (minimum is 20 characters)\", \"can't be blank\"], :topic=>[\"can't be blank\"]}>\n```\n\nPrint the complete error messages:\n\n```ruby(Console)\n>> my_post.errors.full_messages\n=> [\"Title is too short (minimum is 5 characters)\", \"Title can't be blank\", \"Body is too short (minimum is 20 characters)\", \"Body can't be blank\", \"Topic can't be blank\"]\n```\n\nPrint the `:title` error:\n\n```ruby(Console)\n>> my_post.errors[:title]\n=> [\"is too short (minimum is 5 characters)\", \"can't be blank\"]\n```\n\nSince `my_post` was created without values, it didn't meet the conditions we validate in `Post`. If you try to save it, the method will return `false` and fail to save. If you call the `save!` method on the post, it will throw an error.\n\n> Remember what [`!` does](http://dablog.rubypal.com/2007/8/15/bang-methods-or-danger-will-rubyist)?\n\n```ruby(Console)\n> my_post.save!\n   (0.1ms)  begin transaction\n   (0.1ms)  rollback transaction\nActiveRecord::RecordInvalid: Validation failed: Title is too short (minimum is 5 characters), Title can't be blank, Body is too short (minimum is 20 characters), Body can't be blank, Topic can't be blank\n```\n\n> Quick challenge: Create a new `Post` object from the console which satisfies all of the validations.\n\n## Displaying Validation Errors\n\nLet's change our post views to display errors raised by our validations. Because these changes will affect the forms on both the **new** and the **edit** views, it's a good time to demonstrate how to use partials to make our views DRY.\n\nOpen the **edit** view and make the following changes:\n\n```erb(app/views/posts/edit.html.erb)\n <h1>Edit Post</h1>\n\n <div class=\"row\">\n   <div class=\"col-md-4\">\n     <p>Guidelines for posts</p>\n     <ul>\n       <li>Make sure it rhymes.</li>\n       <li>Don't use the letter \"A\".</li>\n       <li>The incessant use of hashtags will get you banned.</li>\n     </ul>\n   </div>\n <div class=\"col-md-8\">\n-    <%= form_for [@post.topic, @post] do |f| %>\n-      <div class=\"form-group\">\n-        <%= f.label :title %>\n-        <%= f.text_field :title, class: 'form-control', placeholder: \"Enter post title\" %>\n-      </div>\n-      <div class=\"form-group\">\n-        <%= f.label :body %>\n-        <%= f.text_area :body, rows: 8, class: 'form-control', placeholder: \"Enter post body\" %>\n-      </div>\n-      <div class=\"form-group\">\n-        <%= f.submit \"Save\", class: 'btn btn-success' %>\n-      </div>\n-    <% end %>\n+    <%= render partial: 'form', locals: { topic: @post.topic, post: @post } %>\n   </div>\n </div>\n```\n\nWe just replaced a large chunk of code with a **partial**. Partials are fragments of view code, which are called from views. Partials are called with the `render` method. Rendering a partial is like copying and pasting view code from another file.\n\nWe've rendered a partial in the **edit** view, but this partial file doesn't yet exist. We need to create the partial and add the code we just removed from the **edit** view.\n\n> Why remove code from one view file, just to paste it in another? Partials make our code DRYer, clearer, and more modular. By isolating conceptual units in reusable files, we can call them from multiple views without repeating ourselves. Partials also make complex views more readable for developers.\n\n## Form Partial\n\nCreate a new file in `app/views/posts` named `_form.html.erb`. The underscore at the beginning of a file name lets Rails know that it's a partial. Add the code we deleted from the **edit** view to `_form.html.erb`:\n\n```erb(app/views/posts/_form.html.erb)\n <!-- #3 -->\n+<%= form_for [topic, post] do |f| %>\n+  <div class=\"form-group\">\n+    <%= f.label :title %>\n+     <%= f.text_field :title, class: 'form-control', placeholder: \"Enter post title\" %>\n+  </div>\n+  <div class=\"form-group\">\n+    <%= f.label :body %>\n+    <%= f.text_area :body, rows: 8, class: 'form-control', placeholder: \"Enter post body\" %>\n+  </div>\n+  <div class=\"form-group\">\n+    <%= f.submit \"Save\", class: 'btn btn-success' %>\n+  </div>\n+<% end %>\n```\n\nAt __#3__ we use the `topic` and `post` [local variables](http://guides.rubyonrails.org/layouts_and_rendering.html#passing-local-variables) we passed into the partial when we rendered it:\n\n```erb(app/views/posts/edit.html.erb)\n    <%= render partial: 'form', locals: { topic: @post.topic, post: @post } %>\n```\n\n> Our view is called `_form.html.erb`, while we render the `partial: 'form'`. This is a Rails convention for partial naming. If we don't follow it, the partial will not be found.\n\n`locals: { topic: @post.topic, post: @post }` passes local variables to the partial. `@post.topic` and `@post` are assigned to `topic` and `post`, respectively. This means we can refer to these local variables, rather than the `@post` __instance__ variable we used in the **edit** view.\n\n> Although the partial __does__ have access to `@post`, it's a better practice to use local variables. A primary reason is flexibility. We want to be able to render our partial on __any__ page, whether or not it has access to the same instance variables.\n\nStart the Rails server, navigate to the **edit** view, and make sure no errors appear. If the partial worked, the **edit** view should appear as it did before the refactor. The great thing about partials is that they're reusable. The form for creating new posts is the same as the form for editing, so let's refactor the **new** view next.\n\n## Refactor the Posts New View\n\nOpen the posts **new** view and make the following changes:\n\n```erb(app/views/posts/new.html.erb)\n <h1>New Post</h1>\n\n <div class=\"row\">\n\n   <div class=\"col-md-4\">\n\n     <p>Guidelines for posts</p>\n     <ul>\n       <li>Make sure it rhymes.</li>\n       <li>Don't use the letter \"A\".</li>\n       <li>The incessant use of hashtags will get you banned.</li>\n     </ul>\n   </div>\n\n   <div class=\"col-md-8\">\n\n-    <%= form_for [@topic, @post] do |f| %>\n-      <div class=\"form-group\">\n-        <%= f.label :title %>\n-        <%= f.text_field :title, class: 'form-control', placeholder: \"Enter post title\" %>\n-      </div>\n-      <div class=\"form-group\">\n-        <%= f.label :body %>\n-        <%= f.text_area :body, rows: 8, class: 'form-control', placeholder: \"Enter post body\" %>\n-      </div>\n-      <div class=\"form-group\">\n-        <%= f.submit \"Save\", class: 'btn btn-success' %>\n-      </div>\n-    <% end %>\n+    <%= render partial: 'form', locals: { topic: @topic, post: @post } %>\n   </div>\n </div>\n```\n\n> Partials are essentially the Rails view version of [extract-method refactoring](http://refactoring.com/catalog/extractMethod.html). By consolidating reused code, we make sure we only have to edit it in one location, and we can reuse it easily.\n\nVisit the **new** view and validate that it looks the same as it did prior to the refactor.\n\nWhile we're on **new** view, let's create a new post, leaving the title and body blank. We should see an error that looks like this:\n\n![new-post-error](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-validation/new-post-error.png)\n\nThis error isn't very informative. In the next section we'll refactor to show the error messages raised by the `validates` methods.\n\n## The Application Helper\n\nStyling the elements on the form partial is a little tricky. If the form displays errors, we want a certain style, and if the form doesn't display errors, we want a different style. We could include conditional logic directly in our view, but Rails conventions strongly suggest keeping as much logic as possible out of the view. Views cluttered with if statements are hard to read, hard to maintain, and confusing. We'll use the `ApplicationHelper` to implement a DRY solution for toggling the `div` classes we'll need to display an error-full or error-less view.\n\n> Methods in `ApplicationHelper` can be used across our application. It's a `Module` that Rails includes with other classes in our app. Any public method we write in `ApplicationHelper` will be available in all views.\n\nOpen `app/helpers/application_helper.rb` and add the following code:\n\n```ruby(app/helpers/application_helper.rb)\n module ApplicationHelper\n # #4\n+  def form_group_tag(errors, &block)\n+    css_class = 'form-group'\n+    css_class << ' has-error' if errors.any?\n# #5\n+    content_tag :div, capture(&block), class: css_class\n+  end\n end\n```\n\nAt __#4__, we define a method named `form_group_tag` which takes two arguments. The first argument is an array of errors, and the second is a block.\n\n> The `&` turns the block into a [`Proc`](http://ruby-doc.org/core-2.2.0/Proc.html), which we've seen before but haven't named. A `Proc` is a block that can be reused like a variable.\n\nAt __#5__, the `content_tag` helper method is called. This method is used to build the HTML and CSS to display the form element and any associated errors.\n\nHelpers are written in Ruby and usually return HTML. The [`content_tag`](http://apidock.com/rails/ActionView/Helpers/TagHelper/content_tag) is one such method. It takes a symbol argument, a block, and an options hash. It then creates the symbol-specified HTML tag with the block contents, and if specified, the options.\n\nWe need a different `div` based on the errors raised by the `validates` method, so let's use `form_group_tag` in the form partial:\n\n```erb(app/view/posts/_form.html.erb)\n <%= form_for [topic, post] do |f| %>\n-  <div class=\"form-group\">\n+  <% if post.errors.any? %>\n # #6\n+    <div class=\"alert alert-danger\">\n # #7\n+      <h4><%= pluralize(post.errors.count, \"error\") %>.</h4>\n+      <ul>\n+        <% post.errors.full_messages.each do |msg| %>\n+          <li><%= msg %></li>\n+        <% end %>\n+      </ul>\n+    </div>\n+  <% end %>\n  # #8\n+  <%= form_group_tag(post.errors[:title]) do %>\n     <%= f.label :title %>\n     <%= f.text_field :title, class: 'form-control', placeholder: \"Enter post title\" %>\n-  </div>\n-  <div class=\"form-group\">\n+  <% end %>\n  # #9\n+  <%= form_group_tag(post.errors[:body]) do %>\n     <%= f.label :body %>\n     <%= f.text_area :body, rows: 8, class: 'form-control', placeholder: \"Enter post body\" %>\n-  </div>\n+  <% end %>\n   <div class=\"form-group\">\n     <%= f.submit \"Save\", class: 'btn btn-success' %>\n   </div>\n <% end %>\n```\n\nAt __#6__, if there are any validation errors, we display an alert with the number of errors and their messages.\nAt __#7__, we use the [`pluralize` method](http://apidock.com/rails/ActionView/Helpers/TextHelper/pluralize) to pluralize \"error\" if there is more than one error.\nAt __#8__, we use `form_group_tag` to display `title` errors.\nAt __#9__, we use `form_group_tag` to display `body` errors.\n\nOpen the post **new** view and submit a new post with no `title` or `body`. Validate that you see the correctly formatted error messages. Also submit a new post with a valid `title` and `body` to ensure that, given valid inputs, a user can successfully create a new post.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Data validation](http://en.wikipedia.org/wiki/Data_validation) | Data validation is the process of ensuring that the data received by a program is clean, correct, and useful. |\n| [Partial templates](http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials) | Partial templates - called \"partials\" - split the rendering process into manageable segments. Partials allow the code which renders a particular piece of HTML to be moved to its own file. |\n| [Form Helpers](http://guides.rubyonrails.org/form_helpers.html) | Form helpers generate HTML form markup. They are used to reduce the burden of writing and maintaining HTML form markup. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nIn addition to validating posts, we should validate topics. Use TDD to complete this assignment.\n\n1. Add a validation to ensure that topic names are at least five characters long and descriptions are at least 15 characters long.\n2. Test your validation by creating a topic in the Rails console with a four character name.\n3. Create a form partial for topics.\n4. Refactor the topic **edit** and **new** views to use the form partial.\n5. Use the `form_group_tag` helper method created in the checkpoint to display errors for invalid topics.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center><script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_uox306c4uo popover=true popoverAnimateThumbnail=true popoverContent=link\" style=\"display:inline\"><a href=\"#\">Validations Solution</a></div>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>23, "checkpoint_type"=>"normal", "position"=>23, "points"=>1, "ref"=>"0bc6da9f-8b90-45e4-a13e-8a1de7b077d9|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2119", "assessment"=>nil}, {"id"=>2120, "name"=>"Rails: Authentication - User Model", "summary"=>"User Model: representing users for authorization using models and password hashing", "body"=>"<!-- { ids:[2120], name:'Rails: Authentication - User Model', summary:'User Model: representing users for authorization using models and password hashing' } -->\n<center>\n  ![babe-ruth](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-authentication/babe_ruth.jpg)\n</center>\n\n> “Truth is a point of view, but authenticity can't be faked.”\n>\n> — Peter Guber\n\n## Overview and Purpose\n\nIn this checkpoint you'll learn more about `ActiveRecord` callbacks, validations and regular expressions.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Elaborate on how callbacks work in Rails.\n- Elaborate on `ActiveRecord` validations.\n- Explain regular expressions and their purpose.\n\n## Modeling Users\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/6liwt7vv8r\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nUser authentication systems determine whether a user is who they claim to be. They allow users to sign up, sign in, and sign out. We'll build the foundation of Bloccit's user authentication system by creating the `User` model.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Custom Authentication\n\nThere are some popular authentication systems for Rails, including [Devise](https://github.com/plataformatec/devise), [OmniAuth](https://github.com/intridea/omniauth), and [AuthLogic](https://github.com/binarylogic/authlogic). While these systems offer robust functionality, building our own solution will give us a deeper understanding of authentication-based  models, controllers, and routing.\n\n## Generate `User`\n\nBefore we build authentication functionality, we'll need a user to authenticate. Generate a `User` model to represent the users of Bloccit with the following attributes:\n\n| **Attribute** | **Description** |\n| :-- | :-- |\n| `name` | A string to represent the user's name. |\n| `email` | A string to represent the user's email.  |\n| `password_digest` | A string to store the user's [hashed](https://en.wikipedia.org/wiki/Hash_function) password. |\n\n```bash(Terminal)\n$ rails generate model User name:string email:string password_digest:string\n```\n\nRun the migration:\n\n```bash(Terminal)\n$ rake db:migrate\n```\n\nWhen we migrate the database, we are ultimately changing the database's schema, which describes the layout, structure, and contents of the database. Open `db/schema.rb` and review the schema.\n\n`schema.rb` serves two important purposes. It represents the current state of the database, which can be difficult to deduce from the migration files. It also populates the database schema before tests are executed.\n\n## Test `User`\n\nLet's write our first specs for `User`:\n\n```Ruby(spec/models/user_spec.rb)\n require 'rails_helper'\n\n RSpec.describe User, type: :model do\n-  pending \"add some examples to (or delete) \#{__FILE__}\"\n+  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"password\") }\n+  # Shoulda tests for name\n+  it { is_expected.to validate_presence_of(:name) }\n+  it { is_expected.to validate_length_of(:name).is_at_least(1) }\n+\n+  # Shoulda tests for email\n+  it { is_expected.to validate_presence_of(:email) }\n+  it { is_expected.to validate_uniqueness_of(:email) }\n+  it { is_expected.to validate_length_of(:email).is_at_least(3) }\n+  it { is_expected.to allow_value(\"user@bloccit.com\").for(:email) }\n+\n+  # Shoulda tests for password\n+  it { is_expected.to validate_presence_of(:password) }\n+  it { is_expected.to have_secure_password }\n+  it { is_expected.to validate_length_of(:password).is_at_least(6) }\n+\n+  describe \"attributes\" do\n+    it \"should have name and email attributes\" do\n+      expect(user).to have_attributes(name: \"Bloccit User\", email: \"user@bloccit.com\")\n+    end\n+  end\n end\n```\n\nAs with our other model tests, the tests above test for field validation and attributes. Let's simulate and add tests for an invalid user:\n\n```Ruby(spec/models/user_spec.rb)\n...\n\n # #1\n+  describe \"invalid user\" do\n+    let(:user_with_invalid_name) { User.new(name: \"\", email: \"user@bloccit.com\") }\n+    let(:user_with_invalid_email) { User.new(name: \"Bloccit User\", email: \"\") }\n+\n+    it \"should be an invalid user due to blank name\" do\n+      expect(user_with_invalid_name).to_not be_valid\n+    end\n+\n+    it \"should be an invalid user due to blank email\" do\n+      expect(user_with_invalid_email).to_not be_valid\n+    end\n+\n+  end\n end\n```\n\nAt __#1__, we wrote a test that does not follow the same conventions as our previous tests. We are testing for a value that we know should be invalid. We call this a **true negative**, as we are testing for a value that _shouldn't_ exist. A **true positive** follows the reciprocal pattern and tests for a known and valid value. True negatives are a useful testing strategy, because if we only test for values that we know should exist, we may not catch values that shouldn't.\n\nRun the tests, and we'll see 14 failures:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n```\n\n## `User` Model\n\nLet's add the functionality we just tested for in `user_spec.rb`:\n\n```Ruby(app/models/user.rb)\n class User < ActiveRecord::Base\n # #2\n+  before_save { self.email = email.downcase if email.present? }\n\n # #3\n+  validates :name, length: { minimum: 1, maximum: 100 }, presence: true\n # #4\n+ validates :password, presence: true, length: { minimum: 6 }, if: \"password_digest.nil?\"\n+ validates :password, length: { minimum: 6 }, allow_blank: true\n # #5\n+  validates :email,\n+            presence: true,\n+            uniqueness: { case_sensitive: false },\n+            length: { minimum: 3, maximum: 254 }\n\n # #6\n+  has_secure_password\n end\n```\n\nAt __#2__, we register an inline callback directly after the `before_save` [callback](http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html). `{ self.email = email.downcase }` is the code that will run when the callback executes.\n\nPer Ruby's documentation, **\"callbacks are hooks into the life cycle of an Active Record object that allow you to trigger logic before or after an alteration of the object state.\"** Callbacks are similar to receiving mail that has the \"return service requested\" mandate, along with a form to complete. As the receiver of the mail, we are requested to return an envelope with the completed form. The requester in this example is analogous to a `User` in our code. `User` is requesting that the database execute `{ self.email = email.downcase }`. The database is analogous to the receiver of the mail and is asked to execute `{ self.email = email.downcase }`.\n\nAt __#3__, we use Ruby's `validates` function to ensure that `name` is present and has a maximum and minimum length.\n\nAt __#4__, we validate password with two separate validations:\n\n* The first validation executes if `password_digest` is `nil`. This ensures that when we create a new user, they have a valid password.\n* The second validation ensures that when updating a user's password, the updated password is also six characters long. allow_blank: true skips the validation if no updated password is given. This allows us to change other attributes on a user without being forced to set the password.\n\nAt __#5__, we validate that `email` is present, unique, case insensitive, has a minimum length, has a maximum length, and that it is a properly formatted email address.\n\nAt __#6__, we use Ruby's `has_secure_password`. `has_secure_password` [\"adds methods to set and authenticate against a BCrypt password. This mechanism requires you to have a password_digest attribute\"](http://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password). This function abstracts away much of the complexity of obfuscating user passwords using hashing algorithms which we would otherwise be inclined to write to securely save passwords. `has_secure_password` requires a `password_digest` attribute on the model it is applied to. `has_secure_password` creates two virtual attributes, `password` and `password_confirmation` that we use to set and save the password.\n\nTo use `has_secure_password`, we need to install [`BCrypt`](https://rubygems.org/gems/bcrypt-ruby/versions/3.1.5). `BCrypt` is a module that encapsulates complex hashing algorithms. `BCrypt` takes a plain text password and turns it into an unrecognizable string of characters using a hashing algorithm such as MD5. Typically, hashing algorithms are one directional so that if someone gains access to the hashed password, they will not be able to reverse the hashing algorithm to gain the plaintext password. This way, our password is safe even if someone gains access to our database.\n\nLet's add `BCrypt` to our Gemfile. Add it to the bottom of the Gemfile, outside of any blocks:\n\n```Ruby(Gemfile)\n...\n\ngem 'bootstrap-sass'\n\n+# Used for encrypting User passwords\n+gem 'bcrypt'\n\n...\n```\n\nAs usual after adding a gem to the Gemfile, we need to install it:\n\n```bash(Terminal)\n$ bundle install\n\n...\n```\n\nLet's run our specs again:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n...............\n\nFinished in 0.111 seconds (files took 1.41 seconds to load)\n15 examples, 0 failures\n```\n\nOur specs now pass and we are in the green phase of TDD. We still need to add user routes though:\n\n```Ruby(config/routes.rb)\n...\n   resources :topics do\n     resources :posts, except: [:index]\n   end\n\n # #7\n+  resources :users, only: [:new, :create]\n\n...\n```\n\nAt __#7__, we create routes for `new` and `create` actions. The `only` hash key will prevent Rails from creating unnecessary routes.\n\nRun `rake routes` to see the user routes that were generated:\n\n```bash(Terminal)\n$ rake routes | grep user\n```\n\nWe're now able to represent and store users in our app.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.\n\n## Recap\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Active Record Callbacks](http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html) | Callbacks are a convenient and powerful way to ensure that logic happens before or after an operation is performed. |\n| [Active Record Validations](http://guides.rubyonrails.org/active_record_validations.html) | Validations act as constraints on model attributes. |\n| [Regular Expressions](https://en.wikipedia.org/wiki/Regular_expression) | A regular expression defines a specific character pattern that is used to match against a string. If you want to review regular expressions in more depth, [regexr.com](http://regexr.com/) has an online tool to experiment with. |\n| [`has_secure_password`](http://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password) | Integrates with `BCrypt` to provide safe authentication. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nAdd another callback to `User`. The callback should format all names in the same manner, by capitalizing the first letter of both the first and last names of a given user. The callback should follow these instructions for formatting:\n\n1. Run before `User` is saved.\n2. Split the user's `name` on a space (e.g. between a first name and a last name). Loop over each name and uppercase the first letter. Re-combine the first and last names with a space in-between and save it to the `name` attribute.\n3. Your solution does _not_ have to check for an existing name that is properly formatted. For example, \"Steve Jobs\" is properly formatted, but your solution should work on it anyways.\n4. Write your solution using TDD.\n\nThese functions may help you complete this assignment:\n\n* [`String#split`](http://ruby-doc.org/core-2.2.0/String.html#method-i-split)\n* [`String#capitalize`](http://ruby-doc.org/core-2.2.0/String.html#method-i-capitalize)\n* [`Array#join`](http://ruby-doc.org/core-2.2.0/Array.html#method-i-join)\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_kyl8q2clrd popover=true popoverAnimateThumbnail=true popoverContent=link\" style=\"display:inline\"><a href=\"#\">Authentication User Model Solution</a></div>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>24, "checkpoint_type"=>"normal", "position"=>24, "points"=>1, "ref"=>"b61cd869-77ee-4332-873b-e813cd3e509b|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2120", "assessment"=>nil}, {"id"=>2121, "name"=>"Rails: Authentication - Signing Up", "summary"=>"Signing Up: allowing users to create accounts and sign up Bloccit", "body"=>"<!-- { ids:[2121], name:'Rails: Authentication - Signing Up', summary:'Signing Up: allowing users to create accounts and sign up Bloccit' } -->\n<center>\n  ![Seal of Authenticity](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-authenitcation-signup/banner.png)\n</center>\n\n> “Honesty and transparency make you vulnerable. Be honest and transparent anyway.”\n>\n> —  Mother Theresa\n\n## Overview and Purpose\n\nIn this checkpoint you'll add users to your application.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Create a basic user scheme for a Ruby on Rails application.\n- Give the users of a Ruby on Rails application the ability to sign up for your application.\n\n## Signing Up\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/iy7wcd5swv\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\nBloccit has the ability to model and persist users, but we have no way of creating a user or signing up for the application. We'll implement sign up in this checkpoint.\n\n## `UsersController`\n\nTo create users, we'll need a controller. Create the `UsersController`:\n\n```bash(Terminal)\n$ rails generate controller Users\n```\n\nStart the Rails server and open [localhost:3000/users/new](http://localhost:3000/users/new). We see an error stating that **\"The action 'new' could not be found for UsersController\"**. This is because we haven't created actions for `UsersController` and we don't have the proper routes in place. We'll write `UsersController` using TDD, as usual.\n\nAdd the following code in `users_controller_spec.rb`:\n\n```Ruby(spec/controllers/users_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe UsersController, type: :controller do\n # #1\n+  let(:new_user_attributes) do\n+    {\n+        name: \"BlocHead\",\n+        email: \"blochead@bloc.io\",\n+        password: \"blochead\",\n+        password_confirmation: \"blochead\"\n+    }\n+  end\n end\n```\n\nAt __#1__, we create a hash of attributes named `new_user_attributes` so we can use them easily throughout our spec.\n\n## `new` Action\n\n```Ruby(spec/controllers/users_controller_spec.rb)\n ...\n\n # #2\n+  describe \"GET new\" do\n+    it \"returns http success\" do\n+      get :new\n+      expect(response).to have_http_status(:success)\n+    end\n+\n+    it \"instantiates a new user\" do\n+      get :new\n+      expect(assigns(:user)).to_not be_nil\n+    end\n+  end\n\n ...\n```\n\nAt __#2__, we test the `new` action for HTTP success when issuing a `GET`. The first test expects the response to return an HTTP response code of 200. The second test expects `new` to instantiate a new user.\n\nRun the spec, and see that we have two failing tests.\n\n```bash(Terminal)\n$ rspec spec/controllers/users_controller_spec.rb\n```\n\nLet's write the implementation code for `new` and pass these tests:\n\n```Ruby(app/controllers/users_controller.rb)\n class UsersController < ApplicationController\n+  def new\n+    @user = User.new\n+  end\n end\n```\n\nLet's also create the __new__ view:\n\n```bash(terminal)\n$ touch app/views/users/new.html.erb\n```\n\nAs before, we created an instance variable named `@user` to be used by the __new__ view's form. Run the spec again and our two tests should pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/users_controller_spec.rb\n```\n\n## `create` Action\n\n`create` is the action that is called when the **new** view's form is submitted with valid attributes. Let's write the tests first:\n\n```Ruby(spec/controllers/users_controller_spec.rb)\n ...\n\n # #3\n+  describe \"POST create\" do\n+    it \"returns an http redirect\" do\n+      post :create, user: new_user_attributes\n+      expect(response).to have_http_status(:redirect)\n+    end\n+\n # #4\n+    it \"creates a new user\" do\n+      expect{\n+        post :create, user: new_user_attributes\n+      }.to change(User, :count).by(1)\n+    end\n+\n # #5\n+    it \"sets user name properly\" do\n+      post :create, user: new_user_attributes\n+      expect(assigns(:user).name).to eq new_user_attributes[:name]\n+    end\n+\n # #6\n+    it \"sets user email properly\" do\n+      post :create, user: new_user_attributes\n+      expect(assigns(:user).email).to eq new_user_attributes[:email]\n+    end\n+\n # #7\n+    it \"sets user password properly\" do\n+      post :create, user: new_user_attributes\n+      expect(assigns(:user).password).to eq new_user_attributes[:password]\n+    end\n+\n # #8\n+    it \"sets user password_confirmation properly\" do\n+      post :create, user: new_user_attributes\n+      expect(assigns(:user).password_confirmation).to eq new_user_attributes[:password_confirmation]\n+    end\n+  end\n end\n```\n\nAt __#3__, we test the `create` action for HTTP success when issuing a `POST` with `new_user_attributes` set as the params hash.\n\nAt __#4__, we test that the database count on the users table increases by one when we issue a `POST` to `create`.\n\nAt __#5__, we test that we set `user.name` properly when creating a user.\n\nAt __#6__, we test that we set `user.email` properly when creating a user.\n\nAt __#7__, we test that we set `user.password` properly when creating a user.\n\nAt __#8__, we test that we set `user.password_confirmation` properly when creating a user.\n\nRun the spec to see the six new failures:\n\n```bash(Terminal)\n$ rspec spec/controllers/users_controller_spec.rb\n```\n\nLet's pass these tests by updating `UsersController` with a `create` action:\n\n```Ruby(app/controllers/users_controller.rb)\n class UsersController < ApplicationController\n   def new\n     @user = User.new\n   end\n\n+  def create\n # #9\n+    @user = User.new\n+    @user.name = params[:user][:name]\n+    @user.email = params[:user][:email]\n+    @user.password = params[:user][:password]\n+    @user.password_confirmation = params[:user][:password_confirmation]\n+\n # #10\n+    if @user.save\n+      flash[:notice] = \"Welcome to Bloccit \#{@user.name}!\"\n+      redirect_to root_path\n+    else\n+      flash.now[:alert] = \"There was an error creating your account. Please try again.\"\n+      render :new\n+    end\n+  end\n\n end\n```\n\nAt __#9__, we create a new user with `new` and then set the corresponding attributes from the params hash.\n\nAt __#10__, we `save` the new user to the database. If the database `save` is successful, we add a `flash` message and then redirect the user to the root path. Otherwise, we display an error and render the __new__ view.\n\nRun the spec again and our six tests pass.\n\n> Remember that we already created `new` and `create` routes in the previous checkpoint, so we do not need to modify `routes.rb` at this point, as we have done in the past with other controllers.\n\n## HTML\n\nLet's build the views for creating users. Open the users __new__ view and add the following:\n\n```Ruby(app/views/users/new.html.erb)\n+<h2>Sign up</h2>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-8\">\n+    <%= form_for @user do |f| %>\n <!-- #11 -->\n+      <% if @user.errors.any? %>\n+        <div class=\"alert alert-danger\">\n+          <h4><%= pluralize(@user.errors.count, \"error\") %>.</h4>\n+          <ul>\n+            <% @user.errors.full_messages.each do |msg| %>\n+              <li><%= msg %></li>\n+            <% end %>\n+          </ul>\n+        </div>\n+      <% end %>\n <!-- #12 -->\n+      <%= form_group_tag(@user.errors[:name]) do %>\n+        <%= f.label :name %>\n+        <%= f.text_field :name, autofocus: true, class: 'form-control', placeholder: \"Enter name\" %>\n+      <% end %>\n+      <%= form_group_tag(@user.errors[:email]) do %>\n+        <%= f.label :email %>\n+        <%= f.email_field :email, class: 'form-control', placeholder: \"Enter email\" %>\n+      <% end %>\n+      <%= form_group_tag(@user.errors[:password]) do %>\n+        <%= f.label :password %>\n+        <%= f.password_field :password, class: 'form-control', placeholder: \"Enter password\" %>\n+      <% end %>\n+      <%= form_group_tag(@user.errors[:password_confirmation]) do %>\n+        <%= f.label :password_confirmation %>\n+        <%= f.password_field :password_confirmation, class: 'form-control', placeholder: \"Enter password confirmation\" %>\n+      <% end %>\n+      <div class=\"form-group\">\n+        <%= f.submit \"Sign up\", class: 'btn btn-success' %>\n+      </div>\n+    <% end %>\n+  </div>\n+</div>\n```\n\nAt __#11__, we check the `errors` hash on `@user`. The `errors` hash is provided by [`ActiveModel:Errors`](http://api.rubyonrails.org/classes/ActiveModel/Errors.html). If there are errors with `@user`, such as invalid attributes, we display the corresponding error messages.\n\nAt __#12__, we add form fields for `name` and `email`, as well as the virtual attributes provided by `has_secure_password`: `password` and `password_confirmation`.\n\nIt's been a while since we updated our home page. Let's use this opportunity to enhance the home page with an improved design and a call-to-action for signing up:\n\n```Ruby(app/views/welcome/index.html.erb)\n-<h1>Welcome to Bloccit</h1>\n-<p id=\"index-title\">This is the home page for Bloccit.</p>\n-<div class=\"posts\">Post 1 goes here.</div>\n-<div class=\"posts\">Post 2 goes here.</div>\n-<section>I am the content in a section element.</section>\n\n+<br>\n+<div class=\"jumbotron\">\n+  <h1>Bloccit</h1>\n+  <p>Bloccit is a resource for sharing links with your friends!</p>\n+  <p>\n+    <%= link_to \"Sign Up\", new_user_path, class: 'btn btn-primary' %> today!\n+  </p>\n+</div>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-4\">\n+    <h2>Solves world hunger</h2>\n+    <p>Bloccit will deliver food and water to those in need, all over the world.</p>\n+  </div>\n+  <div class=\"col-md-4\">\n+    <h2>Eliminates poverty</h2>\n+    <p>Bloccit will deliver money and education to those in need, all over the world.</p>\n+  </div>\n+  <div class=\"col-md-4\">\n+    <h2>Makes you better looking</h2>\n+    <p>Bloccit will make you better looking: it's scientifically proven to make men look like Ryan Gosling and women look like Shakira.</p>\n+  </div>\n+</div>\n```\n\nLet's also add a **Sign Up** link to the top navigation:\n\n```HTML(app/views/layouts/application.html.erb)\n...\n\n   <ul class=\"nav nav-tabs\">\n     <li><%= link_to \"Bloccit\", root_path %></li>\n     <li><%= link_to \"Topics\", topics_path %></li>\n     <li><%= link_to \"About\", about_path %></li>\n\n+    <div class=\"pull-right user-info\">\n+      <%= link_to \"Sign Up\", new_user_path %>\n+    </div>\n  </ul>\n\n  <% if flash[:notice] %>\n\n...\n```\n\n## CSS Housekeeping\n\nWhile we're updating our home page, we can improve its appearance by adding some breathing room around our top nav elements. Add the following class selectors:\n\n```css(app/assets/stylesheets/application.scss)\n ...\n @import \"bootstrap\";\n\n+.user-info {\n+  margin-top: 9px;\n+}\n+\n+.nav {\n+  margin-top: 5px;\n+}\n```\n\nTry creating valid and invalid users. Your results should look similar to the images below. First for a valid user:\n\n<center>\n![Successful User Creation](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-authenitcation-signup/successful-user-signup.png)\n</center>\n\n... and if you try to create an invalid user, with a mismatching Password and Password Confirmation:\n\n<center>\n![Failed User Creation](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-authenitcation-signup/failed-user-signup.png)\n</center>\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Deploy your updated master branch to production:\n\n```bash(Terminal)\n$ git push heroku master\n```", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nLet's add a static confirmation HTML page after a user submits the sign up form. The confirmation should verify the name and email address they entered by displaying the values they entered and asking them if they are correct.\n\n1. Create a new view for confirmation. It should look something like this:\n\n  <center>\n  ![Confirmation](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-authenitcation-signup/confirmation.png)\n  </center>\n\n2. Your form in `users/new.html.erb` will need to point to the new confirmation page. You can use `:url => { :action => :confirm }` in `form_for` to accomplish this:\n\n  ```Ruby(app/views/users/new.html.erb)\n  ...\n\n  <%= form_for @user, :url => { :action => :confirm } do |f| %>\n\n  ...\n  ```\n\n3. Add a route for your confirmation page. The route should be a `POST` to 'users/confirm' and point to `users#confirm`.\n\n4. Create a `confirm` action in `UsersController`. `confirm` should create a new user from the params hash and set its attributes appropriately. Send the params hash back to the `create` action in `UsersController` to save the params to the database after user confirmation. Use a button in the confirm form to achieve this:\n\n  `<%= button_to \"Yes\", {controller: \"users\", action: \"create\", params: params}, class: 'btn btn-success' %>`\n\n5. When a user clicks the \"No\" button it should take them back to the initial sign up view.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_lo965qun1z popover=true popoverAnimateThumbnail=true popoverContent=link\" style=\"display:inline\"><a href=\"#\">Authentication Sign Up Solution</a></div>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>25, "checkpoint_type"=>"normal", "position"=>25, "points"=>1, "ref"=>"70a6a2a2-7b71-4e53-9648-d03dfbd10a6c|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2121", "assessment"=>nil}, {"id"=>2122, "name"=>"Rails: Authentication - Signing In", "summary"=>"Signing In: allowing users to sign into Bloccit with persistent sessions", "body"=>"<!-- { ids:[2122], name:'Rails: Authentication - Signing In', summary:'Signing In: allowing users to sign into Bloccit with persistent sessions' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Stack Overflow: What are sessions? How do they work?](http://stackoverflow.com/questions/3804209/what-are-sessions-how-do-they-work)\n* [Wikipedia: Sessions](https://en.wikipedia.org/wiki/Session_(computer_science))\n</mentor-checkpoint-note>\n\n<center>\n  ![Session Lager](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-authentication-login/Session-Page-Banner.jpg)\n</center>\n\n> “Milk is for babies. When you grow up you have to drink beer.”\n>\n> — Arnold Schwarzenegger\n\n## Overview and Purpose\n\nThis checkpoint introduces you to sessions.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Explain what a session is.\n- Explain why sessions are necessary.\n- Incorporate Gravatar into an application.\n\n## Signing In\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/tp6prfeod4\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nNow that users can _sign up_ for Bloccit, they'll need to be able to _sign in_. Signing in to an application requires user information to persist while a user is signed in to Bloccit. That is, we must authenticate and retain user information so that we know who the user is until they sign out. We'll use a [session object](https://en.wikipedia.org/wiki/Session_%28computer_science%29) to persist a user's information after they sign in to Bloccit.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Sessions\n\nThere are many ways to implement a session object. The canonical implementation of a session is an [HTTP cookie](https://en.wikipedia.org/wiki/HTTP_cookie) and is used by many web applications, including Ruby on Rails applications. We'll use a combination of our own code plus Rails' [session object](http://guides.rubyonrails.org/security.html#sessions) to implement sessions in Bloccit.\n\nSessions are tracked and persisted by storing values in the client's cookies. They persist for a duration of time, or a duration based on action (i.e. sign in and sign out). Our session object will persist a user's information while they are signed in to Bloccit.\n\nGenerate a session controller without any actions:\n\n```bash(Terminal)\n$ rails generate controller Sessions\n```\n\nWe'll use this controller to create and destroy a user's session.\n\n## TDD the `SessionsController`\n\nLet's TDD the routing functions for our session object:\n\n```Ruby(spec/controllers/sessions_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe SessionsController, type: :controller do\n+  let(:my_user) { User.create!(name: \"Blochead\", email: \"blochead@bloc.io\", password: \"password\") }\n+\n+  describe \"GET new\" do\n+    it \"returns http success\" do\n+      get :new\n+      expect(response).to have_http_status(:success)\n+    end\n+  end\n+\n+  describe \"POST sessions\" do\n+    it \"returns http success\" do\n+      post :create, session: {email: my_user.email}\n+      expect(response).to have_http_status(:success)\n+    end\n+\n+    it \"initializes a session\" do\n+      post :create, session: {email: my_user.email, password: my_user.password}\n+      expect(session[:user_id]).to eq my_user.id\n+    end\n+\n+    it \"does not add a user id to session due to missing password\" do\n+      post :create, session: {email: my_user.email}\n+      expect(session[:user_id]).to be_nil\n+    end\n+\n+    it \"flashes #error with bad email address\" do\n+      post :create, session: {email: \"does not exist\"}\n+      expect(flash.now[:alert]).to be_present\n+    end\n+\n+    it \"renders #new with bad email address\" do\n+      post :create, session: {email: \"does not exist\"}\n+      expect(response).to render_template :new\n+    end\n+\n+    it \"redirects to the root view\" do\n+      post :create, session: {email: my_user.email, password: my_user.password}\n+      expect(response).to redirect_to(root_path)\n+    end\n+  end\n end\n```\n\nRun the spec to see the seven new examples and failures:\n\n```bash(Terminal)\n$ rspec spec/controllers/sessions_controller_spec.rb\n```\n\nLet's add some tests for `destroy`:\n\n```Ruby(spec/controllers/sessions_controller_spec.rb)\n...\n\n+  describe \"DELETE sessions/id\" do\n+    it \"render the #welcome view\" do\n+      delete :destroy, id: my_user.id\n+      expect(response).to redirect_to root_path\n+    end\n+\n+    it \"deletes the user's session\" do\n+      delete :destroy, id: my_user.id\n+      expect(assigns(:session)).to be_nil\n+    end\n+\n+    it \"flashes #notice\" do\n+      delete :destroy, id: my_user.id\n+      expect(flash[:notice]).to be_present\n+    end\n+  end\n\n...\n```\n\nWe have tests for signing in. Run them and see that all ten fail.\n\nLet's add a test to `users_controller_spec.rb` that checks a user is signed in after signing up:\n\n```Ruby(spec/controllers/users_controller_spec.rb)\n...\n     it \"sets user password_confirmation properly\" do\n       post :create, user: new_user_attributes\n       expect(assigns(:user).password_confirmation).to eq new_user_attributes[:password_confirmation]\n     end\n\n+    it \"logs the user in after sign up\" do\n+      post :create, user: new_user_attributes\n+      expect(session[:user_id]).to eq assigns(:user).id\n+    end\n   end\n end\n```\n\nNext, we'll code the actions in the `SessionsController` to pass these tests.\n\n## `SessionsController`\n\nPer our spec, we need `new`, `create`, and `destroy` actions for `SessionsController`:\n\n```Ruby(app/controllers/sessions_controller.rb)\n class SessionsController < ApplicationController\n+ def new\n+ end\n+\n+ def create\n # #1\n+   user = User.find_by(email: params[:session][:email].downcase)\n\n # #2\n+   if user && user.authenticate(params[:session][:password])\n+     create_session(user)\n+     flash[:notice] = \"Welcome, \#{user.name}!\"\n+     redirect_to root_path\n+   else\n+     flash.now[:alert] = 'Invalid email/password combination'\n+     render :new\n+   end\n+ end\n+\n+ def destroy\n # #3\n+   destroy_session(current_user)\n+   flash[:notice] = \"You've been signed out, come back soon!\"\n+   redirect_to root_path\n+ end\n end\n```\n\nAt __#1__, we search the database for a user with the specified email address in the `params` hash. We use `downcase` to normalize the email address since the addresses stored in the database are stored as lowercase strings.\n\nAt __#2__, we verify that `user` is not `nil` and that the password in the `params` hash matches the specified password. The conditional statement will exit early if `user` is `nil`, because it checks for that first. This order of execution will prevent a null pointer exception when `user.authenticate` is called if `user` is `nil`. If the `user` is successfully authenticated, we call a `create_session` function (which we have yet to define), display a flash notice, and then redirect the user to `root_path`. If authentication was not successful, we flash a warning message and render the __new__ view.\n\nAt __#3__, we define `destroy`. This method will delete a user's session. `destroy` logs the user out by calling `destroy_session(current_user)`, flashes a notice that they've been logged out, and redirects them to `root_path`.\n\nWe called `create_session` and `destroy_session` methods that do not exist yet in `SessionsController`. When we generated the controller, Rails created a file named `app/helpers/sessions_helper.rb` where we can put helper methods for `SessionController`. Open `SessionsHelper` and code `create_session` and `destroy_session`:\n\n> Calling `create_session` and `destroy_session` before they exist is another example of \"wishful coding\". Wishful coding helps you stay focused on one problem at a time, and is a useful strategy for efficient programming.\n\n```Ruby(app/helpers/sessions_helper.rb)\n module SessionsHelper\n # #4\n+  def create_session(user)\n+    session[:user_id] = user.id\n+  end\n+\n # #5\n+  def destroy_session(user)\n+    session[:user_id] = nil\n+  end\n+\n # #6\n+  def current_user\n+    User.find_by(id: session[:user_id])\n+  end\n end\n```\n\nAt __#4__, we define `create_session`. `create_session` sets `user_id` on the `session` object to `user.id`, which is unique for each user. [`session`](http://guides.rubyonrails.org/security.html#what-are-sessions-questionmark) is an object Rails provides to track the state of a particular user. There is a one-to-one relationship between session objects and user ids. A one-to-one relationship means that a session object can only have one user id and a user id is related to one session object.\n\nAt __#5__, we define `destroy_session`. We clear the user id on the session object by setting it to `nil`, which effectively destroys the user session because we can't track it via their user id any longer.\n\nAt __#6__, we define `current_user`, which returns the current user of the application. `current_user` encapsulates the pattern of finding the current user that we would otherwise call throughout Bloccit. Thus we won't have to constantly call `User.find_by(id: session[:user_id])`; `current_user` is our shortcut to that functionality. `current_user` finds the signed-in user by taking the user id from the session and searching the database for the user in question. When the user closes Bloccit, the related session object will be destroyed. Because our session only stores the user id, we need to retrieve the  `User` instance, and all of its properties, by searching the database for the record with the corresponding user id.\n\n`SessionsController` has no way of finding `create_session` - it won't recognize it as a valid method. We need to include `SessionsHelper` either directly in `SessionsController`, or in `ApplicationController` (which `SessionsController` inherits from). Let's add it to `ApplicationController`, since we'll need to use it in other controllers later:\n\n```ruby(app/controllers/application_controller.rb)\n   # Prevent CSRF attacks by raising an exception.\n   # For APIs, you may want to use :null_session instead.\n   protect_from_forgery with: :exception\n+  include SessionsHelper\n end\n```\n\nRun the tests again and they will still fail since we haven't added the routes. Add the appropriate routes:\n\n```(config/routes.rb)\n...\n\n   resources :users, only: [:new, :create]\n\n+  resources :sessions, only: [:new, :create, :destroy]\n\n...\n```\n\nCheck the new session routes from the command line:\n\n```bash(Terminal)\n$ rake routes | grep session\n```\n\nRun the tests for `SessionsController` again:\n\n```bash(Terminal)\n$ rspec spec/controllers/sessions_controller_spec.rb\n```\n\nOur tests still fail even though we've added our routes because `SessionsController` cannot find a `new.html.erb` template in `views/sessions`. The template does not exist yet because we generated the controller without specifying any actions, so we'll need to manually create the __new__ view:\n\n```bash(Terminal)\n$ touch app/views/sessions/new.html.erb\n```\n\nRun the tests again, and they should pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/sessions_controller_spec.rb\n```\n\n## User Interface\n\nSessions are unlike our other objects in Bloccit in that there is no tangible representation of a session, like there is for a user, for example. A session  keeps track of a user's state - signed in or signed out. Let's update Bloccit to show whether a user is signed in or not. We'll add a **Sign In** link to the welcome page similar to our **Sign Up** link:\n\n```ruby(app/views/welcome/index.html.erb)\n ...\n+      <%= link_to \"Sign In\", new_session_path %> or\n       <%= link_to \"Sign Up\", new_user_path, class: 'btn btn-primary' %> today!\n ...\n```\n\nLet's add a \"Sign In\" link to the navigation:\n\n```Ruby(app/views/layouts/application.html.erb)\n ...\n\n-        <%= link_to \"Sign Up\", new_user_path %>\n+        <% if current_user %>\n+          <%= current_user.name %> - <%= link_to \"Sign Out\", session_path(current_user), method: :delete %>\n+        <% else %>\n+          <%= link_to \"Sign In\", new_session_path %> or\n+          <%= link_to \"Sign Up\", new_user_path %>\n+        <% end %>\n\n ...\n```\n\nLet's complete the **new** view so users can sign in:\n\n```HTML(app/views/sessions/new.html.erb)\n+<h2>Sign in</h2>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-8\">\n+    <%= form_for :session, url: sessions_path do |f|  %>\n+      <div class=\"form-group\">\n+        <%= f.label :email %>\n+        <%= f.email_field :email, autofocus: true, class: 'form-control', placeholder: \"Enter email\" %>\n+      </div>\n+      <div class=\"form-group\">\n+        <%= f.label :password %>\n+        <%= f.password_field :password, class: 'form-control', placeholder: \"Enter password\" %>\n+      </div>\n+      <div class=\"form-group\">\n+        <%= f.label :remember_me, class: 'checkbox' do %>\n+          Remember Me <%= f.check_box :remember_me, :style => \"margin-left: 10px;\"  %>\n+        <% end %>\n+        <%= f.submit \"Sign in\", class: 'btn btn-success' %>\n+      </div>\n+    <% end %>\n+  </div>\n+</div>\n```\n\nOpen the **new** view by navigating to [http://localhost:3000/sessions/new](http://localhost:3000/sessions/new), and try to sign in with a **valid** Email and Password. You should be successfully signed in to Bloccit.\n\n\n## Sign In New users\n\nNow that we can sign in users, let's automatically sign in users after they sign up.\n\nFirst, run the tests to see a failure:\n\n```bash(Terminal)\n$ rspec spec/controllers/users_controller_spec.rb\n```\n\nTo pass this test, update `UsersController`:\n\n```ruby(app/controllers/users_controller.rb)\n class UsersController < ApplicationController\n   def new\n     @user = User.new\n   end\n\n   def create\n     @user = User.new\n     @user.name = params[:user][:name]\n     @user.email = params[:user][:email]\n     @user.password = params[:user][:password]\n     @user.password_confirmation = params[:user][:password_confirmation]\n\n     if @user.save\n       flash[:notice] = \"Welcome to Bloccit \#{@user.name}!\"\n+      create_session(@user)\n       redirect_to root_path\n     else\n       flash.now[:alert] = \"There was an error creating your account. Please try again.\"\n       render :new\n     end\n   end\n end\n```\n\nWith this change, `users_controller_spec.rb` passes and new users are seamlessly signed into Bloccit.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Deploy the latest app to Heroku:\n\n```bash(Terminal)\n$ git push heroku master\n```\n\n## Recap\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Sessions](https://en.wikipedia.org/wiki/Session_%28computer_science%29) | Sessions give us the ability to retain state throughout our application as users browse different pages and connections are created and destroyed. We use sessions to power our stateful sign in and sign out mechanism in Bloccit, but sessions can be used for many other things, such as tracking the pages a user clicks on. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nLet's add avatars to Bloccit. We'll use [Gravatar](https://en.gravatar.com/) to implement this feature. Sign up for Gravatar using the **same email address** you used for your first Bloccit user. Gravatar, which stands for globally recognized avatar, associates an avatar with your email address(es).\n\n1. You'll want the avatar to appear like so:\n\n  <center>\n  ![Avatar](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-authentication-login/avatar.png)\n  </center>\n\n  You'll need to use the following code to retrieve the Gravatar:\n\n  ```ruby\n  +  def avatar_url(user)\n  +    gravatar_id = Digest::MD5::hexdigest(user.email).downcase\n  +    \"http://gravatar.com/avatar/\#{gravatar_id}.png?s=48\"\n  +  end\n  ```\n\n> Though we provided the code above, you have to decide where to put it.\n\n2. Use the `avatar_url` method in `application.html.erb` to display the user's gravatar next to their name when they're signed in.\n3. Modify the CSS in `app/assets/stylesheets/application.scss` and `app/assets/stylesheets/users.scss` to display the avatar and surrounding content in an aesthetically pleasing manner.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/pbjjui1g97?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Authentication Sign In Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>26, "checkpoint_type"=>"normal", "position"=>26, "points"=>1, "ref"=>"eed46d62-b076-487b-aaeb-6d18c6e9b247|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2122", "assessment"=>nil}, {"id"=>2319, "name"=>"Quiz: Authentication", "summary"=>"Quiz: Authentication", "body"=>"", "assignment"=>"", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>27, "checkpoint_type"=>"quiz", "position"=>27, "points"=>1, "ref"=>"21923464-2c5c-45b1-b95b-c0f2e49b4fe6|0", "exercises"=>false, "quiz_id"=>17, "path"=>"/checkpoints/2319", "assessment"=>nil}, {"id"=>2123, "name"=>"Rails: Posts and Users", "summary"=>"Posts and Users: associating posts and users", "body"=>"<!-- { ids:[2123], name:'Rails: Posts and Users', summary:'Posts and Users: associating posts and users' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Active Record Migrations](http://edgeguides.rubyonrails.org/active_record_migrations.html)\n* [Active Record Scopes](http://apidock.com/rails/ActiveRecord/NamedScope/ClassMethods/scope)\n* [Active Record Scopes vs Class Methods](http://blog.plataformatec.com.br/2013/02/active-record-scopes-vs-class-methods/)\n</mentor-checkpoint-note>\n\n> “Associate yourself with people of good quality, for it is better to be alone than in bad company.”\n>\n> — Booker T. Washington\n\n## Overview and Purpose\n\nThis checkpoint covers database migrations, indices, `has_many` and `belongs_to` associations, and scopes.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Discuss database migrations.\n- Discuss the `has_many` association.\n- Discuss the `belongs_to` association.\n- Discuss scoping within your application.\n- Implement new scoping types.\n\nWe can create, authenticate, and persist users, so we should personalize the Bloccit experience. In this checkpoint, we'll associate users and posts, to allow ownership of content in Bloccit.\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/a9olegiqbp\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## `User`, Meet `Post`\n\nTo allow ownership of posts, we'll need to associate the Post and User models. Let's write tests for this association first:\n\n```ruby(spec/models/user_spec.rb)\n require 'rails_helper'\n\n RSpec.describe User, type: :model do\n   let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"password\") }\n\n+  it { is_expected.to have_many(:posts) }\n\n   # Shoulda tests for name\n   it { is_expected.to validate_presence_of(:name) }\n   it { is_expected.to validate_length_of(:name).is_at_least(1) }\n ...\n```\n\n... and now we'll add `User` scope to our post tests:\n\n```ruby(spec/models/post_spec.rb)\n ...\n   let(:title) { RandomData.random_sentence }\n   let(:body) { RandomData.random_paragraph }\n   let(:topic) { Topic.create!(name: name, description: description) }\n-  let(:post) { topic.posts.create!(title: title, body: body) }\n # #1\n+  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n # #2\n+  let(:post) { topic.posts.create!(title: title, body: body, user: user) }\n\n   it { is_expected.to belong_to(:topic) }\n+  it { is_expected.to belong_to(:user) }\n\n   it { is_expected.to validate_presence_of(:title) }\n   it { is_expected.to validate_presence_of(:body) }\n   it { is_expected.to validate_presence_of(:topic) }\n+  it { is_expected.to validate_presence_of(:user) }\n\n   it { is_expected.to validate_length_of(:title).is_at_least(5) }\n   it { is_expected.to validate_length_of(:body).is_at_least(20) }\n\n   describe \"attributes\" do\n-    it \"has a title and body attribute\" do\n-      expect(post).to have_attributes(title: title, body: body)\n+    it \"has a title, body, and user attribute\" do\n+      expect(post).to have_attributes(title: title, body: body, user: user)\n     end\n   end\n end\n```\n\nAt __#1__, we create a user to associate with a test post.\n\nAt __#2__, we associate `user` with `post` when we create the test post.\n\nWe'll also need to update `comment_spec.rb` to reflect the new association since comments belong to posts, and we'll now be unable to create posts without a user:\n\n```ruby(spec/models/comment_spec.rb)\n RSpec.describe Comment, type: :model do\n   let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph) }\n+  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n+  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n   let(:comment) { Comment.create!(body: 'Comment Body', post: post) }\n\n   describe \"attributes\" do\n ...\n```\n\nFinally, we need to update `posts_controller_spec.rb` for the post and user association. Add a user for `my_post` to belong to:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe PostsController, type: :controller do\n+  let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n   let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph) }\n+  let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n\n ...\n```\n\nRun the specs and see a number of failures due to the fact that users and posts are not associated:\n\n```bash(Terminal)\n$ rspec spec\n```\n\nTo associate users and posts, we'll use a [standalone migration](http://guides.rubyonrails.org/migrations.html#creating-a-standalone-migration) to add a user_id column to the posts table. The user_id (foreign key) will allow a user to have many posts and allow a post to belong to a user.\n\nOn the command line, generate a new migration:\n\n```bash(Terminal)\n$ rails g migration AddUserToPosts user_id:integer:index\n      invoke  active_record\n      create    db/migrate/20150720221814_add_user_to_posts.rb\n```\n\nThe name of the migration is very important. We followed the Rails convention for adding an attribute to a table and automatically populated the migration file with the correct code. If we didn't follow this convention, we'd have to add the code manually. The migration file we just created should look like this:\n\n```ruby(db/migrate/20150720221814_add_user_to_posts.rb)\nclass AddUserToPosts < ActiveRecord::Migration\n  def change\n    add_column :posts, :user_id, :integer\n    add_index :posts, :user_id\n  end\nend\n```\n\n> We added an index to the user_id column. We should always index foreign keys because an index optimizes query performance when operating on tables with associated attributes.\n\n\nMigrate the database:\n\n```bash(Terminal)\n$ rake db:migrate\n== 20150720221814 AddUserToPosts: migrating ===================================\n-- add_column(:posts, :user_id, :integer)\n   -> 0.0008s\n-- add_index(:posts, :user_id)\n   -> 0.0010s\n== 20150720221814 AddUserToPosts: migrated (0.0019s) ==========================\n```\n\nNow that we have the database structure to support the user and post association, let's update the models. Open `Post` and add the `belongs_to` declaration:\n\n```ruby(app/models/post.rb)\n class Post < ActiveRecord::Base\n   belongs_to :topic\n+  belongs_to :user\n   has_many :comments, dependent: :destroy\n\n   validates :title, length: { minimum: 5 }, presence: true\n   validates :body, length: { minimum: 20 }, presence: true\n   validates :topic, presence: true\n+  validates :user, presence: true\n end\n```\n\nOpen `user.rb` and add the `has_many` declaration:\n\n```ruby(app/models/user.rb)\n  class User < ActiveRecord::Base\n+   has_many :posts\n   ...\n  end\n```\n\nRun the full spec to confirm that `post_spec.rb`, `user_spec.rb`, and `comment_spec.rb` are all passing:\n\n```bash(Terminal)\n$ rspec spec\n```\n\nWe still have failures in our `posts_controller_spec.rb` because we haven't updated `PostsController` to create posts with associated users. Before we do that, let's seed updated posts into our database to ensure all our posts are associated with users.\n\n## Updating Seeds\n\nThe posts in our database have no associated users because we haven't updated `seeds.rb` to create posts scoped to users. Let's update `seeds.rb` so that the next time we seed the database, posts will be scoped to users:\n\n```ruby(db/seeds.rb)\n+# Create Users\n+5.times do\n+  User.create!(\n # #3\n+  name:     RandomData.random_name,\n+  email:    RandomData.random_email,\n+  password: RandomData.random_sentence\n+  )\n+end\n+users = User.all\n\n # Create Topics\n 15.times do\n   Topic.create!(\n     name:         RandomData.random_sentence,\n     description:  RandomData.random_paragraph\n   )\n end\n topics = Topic.all\n\n # Create Posts\n 50.times do\n   Post.create!(\n+    user:   users.sample,\n     topic:  topics.sample,\n     title:  Faker::Lorem.sentence,\n     body:   Faker::Lorem.paragraph\n   )\n end\n posts = Post.all\n\n ...\n\n puts \"Seed finished\"\n+puts \"\#{User.count} users created\"\n puts \"\#{Topic.count} topics created\"\n puts \"\#{Post.count} posts created\"\n puts \"\#{Comment.count} comments created\"\n```\n\nAt __#3__, we wishful-coded two methods that we'll need to add to `RandomData`:\n\n```ruby(lib/random_data.rb)\n module RandomData\n+  def self.random_name\n+    first_name = random_word.capitalize\n+    last_name = random_word.capitalize\n+    \"\#{first_name} \#{last_name}\"\n+  end\n+\n+  def self.random_email\n+    \"\#{random_word}@\#{random_word}.\#{random_word}\"\n+  end\n ...\n```\n\nIt's helpful to modify one user that we can use to sign in and test functionality. This will eliminate the burden of creating a new test user every time we refresh the database. Add the following, **using your own email address**:\n\n```ruby(db/seeds.rb)\n\n ...\n\n+user = User.first\n+user.update_attributes!(\n+  email: 'youremail.com', # replace this with your personal email\n+  password: 'helloworld'\n+)\n\n puts \"Seed finished\"\n puts \"\#{User.count} users created\"\n puts \"\#{Topic.count} topics created\"\n puts \"\#{Post.count} posts created\"\n puts \"\#{Comment.count} comments created\"\n```\n\nLet's reset the database with user-scoped posts:\n\n```bash(Terminal)\n$ rake db:reset\n```\n\n> `rake db:reset` drops the database and uses the seed file to repopulate it.\n\nYou should see an output similar to: (truncated for brevity)\n\n```bash(Terminal)\n...\nSeed finished\n5 users created\n10 topics creates\n50 posts created\n100 comments created\n```\n\n## Testing the Association\n\nIt's often helpful to test new associations in the Rails console. Launch the console from the command line and create a user:\n\n```bash(Terminal)\n$ rails c\n\n>> u = User.create!(name: \"Bloccer\", email: \"user@bloccit.com\", password: \"helloworld\")\n```\n\nRetrieve all posts for `u` using the `posts` method that was automatically generated by `has_many :posts`:\n\n```ruby(Console)\n>> u.posts\n```\n\nWe haven't created any user-specific posts, so the `posts` method will return an empty results collection:\n\n```ruby(Console)\n  Post Load (0.2ms)  SELECT \"posts\".* FROM \"posts\" WHERE \"posts\".\"user_id\" = 1\n=> #<ActiveRecord::Associations::CollectionProxy []>\n```\n\n> `CollectionProxy` is an array-like object provided by Rails that allows method chaining and generates performant SQL queries. There aren't any posts associated with the user instance `u`, thus the collection proxy shows `[]`, which symbolizes an empty array.\n\nCreate a post and scope it to a user:\n\n```ruby(Console)\n>> u.posts.create!(topic: Topic.first, title: \"New Post\", body: \"This is a new post in Bloccit!\")\n```\n\nWe should see:\n\n```ruby(Console)\n  Topic Load (0.2ms)  SELECT  \"topics\".* FROM \"topics\"  ORDER BY \"topics\".\"id\" ASC LIMIT 1\n   (0.0ms)  begin transaction\n  SQL (0.3ms)  INSERT INTO \"posts\" (\"topic_id\", \"title\", \"body\", \"user_id\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?, ?, ?)  [[\"topic_id\", 7], [\"title\", \"New Post\"], [\"body\", \"This is a new post in Bloccit!\"], [\"user_id\", 1], [\"created_at\", \"2015-07-21 01:12:04.533450\"], [\"updated_at\", \"2015-07-21 01:12:04.533450\"]]\n   (1.5ms)  commit transaction\n=> #<Post id: 54, title: \"New Post\", body: \"This is a new post in Bloccit!\", created_at: \"2015-07-21 01:12:04\", updated_at: \"2015-07-21 01:12:04\", topic_id: 7, user_id: 1>\n```\n\nCount the posts for the user `u`:\n\n```ruby(Console)\n>> u.posts.count\n   (0.3ms)  SELECT COUNT(*) FROM \"posts\" WHERE \"posts\".\"user_id\" = 1\n=> 1\n```\n\n> Because we created the post within the scope of a user, Rails automatically added the user_id to the post.\n\n## Updating `PostsController`\n\nA user who is signed in and creates a post should own the post. Recall that we use `current_user` in `SessionsHelper` to designate the user who is signed in. We need to update the `create` method in `PostsController` to create user-scoped posts that belong to the user returned by `current_user`. Before we do that, we'll want to make sure that users are signed in before allowing them to create or update a post, otherwise the value of `current_user` will be `nil` and assigning it to the post will cause our validations to fail. Let's update `posts_controller_spec.rb` to test that guest (un-signed-in) users are redirected if they attempt to create or update a post:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n require 'rails_helper'\n # #4\n+include SessionsHelper\n\n RSpec.describe PostsController, type: :controller do\n   let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n   let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n   let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n\n # #5\n+  context \"guest user\" do\n # #6\n+    describe \"GET show\" do\n+      it \"returns http success\" do\n+        get :show, topic_id: my_topic.id, id: my_post.id\n+        expect(response).to have_http_status(:success)\n+      end\n+\n+      it \"renders the #show view\" do\n+        get :show, topic_id: my_topic.id, id: my_post.id\n+        expect(response).to render_template :show\n+      end\n+\n+      it \"assigns my_post to @post\" do\n+        get :show, topic_id: my_topic.id, id: my_post.id\n+        expect(assigns(:post)).to eq(my_post)\n+      end\n+    end\n+\n # #7\n+    describe \"GET new\" do\n+      it \"returns http redirect\" do\n+        get :new, topic_id: my_topic.id\n # #8\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n+\n+    describe \"POST create\" do\n+      it \"returns http redirect\" do\n+        post :create, topic_id: my_topic.id, post: {title: RandomData.random_sentence, body: RandomData.random_paragraph}\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n+\n+    describe \"GET edit\" do\n+      it \"returns http redirect\" do\n+        get :edit, topic_id: my_topic.id, id: my_post.id\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n+\n+    describe \"PUT update\" do\n+      it \"returns http redirect\" do\n+        new_title = RandomData.random_sentence\n+        new_body = RandomData.random_paragraph\n+\n+        put :update, topic_id: my_topic.id, id: my_post.id, post: {title: new_title, body: new_body}\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n+\n+    describe \"DELETE destroy\" do\n+      it \"returns http redirect\" do\n+        delete :destroy, topic_id: my_topic.id, id: my_post.id\n+        expect(response).to have_http_status(:redirect)\n+      end\n+    end\n+  end\n ...\n```\n\nAt __#4__, we add `SessionsHelper` so that we can use the `create_session(user)` method later in the spec.\n\nAt __#5__, we add a context for a guest (un-signed-in) user. Contexts organize tests based on the state of an object.\n\nAt __#6__, we define the `show` tests, which allow guests to view posts in Bloccit.\n\nAt __#7__, we define tests for the other CRUD actions. We won't allow guests to access the `create`, `new`, `edit`, `update`, or `destroy` actions.\n\nAt __#8__, we `expect` guests to be redirected if they attempt to create, update, or delete a post.\n\nOur existing specs reside at __#9__, which we'll update soon to test that signed in users are able to create posts.\n\nRun the guest user section of the spec and view the four failed tests:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e \"guest user\"\n```\n\nTo pass the tests let's first implement the logic needed to redirect guest users in `ApplicationController`:\n\n```ruby(app/controllers/application_controller.rb)\n class ApplicationController < ActionController::Base\n   # Prevent CSRF attacks by raising an exception.\n   # For APIs, you may want to use :null_session instead.\n   protect_from_forgery with: :exception\n   include SessionsHelper\n\n+  private\n # #10\n+  def require_sign_in\n+    unless current_user\n+      flash[:alert] = \"You must be logged in to do that\"\n # #11\n+      redirect_to new_session_path\n+    end\n+  end\nend\n```\n\nAt __#10__, we define `require_sign_in` to redirect un-signed-in users. We define this method in `ApplicationController` because we'll eventually want to call it from other controllers.\n\n> Remember that controllers are classes, and all controllers **inherit** from the `ApplicationController` class.\n\nAt __#11__, we redirect un-signed-in users to the sign-in page.\n\nUse `require_sign_in` in `PostsController` to redirect guest users from actions they won't be able to access:\n\n```ruby(app/controllers/posts_controller.rb)\nclass PostsController < ApplicationController\n # #12\n+  before_action :require_sign_in, except: :show\n ...\n```\nAt __#12__, we use a `before_action` filter to call the `require_sign_in` method before each of our controller actions, except for the `show` action.\n\nRun the guest user section of the spec again:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e \"guest user\"\n```\n\nNow that we've made sure users are signed in before allowing them to create or update a post, let's update the `create` method in `PostsController` to create user-scoped posts. Update the signed-in user specs in `posts_controller_spec.rb`:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n require 'rails_helper'\n include SessionsHelper\n\n RSpec.describe PostsController, type: :controller do\n   let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n   let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n   let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n\n   context \"guest user\" do\n     describe \"GET show\" do\n       it \"returns http success\" do\n         get :show, topic_id: my_topic.id, id: my_post.id\n         expect(response).to have_http_status(:success)\n       end\n\n       it \"renders the #show view\" do\n         get :show, topic_id: my_topic.id, id: my_post.id\n         expect(response).to render_template :show\n       end\n\n       it \"assigns my_post to @post\" do\n         get :show, topic_id: my_topic.id, id: my_post.id\n         expect(assigns(:post)).to eq(my_post)\n       end\n     end\n\n     ...\n\n     describe \"DELETE destroy\" do\n       it \"returns http redirect\" do\n         delete :destroy, topic_id: my_topic.id, id: my_post.id\n         expect(response).to have_http_status(:redirect)\n       end\n     end\n   end\n\n # #13\n+  context \"signed-in user\" do\n+    before do\n+      create_session(my_user)\n+    end\n\n     describe \"GET show\" do\n       it \"returns http success\" do\n         get :show, topic_id: my_topic.id, id: my_post.id\n         expect(response).to have_http_status(:success)\n       end\n\n       it \"renders the #show view\" do\n         get :show, topic_id: my_topic.id, id: my_post.id\n         expect(response).to render_template :show\n       end\n\n       it \"assigns my_post to @post\" do\n         get :show, topic_id: my_topic.id, id: my_post.id\n         expect(assigns(:post)).to eq(my_post)\n       end\n     end\n\n     ...\n\n     describe \"DELETE destroy\" do\n       it \"deletes the post\" do\n         delete :destroy, topic_id: my_topic.id, id: my_post.id\n         count = Post.where({id: my_post.id}).size\n         expect(count).to eq 0\n       end\n\n       it \"redirects to topic show\" do\n         delete :destroy, topic_id: my_topic.id, id: my_post.id\n         expect(response).to redirect_to my_topic\n       end\n     end\n+  end\n end\n```\n\n> The `...` signify the code between `describe \"GET show\" do` and `describe \"DELETE destroy\" do`; do not remove that code from your file.\n\nAt __#13__, we wrap our existing specs in a context so that they become our signed-in user specs. __Remember to indent all the code we've just wrapped in this context.__\n\nRun the specs for a signed-in user and note the failures caused by the `create` action:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e \"signed-in user\"\n```\n\nUpdate `PostsController` to associate new posts with the `current_user`:\n\n```ruby(app/controllers/posts_controller.rb)\n ...\n   def create\n     @post = Post.new\n     @post.title = params[:post][:title]\n     @post.body = params[:post][:body]\n     @topic = Topic.find(params[:topic_id])\n     @post.topic = @topic\n # #14\n+    @post.user = current_user\n  ...\n```\n\nAt __#14__, we assign `@post.user` in the same way we assigned `@post.topic`, to properly scope the new post.\n\nRun `posts_controller_spec.rb` a final time to confirm that all tests are passing as expected:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb\n```\n\nWe're now associating posts with the user who created them.\n\n## Mass Assignment and Strong Parameters\n\nThe `create` action in `PostsController` has a \"code smell\", which is a term to describe code that works, but _feels_ like it could be written better. Watch the following video to learn about strong parameters and how to refactor our controllers to use them, thus removing the unpleasant odor:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/2rkgx7rm1m\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWe made the following changes using mass-assignment and strong parameters:\n\n```ruby(app/controllers/posts_controller.rb)\n ...\n\n   def create\n-    @post = Post.new\n-    @post.title = params[:post][:title]\n-    @post.body = params[:post][:body]\n     @topic = Topic.find(params[:topic_id])\n-    @post.topic = @topic\n+    @post = @topic.posts.build(post_params)\n     @post.user = current_user\n\n     if @post.save\n       flash[:notice] = \"Post was saved.\"\n       redirect_to [@topic, @post]\n     else\n       flash.now[:alert] = \"There was an error saving the post. Please try again.\"\n       render :new\n     end\n   end\n\n ...\n\n   def update\n     @post = Post.find(params[:id])\n-    @post.title = params[:post][:title]\n-    @post.body = params[:post][:body]\n+    @post.assign_attributes(post_params)\n\n     if @post.save\n       flash[:notice] = \"Post was updated.\"\n       redirect_to [@post.topic, @post]\n     else\n       flash.now[:alert] = \"There was an error saving the post. Please try again.\"\n       render :edit\n     end\n   end\n\n ...\n\n# remember to add private methods to the bottom of the file. Any method defined below private, will be private.\n+  private\n+\n+  def post_params\n+    params.require(:post).permit(:title, :body)\n+  end\n end\n```\n\nWe also made similar updates to `Topics Controller`:\n\n```ruby(app/controllers/topics_controller.rb)\n ...\n\n   def create\n-    @topic = Topic.new\n-    @topic.name = params[:topic][:name]\n-    @topic.description = params[:topic][:description]\n-    @topic.public = params[:topic][:public]\n+    @topic = Topic.new(topic_params)\n\n     if @topic.save\n       redirect_to @topic, notice: \"Topic was saved successfully.\"\n     else\n       flash.now[:alert] = \"Error creating topic. Please try again.\"\n       render :new\n     end\n   end\n\n ...\n\n   def update\n     @topic = Topic.find(params[:id])\n\n-    @topic.name = params[:topic][:name]\n-    @topic.description = params[:topic][:description]\n-    @topic.public = params[:topic][:public]\n+    @topic.assign_attributes(topic_params)\n\n     if @topic.save\n       redirect_to @topic\n     else\n       flash.now[:alert] = \"Error saving topic. Please try again.\"\n       render :edit\n     end\n   end\n\n   ...\n\n+  private\n+\n+  def topic_params\n+    params.require(:topic).permit(:name, :description, :public)\n+  end\n end\n```\n\nBecause we refactored code, we should run our specs to confirm that we didn't accidentally break something.\n\n> After refactoring code, you should always run your tests as a matter of course.\n\n```bash(Terminal)\n$ rspec spec\n```\n\nWith our specs passing, we can feel confident about our refactored code.\n\n## Adding Author Information\n\nNow that we know who is submitting posts, let's display that information. Open the topics __show__ view and update the `<small>` section:\n\n```erb(app/views/topics/show.html.erb)\n ...\n       <small>\n-        submitted <%= time_ago_in_words(post.created_at) %> ago <br>\n+        submitted <%= time_ago_in_words(post.created_at) %> ago by <%= post.user.name %> <br>\n         <%= post.comments.count %> Comments\n       </small>\n ...\n```\n\nLet's also update the posts __show__ view:\n\n```erb(app/views/posts/show.html.erb)\n-<h1><%= @post.title %></h1>\n+<h1>\n+  <%= @post.title %> <br>\n+  <small>\n+    submitted <%= time_ago_in_words(@post.created_at) %> ago by <%= @post.user.name %>\n+  </small>\n+</h1>\n\n ...\n```\n\nStart the Rails server and open Bloccit to the **show** view of a topic. Confirm that the post author information is displayed.\n\n## Scoping Posts\n\nAs the number of posts increases, it will be important to display them in order. We can do this using a **scope**, which allows us to reference queries as method calls. Rails has a `default_scope` declaration we can add to `Post`, which allows us to modify the default order in which posts are retrieved from the database:\n\n> This type of scope is different than our usage of \"scope\" when we discussed post-scoped users. The scope in question here is an actual method provided by Rails, the former usage of scope is simply an adjective to describe a post that belongs to a user.\n\n```ruby(app/models/post.rb)\n class Post < ActiveRecord::Base\n   belongs_to :topic\n   belongs_to :user\n   has_many :comments, dependent: :destroy\n\n+  default_scope { order('created_at DESC') }\n ...\n```\n\nThe `default_scope` will order all posts by their `created_at` date, in descending order, with the most recent posts displayed first. The most recent posts will be displayed first on topic __show__ views (where the posts associated with a topic are listed). Refresh a topic __show__ view and observe the results of these changes.\n\n> Scopes are powerful tools in Rails. They allow you to name and chain together SQL commands to select specific objects in a specific order.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Deploy to Heroku and migrate your production database:\n\n```bash(Terminal)\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Active Record Migrations](http://guides.rubyonrails.org/active_record_migrations.html) | Active Record Migrations allow you to evolve your database schema over time. They use Ruby so that you don't have to write SQL from scratch. |\n| [Database Index](http://en.wikipedia.org/wiki/Database_index) | A database index is a data structure that improves the speed of data retrieval operations by quickly locating data, without searching every row in the database. |\n| [`belongs_to` Association](http://guides.rubyonrails.org/association_basics.html#the-belongs-to-association) | The `belongs_to` association establishes a one-to-one connection with another model. The instance of the declaring model \"belongs to\" an instance of another model. |\n| [`has_many` Association](http://guides.rubyonrails.org/association_basics.html#the-has-many-association) | The `has_many` association establishes a one-to-many connection with another model. The instance of the declaring model \"has many\" (zero or more) instances of another model. |\n| [Active Record Scopes](http://guides.rubyonrails.org/active_record_querying.html#scopes) | Active Record scopes allow commonly-used queries to be referenced as method calls. `scope` methods return an `ActiveRecord::Relationship` object. |\n| [`default_scope`](http://guides.rubyonrails.org/active_record_querying.html#applying-a-default-scope) | A `default_scope` is a scope that is applied across all queries to the model it's called in. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nUnderstanding scopes will make you a much more efficient Rails programmer, and will make your apps run faster as well.\n\n1. Read the [Rails Guides section on scopes](http://guides.rubyonrails.org/active_record_querying.html#scopes), then add the following scopes to the `Post` class:\n\n  - An `ordered_by_title` scope; and\n  - An `ordered_by_reverse_created_at` scope\n\n\n2. Open the Rails Console and test your scopes:\n\n  ```ruby(Console)\n  >> Post.unscoped { Post.ordered_by_title.first }\n  >> Post.unscoped { Post.ordered_by_reverse_created_at.first }\n  ```\n\n  >To use other scopes when a default scope is defined, use the [`unscoped` method](http://guides.rubyonrails.org/active_record_querying.html#overriding-conditions)\n\nOnce your assignment is complete, push it to its own remote branch for your mentor to review:\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/mhcyw8imf0?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Post and Users Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>27, "checkpoint_type"=>"normal", "position"=>27, "points"=>1, "ref"=>"ae3cc945-49b0-4903-bfec-289aec4a4143|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2123", "assessment"=>nil}, {"id"=>2124, "name"=>"Rails: Authorization", "summary"=>"Authorization: user roles and access rights", "body"=>"<!-- { ids:[2124], name:'Rails: Authorization', summary:'Authorization: user roles and access rights' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [What Is the Difference Between Authentication and Authorization?](http://www.cyberciti.biz/faq/authentication-vs-authorization/)\n</mentor-checkpoint-note>\n\n<center>\n  ![authorized personnel only](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-authorization/authorized-personnel-only.jpg)\n</center>\n\n> “Nothing strengthens authority so much as silence.”\n>\n> — Leonardo da Vinci\n\n## Overview and Purpose\n\nThis checkpoint introduces view helpers and roles within Bloccit.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Explain what a view helper is in Rails and how they are used.\n- Explain how to use an `enum`.\n\n## Authorization\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/045z3nvlbg\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWe've authenticated our app, allowing users to create password-secured accounts and sign in and out. With authentication we know who our users are, but not what they're allowed to do. For that we need to add authorization to Bloccit.\n\nAuthorization refers to the access rights each user has to resources and the operations they can perform on them. Authorization is a set of rules and permissions, according to user roles. An example of an authorization rule could be: _\"The owner of a post should be able to edit or delete it.\"_ In this example, the user role is owner, the resource is a post, and the permission is the ability of a user to edit or delete a post.\n\nAnother example of an authorization rule might be: _\"Administrative users should be able to edit / delete posts, independent of ownership.\"_ In this example, the user role is administrator, post is the resource, and editing / deleting are the actions an administrator can perform on posts.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Defining Bloccit Roles and Rules\n\nLet's start by defining the roles we need for Bloccit, and the actions and resources users will have access to.\n\nWe currently have users who can post and comment on Bloccit. We'll call these users __members__ and make __member__ the default user role.\n\nWe also want an all-powerful user – a user who can create, edit, and delete topics, posts, and comments at will. Let's call this user the __admin__.\n\nFinally, we'll have the casual visitor, somebody who hasn't signed up for Bloccit yet. We'll call this user a __guest__ user and let them view everything, but not create, edit, or delete anything.\n\nWe end up with this hierarchy of roles and access rights:\n\n| **Role** | **Authorization Rules** |\n| :-- | :-- |\n| __Admin__ | Can create, update, or delete any topic or post. |\n| __Member__ | Can create, update, or delete only their own posts. |\n| __Guest__ | Can read anything on the site, but can't post until they sign up to become a member. |\n\nLet's move on and prepare our app to use roles.\n\n## Role Specs\n\nIn order to differentiate users by their roles, we want to have methods to call on instance of `User` that returns whether or not the user has a specified role:\n\n```ruby\nuser = User.find(10)\nuser.role = 'admin'\nuser.admin? #=> true\n```\n\nLet's add some specs to define the behavior we expect for roles:\n\n```ruby(spec/models/user_spec.rb)\n ...\n   describe \"attributes\" do\n     ...\n # #1\n+    it \"responds to role\" do\n+      expect(user).to respond_to(:role)\n+    end\n+\n # #2\n+    it \"responds to admin?\" do\n+      expect(user).to respond_to(:admin?)\n+    end\n+\n # #3\n+    it \"responds to member?\" do\n+      expect(user).to respond_to(:member?)\n+    end\n   end\n\n+  describe \"roles\" do\n # #4\n+    it \"is member by default\" do\n+      expect(user.role).to eql(\"member\")\n+    end\n+\n # #5\n+    context \"member user\" do\n+      it \"returns true for #member?\" do\n+        expect(user.member?).to be_truthy\n+      end\n+\n+      it \"returns false for #admin?\" do\n+        expect(user.admin?).to be_falsey\n+      end\n+    end\n+\n # #6\n+    context \"admin user\" do\n+      before do\n+        user.admin!\n+      end\n+\n+      it \"returns false for #member?\" do\n+        expect(user.member?).to be_falsey\n+      end\n+\n+      it \"returns true for #admin?\" do\n+        expect(user.admin?).to be_truthy\n+      end\n+    end\n+  end\n```\n\nAt __#1__, we expect that users will respond to `role`.\n\nAt __#2__, we expect users will respond to `admin?`, which will return whether or not a user is an admin. We'll implement this using the [`ActiveRecord::Enum`](http://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html) class.\n\nAt __#3__, we expect users will respond to `member?`, which will return whether or not a user is a member.\n\nAt __#4__, we expect that users will be assigned the role of member by default.\n\nAt __#5__ and __#6__, we test member and admin users within separate contexts.\n\nRun `user_spec.rb` and see our new tests fail:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n```\n\n## Role Enum Attribute\n\nWe'll represent rules via an [enum](http://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html), which is a special attribute type whose values map to integers, but can be referenced by name. For example, `enum role: [:member, :admin]` will use a column in the database named role, but allows us to reference and assign the role using `member` or `admin`. This allows us to restrict the roles to only those we've specified (member and admin) while still being easy to work with. Let's watch a video exploring the advantages of using enums:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/1wnjbsidj1\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center><br/>\n\nLet's create the following migration to add a role column to the users table:\n\n```bash(Terminal)\n$ rails g migration AddRoleToUsers role:integer\n  invoke  active_record\n  create    db/migrate/20150803224903_add_role_to_users.rb\n```\n\n> Note the migration name. We use Rails conventions to create a new column - role - which has type integer to represent the role a user has.\n\nMigrate the database using `rake db:migrate`.\n\nTo use the role column as an enum, add the following to `User`:\n\n```ruby(app/models/user.rb)\n class User < ActiveRecord::Base\n   has_many :posts\n\n   before_save { self.email = email.downcase }\n+  before_save { self.role ||= :member }\n\n   validates :name, length: { minimum: 1, maximum: 100 }, presence: true\n\n   validates :email,\n             presence: true,\n             uniqueness: { case_sensitive: false },\n             length: { minimum: 3, maximum: 254 }\n   validates :password, presence: true, length: { minimum: 6 }, if: \"password_digest.nil?\"\n   validates :password, length: { minimum: 6 }, allow_blank: true\n\n   has_secure_password\n\n+  enum role: [:member, :admin]\nend\n```\n\n> `||=` is a Ruby trick. The code `self.role ||= :member`, then, is shorthand for `self.role = :member if self.role.nil?`.\n\nRun `user_spec.rb` again and see that the role enum passes all the specs, confirming that we've created the member and admin roles for users:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n```\n\nWe're ready to use user roles in our controllers to implement authorization rules for admins and members.\n\n## Roles in the `TopicsController`\n\nRecall our authorization rules:\n\n| **Role** | **Authorization Rules** |\n| :-- | :-- |\n| __Admin__ | Can create, update, or delete any topic or post. |\n| __Member__ | Can create, update, or delete only their own posts. |\n| __Guest__ | Can read anything on the site, but can't post until they sign up to become a member. |\n\nOnly admins will be able to create, update, and delete topics. Let's update our `topics_controller_spec.rb` to reflect the different roles users can have. `topics_controller_spec.rb` should look [like this](https://github.com/Bloc/curriculum-public/blob/master/web-development/rails/foundation/40-Authorization/topics_controller_spec.rb). We've divided `topics_controller_spec.rb` into three contexts: a guest user, a member user, and an admin user. We expect guests and members to be able to view the topic __index__ and __show__ pages, but to be redirected from all other topic actions and views. We expect admins to have access to all topic actions and views.\n\nRun the specs and note the nine failures caused because we are not redirecting guests and members:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb\n```\n\nUpdate `TopicsController` to redirect these users:\n\n```ruby(app/controllers/topics_controller.rb)\n class TopicsController < ApplicationController\n # #7\n+  before_action :require_sign_in, except: [:index, :show]\n # #8\n+  before_action :authorize_user, except: [:index, :show]\n ...\n\n   private\n   def topic_params\n     params.require(:topic).permit(:name, :description, :public)\n   end\n+\n # #9\n+  def authorize_user\n+    unless current_user.admin?\n+      flash[:alert] = \"You must be an admin to do that.\"\n+      redirect_to topics_path\n+    end\n+  end\n end\n```\n\nAt __#7__, we use the `before_action` filter and the `require_sign_in` method from `ApplicationController` to redirect guest users who attempt to access controller actions other than `index` or `show`.\n\nAt __#8__, we use another `before_action` filter to check the role of signed-in users. If the `current_user` isn't an admin, we'll redirect them to the topics __index__ view.\n\nAt __#9__, we define `authorize_user`, which is used in __#8__ to redirect non-admin users to `topics_path` (the topics __index__ view).\n\nRun `TopicsControllerSpec` again and confirm that all the tests are passing:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb\n```\n\nMake the first user a member via the Rails console:\n\n```ruby(Console)\n> User.first.member!\n```\n\n> The `member!` method was generated for us because `role` is an enum attribute. It allows us to easily update the role.\n\nSign in to Bloccit with your user and attempt to create, update, and delete a topic. You will be redirected back to the topic __index__ view. Now let's assign our user to be an admin:\n\n```ruby(Console)\n> User.first.admin!\n```\n\nConfirm that, as an admin user, you can now conduct all CRUD operations on topics.\n\n## Roles in the `PostsController`\n\nBased on our authorization rules, guests will be able view posts; members will be able to create posts and update or delete their own posts; and admins will be able to create, update, or delete any post. Update `posts_controller_spec.rb` to reflect the different roles user can have. `posts_controller_spec.rb` should look [like this](https://github.com/Bloc/curriculum-public/blob/master/web-development/rails/foundation/40-Authorization/posts_controller_spec.rb). We've divided `posts_controller_spec.rb` into four contexts:\n\n  * a guest user\n  * a member user modifying another user's post\n  * a member user modifying their own post\n  * an admin user\n\nRun `posts_controller_spec.rb` and see the failing tests that result:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb\n```\n\nUpdate `PostsController` to use authorization:\n\n```ruby(app/controllers/posts_controller.rb)\n class PostsController < ApplicationController\n   before_action :require_sign_in, except: :show\n # #10\n+  before_action :authorize_user, except: [:show, :new, :create]\n ...\n\n   private\n   def post_params\n     params.require(:post).permit(:title, :body)\n   end\n+\n+  def authorize_user\n+    post = Post.find(params[:id])\n # #11\n+    unless current_user == post.user || current_user.admin?\n+      flash[:alert] = \"You must be an admin to do that.\"\n+      redirect_to [post.topic, post]\n+    end\n+  end\n end\n```\n\nAt __#10__, we use a second `before_action` filter to check the role of a signed-in user. If the `current_user` isn't authorized based on their role, we'll redirect them to the posts __show__ view.\n\nAt __#11__ we redirect the user unless they own the post they're attempting to modify, or they're an admin.\n\nRun `posts_controller_spec.rb` and confirm that all the tests are passing:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb\n```\n\nUpdate the first user via the Rails console:\n\n```ruby(Console)\n> User.first.member!\n```\n\nSign in to Bloccit with your user and attempt to update and delete another user's post. You will be redirected to the post __show__ view. Give your user an admin role:\n\n```ruby(Console)\n> User.first.admin!\n```\n\nConfirm that you can conduct CRUD operations on any post.\n\n## Seed Users\n\nUpdating a user's role via the Rails console is clunky. Let's add a few special users to `seeds.rb` so we can then use them to test different authorization levels in our app:\n\n```ruby(db/seeds.rb)\n ...\n\n-user = User.first\n-user.update_attributes!(\n-  email: 'youremail.com',\n-  password: 'helloworld'\n-)\n+# Create an admin user\n+admin = User.create!(\n+  name:     'Admin User',\n+  email:    'admin@example.com',\n+  password: 'helloworld',\n+  role:     'admin'\n+)\n+\n+# Create a member\n+member = User.create!(\n+  name:     'Member User',\n+  email:    'member@example.com',\n+  password: 'helloworld'\n+)\n\n ...\n```\n\nReseed the database using `rake db:reset`.\n\n## Restricting Access to Links\n\nSo far we've restricted controller actions, which ensures no user can perform an action on a resource without proper authorization. But they can still see links to some of these actions. Even though following them without authorization will only result in being redirected with a warning, this is not a good user experience. If a user isn't allowed to perform a certain action, they shouldn't see the option to do so in the first place.\n\nUpdate the topics __index__ to only display a \"New Topic\" link to admin users:\n\n```erb(app/views/topics/index.html.erb)\n ...\n <!-- #12 -->\n+  <% if current_user && current_user.admin? %>\n     <div class=\"col-md-4\">\n       <%= link_to \"New Topic\", new_topic_path, class: 'btn btn-success' %>\n     </div>\n+  <% end %>\n </div>\n```\n\nAt __#12__, we check if there is a signed-in `current_user`, and that `current_user` is an admin.\n\nVisit the topics __index__ view as a member or guest and confirm that the \"New Topic\" link is not displayed.\n\nWhile this logic works, it's a bit too complicated for a view. Remember, it's good practice to keep views as free of logic as possible. This makes them easier to write, maintain, and test. Let's move it into a view helper:\n\n```ruby(app/helpers/topics_helper.rb)\n module TopicsHelper\n+  def user_is_authorized_for_topics?\n+  \t current_user && current_user.admin?\n+  end\n end\n```\n\n> Rails helpers are automatically available to their corresponding views. This means that methods defined in `TopicsHelper` will be available in all the topic views.\n\nUse `user_is_authorized_for_topics?` in the topic __index__ view:\n\n```erb(app/views/topics/index.html.erb)\n ...\n-  <% if current_user && current_user.admin? %>\n+  <% if user_is_authorized_for_topics? %>\n     <div class=\"col-md-4\">\n       <%= link_to \"New Topic\", new_topic_path, class: 'btn btn-success' %>\n     </div>\n   <% end %>\n </div>\n```\n\nRefresh the topics __index__ view, the \"New Topic\" link continues to be hidden for guests and members. Update the topics __show__ view so that only admins see the links to update or delete a topic:\n\n\n```erb(app/views/topics/show.html.erb)\n <h1><%= @topic.name %></h1>\n\n+<% if user_is_authorized_for_topics? %>\n   <%= link_to \"Edit Topic\", edit_topic_path, class: 'btn btn-success' %>\n   <%= link_to \"Delete Topic\", @topic, method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure you want to delete this topic?' } %>\n+<% end %>\n```\n\nVisit the topics __show__ view as a member or guest and confirm that the links are not displayed. Using an admin user, confirm that the links are displayed.\n\nLet's also update the topics __show__ view to only show the \"New Post\" link to signed-in users:\n\n```erb(app/views/topics/show.html.erb)\n+  <% if current_user %>\n     <div class=\"col-md-4\">\n       <%= link_to \"New Post\", new_topic_post_path(@topic), class: 'btn btn-success' %>\n     </div>\n+  <% end %>\n </div>\n```\n\nFinally, on the posts __show__ view, we only want to display the \"Edit Post\" and \"Delete Post\" links to the creator of the post or to admin users. Let's create a helper method in `PostsHelper`:\n\n```ruby(app/helpers/posts_helper.rb)\n module PostsHelper\n+  def user_is_authorized_for_post?(post)\n+  \t current_user && (current_user == post.user || current_user.admin?)\n+  end\n end\n```\n\n`authorize_user_for_post` checks if there is a signed-in `current_user`, and if that `current_user` either owns the post, or is an admin.\n\nLet's use this helper in the posts __show__ view:\n\n```erb(app/views/posts/show.html.erb)\n ...\n+  <% if user_is_authorized_for_post?(@post) %>\n     <div class=\"col-md-4\">\n       <%= link_to \"Edit Post\", edit_topic_post_path(@post.topic, @post), class: 'btn btn-success' %>\n       <%= link_to \"Delete Post\", [@post.topic, @post], method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure you want to delete this post?' } %>\n     </div>\n+  <% end %> </div>\n```\n\nUse a member user and go to another user's post. You won't see links to edit or delete the post. Create a new post and confirm that you can edit and delete it. Finally, use an admin user and confirm you can update any post.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| Defining Roles | Adding roles to users allows us to enforce rules and permisions for what individual users are allowed to access and do. Bloccit supports **admin**, **member**, and **guest** roles. |\n| View Helpers | View helpers are modules with methods that are available in views. They are used to reduce duplication and code complexity in views. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nAdd a third role, moderator, to Bloccit. Moderators will exist between simple members and powerful admins. They will help police Bloccit and ensure our members don't get unruly:\n\n| **Role** | **Authorization Rules** |\n| :-- | :-- |\n| __Moderator__ | Can update, but not create or delete, existing topics. Can create or update, but not delete, any post. |\n\n  1. Add the  `moderator` role to the `role` enum\n  2. Update `TopicsController` and the topics views to allow moderators to update existing topics. TDD your changes.\n  3. Update `PostsController` and the posts views to allow moderators to update any existing post. TDD your changes.\n  4. Test your changes in the browser. Confirm that moderators can update (but not create or delete topics) and that they can create and update, but not delete, posts.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>28, "checkpoint_type"=>"normal", "position"=>28, "points"=>1, "ref"=>"aee4229b-ee18-40a6-bbb9-f48982590c19|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2124", "assessment"=>nil}, {"id"=>2125, "name"=>"Rails: Comments", "summary"=>"Comments: associating posts and comments with shallow nesting", "body"=>"<!-- { ids:[2125], name:'Rails: Comments', summary:'Comments: associating posts and comments with shallow nesting' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Nested Resources](http://edgeguides.rubyonrails.org/routing.html#nested-resources)\n* [Avoid Deeply Nested Routes in Rails](http://nithinbekal.com/posts/rails-shallow-nesting/)\n</mentor-checkpoint-note>\n\n<center>\n  ![churchill](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-comments/churchill_victory.jpg)\n</center>\n\n> “'No comment' is a splendid expression. I am using it again and again.”\n>\n> — Winston Churchill\n\n## Overview and Purpose\n\nThis checkpoint gives an overview of associations in Rails and `POST` requests.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Explain the `has_many` association in Rails.\n- Explain the `belongs_to` association in Rails.\n- Explain HTTP `POST` requests.\n\n## Commenting\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/47m3qygm5g\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWe want to allow Bloccit users to comment on posts. We'll build comments as a separate resource, and in doing so, we'll introduce [shallow nesting](http://edgeguides.rubyonrails.org/routing.html#shallow-nesting) to prevent our routes from becoming long and cumbersome.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Associating Comments with Users\n\nLike posts, comments should have an explicit owner. We'll associate comments with users so we can display a comment's author with the comment. Let's update `comment_spec.rb` to reflect this relationship:\n\n```ruby(spec/models/comment_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Comment, type: :model do\n   let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n   let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n   let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n-  let(:comment) { Comment.create!(body: 'Comment Body', post: post) }\n # #1\n+  let(:comment) { Comment.create!(body: 'Comment Body', post: post, user: user) }\n+\n # #2\n+    it { is_expected.to belong_to(:post) }\n+    it { is_expected.to belong_to(:user) }\n # #3\n+    it { is_expected.to validate_presence_of(:body) }\n+    it { is_expected.to validate_length_of(:body).is_at_least(5) }\n\n   describe \"attributes\" do\n     it \"responds to body\" do\n       expect(comment).to have_attributes(body: \"Comment Body\")\n     end\n   end\n end\n```\n\nAt __#1__, we create a comment with an associated user.\n\nAt __#2__, we test that a comment belongs to a user and a post.\n\nAt __#3__, we test that a comment's body is present and  has a minimum length of five.\n\nRun `comment_spec.rb` and note the failures:\n\n```bash(Terminal)\n$ rspec spec/models/comment_spec.rb\n```\n\nBefore we fix them, let's also update `post_spec.rb` and `user_spec.rb` to test post and user associations with comments:\n\n```ruby(spec/models/post_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Post, type: :model do\n   let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n   let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n   let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n\n+  it { is_expected.to have_many(:comments) }\n ...\n```\n\n```ruby(spec/models/user_spec.rb)\n require 'rails_helper'\n\n RSpec.describe User, type: :model do\n   let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"password\") }\n\n   it { is_expected.to have_many(:posts) }\n+  it { is_expected.to have_many(:comments) }\n ...\n```\n\nRun the specs and see the five failures from our new tests:\n\n```bash(Terminal)\n$ rspec spec\n```\n\nTo pass our specs, we'll associate comments with users by generating a new migration to add a user_id foreign key to the comments table:\n\n```bash(Terminal)\n$ rails generate migration AddUserToComments user:references\n      invoke  active_record\n      create    db/migrate/20150819182127_add_user_to_comments.rb\n```\n\nRun the migration to add the foreign key:\n\n```bash(Terminal)\n$ rake db:migrate\n```\n\nUpdate `User` to reflect the association with comments:\n\n```ruby(app/models/user.rb)\n class User < ActiveRecord::Base\n   has_many :posts\n+  has_many :comments\n```\n\nUpdate `Comment` to reflect the association with users and add validations:\n\n```ruby(app/models/comment.rb)\n class Comment < ActiveRecord::Base\n   belongs_to :post\n+  belongs_to :user\n+\n+  validates :body, length: { minimum: 5 }, presence: true\n+  validates :user, presence: true\n end\n```\n\nWith these changes our specs should pass:\n\n```bash(Terminal)\n$ rspec spec\n```\n\nBefore we create `CommentsController`, let's update `seeds.rb` to reflect our new association:\n\n```ruby(db/seeds.rb)\n ...\n # Create Comments\n 100.times do\n   Comment.create!(\n+    user: users.sample,\n     post: posts.sample,\n     body: RandomData.random_paragraph\n   )\n ...\n```\n\nReset the database to create comments with users:\n\n```bash(Terminal)\n$ rake db:reset\n```\n\n## Shallow Routes\n\nBefore we can create a controller for comments, we need to create comment routes. We could nest comments under posts:\n\n> Don't actually make these changes.\n\n```ruby(config/routes.rb)\n Rails.application.routes.draw do\n   resources :topics do\n     resources :posts, except: [:index] do\n       resources :comments, only: [:create, :destroy]\n     end\n   end\n ...\n```\n\nBut that would create deeply nested routes:\n\n```bash\n  topic_post_comments POST   /topics/:topic_id/posts/:post_id/comments(.:format)    comments#create\n  topic_post_comment DELETE /topics/:topic_id/posts/:post_id/comments/:id(.:format) comments#destroy\n```\n\nDeep nesting is undesirable because it forces us to pass in two ids (topic and post) to create a comment and three ids (topic, post, and comment) to delete a comment. While having the entire context might seem beneficial, it's unnecessary given that we can find a comment's post with `comment.post` and the comment's topic with `comment.post.topic`. Deep nesting is cumbersome, because it requires us to pass extra parameters. Worse, it's unnecessary and violates a good practice to never nest resources more than one level deep.\n\nLet's use shallow nesting to nest comments solely under posts:\n\n```ruby(config/routes.rb)\n Rails.application.routes.draw do\n   resources :topics do\n     resources :posts, except: [:index]\n   end\n+\n # #4\n+  resources :posts, only: [] do\n # #5\n+    resources :comments, only: [:create, :destroy]\n+  end\n```\n\nAt __#4__, we use `only: []` because we don't want to create any `/posts/:id` routes, just `posts/:post_id/comments` routes.\n\nAt __#5__, we only add `create` and `destroy` routes for comments. We'll display comments on the posts **show** view, so we won't need `index` or `new` routes. We also won't give users the ability to view individual comments or edit comments, removing the need for `show`, `update`, and `edit` routes.\n\nUse `rake routes` to see our new shallow-nested comment routes:\n\n```bash(Terminal)\n$ rake routes | grep comment\n  post_comments POST   /posts/:post_id/comments(.:format)        comments#create\n  post_comment DELETE /posts/:post_id/comments/:id(.:format)     comments#destroy\n```\n\nNext we'll create `CommentsController` to use our new comment routes.\n\n## `CommentsController` and Specs\n\nGenerate a controller for comments:\n\n```bash(Terminal)\n$ rails generate controller comments\n```\n\nBefore we code the comment controller, let's code the `comments_controller_spec.rb`. Based on our routes and desired functionality, we need to test the creation and deletion of comments in `CommentsController`:\n\n```ruby(spec/controllers/comments_controller_spec.rb)\n require 'rails_helper'\n+include SessionsHelper\n\n RSpec.describe CommentsController, type: :controller do\n+  let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n+  let(:other_user) { User.create!(name: RandomData.random_name, email: RandomData.random_email, password: \"helloworld\", role: :member) }\n+  let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n+  let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n+  let(:my_comment) { Comment.create!(body: 'Comment Body', post: my_post, user: my_user) }\n+\n # #6\n+  context \"guest\" do\n+    describe \"POST create\" do\n+      it \"redirects the user to the sign in view\" do\n+        post :create, post_id: my_post.id, comment: {body: RandomData.random_paragraph}\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n+\n+    describe \"DELETE destroy\" do\n+      it \"redirects the user to the sign in view\" do\n+        delete :destroy, post_id: my_post.id, id: my_comment.id\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n+  end\n+\n # #7\n+  context \"member user doing CRUD on a comment they don't own\" do\n+    before do\n+      create_session(other_user)\n+    end\n+\n+    describe \"POST create\" do\n+      it \"increases the number of comments by 1\" do\n+        expect{ post :create, post_id: my_post.id, comment: {body: RandomData.random_sentence} }.to change(Comment,:count).by(1)\n+      end\n+\n+      it \"redirects to the post show view\" do\n+        post :create, post_id: my_post.id, comment: {body: RandomData.random_sentence}\n+        expect(response).to redirect_to [my_topic, my_post]\n+      end\n+    end\n+\n+    describe \"DELETE destroy\" do\n+      it \"redirects the user to the posts show view\" do\n+        delete :destroy, post_id: my_post.id, id: my_comment.id\n+        expect(response).to redirect_to([my_topic, my_post])\n+      end\n+    end\n+  end\n+\n+\n # #8\n+  context \"member user doing CRUD on a comment they own\" do\n+    before do\n+      create_session(my_user)\n+    end\n+\n+    describe \"POST create\" do\n+      it \"increases the number of comments by 1\" do\n+        expect{ post :create, post_id: my_post.id, comment: {body: RandomData.random_sentence} }.to change(Comment,:count).by(1)\n+      end\n+\n+      it \"redirects to the post show view\" do\n+        post :create, post_id: my_post.id, comment: {body: RandomData.random_sentence}\n+        expect(response).to redirect_to [my_topic, my_post]\n+      end\n+    end\n+\n+    describe \"DELETE destroy\" do\n+      it \"deletes the comment\" do\n+        delete :destroy, post_id: my_post.id, id: my_comment.id\n+        count = Comment.where({id: my_comment.id}).count\n+        expect(count).to eq 0\n+      end\n+\n+      it \"redirects to the post show view\" do\n+        delete :destroy, post_id: my_post.id, id: my_comment.id\n+        expect(response).to redirect_to [my_topic, my_post]\n+      end\n+    end\n+  end\n+\n # #9\n+  context \"admin user doing CRUD on a comment they don't own\" do\n+    before do\n+      other_user.admin!\n+      create_session(other_user)\n+    end\n+\n+    describe \"POST create\" do\n+      it \"increases the number of comments by 1\" do\n+        expect{ post :create, post_id: my_post.id, comment: {body: RandomData.random_sentence} }.to change(Comment,:count).by(1)\n+      end\n+\n+      it \"redirects to the post show view\" do\n+        post :create, post_id: my_post.id, comment: {body: RandomData.random_sentence}\n+        expect(response).to redirect_to [my_topic, my_post]\n+      end\n+    end\n+\n+    describe \"DELETE destroy\" do\n+      it \"deletes the comment\" do\n+        delete :destroy, post_id: my_post.id, id: my_comment.id\n+        count = Comment.where({id: my_comment.id}).count\n+        expect(count).to eq 0\n+      end\n+\n+      it \"redirects to the post show view\" do\n+        delete :destroy, post_id: my_post.id, id: my_comment.id\n+        expect(response).to redirect_to [my_topic, my_post]\n+      end\n+    end\n+  end\nend\n```\n\nAt __#6__, we create specs for guest users, who we will redirect to sign in if they attempt to create or delete a comment.\n\nAt __#7__, we create specs for member users who attempt to create new comments or delete comments they don't own. We will allow member users to create new comments, but we'll redirect them to the posts __show__ view if they try to delete another user's comment.\n\nAt __#8__, we test that members users are able to create new comments and delete their own comments.\n\nAt __#9__, we test that admin users are able to create and delete any comment, regardless of owner.\n\nRun this spec and see 13 failures:\n\n```bash(Terminal)\n$ rspec spec/controllers/comments_controller_spec.rb\n```\n\nLet's pass the `create` tests first:\n\n```ruby(app/controllers/comments_controller.rb)\nclass CommentsController < ApplicationController\n # #10\n+  before_action :require_sign_in\n+\n+  def create\n # #11\n+    @post = Post.find(params[:post_id])\n+    comment = @post.comments.new(comment_params)\n+    comment.user = current_user\n+\n+    if comment.save\n+      flash[:notice] = \"Comment saved successfully.\"\n # #12\n+      redirect_to [@post.topic, @post]\n+    else\n+      flash[:alert] = \"Comment failed to save.\"\n # #13\n+      redirect_to [@post.topic, @post]\n+    end\n+  end\n+\n+  private\n+\n # #14\n+  def comment_params\n+    params.require(:comment).permit(:body)\n+  end\n end\n```\n\nAt __#10__, we use `require_sign_in` to ensure that guest users are not permitted to create comments.\n\nAt __#11__, we find the correct post using `post_id` and then create a new comment using `comment_params`. We assign the comment's user to `current_user`, which returns the signed-in user instance.\n\nAt __#12__ and __#13__ we redirect to the posts __show__ view. Depending on whether the comment was valid, we'll either display a success or an error message to the user.\n\nAt __#14__, we define a private `comment_params` method that white lists the parameters we need to create comments.\n\nRun `comments_controller_spec.rb` again and note that the seven `create` tests pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/comments_controller_spec.rb\n```\n\nWe still have six `delete` test failures, let's pass them now:\n\n```ruby(app/controllers/comments_controller.rb)\n class CommentsController < ApplicationController\n   before_action :require_sign_in\n # #15\n+  before_action :authorize_user, only: [:destroy]\n ...\n+  def destroy\n+    @post = Post.find(params[:post_id])\n+    comment = @post.comments.find(params[:id])\n+\n+    if comment.destroy\n+      flash[:notice] = \"Comment was deleted.\"\n+      redirect_to [@post.topic, @post]\n+    else\n+      flash[:alert] = \"Comment couldn't be deleted. Try again.\"\n+      redirect_to [@post.topic, @post]\n+    end\n+  end\n+\n   private\n\n   def comment_params\n     params.require(:comment).permit(:body)\n   end\n+\n # #16\n+  def authorize_user\n+    comment = Comment.find(params[:id])\n+    unless current_user == comment.user || current_user.admin?\n+      flash[:alert] = \"You do not have permission to delete a comment.\"\n+      redirect_to [comment.post.topic, comment.post]\n+    end\n+  end\n end\n```\n\nAt __#15__, we add `authorize_user` filter to ensure that unauthorized users are not permitted to delete comments.\n\nAt __#16__, we define the `authorize_user` method which allows the comment owner or an admin user to delete the comment. We redirect unauthorized users to the post __show__ view.\n\nRun `comments_controller_spec.rb` again and see that all the tests for `create` and `delete` are now passing:\n\n```bash(Terminal)\n$ rspec spec/controllers/comments_controller_spec.rb\n```\n\n## View Changes\n\nLet's finish our comment feature by giving users the ability to view, create, and delete comments from the application.\n\nWe want to display comments on the post __show__ view. We could display the comments belonging to a post using an `each` loop, as we do when we display the posts that belong to a topic, but let's take a DRYer approach using partials. Create a `_comment.html.erb` partial:\n\n```bash(Terminal)\n$ touch app/views/comments/_comment.html.erb\n```\n\nIn the comment partial, add the code to display an individual comment:\n\n```erb(app/views/comments/_comment.html.erb)\n+<div class=\"media\">\n+  <div class=\"media-body\">\n+    <small>\n+      <%= comment.user.name %> commented <%= time_ago_in_words(comment.created_at) %> ago\n+    </small>\n+    <p><%= comment.body %></p>\n+  </div>\n+</div>\n```\n\nWe'll call the partial in the posts __show__ view:\n\n```erb(app/views/posts/show.html.erb)\n ...\n   <div class=\"col-md-8\">\n     <p><%= @post.body %></p>\n+    <div>\n+      <h3>Comments</h3>\n+      <%= render @post.comments %>\n+    </div>\n   </div>\n ...\n```\n\nThis simple line of code will call `_comment.html.erb` and render all the comments which belong to the given post. Let's take a deeper dive into how this actually works by calling `render` more explicitly.\n\nThe `render` method provides [syntactic sugar](http://en.wikipedia.org/wiki/Syntactic_sugar) to make it easier to read and use. As with `link_to`, this can cause confusion when you're first becoming familiar with what the method does. Consider the following call to `render`, which is explicit:\n\n```erb\n<% @post.comments.each do |comment| %>\n  <%= render({ partial: 'comments/comment', locals: {comment: comment} }) %>\n<% end %>\n```\n\nThe above version is explicit. It loops through a collection, and for each element in the collection, feeds `render` a hash argument with a `:partial` key that points to the file we want to render, and a `:locals` key with a hash of local variables.\n\nWe could simplify the above call like this:\n\n```erb\n<% @post.comments.each do |comment| %>\n  <%= render partial: 'comments/comment', locals: {comment: comment} %>\n<% end %>\n```\n\nIn the above call to `render`, we implied the parentheses and brackets for a terser syntax. We can make this simpler yet by applying some syntactic sugar:\n\n```erb\n<% @post.comments.each do |comment| %>\n  <%= render comment %>\n<% end %>\n```\n\nThe above version still iterates through the collection, but it instead feeds `render` a single object as an argument. Using Rails conventions, `render` automatically looks for a `comments/_comment.html.erb` partial, and passes `comment` as a local variable. We can make this even simplier though, by removing the loop:\n\n```erb\n<%= render @post.comments %>\n```\n\nThe final version is terse. When we use `render` this way, the method recognizes that we're rendering a collection, and iterates through that collection. For each `comment` belonging to `@post`, the `render` method searches for the conventionally named partial file (`comments/_comment.html.erb`) and renders it. `comment` is automatically passed to the partial as a local variable.\n\n> For more on `render` and partials, read the Rails Guide on [using partials](http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials).\n\nGo to the __show__ view of a post and confirm that its comments are displayed.\n\n<center>\n  ![displaying-comments](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-comments/diplaying-comments.png)\n</center>\n\nWe can see comments thanks to `seeds.rb`, but we don't have a way to create them from the application. Create a `comments/_form.html.erb` partial so users can create comments for a post, from the UI:\n\n```bash(Terminal)\n$ touch app/views/comments/_form.html.erb\n```\n\nAdd the code to create a new comment:\n\n```erb(app/views/comments/_form.html.erb)\n+<h4>Add a comment</h4>\n <!-- #17 -->\n+<%= form_for [post, comment] do |f| %>\n+  <div class=\"form-group\">\n <!-- #18 -->\n+    <%= f.label :body, class: 'sr-only' %>\n+    <%= f.text_field :body, class: 'form-control', placeholder: \"Enter a new comment\" %>\n+  </div>\n+  <%= f.submit \"Submit Comment\", class: 'btn btn-default pull-right' %>\n+<% end %>\n```\n\nAt __#17__, we create a form for a post and comment, because comments are shallowly nested under posts.\n\nAt __#18__, we create a label with a class of `sr-only`. This adds a [hidden label](http://getbootstrap.com/css/#callout-inline-form-labels) for users using [screen readers](https://en.wikipedia.org/wiki/Screen_reader).\n\nTo use the form, update the posts __show__ view:\n\n```erb(app/views/posts/show.html.erb)\n ...\n   <div class=\"col-md-8\">\n     <p><%= @post.body %></p>\n     <div>\n       <h3>Comments</h3>\n       <%= render @post.comments %>\n     </div>\n <!-- #19 -->\n+    <% if current_user %>\n <!-- #20 -->\n+      <%= render 'comments/form', comment: Comment.new, post: @post %>\n+    <% end %>\n   </div>\n ...\n```\n\nAt __#19__, we allow signed in users to see the comment form.\n\nAt __#20__, we render the comment form, and use `comments/form`, because we are rendering the comment form from a post view. If we didn't specify `comments`, Rails would render the posts __form__ partial by default.\n\nThe __show__ view for any post with a signed-in user will display a form for creating a comment.\n\n<center>\n  ![comment-form](http://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-comments/comment-form.png)\n</center>\n\nTry creating some valid and invalid comments from the UI.\n\nThe final piece of the puzzle is to allow users to delete comments. We'll add a link to the `_comment.html.erb` to allow authorized users to delete a comment. First, let's create a helper method to determine if a user is authorized to delete a comment:\n\n```ruby(app/helpers/comments_helper.rb)\n module CommentsHelper\n+  def user_is_authorized_for_comment?(comment)\n+     current_user && (current_user == comment.user || current_user.admin?)\n+  end\n end\n```\n\nWe'll use the helper method to selectively display a link to delete a comment:\n\n```erb(app/views/comments/_comment.html.erb)\n <div class=\"media\">\n   <div class=\"media-body\">\n     <small>\n       <%= comment.user.name %> commented <%= time_ago_in_words(comment.created_at) %> ago\n+      <% if user_is_authorized_for_comment?(comment) %>\n+        | <%= link_to \"Delete\", [@post, comment], method: :delete %>\n+      <% end %>\n     </small>\n     <p><%= comment.body %></p>\n   </div>\n </div>\n```\n\nRefresh the post __show__ page and confirm that you can delete comments that you created, but not the comments of other users.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Deploy to Heroku and migrate your production database:\n\n```bash(Terminal)\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [`belongs_to` Association](http://guides.rubyonrails.org/association_basics.html#the-belongs-to-association) | The `belongs_to` association establishes a one-to-one relationship between two models. Each instance of the declaring model `belongs_to` an instance of the other (parent) model. |\n| [`has_many` Association](http://guides.rubyonrails.org/association_basics.html#the-has-many-association) | A `has_many` association establishes a one-to-many connection from one model to many other models. Each instance of the declaring model has zero or more instances of the child model. |\n| [Partial templates](http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials) | Partial templates, called \"partials,\" are devices for breaking the rendering process into manageable segments. Partials allow the code that renders a particular piece of a response to be moved to its own file, and is a best practice for keeping code DRY. |\n| [Rendering Collections](http://guides.rubyonrails.org/layouts_and_rendering.html#rendering-collections) | We use partials to render collections. When you pass a collection to a partial via the `:collection` option, Rails inserts the partial once for each instance in the collection. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nUse partials and `render` to DRYly refactor the `each` loops we used to display topics and posts:\n\n1. Create `_topic.html.erb` and `_post.html.erb` partials.\n\n2. Populate both partials with code to display individual instances of topic and post.\n\n3. Use the `_topic.html.erb` partial in topics __index__ view.\n\n4. Use the `_post.html.erb` partial in the topics __show__ view.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/83fnzei1zt?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Commenting Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>29, "checkpoint_type"=>"normal", "position"=>29, "points"=>1, "ref"=>"a671bb9e-6065-45a5-a9ec-246adce6427f|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2125", "assessment"=>nil}, {"id"=>2126, "name"=>"Rails: Voting", "summary"=>"Voting: allowing users to vote on and algorithmically rank posts", "body"=>"<!-- { ids:[2126], name:'Rails: Voting', summary:'Voting: allowing users to vote on and algorithmically rank posts' } -->\n\n<center>\n  ![voted](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-voting/voted.png)\n</center>\n\n> “If voting changed anything, they'd make it illegal.”\n>\n> — Emma Goldman\n\n## Overview and Purpose\n\nThis checkpoint gives an overview of associations in Rails and `POST` requests.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Explain the `has_many` association in Rails.\n- Explain the `belongs_to` association in Rails.\n- Explain HTTP `POST` requests.\n\n## Let's Vote!\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/jmovhyern8\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nAs Bloccit grows there will be thousands of posts, and users will want a feature to distinguish the good from the bad. We'll build a voting feature to allow users to up or down vote posts.\n\n![votes](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-voting/vote-example.png)\n\nTo get users to the Bloccit Ballot Box we'll need to do the following:\n\n* Create a `Vote` model to handle vote data. The `Vote` model will be associated with the `User` and `Post` models;\n* Add elements to the UI to allow users to vote on posts. Users should only be able to vote once on a given post;\n* Sort the posts for a given topic in order of highest votes to lowest votes. We should also create a simple time-decay algorithm to keep our feed fresh with new posts.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## The Vote Model\n\nCreate a `Vote` model with attributes for `value` (an integer), a reference to users, and a reference to posts:\n\n```bash(Terminal)\n$ rails g model Vote value:integer user:references:index post:references:index\n```\n\nCreate the votes table:\n\n```bash(Terminal)\n$ rake db:migrate\n```\n\nLet's TDD the basic properties of the `Vote` model:\n\n```ruby(spec/models/vote_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Vote, type: :model do\n-  pending \"add some examples to (or delete) \#{__FILE__}\"\n+  let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n+  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n+  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n+  let(:vote) { Vote.create!(value: 1, post: post, user: user) }\n+\n # #1\n+  it { is_expected.to belong_to(:post) }\n+  it { is_expected.to belong_to(:user) }\n # #2\n+  it { is_expected.to validate_presence_of(:value) }\n # #3\n+  it { is_expected.to validate_inclusion_of(:value).in_array([-1, 1]) }\n end\n```\n\nAt __#1__, we test that votes belong to posts and users.\n\nAt __#2__, we test that `value` is present when votes are created.\n\nAt __#3__, we validate that `value` is either `-1` (a down vote) or `1` (an up vote).\n\nRun the spec:\n\n```bash(Terminal)\n$ rspec spec/models/vote_spec.rb\n```\n\nNote that the two `value` validations tests are failing. Let's add the validations necessary so that the tests pass:\n\n```ruby(app/models/vote.rb)\n class Vote < ActiveRecord::Base\n   belongs_to :user\n   belongs_to :post\n+\n+  validates :value, inclusion: { in: [-1, 1], message: \"%{value} is not a valid vote.\" }, presence: true\n end\n```\n\nThe [inclusion validation](http://guides.rubyonrails.org/active_record_validations.html#inclusion) ensures that `value` is assigned either a `-1` or `1`. Run the spec again:\n\n```bash(Terminal)\n$ rspec spec/models/vote_spec.rb\n```\n\n... and all the tests will pass. Let's add tests to `post_spec.rb` and `user_spec.rb` to test the association between posts, users, and votes:\n\n```ruby(spec/models/post_spec.rb)\n ...\n   it { is_expected.to have_many(:comments) }\n+  it { is_expected.to have_many(:votes) }\n ...\n```\n\n```ruby(spec/models/user_spec.rb)\n ...\n   it { is_expected.to have_many(:comments) }\n+  it { is_expected.to have_many(:votes) }\n ...\n```\n\nRun each spec:\n\n```bash(Terminal)\n$ rspec spec/models/post_spec.rb\n$ rspec spec/models/user_spec.rb\n```\n\nEach spec will have one failure for the vote association. Let's update `Post` and `User` to reflect their association with votes and pass the tests:\n\n```ruby(app/model/post.rb)\n class Post < ActiveRecord::Base\n   belongs_to :topic\n   belongs_to :user\n   has_many :comments, dependent: :destroy\n # #4\n+  has_many :votes, dependent: :destroy\n ...\n```\n\nAt __#4__, we add the `votes` association to `Post`. This relates the models and allows us to call `post.votes`. We also add `dependent: :destroy` to ensure that votes are destroyed when their parent post is deleted.\n\nUpdate `User` in a similar fashion:\n\n```ruby(app/model/user.rb)\n class User < ActiveRecord::Base\n-  has_many :posts\n-  has_many :comments\n+  has_many :posts, dependent: :destroy\n+  has_many :comments, dependent: :destroy\n+  has_many :votes, dependent: :destroy\n ...\n```\n\nWe also updated the `posts` and `comments` associations so that all dependent posts, comments, and votes are destroyed when their parent user is deleted. Run the specs again and they will all pass:\n\n```bash(Terminal)\n$ rspec spec/models/post_spec.rb\n$ rspec spec/models/user_spec.rb\n```\n\n## Implementing Voting Methods\n\nWe can see how many votes have been cast on a `post` by calling `post.votes`, thanks to the `has_many :votes` declaration in `Post`. We'll also want a way to view only up votes, only down votes, and the sum of all up and down votes. We'll add methods to `Post` to accomplish this. We'll use TDD to define the expected behavior of `up_votes`, `down_votes`, and `points`:\n\n```ruby(spec/models/post_spec.rb)\n ...\n\n   describe \"attributes\" do\n     it \"has title and body attributes\" do\n       expect(post).to have_attributes(title: title, body: body)\n     end\n   end\n\n+  describe \"voting\" do\n # #5\n+    before do\n+      3.times { post.votes.create!(value: 1) }\n+      2.times { post.votes.create!(value: -1) }\n+      @up_votes = post.votes.where(value: 1).count\n+      @down_votes = post.votes.where(value: -1).count\n+    end\n+\n # #6\n+    describe \"#up_votes\" do\n+      it \"counts the number of votes with value = 1\" do\n+        expect( post.up_votes ).to eq(@up_votes)\n+      end\n+    end\n+\n # #7\n+    describe \"#down_votes\" do\n+      it \"counts the number of votes with value = -1\" do\n+        expect( post.down_votes ).to eq(@down_votes)\n+      end\n+    end\n+\n # #8\n+    describe \"#points\" do\n+      it \"returns the sum of all down and up votes\" do\n+        expect( post.points ).to eq(@up_votes - @down_votes)\n+      end\n+    end\n+  end\n end\n```\n\nAt __#5__, we create three up votes and two down votes before each voting spec.\n\nAt __#6__, we test that `up_votes` returns the count of up votes\n\nAt __#7__, we test that `down_votes` returns the count of down votes.\n\nAt __#8__, we test that `points` returns the sum of all votes on the post.\n\nRun `post_spec.rb`:\n\n```bash(Terminal)\n$ rspec spec/models/post_spec.rb\n```\n\n... and note the three failing specs, because we haven't implemented the methods in `Post`. Let's pass these tests by implementing `up_votes`, `down_votes`, and `points`:\n\n```ruby(app/models/post.rb)\n   ...\n   validates :user, presence: true\n+\n+  def up_votes\n # #9\n+    votes.where(value: 1).count\n+  end\n+\n+  def down_votes\n # #10\n+    votes.where(value: -1).count\n+  end\n+\n+  def points\n # #11\n+    votes.sum(:value)\n+  end\n end\n```\n\n> Remember that `votes` in the above code is an implied `self.votes`.\n\nAt __#9__, we find the up votes for a post by passing `value: 1` to `where`. This fetches a collection of votes with a value of `1`. We then call `count` on the collection to get a total of all up votes.\n\nAt __#10__, we find the down votes for a post by passing `value: -1` to `where`. `where(value: -1)` fetches only the votes with a value of `-1`. We then call `count` on the collection to get a total of all up votes.\n\nAt __#11__, we use ActiveRecord's `sum` method to add the value of all the given post's votes. Passing `:value` to `sum` tells it what attribute to sum in the collection.\n\nRun `post_spec.rb` to confirm that we've implemented the voting methods as we planned, and note that all tests pass:\n\n```bash(Terminal)\n$ rspec spec/models/post_spec.rb\n```\n\nLet's seed votes into our development database so we have more sample data to work with:\n\n```ruby(db/seeds.rb)\n ...\n # Create Posts\n 50.times do\n-  Post.create!(\n+  post = Post.create!(\n     user:   users.sample,\n     topic:  topics.sample,\n     title:  RandomData.random_sentence,\n     body:   RandomData.random_paragraph\n   )\n+\n # #12\n+  post.update_attribute(:created_at, rand(10.minutes .. 1.year).ago)\n # #13\n+  rand(1..5).times { post.votes.create!(value: [-1, 1].sample, user: users.sample) }\n\n ...\n\n puts \"\#{Topic.count} topics created\"\n puts \"\#{Post.count} posts created\"\n puts \"\#{Comment.count} comments created\"\n+puts \"\#{Vote.count} votes created\"\n```\n\nAt __#12__, we update the time a post was created. This makes our seeded data more realistic and will allow us to see our ranking algorithm in action later in the checkpoint.\n\nAt __#13__, we create between one and five votes for each post. `[-1, 1].sample` randomly creates either an up vote or a down vote.\n\nReseed the database to insert voting data:\n\n```bash(Terminal)\n$ rake db:reset\n```\n\n## Implementing the UI\n\nLet's implement the UI to allow Bloccit users to up and down vote posts. To start we'll need to generate `VotesController`:\n\n```bash(Terminal)\n$ rails generate controller Votes\n```\n\nWe'll keep the UI for voting simple and use Reddit-like up and down arrows, with a score shown between the arrows. To build this, we'll need three separate divs, one for each arrow and one for the score. We'll also surround the three divs with an outer div that groups the three elements together. Voting is sufficiently distinct and repeatable to merit a separate partial, in which to store the modular view elements for a voter user interface. Create the following partial file:\n\n```bash(Terminal)\n$ touch app/views/votes/_voter.html.erb\n```\n\n```erb(app/views/votes/_voter.html.erb)\n+<div>\n+  <div><%= link_to \" \", '#', class: 'glyphicon glyphicon-chevron-up' %></div>\n+  <div><strong><%= post.points %></strong></div>\n+  <div><%= link_to \" \", '#', class: 'glyphicon glyphicon-chevron-down' %></div>\n+</div>\n```\n\nBecause we haven't yet determined these links' locations yet, we stubbed their paths in the `link_to` methods.\n\n> A pound sign in quotes — '#' or \"#\" — is the conventional path for a pending or stubbed link.\n\nUsers should be able to vote on each post, so we need to `render` our __voter__ partial wherever we show posts. There are two places we do that -  the posts __show__ view and the topics __show__ view. Add the call to `render` to the posts __show__ view:\n\n```erb(app/views/posts/show.html.erb)\n-<h1>\n-  <%= @post.title %> <br>\n-  <small>\n-    submitted <%= time_ago_in_words(@post.created_at) %> ago by <%= @post.user.name %>\n-  </small>\n-</h1>\n+<div>\n+  <%= render partial: 'votes/voter', locals: { post: @post } %>\n+  <h1>\n+    <%= @post.title %> <br>\n+    <small>\n+      submitted <%= time_ago_in_words(@post.created_at) %> ago by <%= @post.user.name %>\n+    </small>\n+  </h1>\n+</div>\n ...\n```\n\n> Because the partial has access to the `@post` variable, we don't technically need to pass it here. Other views where we would like to incorporate this partial might not have an identical `@post` variable, however, so it's a good idea to pass `post` in explicitly, rather than implicitly expect `@post`. This is why the partial we created references `post` instead of `@post`.\n\n## Styling the Voter\n\nOpen Bloccit in the browser and view the posts __show__ view:\n\n![unstyled-voting-arrows](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-voting/unstyled-voting-arrows.png)\n\nThere are a couple display issues with the __voter__ partial. The `post.title` should be aligned horizontally with the __voter__ partial, and `post.points` should be aligned vertically with the up and down arrows. Let's fix these styling issues.\n\nWe can polish the formatting using custom CSS. Open `app/assets/stylesheets/votes.scss` and add the following CSS rule:\n\n```scss(app/assets/stylesheets/votes.scss)\n+.vote-arrows {\n+  width: 40px;\n+  text-align: center;\n+}\n```\n\nThen add `.vote-arrows` and the Bootstrap class `.pull-left` to the outermost div in `app/views/votes/_voter.html.erb`, to justify the contents of that partial to the left.\n\n```erb(app/views/votes/_voter.html.erb)\n-<div>\n+<div class=\"vote-arrows pull-left\">\n   <div><%= link_to \" \", '#', class: 'glyphicon glyphicon-chevron-up' %></div>\n   <div><strong><%= post.points %></strong></div>\n   <div><%= link_to \" \", '#', class: 'glyphicon glyphicon-chevron-down' %></div>\n </div>\n```\n\nRefresh the posts __show__ view and notice how much better it's looking. We can still improve it though, perhaps by displaying the vote tally of the post more prominently. Let's use the methods we added to `Post` to make the __show__ view even cooler:\n\n```erb(app/views/posts/show.html.erb)\n ...\n   <% if user_is_authorized_for_post?(@post) %>\n     <div class=\"col-md-4\">\n       <%= link_to \"Edit Post\", edit_topic_post_path(@post.topic, @post), class: 'btn btn-success' %>\n       <%= link_to \"Delete Post\", [@post.topic, @post], method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure you want to delete this post?' } %>\n     </div>\n   <% end %>\n+  <div class=\"col-md-4\">\n+    <h3>\n // #14\n+      <%= pluralize(@post.points, 'point') %>\n+      <div>\n+        <small>\n+          <%= pluralize(@post.up_votes, 'up vote') %>,\n+          <%= pluralize(@post.down_votes, 'down vote') %>\n+        </small>\n+      </div>\n+    </h3>\n+  </div>\n </div>\n```\n\nAt __#14__, we use the [`pluralize` helper method](http://apidock.com/rails/ActionView/Helpers/TextHelper/pluralize) to display the correctly pluralized forms of \"point\", \"up vote\", and \"down vote\".\n\nRefresh the view in localhost and see how easy it is to view a post's votes.\n\n<center>\n  ![post-show-with-votes](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-voting/post-show-with-votes.png)\n</center>\n\n## Votes on the Topics Show View\n\nThe topics __show__ view should `render` the __voter__ partial as well so that users are able to vote on posts without clicking on the post view, thus making voting a little more convenient for users:\n\n```erb(app/views/topics/show.html.erb)\n ...\n     <% @topic.posts.each do |post| %>\n       <div class=\"media\">\n+        <%= render partial: 'votes/voter', locals: { post: post } %>\n ...\n```\n\nBecause our voter partial is DRY and modular, no other change is needed. View the modified topics __show__ view in the browser.\n\n## Routing Votes\n\nIn the __voter__ partial, we stubbed out the destination URL in the `link_to` methods, but we'll need to update this so the vote arrow links point to the correct vote routes. Votes are different than topics or posts, because they do not need a complete RESTful resource. In other words, there are no forms or specific views for votes, only the links in the `voter` partial. Our best option is to create a couple of routes manually in `routes.rb`:\n\n```ruby(config/routes.rb)\n Rails.application.routes.draw do\n   resources :topics do\n     resources :posts, except: [:index]\n   end\n\n   resources :posts, only: [] do\n     resources :comments, only: [:create, :destroy]\n\n+    post '/up-vote' => 'votes#up_vote', as: :up_vote\n+    post '/down-vote' => 'votes#down_vote', as: :down_vote\n   end\n ...\n```\n\nThese new lines create `POST` routes at the URL `posts/:id/up-vote` and `posts/:id/down-vote`. The `as` key-value pairs at the end stipulate the method names which will be associated with these routes: `up_vote_path` and `down_vote_path`.\n\n> Why are we declaring these routes as `POST` requests? What other actions are defined as `POST` requests? What do all these actions have in common?\n\nNow that we have valid routes, we can update the `link_to` methods in the `voter` partial:\n\n```erb(app/views/votes/_voter.html.erb)\n <div class=\"vote-arrows pull-left\">\n-  <div><%= link_to \" \", '#', class: 'glyphicon glyphicon-chevron-up' %></div>\n // #15\n+  <div><%= link_to \" \", post_up_vote_path(post), class: 'glyphicon glyphicon-chevron-up', method: :post %></div>\n  <div><strong><%= post.points %></strong></div>\n-  <div><%= link_to \" \", '#', class: 'glyphicon glyphicon-chevron-down' %></div>\n // #16\n+  <div><%= link_to \" \", post_down_vote_path(post), class: 'glyphicon glyphicon-chevron-down', method: :post %></div>\n </div>\n```\n\nAt __#15__ and __#16__, we used `method: :post`, because `link_to` generates `GET` requests by default.\n\nClick on an up vote link and see an error like this:\n\n![unknown-action](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-voting/unknown-action.png)\n\nThis is because `VotesController` is empty. We've defined the routes, but have not written the controller methods.\n\n## Implementing the Votes Controller\n\nWe'll need to define two methods in `VotesController` to serve as the endpoints for the `up_vote` and `down_vote` routes. We'll start by TDDing the expected behavior of the `up_vote` action:\n\n```ruby(spec/controllers/votes_controller_spec.rb)\n require 'rails_helper'\n+include SessionsHelper\n+\n RSpec.describe VotesController, type: :controller do\n+  let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n+  let(:other_user) { User.create!(name: RandomData.random_name, email: RandomData.random_email, password: \"helloworld\", role: :member) }\n+  let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n+  let(:user_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: other_user) }\n+  let(:my_vote) { Vote.create!(value: 1) }\n+\n # #17\n+  context \"guest\" do\n+    describe \"POST up_vote\" do\n+      it \"redirects the user to the sign in view\" do\n+        post :up_vote, post_id: user_post.id\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n+  end\n+\n # #18\n+  context \"signed in user\" do\n+    before do\n+      create_session(my_user)\n+      request.env[\"HTTP_REFERER\"] = topic_post_path(my_topic, user_post)\n+    end\n+\n+    describe \"POST up_vote\" do\n # #19\n+      it \"the users first vote increases number of post votes by one\" do\n+        votes = user_post.votes.count\n+        post :up_vote, post_id: user_post.id\n+        expect(user_post.votes.count).to eq(votes + 1)\n+      end\n+\n # #20\n+      it \"the users second vote does not increase the number of votes\" do\n+        post :up_vote, post_id: user_post.id\n+        votes = user_post.votes.count\n+        post :up_vote, post_id: user_post.id\n+        expect(user_post.votes.count).to eq(votes)\n+      end\n+\n # #21\n+      it \"increases the sum of post votes by one\" do\n+        points = user_post.points\n+        post :up_vote, post_id: user_post.id\n+        expect(user_post.points).to eq(points + 1)\n+      end\n+\n # #22\n+      it \":back redirects to posts show page\" do\n+        request.env[\"HTTP_REFERER\"] = topic_post_path(my_topic, user_post)\n+        post :up_vote, post_id: user_post.id\n+        expect(response).to redirect_to([my_topic, user_post])\n+      end\n+\n # #23\n+      it \":back redirects to posts topic show\" do\n+        request.env[\"HTTP_REFERER\"] = topic_path(my_topic)\n+        post :up_vote, post_id: user_post.id\n+        expect(response).to redirect_to(my_topic)\n+      end\n+    end\n+  end\n end\n```\n\nAt __#17__, we test that unsigned-in users are redirected to the sign-in page, as they will not be allowed to vote on posts.\n\nAt __#18__, we create a context to test signed-in users, who should be allowed to vote on posts.\n\nAt __#19__, we expect that the first time a user up votes a post, a new vote is created for the post.\n\nAt __#20__, we test that a new vote is not created if the user repeatedly up votes a post.\n\nAt __#21__, we expect that up voting a post will increase the number of points on the post by one.\n\nAt __#22__ and __#23__, we test to ensure that users are redirected back to the correct view (posts __show__ or topics __show__) depending on which view they up voted from. We do this by setting `request.env[\"HTTP_REFERER\"]` to the requesting URL.\n\nRun `votes_controller_spec.rb` and see the six new failures:\n\n```bash(Terminal)\n$ rspec spec/controllers/votes_controller_spec.rb\n```\n\nFrom our tests, we know that `up_vote` should find the relevant vote if one already exists for that post and the current user. It should update the vote if it exists, or create a new one if not. Our tests have told us what to implement, so let's do that now:\n\n```ruby(app/controllers/votes_controller.rb)\n class VotesController < ApplicationController\n # #24\n+  before_action :require_sign_in\n+\n+  def up_vote\n+    @post = Post.find(params[:post_id])\n+    @vote = @post.votes.where(user_id: current_user.id).first\n+\n+    if @vote\n+      @vote.update_attribute(:value, 1)\n+    else\n+      @vote = current_user.votes.create(value: 1, post: @post)\n+    end\n+\n # #25\n+    redirect_to :back\n+  end\nend\n```\n\nAt __#24__, we require user to be signed-in before they're allowed to vote on a post.\n\nAt __#25__, we redirect the user [back](http://apidock.com/rails/ActionController/Redirecting/redirect_to) to the view that issued the request.\n\nRun the specs to confirm that they pass, then up vote a post in the browser to test it yourself.\n\n```bash(Terminal)\n$ rspec spec/controllers/votes_controller_spec.rb\n```\n\nLet's TDD down voting:\n\n```ruby(spec/controllers/votes_controller_spec.rb)\n ...\n   context \"guest\" do\n     describe \"POST up_vote\" do\n       it \"redirects the user to the sign in view\" do\n         post :up_vote, post_id: user_post.id\n         expect(response).to redirect_to(new_session_path)\n       end\n     end\n+\n+    describe \"POST down_vote\" do\n+      it \"redirects the user to the sign in view\" do\n+        delete :down_vote, post_id: user_post.id\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n   end\n\n   context \"signed in user\" do\n ...\n+    describe \"POST down_vote\" do\n+      it \"the users first vote increases number of post votes by one\" do\n+        votes = user_post.votes.count\n+        post :down_vote, post_id: user_post.id\n+        expect(user_post.votes.count).to eq(votes + 1)\n+      end\n+\n+      it \"the users second vote does not increase the number of votes\" do\n+        post :down_vote, post_id: user_post.id\n+        votes = user_post.votes.count\n+        post :down_vote, post_id: user_post.id\n+        expect(user_post.votes.count).to eq(votes)\n+      end\n+\n+      it \"decreases the sum of post votes by one\" do\n+        points = user_post.points\n+        post :down_vote, post_id: user_post.id\n+        expect(user_post.points).to eq(points - 1)\n+      end\n+\n+      it \":back redirects to posts show page\" do\n+        request.env[\"HTTP_REFERER\"] = topic_post_path(my_topic, user_post)\n+        post :down_vote, post_id: user_post.id\n+        expect(response).to redirect_to([my_topic, user_post])\n+      end\n+\n+      it \":back redirects to posts topic show\" do\n+        request.env[\"HTTP_REFERER\"] = topic_path(my_topic)\n+        post :down_vote, post_id: user_post.id\n+        expect(response).to redirect_to(my_topic)\n+      end\n+    end\n   end\n end\n```\n\nRun the spec again and confirm that the six down vote specs are failing:\n\n```bash(Terminal)\n$ rspec spec/controllers/votes_controller_spec.rb\n```\n\nAdd a method for `down_vote` to pass the new down vote failures:\n\n```ruby(app/controllers/votes_controller.rb)\n class VotesController < ApplicationController\n ...\n+\n+  def down_vote\n+    @post = Post.find(params[:post_id])\n+    @vote = @post.votes.where(user_id: current_user.id).first\n+\n+    if @vote\n+      @vote.update_attribute(:value, -1)\n+    else\n+      @vote = current_user.votes.create(value: -1, post: @post)\n+    end\n+\n+    redirect_to :back\n+  end\n ...\n```\n\nRun the specs again and all tests should pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/votes_controller_spec.rb\n```\n\nWe could stop here, but our code isn't very DRY. We have separate methods with a lot of overlapping code, so we should think of a DRYer way to implement this feature. Let's extract the duplicate logic into a separate method for updating vote values. By doing this, we keep `up_vote` and `down_vote` very simple. Add `private` method named `update_vote`:\n\n```ruby(app/controllers/votes_controller.rb)\n class VotesController < ApplicationController\n   before_action :require_sign_in\n\n-  def up_vote\n-    @post = Post.find(params[:post_id])\n-    @vote = @post.votes.where(user_id: current_user.id).first\n-\n-    if @vote\n-      @vote.update_attribute(:value, 1)\n-    else\n-      @vote = current_user.votes.create(value: 1, post: @post)\n-    end\n-\n-    redirect_to :back\n-  end\n+  def up_vote\n+    update_vote(1)\n+    redirect_to :back\n+  end\n-  def down_vote\n-    @post = Post.find(params[:post_id])\n-    @vote = @post.votes.where(user_id: current_user.id).first\n-\n-    if @vote\n-      @vote.update_attribute(:value, -1)\n-    else\n-      @vote = current_user.votes.create(value: -1, post: @post)\n-    end\n-\n-    redirect_to :back\n-  end\n+  def down_vote\n+    update_vote(-1)\n+    redirect_to :back\n+  end\n+\n+  private  \n+  def update_vote(new_value)\n+    @post = Post.find(params[:post_id])\n+    @vote = @post.votes.where(user_id: current_user.id).first\n+\n+    if @vote\n+      @vote.update_attribute(:value, new_value)\n+    else\n+      @vote = current_user.votes.create(value: new_value, post: @post)\n+    end\n+  end\n end\n```\n\nRun the spec again:\n\n```bash(Terminal)\n$ rspec spec/controllers/votes_controller_spec.rb\n```\n\nNote that all tests still pass, so we know our changes have changed the factor of the code, but not its behavior. This is one of the wonderful things about TDD and testing in general. We were able to confidently refactor code without worry of breaking the feature. Manually test up and down voting posts in the browser.\n\n## Toggling the Voter Partial\n\nWe're currently displaying the __voter__ partial to all users, but only allowing signed in users to actually vote. Let's update the partial so that only signed in users will be allowed to see it, and avoid potential confusion from users who are not signed in:\n\n```erb(app/views/votes/_voter.html.erb)\n+<% if current_user %>\n   <div class=\"vote-arrows pull-left\">\n   ...\n+<% end %>\n```\n\nSign out of Bloccit, voting links should no longer be displayed.\n\n## Ranking Posts\n\nNow that we have a way to create values for posts, we should leverage it to order posts more intelligently. We'll want to store the rank of a post to make them easier to order, so let's add an attribute for it in the `posts` table:\n\n```bash(Terminal)\n$ rails g migration AddRankToPosts rank:float\n$ rake db:migrate\n```\n\n> We created the `rank` attribute as a `float` (decimal) to have greater flexibility with ranking algorithms later.\n\nWe need to rank the posts after each vote is cast. This is a perfect opportunity to use an `after_save` [callback](http://guides.rubyonrails.org/active_record_callbacks.html). Add tests to `vote_spec.rb` to define the expectations for the callback:\n\n```ruby(spec/models/vote_spec.rb)\n ...\n+  describe \"update_post callback\" do\n+    it \"triggers update_post on save\" do\n # #26\n+      expect(vote).to receive(:update_post).at_least(:once)\n+      vote.save!\n+    end\n+\n+    it \"#update_post should call update_rank on post \" do\n # #27\n+      expect(post).to receive(:update_rank).at_least(:once)\n+      vote.save!\n+    end\n+  end\n end\n```\n\nAt __#26__, we expect `update_post_rank` to be called on `vote` after it's saved.\n\nAt __#27__, we expect that the `vote`'s `post` will receive a call to `update_rank`.\n\nRun `vote_spec.rb` and note the two failures:\n\n```bash(Terminal)\n$ rspec spec/models/vote_spec.rb\n```\n\nLet's add the callback to `Vote` and pass the tests:\n\n```ruby(app/models/vote.rb)\n class Vote < ActiveRecord::Base\n   belongs_to :user\n   belongs_to :post\n+  after_save :update_post\n\n   validates :value, inclusion: { in: [-1, 1], message: \"%{value} is not a valid vote.\" }, presence: true\n\n+  private\n+\n+  def update_post\n+    post.update_rank\n+  end\n end\n```\n\nRun the spec and note that there are still two failures:\n\n```bash(Terminal)\n$ rspec spec/models/vote_spec.rb\n```\n\nThe `after_save` method will run `update_post` every time a `vote` is saved. The `update_post` method **wishfully** calls a method named `update_rank` on a vote's `post` object. We haven't created `update_rank` in `Post` yet, so open `post_spec.rb` and add the tests for it:\n\n```ruby(spec/models/post_spec.rb)\n ...\n     describe \"#points\" do\n       it \"returns the sum of all down and up votes\" do\n         expect( post.points ).to eq(1) # 3 - 2\n       end\n     end\n\n+    describe \"#update_rank\" do\n # #28\n+      it \"calculates the correct rank\" do\n+        post.update_rank\n+        expect(post.rank).to eq (post.points + (post.created_at - Time.new(1970,1,1)) / 1.day.seconds)\n+      end\n+\n+      it \"updates the rank when an up vote is created\" do\n+        old_rank = post.rank\n+        post.votes.create!(value: 1)\n+        expect(post.rank).to eq (old_rank + 1)\n+      end\n+\n+      it \"updates the rank when a down vote is created\" do\n+        old_rank = post.rank\n+        post.votes.create!(value: -1)\n+        expect(post.rank).to eq (old_rank - 1)\n+      end\n+    end\n   end\n end\n```\nAt __#28__ we expect that a post's rank will be determined by the following calculation:\n\n* Determine the age of the post by subtracting a standard time from its `created_at` time. A standard time in this context is known as an [epoch](http://dictionary.reference.com/browse/epoch). This makes newer posts start with a higher ranking, which decays over time;\n\n> The epoch we chose is slightly arbitrary, though it's commonly used in time-based ranking algorithms. January 1, 1970 is significant because it's [Unix Time Zero](http://en.wikipedia.org/wiki/Unix_time). Reddit, for example, uses an epoch of January 1, 2005 for their [ranking algorithm](https://github.com/reddit/reddit/blob/master/r2/r2/lib/db/_sorts.pyx#L55). Check out [this link](http://www.wolframalpha.com/input/?i=january+1st+1970+%2B+1134028003+seconds) for an explanation of the use of 1134028003.\n\n* Divide the distance in seconds since the epoch by the number of seconds in a day. This gives us the age in days;\n\n* Add the points (i.e. sum of the votes) to the age. This means that the passing of one day will be equivalent to one down vote;\n\n> Using a time-decay algorithm like this will keep our post ranks fresh. If we didn't use time-decay, a highly ranked but out-of-date post could remain at the top of list for years. Think about how annoying it would be to see \"MAN WALKS ON THE MOON\" at the top of Bloccit, 46 years after it happened.\n\n<center>\n  ![we_landed_on_the_moon](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-voting/we_landed_on_the_moon.gif)\n</center>\n\nRun `post_spec.rb` and notice that we have six failing tests, because caused by the missing `update_rank` method. We have six failing tests instead of just three because whenever we create a vote, we call the `update_rank` method. Let's implement `update_rank` and pass the failing tests in `vote_spec.rb` and `post_spec.rb`:\n\n```ruby(app/models/post.rb)\n   ...\n+  def update_rank\n+    age_in_days = (created_at - Time.new(1970,1,1)) / 1.day.seconds\n+    new_rank = points + age_in_days\n+    update_attribute(:rank, new_rank)\n+  end\n end\n```\n\nRun both specs, and all tests should pass:\n\n```bash(Terminal)\n$ rspec spec/models/vote_spec.rb\n$ rspec spec/models/post_spec.rb\n```\n\nNow that we have a `rank` that's determined by an algorithm, we'll employ it in the `default_scope`, so that posts are ordered by rank by default. Since we want the largest rank numbers displayed first, we'll use descending (`DESC`) order. Update the current `default_scope` declaration with `'rank DESC'`:\n\n```ruby(app/models/post.rb)\n class Post < ActiveRecord::Base\n ...\n-  default_scope { order('created_at DESC') }\n+  default_scope { order('rank DESC') }\n ...\n```\n\nExisting posts won't have their rank updated until they're voted on. Reseed the database to set the rank for all posts using `rake db:reset`.\n\nThe topics __show__ view will now display posts by their rank. Visit the view, create a couple of new posts, and observe what happens when you vote them up or down.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.\n\nDeploy to Heroku and migrate your production database:\n\n```bash(Terminal)\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [`belongs_to` Association`](http://guides.rubyonrails.org/association_basics.html#the-belongs-to-association) | The `belongs_to` association establishes a one-to-one connection from one model to another. Each instance of the declaring model `belongs_to` an instance of the parent model. |\n| [`has_many` Association`](http://guides.rubyonrails.org/association_basics.html#the-has-many-association) | A `has_many` association establishes a one-to-many connection from one model to many others. Each instance of the declaring model has zero or more instances of the child model. |\n| [POST request](http://en.wikipedia.org/wiki/POST_%28HTTP%29) | A POST request is designed to request that a web server accept the data enclosed in the request message's body for storage. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nIt's safe to assume that if a user submits a `post`, they'll want to vote it up. Use TDD to complete this assignment.\n\n  1. Implement an `after_create` method for `Post`. This method will create a new vote for the post on which it's called, associated with both the post and the user who created it.\n  2. Name the `after_create` method `create_vote` and make it private.\n  3. In `create_vote`, use `user.votes.create`, and set the `post` association to equal `self`, and the `value` to equal `1`.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/krvxqphdnv?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Voting Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>30, "checkpoint_type"=>"normal", "position"=>30, "points"=>1, "ref"=>"23c9ebca-6488-4c3c-a1fc-ec828e2eb1b8|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2126", "assessment"=>nil}, {"id"=>2127, "name"=>"Rails: Favorites", "summary"=>"Favorites: following posts and receiving email updates", "body"=>"<!-- { ids:[2127], name:'Rails: Favorites', summary:'Favorites: following posts and receiving email updates' } -->\n\n<center>\n  ![pooh-and-piglet](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-favoriting/pooh-and-piglet.jpg)\n</center>\n\n> “What day is it?”</br>\n> “It's today,” squeaked Piglet.</br>\n> “My favorite day,” said Pooh.\n\n## Overview and Purpose\n\nThis checkpoint teaches you the fundamentals of callbacks and how to add email functionality to your application.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Explain how to add email sending functionality to your application using `ActionMailer`.\n- Explain what a callback is.\n\n## Favoriting Posts\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/2cb3siuycs\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nMost social web apps allow users to opt-in for notifications. We'll build a favoriting feature to allow users to flag posts to notify them when a post receives a new comment.\n\nLet's think about the functionality we'll need to build:\n\n* A model to track which posts a user has favorited;\n* A __Favorite__ button on the posts __show__ view to allow users to flag a post as a favorite;\n* A notification feature which emails users when one of their favorited posts receives a new comment.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Implementing the Favorite Model\n\nWe need a new model to track which posts a user has favorited. We'll associate this model, `Favorite`, with the user who flagged the post as a favorite, as well as with the post flagged as a favorite. Let's generate `Favorite`:\n\n```bash(Terminal)\n$ rails generate model favorite user:references:index post:references:index\n```\n\nMigrate the database to create the favorites table:\n\n```bash(Terminal)\n$ rake db:migrate\n```\n\nLet's update `user_spec.rb`, `post_spec.rb`, and `favorite_spec.rb` to test the new associations:\n\n```ruby(spec/models/user_spec.rb)\n ...\n   it { is_expected.to have_many(:votes) }\n+  it { is_expected.to have_many(:favorites) }\n ...\n```\n\n```ruby(spec/models/post_spec.rb)\n ...\n   it { is_expected.to have_many(:votes) }\n+  it { is_expected.to have_many(:favorites) }\n ...\n```\n\n```ruby(spec/models/favorite_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Favorite, type: :model do\n-  pending \"add some examples to (or delete) \#{__FILE__}\"\n+  let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n+  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n+  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n+  let(:favorite) { Favorite.create!(post: post, user: user) }\n+\n+  it { is_expected.to belong_to(:post) }\n+  it { is_expected.to belong_to(:user) }\n end\n```\n\nRun the specs, and note each new failure in `user_spec.rb` and `post_spec.rb`:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n$ rspec spec/models/post_spec.rb\n$ rspec spec/models/favorite_spec.rb\n```\n\n`favorite_spec.rb` didn't fail because the `belongs_to` associations in `Favorite` were already created by the migration.\n\nAssociate posts with favorites in the `User` and `Post` classes to pass the new tests:\n\n```ruby(app/models/user.rb)\n ...\n   has_many :votes, dependent: :destroy\n+  has_many :favorites, dependent: :destroy\n ...\n```\n\n```ruby(app/models/post.rb)\n ...\n   has_many :votes, dependent: :destroy\n+  has_many :favorites, dependent: :destroy\n ...\n```\n\nRun the specs again, and all tests should pass:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n$ rspec spec/models/post_spec.rb\n```\n\nWith favorites associated with users and posts, we can use this functionality to alert users when their favorite posts receive new comments.\n\n## Viewing User-Specific Favorites\n\nUsers will undoubtedly want an easy way to see if they have favorited a post. Let's create a `favorite_for(post)` method that returns the favorited status for a given `post`. This sort of logic belongs in the model, not the view or controller. Let's TDD this method:\n\n```ruby(spec/models/user_spec.rb)\n require 'rails_helper'\n ...\n+  describe \"#favorite_for(post)\" do\n+    before do\n+      topic = Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph)\n+      @post = topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user)\n+    end\n+\n+    it \"returns `nil` if the user has not favorited the post\" do\n # #1\n+      expect(user.favorite_for(@post)).to be_nil\n+    end\n+\n+    it \"returns the appropriate favorite if it exists\" do\n # #2\n+      favorite = user.favorites.where(post: @post).create\n # #3\n+      expect(user.favorite_for(@post)).to eq(favorite)\n+    end\n+  end\n end\n```\n\nAt __#1__, we expect that `favorite_for` will return `nil` if the user has not favorited `@post`.\n\nAt __#2__, we create a favorite for `user` and `@post`.\n\nAt __#3__, we expect that `favorite_for` will return the favorite we created in the line before.\n\nRun the spec:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n```\n\nThe two new tests will fail because we haven't implemented the `favorite_for(post)` method yet. Let's add it to `User`:\n\n```ruby(app/models/user.rb)\n ...\n+  def favorite_for(post)\n+    favorites.where(post_id: post.id).first\n+  end\n end\n```\n\nThis method takes a `post` object and uses `where` to retrieve the user's favorites with a `post_id` that matches `post.id`. If the user has favorited `post` it will return an array of one item. If they haven't favorited `post` it will return an empty array. Calling `first` on the array will return either the favorite or `nil` depending on whether they favorited the post.\n\nRun `user_spec.rb` again to confirm that the two tests pass:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n```\n\n## Modifying Views\n\nThe UI implementation for favorites will be simple. We want to display a link on the posts __show__ view so that the user can flag that post as a favorite. We'll also want to display a link for users to unfavorite a post.\n\nBefore we add the link to the view, let's create a controller for favorites:\n\n```bash(Terminal)\n$ rails generate controller Favorites\n```\n\n> We didn't create any views because this controller won't have any normal CRUD views. We'll define `create` and `destroy` actions. Those actions aren't associated with `GET` requests, and will have no views.\n\nAdd the required routes for `create` and `destroy` to `routes.rb`:\n\n```ruby(config/routes.rb)\n   resources :posts, only: [] do\n     resources :comments, only: [:create, :destroy]\n+    resources :favorites, only: [:create, :destroy]\n```\n\nWe have a method for detecting if a user has favorited a post, `FavoritesController`, and the required routes. With these pieces in place, we'll build the links for favoriting. If you guessed that we'll create another partial for this, you're correct.\n\nCreate a `_favorite.html.erb` partial in the `app/views/favorites/` directory:\n\n```bash(Terminal)\n$ touch app/views/favorites/_favorite.html.erb\n```\n\nOpen the partial and add the following code:\n\n```erb(app/views/favorites/_favorite.html.erb)\n // #4\n+<% if favorite = current_user.favorite_for(post) %>\n // #5\n+  <%= link_to [post, favorite], class: 'btn btn-danger', method: :delete do %>\n+    <i class=\"glyphicon glyphicon-star-empty\"> </i>&nbsp; Unfavorite\n+  <% end %>\n+<% else %>\n // #6\n+  <%= link_to [post, Favorite.new], class: 'btn btn-primary', method: :post do %>\n+    <i class=\"glyphicon glyphicon-star\"> </i>&nbsp; Favorite\n+  <% end %>\n+<% end %>\n```\n\nAt __#4__, we use the `favorite_for` method we created in `User`. We collect the `favorite` it returns to use later. This nifty syntax, which relies on the fact that most objects are \"truthy\", while `nil` is not, allows us to both test a condition and get a return value in one line.\n\nAt __#5__, if there is a favorite for the current user and the post, we display a link to unfavorite the post. We also take advantage of the fact that `link_to` can take a block argument of HTML, allowing us to give our link an icon and label.\n\nAt __#6__, if there isn't a favorite for the current user, we display a link to create a new favorite.\n\nRender this partial at the bottom of the posts __show__ view for signed-in users:\n\n```erb(app/views/posts/show.html.erb)\n...\n     <h3>\n       <%= pluralize(@post.points, 'point') %>\n       <div>\n         <small>\n           <%= pluralize(@post.up_votes, 'up vote') %>,\n           <%= pluralize(@post.down_votes, 'down vote') %>\n         </small>\n       </div>\n     </h3>\n+    <% if current_user %>\n+      <%= render partial: 'favorites/favorite', locals: { post: @post } %>\n+    <% end %>\n   </div>\n </div>\n```\n\nGo to `localhost:3000`, sign in, and ensure that the favorite link renders on a post __show__ view:\n\n<center>\n ![favorite-button](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-favoriting/favorite-button.png)\n</center>\n\nThe link looks nice, but if we try to favorite a post, we'll get an error:\n\n```no-highlight\nThe action 'create' could not be found for FavoritesController\n```\n\nAs the error makes clear, this is because there's no `create` method in the `FavoritesController`. We'll work on that next.\n\n## Implementing the Favorites Controller\n\n`FavoritesController` will need two actions to `create` and `destroy` favorites. Let's write with the tests for creating favorites:\n\n```ruby(spec/controllers/favorites_controller_spec.rb)\n require 'rails_helper'\n+include SessionsHelper\n\n RSpec.describe FavoritesController, type: :controller do\n+  let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n+  let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n+  let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n+\n+  context 'guest user' do\n+    describe 'POST create' do\n+      it 'redirects the user to the sign in view' do\n+        post :create, { post_id: my_post.id }\n # #7\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n+  end\n+\n+  context 'signed in user' do\n+    before do\n+      create_session(my_user)\n+    end\n+\n+    describe 'POST create' do\n # #8\n+      it 'redirects to the posts show view' do\n+        post :create, { post_id: my_post.id }\n+        expect(response).to redirect_to([my_topic, my_post])\n+      end\n+\n+      it 'creates a favorite for the current user and specified post' do\n # #9\n+        expect(my_user.favorites.find_by_post_id(my_post.id)).to be_nil\n+\n+        post :create, { post_id: my_post.id }\n+\n # #10\n+        expect(my_user.favorites.find_by_post_id(my_post.id)).not_to be_nil\n+      end\n+    end\n+  end\n end\n```\n\nAt __#7__, we test that we're redirecting guests if they attempt to favorite a post.\n\nAt __#8__, we expect that after a user favorites a post, we redirect them back to the post's __show__ view. Notice that we can put an `expect` anywhere inside the `it` block. We've been placing them at the end of each `it` block, but that isn't the only place we can use them.\n\nAt __#9__, we expect that no favorites exist for the user and post. Notice we can put `expect` statements anywhere within an `it` block.\n\nAt __#10__, we expect that after a user has favorited a post, they will have a favorite associated with that post.\n\nRun the spec and note the three failures:\n\n```bash(Terminal)\n$ rspec spec/controllers/favorites_controller_spec.rb\n```\n\nLet's implement the code in `FavoritesController` to pass these tests:\n\n```ruby(app/controllers/favorites_controller.rb)\n class FavoritesController < ApplicationController\n # #11\n+  before_action :require_sign_in\n+\n+  def create\n # #12\n+    post = Post.find(params[:post_id])\n+    favorite = current_user.favorites.build(post: post)\n+\n+    if favorite.save\n+      flash[:notice] = \"Post favorited.\"\n+    else\n+      flash[:alert] = \"Favoriting failed.\"\n+    end\n+\n # #13\n+    redirect_to [post.topic, post]\n+  end\n end\n```\n\nAt __#11__, we redirect guest users to sign in before allowing them to favorite a post.\n\nAt __#12__, we find the post we want to favorite using the `post_id` in `params`. We then create a favorite for the `current_user`, passing in the `post` to establish associations for the user, post, and favorite.\n\nAt __#13__, we redirect the user to the post's __show__ view.\n\nRun the spec again and see that the three tests pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/favorites_controller_spec.rb\n```\n\nGo to `localhost:3000` and favorite a post in the browser from the posts __show__ page:\n\n<center>\n  ![post-favorited](http://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-favoriting/post-favorited.png)\n</center>\n\nBecause each favorite is an instance, to unfavorite a post we need to delete the appropriate favorite instance from the database. Let's add the tests for `destroy`:\n\n```ruby(spec/controllers/favorites_controller_spec.rb)\n require 'rails_helper'\n include SessionsHelper\n\n RSpec.describe FavoritesController, type: :controller do\n   let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n   let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n   let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n\n   context 'guest user' do\n     describe 'POST create' do\n       it 'redirects the user to the sign in view' do\n         post :create, { post_id: my_post.id }\n         expect(response).to redirect_to(new_session_path)\n       end\n     end\n+\n # #14\n+    describe 'DELETE destroy' do\n+      it 'redirects the user to the sign in view' do\n+        favorite = my_user.favorites.where(post: my_post).create\n+        delete :destroy, { post_id: my_post.id, id: favorite.id }\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n   end\n\n   context 'signed in user' do\n     before do\n       create_session(my_user)\n     end\n\n     describe 'POST create' do\n       it 'redirects to the posts show view' do\n         post :create, { post_id: my_post.id }\n         expect(response).to redirect_to([my_topic, my_post])\n       end\n\n       it 'creates a favorite for the current user and specified post' do\n         expect(my_user.favorites.find_by_post_id(my_post.id)).to be_nil\n\n         post :create, { post_id: my_post.id }\n\n         expect(my_user.favorites.find_by_post_id(my_post.id)).not_to be_nil\n       end\n     end\n+\n # #15\n+    describe 'DELETE destroy' do\n+      it 'redirects to the posts show view' do\n+        favorite = my_user.favorites.where(post: my_post).create\n+        delete :destroy, { post_id: my_post.id, id: favorite.id }\n+        expect(response).to redirect_to([my_topic, my_post])\n+      end\n+\n+      it 'destroys the favorite for the current user and post' do\n+        favorite = my_user.favorites.where(post: my_post).create\n # #16\n+        expect( my_user.favorites.find_by_post_id(my_post.id) ).not_to be_nil\n+\n+        delete :destroy, { post_id: my_post.id, id: favorite.id }\n+\n # #17\n+        expect( my_user.favorites.find_by_post_id(my_post.id) ).to be_nil\n+      end\n+    end\n   end\n end\n```\n\nAt __#14__, we test that we redirect guest users to sign in before allowing them to unfavorite a post.\n\nAt __#15__, we test that when a user unfavorites a post, we redirect them to the post's __show__ view.\n\nAt __#16__, we expect that the user and post has an associated favorite that we can delete.\n\nAt __#17__, we expect that the associated favorite is `nil`.\n\nRun the spec and note the three new failures:\n\n```bash(Terminal)\n$ rspec spec/controllers/favorites_controller_spec.rb\n```\n\nLet's implement the `destroy` method in `FavoritesController` and pass the tests:\n\n```ruby(app/controllers/favorites_controller.rb)\n ...\n+  def destroy\n+    post = Post.find(params[:post_id])\n+    favorite = current_user.favorites.find(params[:id])\n+\n+    if favorite.destroy\n+      flash[:notice] = \"Post unfavorited.\"\n+    else\n+      flash[:alert] = \"Unfavoriting failed.\"\n+    end\n+      redirect_to [post.topic, post]\n+  end\n end\n```\n\n> This is bread-and-butter Rails scaffolding, and it should start to feel routine. Still, you should think about the code, and explain it (perhaps to yourself) in your own words.\n\nRun `favorites_controller_spec.rb` again and confirm that all three tests are passing:\n\n```bash(Terminal)\n$ rspec spec/controllers/favorites_controller_spec.rb\n```\n\nAs always, test the behavior manually in localhost, and ensure that you can favorite and unfavorite a post.\n\n## Sending Email Notifications\n\nWhen a user comments on a favorited post, we want to send the user who favorited the post an email update informing them of the new comment. Let's start by configuring Bloccit to send emails. We'll use [SendGrid](https://sendgrid.com/) to send emails. Since we'll be using Sendgrid in our Development and Production environments, we'll create an account via a Heroku add-on. There are a five steps to this process:\n\n1. Sign in to [Heroku](http://heroku.com) and add your credit card info to your account. **Your card will not be charged for free plans** but this validation prevents spammers from abusing the free Sendgrid plan.\n\n2. Re-establish your credentials by signing out of Heroku on the command line:\n\n  ```bash(Terminal)\n  $ heroku auth:logout\n  ```\n\n3. Install the SendGrid add-on from the command line:\n\n  ```bash(Terminal)\n  $ heroku addons:create sendgrid:starter\n\n  Adding sendgrid:starter on bloccit... done, v18 (free)\n  Use `heroku addons:docs sendgrid:starter` to view documentation.\n  ```\n\n4. You will be asked for your Heroku user name and password - enter both on your command line.\n\n5. Verify that you installed SendGrid by typing the following on the command line:\n\n  ```bash(Terminal)\n  $ heroku addons\n  ```\n\n  If you see `sendgrid:starter`, you've installed SendGrid.\n\nWe'll need the username and password for this account, so type the following on the command line to get them from Heroku:\n\n```bash(Terminal)\n$ heroku config:get SENDGRID_USERNAME\n$ heroku config:get SENDGRID_PASSWORD\n```\n\n> When you installed Sendgrid in Heroku, the `SENDGRID_USERNAME` and `SENDGRID_PASSWORD` were automatically created for you.\n\nNext add the following to your `config/environments/development.rb`:\n\n```ruby(config/environments/development.rb)\n   ...\n   # config.action_view.raise_on_missing_translations = true\n+  config.action_mailer.default_url_options = { host: 'localhost' }\n end\n```\n\nAdd the same line to `config/environments/test.rb`:\n\n```ruby(config/environments/test.rb)\n ...\n\n   # Raises error for missing translations\n   # config.action_view.raise_on_missing_translations = true\n+  config.action_mailer.default_url_options = { host: 'localhost' }\n```\n\nOpen `config/environments/production.rb` and add the following lines to the bottom of the file: (Replace \"bloccit\" with your app's name)\n\n```ruby(config/environments/production.rb)\n   config.active_record.dump_schema_after_migration = false\n+  config.action_mailer.default_url_options = { host: 'bloccit.herokuapp.com' }\n end\n```\n\nThis code makes it possible to [generate URLs](http://api.rubyonrails.org/classes/ActionMailer/Base.html#class-ActionMailer::Base-label-Generating+URLs) in emails.\n\nCreate a file in `config/initializers` named `setup_mail.rb`:\n\n```bash(Terminal)\n$ touch config/initializers/setup_mail.rb\n```\n\n... and add the following code:\n\n```ruby(config/initializers/setup_mail.rb)\n+ if Rails.env.development? || Rails.env.production?\n+   ActionMailer::Base.delivery_method = :smtp\n+   ActionMailer::Base.smtp_settings = {\n+     address:        'smtp.sendgrid.net',\n+     port:           '2525',\n+     authentication: :plain,\n+     user_name:      ENV['SENDGRID_USERNAME'],\n+     password:       ENV['SENDGRID_PASSWORD'],\n+     domain:         'heroku.com',\n+     enable_starttls_auto: true\n+   }\n+ end\n```\n\nThe code in `config/initialize` runs when our app starts. We use this when want to set config options or application settings. In this case we need to configure some special settings to send emails.\n\nNotice that we didn't explicitly state the SendGrid username and password. We want to mask these for security concerns, so we assign them to environment variables. Environment variables provide a reference point to information, without revealing the underlying data values.\n\nSensitive data, like API keys and passwords, **should not be stored in GitHub**. Complete our resource on how to [use the Figaro gem to set up environment variables](https://www.bloc.io/resources/environment-variables-with-figaro). Figaro allows you to safely store and access sensitive credentials using variables. Install the gem and add your SendGrid username and password to `application.yml`.\n\nWe're now able to send email notifications, so we'll configure the emails next.\n\n## Implementing the Favorite Mailer\n\nTo send an email, we'll need to create a mailer using [ActionMailer](http://guides.rubyonrails.org/action_mailer_basics.html). Let's create a mailer and format our outgoing email.\n\nTo create an `ActionMailer` class, we use a Rails generator and provide the name of the mailer:\n\n```bash(Terminal)\n$ rails generate mailer FavoriteMailer\n      create  app/mailers/favorite_mailer.rb\n      invoke  erb\n      create    app/views/favorite_mailer\n```\n\nOpen `FavoriteMailer` and update the `from` address to be your **personal email address**:\n\n```ruby(app/mailers/favorite_mailer.rb)\nclass FavoriteMailer < ApplicationMailer\n  default from: \"youremail@email.com\"\nend\n```\n\nThis sets the default `from` for all emails sent from `FavoriteMailer`.\n\nAdd a `new_comment` method in this class. We'll call this method to send an email to users, notifying them that someone has left a comment on one of their favorited posts:\n\n```ruby(app/mailers/favorite_mailer.rb)\n class FavoriteMailer < ApplicationMailer\n   default from: \"youremail.com\"\n\n+  def new_comment(user, post, comment)\n+\n # #18\n+    headers[\"Message-ID\"] = \"<comments/\#{comment.id}@your-app-name.example>\"\n+    headers[\"In-Reply-To\"] = \"<post/\#{post.id}@your-app-name.example>\"\n+    headers[\"References\"] = \"<post/\#{post.id}@your-app-name.example>\"\n+\n+    @user = user\n+    @post = post\n+    @comment = comment\n+\n # #19\n+    mail(to: user.email, subject: \"New comment on \#{post.title}\")\n+  end\n end\n```\n\nAt __#18__, we set three different `headers` to enable [conversation threading](https://en.wikipedia.org/wiki/Conversation_threading) in different email clients.\n\nAt __#19__, the [`mail`](http://guides.rubyonrails.org/action_mailer_basics.html#edit-the-mailer) method takes a hash of mail-relevant information - the subject the `to` address, the `from` (we're using the default), and any `cc` or `bcc` information - and prepares the email to be sent.\n\n> We suggest adding your mentor's email as a cc to the list of recipients so they can view the emails as well.\n\n`ActionMailer` follows a similar pattern as Rails controllers; you can define instance variables that will be available to your \"view\" - which is the content sent in the email in this context.\n\nCreate `new_comment.html.erb` inside `app/views/favorite_mailer/`:\n\n```bash(Terminal)\n$ touch app/views/favorite_mailer/new_comment.html.erb\n```\n\nThis view will _not_ use the `application.html.erb` layout we defined for the other layouts in our app. In fact, we can't even reference external CSS in mailer views, as most email clients won't use it. We'll simply create a basic HTML layout:\n\n```erb(app/views/favorite_mailer/new_comment.html.erb)\n+<!DOCTYPE html>\n+<html>\n+  <head>\n+    <meta content=\"text/html; charset=UTF-8\" http-equiv=\"Content-Type\" />\n+  </head>\n+  <body>\n+    <h1>New comment to \"<%= @post.title %>\"</h1>\n+    <small>\n+      By: <%= @comment.user.name %>\n+    </small>\n+    <p>\n+      <%= @comment.body %>\n+    </p>\n+    <p>\n # #20\n+      <%= link_to \"View Comment on site\", topic_post_url(@post.topic, @post, anchor: \"comment-\#{@comment.id}\") %>\n+    </p>\n+  </body>\n+</html>\n```\n\nAt __#20__, we use `topic_post_url`. This is _very_ important. When we use `_path` we get a \"relative URL\", such as \"topics/3\". This works within the context of the website because the browser already knows the base URL. But when a user sees this email, they won't be in the application and thus won't have the base URL. Therefore, we have to define it. That is what `_url` does. It generates an \"absolute URL\", such as \"http://myapp.com/topics/3\".\n\nAt __#20__, we also use the `anchor:` option of the `link_to` method. This adds custom parameters to our URL. In this case, because we used the keyword `anchor` the URL will look like: \"http://myapp.com/topics/3/posts/5#comment-21\". This allows us to link the user directly to the comment. Jumping to an anchor is something every browser has supported for a long time. If you provide an `id` tag after the URL, it will jump to that ID on the page.\n\nTo make this anchor redirect where we want it, let's add a unique `id` to the `_comment.html.erb` partial of each `comment` using `content_tag`:\n\n```erb(app/views/comments/_comment.html.erb)\n-<div class=\"media\">\n // #21\n+<%= content_tag :div, class: 'media', id: \"comment-\#{comment.id}\" do %>\n   <div class=\"media\">\n     <div class=\"media-body\">\n       <small>\n         <%= comment.user.name %> commented <%= time_ago_in_words(comment.created_at) %> ago\n         <% if user_is_authorized_for_comment?(comment) %>\n           | <%= link_to \"Delete\", [@post, comment], method: :delete %>\n         <% end %>\n       </small>\n       <p><%= comment.body %></p>\n     </div>\n   </div>\n-</div>\n+<% end %>\n```\nAt __#21__, we use `content_tag` to generate HTML, because the alternative, interpolating a comment's ID inside an HTML tag, is difficult to read: `<div class=\"media\" id=\"comment-<%= comment.id %>\">`\n\nIf a user's email client won't render HTML, we want to present them with plain text. We'll create `new_comment.text.erb` in `app/views/favorite_mailer` with the following code:\n\n```erb(app/views/favorite_mailer/new_comment.text.erb)\n+New comment to \"<%= @post.title %>\"\n+<%= \"=\" * (@post.title.length + 12) %>\n+\n+By: <%= @comment.user.name %>\n+\n+<%= @comment.body %>\n+\n+Visit online at: <%= topic_post_url(@post.topic, @post, anchor: \"comment-\#{@comment.id}\") %>\n```\n\nWe can test the mailer in the Rails console; retrieve a `user`, `post`, and `comment`, and pass them to the `FavoriteMailer`. We'll then call the `ActionMailer` class method `deliver_now` to send the email:\n\n```ruby\n>> u = User.last # make sure has is a valid email you can check\n>> p = Post.first\n>> c = p.comments.last\n>> FavoriteMailer.new_comment(u, p, c).deliver_now\n```\n\nAt this point you should receive an email in your inbox within a couple of minutes. If not, speak with your mentor in order to figure out what's wrong, and try to troubleshoot it yourself.\n\n> Adding `config.raise_delivery_errors = true` to your `config/environments/development.rb` file will tell `ActionMailer` to raise informative errors if it fails. This can be very helpful for debugging.\n\n## Adding a Callback\n\nWhen we want to do something _every time_ something else happens, it's a good place to use a model callback. Because we want to send an email every time a user comments on a favorited post, let's add a callback to `Comment`. Before we do, let's define our expectations with our specs:\n\n```ruby(spec/models/comment_spec.rb)\n ...\n+  describe \"after_create\" do\n # #22\n+    before do\n+      @another_comment = Comment.new(body: 'Comment Body', post: post, user: user)\n+    end\n+\n # #23\n+    it \"sends an email to users who have favorited the post\" do\n+      favorite = user.favorites.create(post: post)\n+      expect(FavoriteMailer).to receive(:new_comment).with(user, post, @another_comment).and_return(double(deliver_now: true))\n+\n+      @another_comment.save!\n+    end\n+\n # #24\n+    it \"does not send emails to users who haven't favorited the post\" do\n+      expect(FavoriteMailer).not_to receive(:new_comment)\n+\n+      @another_comment.save!\n+    end\n+  end\n end\n```\n\nAt __#22__, we initialize (but don't save) a new comment for `post`.\n\nAt __#23__, we favorite `post` then expect `FavoriteMailer` will receive a call to `new_comment`. We then save `@another_comment` to trigger the after create callback.\n\nAt __#24__, test that `FavoriteMailer` does not receive a call to `new_comment` when `post` isn't favorited.\n\nRun the spec and note the two failures:\n\n```bash(Terminal)\n$ rspec spec/models/comment_spec.rb\n```\n\nPass the tests by adding the callback to `Comment`:\n\n```ruby(app/models/comment.rb)\n class Comment < ActiveRecord::Base\n   ...\n+  after_create :send_favorite_emails\n+\n+  private\n+\n+  def send_favorite_emails\n+    post.favorites.each do |favorite|\n+      FavoriteMailer.new_comment(favorite.user, post, self).deliver_now\n+    end\n+  end\n end\n```\n\nWhen we create a comment we call `send_favorite_emails`. This finds the `favorites` associated with its comment's post, and loops over them. For each `favorite`, it will create and send a new email.\n\nOur tests will now pass and we will send users an email whenever a post they've favorited receives a new comment.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.\n\nDeploy to Heroku and migrate your production database:\n\n```bash(Terminal)\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [ActionMailer](http://guides.rubyonrails.org/action_mailer_basics.html) | `ActionMailer` allows you to send emails from your application using mailer classes and views. Mailers work similarly to controllers. They inherit from `ApplicationController`, are placed in `app/mailers`, and they have associated views in `app/views`.\n| [ActiveRecord Callback](http://guides.rubyonrails.org/active_record_callbacks.html) | Callbacks are methods that get called at specific moments in an object's life cycle. They are code that runs whenever an `ActiveRecord` object is created, saved, updated, deleted, validated, or loaded from the database. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nIt's reasonable to assume that users will want to favorite and follow the posts they create. Let's write functionality that will have users automatically favorite their own posts upon creation:\n\n1. Add an after create callback to `Post` that creates a favorite for the post and user.\n\n2. Add a `new_post` method to `FavoriteMailer` to notify the post creator that they've favorited their post and will receive updates when it's commented on.\n\n3. Create `new_post.html.erb` and `new_post.text.erb` views in `views/favorite_mailer` with appropriate messages for the post's creator.\n\n4. Update the after create callback in `Post` to send the `new_post` email to the post's creator.\n\n5. Using the Rails console, test that users are sent an email after creating a new post.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/dysp96e9pm?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Favoriting Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>31, "checkpoint_type"=>"normal", "position"=>31, "points"=>1, "ref"=>"9574093f-fead-47a6-ba6d-8c6f73b375f8|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2127", "assessment"=>nil}, {"id"=>2128, "name"=>"Rails: Public Profiles", "summary"=>"Public Profiles: sharing user profiles and contributions", "body"=>"<!-- { ids:[2128], name:'Rails: Public Profiles', summary:'Public Profiles: sharing user profiles and contributions' } -->\n\n<center>\n  ![Yoda](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-public-profiles/banner.jpg)\n</center>\n\n> “Do... or do not. There is no try.”\n>\n> — Yoda\n\n## Overview and Purpose\n\nThis checkpoint explains how to incorporate the factory pattern, scoping, and Gravatar integration into your application.\n\n## Objectives\n\nAfter this checkpoint, you should be able to:\n\n- Discuss uses of the factory pattern.\n- Explain why you would want to add scoping to your application.\n- Explain how to incorporate Gravatar into your app.\n\n## Public Profiles\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/482g56n25x\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nAs the Bloccit community grows , users will become proud of their posts and comments. Much like other community applications, we'll provide our users with a way to publicly share their profile and contributions, using a profile page. The profile page will display some basic information about the user, their avatar, and a list of their posts and comments.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Updating the User Controller\n\nWe have a `User` model that can manage user profile information, but we don't have the appropriate actions, routes, and views to display a profile page. We'll TDD these missing components, and we'll start with the controller:\n\n```ruby(spec/controllers/users_controller_spec.rb)\n...\n\n     it \"logs the user in after sign up\" do\n       post :create, user: new_user_attributes\n       expect(session[:user_id]).to eq assigns(:user).id\n     end\n   end\n+\n+  describe \"not signed in\" do\n # #1\n+    let(:factory_user) { create(:user) }\n+\n+    before do\n+      post :create, user: new_user_attributes\n+    end\n+\n # #2\n+    it \"returns http success\" do\n+      get :show, {id: factory_user.id}\n+      expect(response).to have_http_status(:success)\n+    end\n+\n+    it \"renders the #show view\" do\n+      get :show, {id: factory_user.id}\n+      expect(response).to render_template :show\n+    end\n+\n+    it \"assigns factory_user to @user\" do\n+      get :show, {id: factory_user.id}\n+      expect(assigns(:user)).to eq(factory_user)\n+    end\n+  end\n end\n```\n\nAt __#1__, we build a variable named `factory_user` using `create(:user)`. A [factory](https://en.wikipedia.org/wiki/Factory_%28object-oriented_programming%29) in programming is an object that creates other types of objects on demand. Our factory create `User` objects. Because we use `create` and not `build`, our objects is persisted to the database.\n\nAt __#2__ we write our standard tests for testing the **show** action.\n\nRun the spec and note the three new failures:\n\n```bash(Terminal)\n$ rspec spec/controllers/users_controller_spec.rb\n```\n\nTypically, we would write the missing functionality in the `UsersController` as the next step, but because we wishfully coded `create(:user)` - that method does not yet exist - we'll need to create it before we implement new code in `UsersController`.\n\n## Using Factories\n\nThe tests we wrote use [`FactoryGirl`](https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md) to build `User` objects. FactoryGirl is a canonical Ruby gem which allows us to build objects we can use for testing. Factories allow us to modify the behavior of a given object type in a single place. Let's write the factory for building users. First, add the gem to your gemfile:\n\n```ruby(Gemfile)\n...\n group :development, :test do\n   gem 'rspec-rails', '~> 3.0'\n   gem 'shoulda'\n+  gem 'factory_girl_rails', '~> 4.0'\n end\n...\n```\n\nInstall `FactoryGirl`:\n\n```bash(Terminal)\n$ bundle install\n```\n\nWe need to configure `FactoryGirl`. Open `rails_helper.rb` and add the following:\n\n```ruby(spec/rails_helper.rb\n require 'spec_helper'\n require 'rspec/rails'\n # Add additional requires below this line. Rails is not loaded until this point!\n+require 'factory_girl_rails'\n\n # Requires supporting ruby files with custom matchers and macros, etc, in\n # spec/support/ and its subdirectories. Files matching `spec/**/*_spec.rb` are\n\n ActiveRecord::Migration.maintain_test_schema!\n\n RSpec.configure do |config|\n+  config.include FactoryGirl::Syntax::Methods\n+\n   # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures\n   config.fixture_path = \"\#{::Rails.root}/spec/fixtures\"\n ...\n```\n\n> If you do not include `FactoryGirl::Syntax::Methods` in `rails_helper.rb`, then all FactoryGirl methods will need to be prefaced with `FactoryGirl::`.\n\nWith `FactoryGirl` installed and configured, we can create a user factory. Create a directory to store factories, and a file for the user factory:\n\n```bsah(Terminal)\n$ mkdir spec/factories\n$ touch spec/factories/users.rb\n```\n\nThe `FactoryGirl` documentation states that it's best to keep factories in `spec/factories`. Each factory should have a dedicated file named after the object type the factory will create. Let's build the user factory:\n\n```ruby(spec/factories/users.rb)\n+FactoryGirl.define do\n+  pw = RandomData.random_sentence\n # #3\n+  factory :user do\n+    name RandomData.random_name\n # #4\n+    sequence(:email){|n| \"user\#{n}@factory.com\" }\n+    password pw\n+    password_confirmation pw\n+    role :member\n+  end\n+end\n```\n\nAt __#3__, we declare the name of the factory `:user`.\n\nAt __#4__, each `User` that the factory builds will have a unique email address using `sequence`. Sequences can generate [unique values in a specific format, for example, e-mail addresses](https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md).\n\nThough we've addressed the wishfully coded `create(:user)` method by creating a user factory, we still haven't addressed our new tests. We'll do that next in `UsersController`.\n\n## Updating the User Controller\n\nWe have our specs written for `UserController` and the factory we need to build user objects. Let's add the `show` action to `users_controller.rb` to get our tests to pass:\n\n```ruby(app/controllers/users_controller.rb)\n...\n\n # #5\n+  def show\n+    @user = User.find(params[:id])\n+  end\n end\n```\n\nAt __#5__, we retrieve a user instance and set it to an instance variable.\n\nAdd a route for the `show` action:\n\n```ruby(config/routes.rb)\n...\n\n-  resources :users, only: [:new, :create]\n+  resources :users, only: [:new, :create, :show]\n\n...\n```\n\nValidate that the new users show route was created:\n\n```bash(Terminal)\n$ rake routes | grep users\n```\n\nRun the spec again:\n\n```bash(Terminal)\n$ rspec spec/controllers/users_controller_spec.rb\n```\n\nWe still see the same three errors. This is because the **show** view doesn't exist. Because we added the controller action and route manually, we'll also need to create the view file to get the specs to pass:\n\n```bash(Terminal)\n$ touch app/views/users/show.html.erb\n```\n\nRun the spec again and see that they pass.\n\n## Implementing Gravatars\n\nA user profile should be personalized, and an avatar will certainly help in that capacity. We'll use the [Gravatar](https://gravatar.com/) (i.e. \"globally recognized avatar\") service to allow our users to post an avatar image. Gravatar is a free service - sign up and create an account before moving on so you can personalize you profile.\n\n> Many modern applications, especially developer-friendly applications, use Gravatar to power their avatars. Gravatar was created by [Tom Preston-Werner](https://en.wikipedia.org/wiki/Tom_Preston-Werner), who also founded GitHub.\n\nLet's add tests to `user_spec.rb` to define the behavior we'll need in the `User` class:\n\n```ruby(spec/models/user_spec.rb)\n...\n\n-  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"password\") }\n+  let(:user) { create(:user) }\n\n...\n\n  describe \"attributes\" do\n     it \"should have name and email attributes\" do\n-      expect(user).to have_attributes(name: \"Bloccit User\", email: \"user@bloccit.com\")\n+      expect(user).to have_attributes(name: user.name, email: user.email)\n     end\n\n...\n\n   describe \"#favorite_for(post)\" do\n     before do\n       topic = Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph)\n       @post = topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user)\n     end\n\n     it \"returns `nil` if the user has not favorited the post\" do\n      expect(user.favorite_for(@post)).to be_nil\n     end\n\n     it \"returns the appropriate favorite if it exists\" do\n      favorite = user.favorites.where(post: @post).create\n       expect(user.favorite_for(@post)).to eq(favorite)\n    end\n   end\n+\n+  describe \".avatar_url\" do\n # #6\n+    let(:known_user) { create(:user, email: \"blochead@bloc.io\") }\n+\n+    it \"returns the proper Gravatar url for a known email entity\" do\n # #7\n+      expected_gravatar = \"http://gravatar.com/avatar/bb6d1172212c180cfbdb7039129d7b03.png?s=48\"\n # #8\n+      expect(known_user.avatar_url(48)).to eq(expected_gravatar)\n+    end\n+  end\n end\n```\n\n> We use `.` in `describe \".avatar_url\"` because it is a class method and that is the [RSpec convention](http://betterspecs.org/). RSpec conventions like this make it much easier to troubleshoot tests.\n\nAt __#6__, we build a user with `FactoryGirl`. We pass `email: \"blochead@bloc.io\"` to `build`, which overrides the email address that would be generated in the factory with \"blochead@bloc.io\". We are overriding the default email address with a known one so that we can test against a specific string that we know Gravatar will return for the account \"blochead@bloc.io\".\n\nAt __#7__, we set the expected string that Gravatar should return for \"blochead@bloc.io\". The `s=48` query paramter specifies that we want the returned image to be 48x48 pixels.\n\nAt __#8__, we expect `known_user.avatar_url` to return `http://gravatar.com/avatar/bb6d1172212c180cfbdb7039129d7b03.png?s=48`.\n\nRun the spec and note the new failure:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n```\n\nLet's add `avatar_url` to `User` and pass the failing test:\n\n```ruby(app/models/user.rb)\n   def favorite_for(post)\n     favorites.where(post_id: post.id).first\n   end\n+\n+  def avatar_url(size)\n+    gravatar_id = Digest::MD5::hexdigest(self.email).downcase\n+    \"http://gravatar.com/avatar/\#{gravatar_id}.png?s=\#{size}\"\n+  end\n end\n```\n\nRun the spec again and verify that the new test passes:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n```\n\n## Displaying Users\n\nThe Gravatar should be prominent, so we'll add it to the navigation area next to the user's name. We can do this by updating `app/views/layouts/application.html.erb`:\n\n```erb(app/views/layouts/application.html.erb)\n ...\n       <div class=\"pull-right user-info\">\n         <% if current_user %>\n-          <%= current_user.name %> - <%= link_to \"Sign Out\", session_path(current_user), method: :delete %>\n // #9\n+          <%= image_tag current_user.avatar_url(48), class: \"gravatar\" %>\n+          <div class=\"pull-right\">\n // #10\n+            <%= link_to current_user.name, user_path(current_user) %> <br/> <%= link_to \"Sign Out\", session_path(current_user), method: :delete %>\n+          </div>\n         <% else %>\n...\n```\n\nAt __#9__, we use `image_tag` and populate it with the result of `avatar_url`. We set the `class` to \"gravatar\" which we will use to style the avatar.\n\nAt __#10__, we move our pre-existing code into a new `<div class=\"pull-right\">` so that it floats to the right of the avatar.\n\nLet's create the `.gravatar` CSS class to style the avatar in `app/assets/stylesheets/users.scss`:\n\n```css(app/assets/stylesheets/users.scss)\n // Place all the styles related to the Users controller here.\n // They will automatically be included in application.css.\n // You can use Sass (SCSS) here: http://sass-lang.com/\n // #11\n+.gravatar {\n+  margin-bottom: 5px;\n+  margin-right: 5px;\n+}\n```\n\nAt __#11__, we create the `.gravatar` CSS class with simple margin adjustments.\n\nOpen [localhost](http://localhost:3000/), sign up to Bloccit with the following credentials:\n\n1. Name: **Canyon**\n2. Email: **canyon.the.malamute@gmail.com**\n3. Password: **password**\n4. Password Confirmation: **password**\n\nView the navigation bar. You show now see an avatar (an Alaskan Malamute) next to the signed-in user's name.\n\n> We opted to use a dog avatar because dogs are objectively more awesome than cats. **Objectively**.\n\n<center>\n![Navigation](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-public-profiles/navigation.png)\n</center>\n\nLet's build the users **show** view that we created earlier:\n\n```erb(app/views/users/show.html.erb)\n+<div class=\"row\">\n+  <div class=\"col-md-8\">\n+    <div class=\"media\">\n+      <br />\n // #12\n+      <% avatar_url = @user.avatar_url(128) %>\n+      <% if avatar_url %>\n+        <div class=\"media-left\">\n // #13\n+          <%= image_tag avatar_url, class: 'media-object' %>\n+        </div>\n+      <% end %>\n+      <div class=\"media-body\">\n+        <h2 class=\"media-heading\"><%= @user.name %></h2>\n+        <small>\n+          <%= pluralize(@user.posts.count, 'post') %>,\n+          <%= pluralize(@user.comments.count, 'comment') %>\n+        </small>\n+      </div>\n+    </div>\n+  </div>\n+</div>\n+\n // #14\n+<h2>Posts</h2>\n+<%= render @user.posts %>\n+\n+<h2>Comments</h2>\n+<%= render @user.comments %>\n```\n\nAt __#12__, we call `avatar_url` to fetch the current user's avatar.\n\nAt __#13__, we use Rails' `image_tag` method to create an `<img>`.\n\nAt __#14__, we display all of the user's posts and comments using partials.\n\nOpen localhost and click on your username to see the __show__ view. In the code above we refer to a partial to display posts which doesn't exist. Let's create it:\n\n```bash(Terminal)\n$ touch app/views/posts/_post.html.erb\n```\n\n... and add the following code:\n\n```erb(app/views/posts/_post.html.erb)\n+<div class=\"media\">\n+  <%= render partial: 'votes/voter', locals: { post: post } %>\n+  <div class=\"media-body\">\n+    <h4 class=\"media-heading\">\n+      <%= link_to post.title, topic_post_path(post.topic, post) %>\n+    </h4>\n+    <small>\n+      submitted <%= time_ago_in_words(post.created_at) %> ago by <%= post.user.name %> <br>\n+      <%= post.comments.count %> Comments\n+    </small>\n+  </div>\n+</div>\n```\n\nWe'll also need to modify the comment partial:\n\n```ruby(app/views/comments/_comment.html.erb)\n...\n     <small>\n       <%= comment.user.name %> commented <%= time_ago_in_words(comment.created_at) %> ago\n       <% if user_is_authorized_for_comment?(comment) %>\n-        | <%= link_to \"Delete\", [@post, comment], method: :delete %>\n+        | <%= link_to \"Delete\", [comment.post, comment], method: :delete %>\n       <% end %>\n...\n```\n\nGo back to [localhost](http://localhost:3000) and click on the hyperlinked \"Canyon\" in the top right. This should take you to the user profile page. We'll need to create posts and comments for Canyon if we wish them to appear in the **show** view which should look like the following:\n\n<center>\n![User Profile](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-public-profiles/user_profile.png)\n</center>\n\n## Scoping Posts\n\nOne important piece of functionality escaped our user flow and testing. Even if a user's profile is public, unauthenticated users should _not_ be able to see the posts of that user which are associated with private topics. To resolve this problem, we should change the nature of the `@posts` variable in users **show** based on whether the current user is authenticated. Let's create a `visible_to` scope on `Post` that returns all the posts whose topics are visible to the given user:\n\n```ruby(app/models/post.rb)\n   default_scope { order('rank DESC') }\n # #15\n+  scope :visible_to, -> (user) { user ? all : joins(:topic).where('topics.public' => true) }\n```\n\nAt __#15__, we use a lambda (`->`) to ensure that a user is present or signed in. If the user is present, we return `all` posts. If not, we use the `Active Record` [`joins`](http://guides.rubyonrails.org/active_record_querying.html#joining-tables) method to retrieve all posts which belong to a public topic.\n\n> This query uses a SQL 'inner join' to query a collection's relations in one query. Read through the [Rails Guide on Active Record](http://guides.rubyonrails.org/active_record_querying.html) to learn more useful querying methods.\n\nLet's add the new scope in the users **show** view:\n\n```ruby(app/controllers/users_controller.rb)\n   def show\n     @user = User.find(params[:id])\n+    @posts = @user.posts.visible_to(current_user)\n   end\n```\n\n## Refactoring Specs to Use Factories\n\nNow that we have implemented and configured `FactoryGirl`, we should use it in our other specs. Doing so will make our spec files cleaner, more readable, and more efficient.\n\nCreate a new factory named `topics.rb` in `spec/factories`:\n\n```bash(Terminal)\n$ touch spec/factories/topics.rb\n```\n\nOpen it, and add the following:\n\n```ruby(spec/factories/topics.rb)\n # #16\n+FactoryGirl.define do\n+  factory :topic do\n+    name RandomData.random_name\n+    description RandomData.random_sentence\n+  end\n+end\n```\n\nAt __#16__, we define a new factory for topics that generates a topic with a random name and description.\n\nLet's do the same for posts:\n\n```bash(Terminal)\n$ touch spec/factories/posts.rb\n```\n\nOpen it, and add the following:\n\n```ruby(spec/factories/posts.rb)\n # #17\n+FactoryGirl.define do\n+  factory :post do\n+    title RandomData.random_sentence\n+    body RandomData.random_paragraph\n+    topic\n+    user\n+    rank 0.0\n+  end\n+end\n```\n\nAt __#17__, we define a factory for posts.\n\nLet's change all of our model specs to use our new factories:\n\n```ruby(spec/models/comment_spec.rb)\n RSpec.describe Comment, type: :model do\n-  let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n-  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n+  let(:topic) { create(:topic) }\n+  let(:user) { create(:user) }\n+  let(:post) { create(:post) }\n   let(:comment) { Comment.create!(body: 'Comment Body', post: post, user: user) }\n\n...\n```\n\n> We haven't changed `Comment.create` to use a factory because that is part of the checkpoint assignment.\n\n```ruby(spec/models/favorite_spec.rb)\n RSpec.describe Favorite, type: :model do\n-  let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n-  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n+  let(:topic) { create(:topic) }\n+  let(:user) { create(:user) }\n+  let(:post) { create(:post) }\n   let(:favorite) { Vote.create!(post: post, user: user) }\n\n...\n```\n\n```ruby(spec/models/post_spec.rb)\n RSpec.describe Post, type: :model do\n-  let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n-  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n+  let(:topic) { create(:topic) }\n+  let(:user) { create(:user) }\n+  let(:post) { create(:post) }\n\n ...\n\n   describe \"attributes\" do\n     it \"has title and body attributes\" do\n-      expect(post).to have_attributes(title: title, body: body)\n+      expect(post).to have_attributes(title: post.title, body: post.body)\n     end\n ...\n```\n\n```ruby(spec/models/topic_spec.rb)\n RSpec.describe Topic, type: :model do\n-  let(:name) { RandomData.random_sentence }\n-  let(:description) { RandomData.random_paragraph }\n-  let(:topic) { Topic.create!(name: name, description: description) }\n+  let(:topic) { create(:topic) }\n\n ...\n\n  describe \"attributes\" do\n     it \"responds to name and description attributes\" do\n-      expect(topic).to have_attributes(name: name, description: description)\n+      expect(topic).to have_attributes(name: topic.name, description: topic.description)\n     end\n ...\n```\n\n```ruby(spec/models/user_spec.rb)\n...\n\n   describe \"invalid user\" do\n-    let(:user_with_invalid_name) { User.new(name: \"\", email: \"user@bloccit.com\") }\n-    let(:user_with_invalid_email) { User.new(name: \"Bloccit User\", email: \"\") }\n+    let(:user_with_invalid_name) { build(:user, name: \"\") }\n+    let(:user_with_invalid_email) { build(:user, email: \"\") }\n\n     it \"is an invalid user due to blank name\" do\n\n...\n```\n\n```ruby(spec/models/vote_spec.rb)\n RSpec.describe Vote, type: :model do\n-  let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n-  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n+  let(:topic) { create(:topic) }\n+  let(:user) { create(:user) }\n+  let(:post) { create(:post) }\n   let(:vote) { Vote.create!(value: 1, post: post, user: user) }\n...\n```\n\nRun the models specs and ensure that all tests pass:\n\n```bash(Terminal)\n$ rspec spec/models\n```\n\nLet's refactor our controller specs as well:\n\n```ruby(spec/controllers/comments_controller_spec.rb)\n include SessionsHelper\n\n RSpec.describe CommentsController, type: :controller do\n-  let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n-  let(:other_user) { User.create!(name: RandomData.random_name, email: RandomData.random_email, password: \"helloworld\", role: :member) }\n-  let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n+  let(:my_topic) { create(:topic) }\n+  let(:my_user) { create(:user) }\n+  let(:other_user) { create(:user) }\n+  let(:my_post) { create(:post, topic: my_topic, user: my_user) }\n   let(:my_comment) { Comment.create!(body: 'Comment Body', post: my_post, user: my_user) }\n\n...\n```\n\n```ruby(spec/controllers/favorites_controller_spec.rb)\n include SessionsHelper\n\n RSpec.describe FavoritesController, type: :controller do\n-  let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n-  let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n+  let(:my_topic) { create(:topic) }\n+  let(:my_user) { create(:user) }\n+  let(:my_post) { create(:post, topic: my_topic, user: my_user) }\n\n...\n```\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n include SessionsHelper\n\n RSpec.describe PostsController, type: :controller do\n-  let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n-  let(:other_user) { User.create!(name: RandomData.random_name, email: RandomData.random_email, password: \"helloworld\", role: :member) }\n-  let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n+  let(:my_topic) { create(:topic) }\n+  let(:my_user) { create(:user) }\n+  let(:other_user) { create(:user) }\n+  let(:my_post) { create(:post, topic: my_topic, user: my_user) }\n\n...\n```\n\n```ruby(spec/controllers/sessions_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe SessionsController, type: :controller do\n-  let(:my_user) { User.create!(name: \"Blochead\", email: \"blochead@bloc.io\", password: \"password\") }\n+  let(:my_user) { create(:user) }\n\n...\n```\n\n```ruby(spec/controllers/topics_controller_spec.rb)\n include SessionsHelper\n\n RSpec.describe TopicsController, type: :controller do\n-  let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description:   RandomData.random_paragraph) }\n+  let(:my_topic) { create(:topic) }\n...\n```\n\n```ruby(spec/controllers/votes_controller_spec.rb)\n include SessionsHelper\n\n  RSpec.describe VotesController, type: :controller do\n-  let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n-  let(:other_user) { User.create!(name: RandomData.random_name, email: RandomData.random_email, password: \"helloworld\", role: :member) }\n-  let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n+  let(:my_topic) { create(:topic) }\n+  let(:my_user) { create(:user) }\n+  let(:other_user) { create(:user) }\n+  let(:user_post) { create(:post, topic: my_topic, user: other_user) }\n\n...\n```\n\nRun the controller specs and ensure that all tests pass:\n\n```bash(Terminal)\n$ rspec spec/controllers\n```\n\nFinally, for good measure, run your entire spec suite:\n\n```bash(Terminal)\n$ rspec spec\n```\n\nYou should see nothing but beautiful, green, passing tests.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Deploy to Heroku and migrate your production database:\n\n```bash(Terminal)\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n## Recap\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Factory Pattern](https://en.wikipedia.org/wiki/Factory_%28object-oriented_programming%29) | Factories are classes that produce objects to help test our application. We used `FactoryGirl` in this checkpoint, but we could've very well have created our own factories from scratch. |\n| [Active Record Scopes](http://guides.rubyonrails.org/active_record_querying.html#scopes) | Active Record scopes allow commonly-used queries to be referenced as method calls. `scope` methods return `ActiveRecord::Relationship` objects. |\n| [Active Record `joins`](http://guides.rubyonrails.org/active_record_querying.html#joining-tables) | The Active Record `joins` method specifies `JOIN` clauses in the resulting SQL. |", "assignment"=>"Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n1. Create new factories for comments and votes. Refactor your model and controller specs to use the new factories.\n\n2. Create a helper method that detects if there are posts or comments for a given user. Use the helper method to display a message instead of the `<h2>` if no posts or comments exist. Something simple like `\"{user.name} has not submitted any posts yet.\"`\n\n3. On the users __show__ view, add a list of posts that the current user has favorited. Next to each favorited post, display the author's Gravatar, the number of votes, and the number of comments. Implement this feature using TDD.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>32, "checkpoint_type"=>"normal", "position"=>32, "points"=>1, "ref"=>"c0c53371-8ebe-4d04-b5e7-3d5682ba6d1e|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2128", "assessment"=>nil}, {"id"=>2320, "name"=>"Quiz: User Features", "summary"=>"Quiz: User Features", "body"=>"", "assignment"=>"", "roadmap_section_id"=>188, "roadmap_section_ref"=>"aafb3fa8-334f-4346-8307-c9d21ebf799c|0", "default_student_access"=>"locked", "active_index"=>33, "checkpoint_type"=>"quiz", "position"=>33, "points"=>1, "ref"=>"cf9510f4-d486-48b1-9210-039312fd3ca2|0", "exercises"=>false, "quiz_id"=>18, "path"=>"/checkpoints/2320", "assessment"=>nil}]}, {"id"=>189, "roadmap_id"=>38, "name"=>"Project: Backend Web Development Kele API Client", "time_estimate"=>"60 Hours", "point_ratio"=>0.0, "description"=>"", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"locked", "ref"=>"ac3cd179-afac-4bf9-9f68-28bd9c3ba8da|0", "section_type"=>"project", "checkpoints"=>[{"id"=>2156, "name"=>"Introduction", "summary"=>"Introduction to the Kele API Client Project", "body"=>"<!-- { ids:[2156], name:'Introduction', summary:'Introduction to the Kele API Client Project' } -->\nBuild Kele, a Ruby Gem API client to access the Bloc API.\n\n## Overview and Purpose\n\nIn this project you'll create a Ruby Gem API client.\n\n## Objectives\n\nAfter this project, you should be able to:\n\n- Create a basic Ruby Gem.\n- Explain authorization with JSON Web Tokens.\n- Understand the reasons to call an API using a client.\n- Explain how to update resources via an API.\n\n## Use Case\nBloc's API provides an external facing [JSON Web Token](https://jwt.io/) authorized gateway to the Bloc application.  You can access it via [cURL](https://curl.haxx.se/), but an API client can manage the low-level details of making requests and handling responses. Build the [Kele](https://en.wikipedia.org/wiki/Kele_Okereke) API Client to provide easy access to and use of [the student endpoints](http://docs.blocapi.apiary.io/) of Bloc's API.\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As a user, I want to initialize and authorize `Kele` with a Bloc username and password | 3 |\n| As a user, I want to retrieve the current user as a JSON blob | 2 |\n| As a user, I want to retrieve a list of my mentor's availability | 3 |\n| As a user, I want to retrieve roadmaps and checkpoints | 2 |\n| As a user, I want to retrieve a list of my messages, respond to an existing message, and create a new message thread | 4 |\n| As a user, I want to submit checkpoint assignments | 3 |", "assignment"=>"Acquaint yourself with the user stories for this project.\n\nMessage your mentor, letting him/her know that you’ve chosen to work on this project.", "roadmap_section_id"=>189, "roadmap_section_ref"=>"ac3cd179-afac-4bf9-9f68-28bd9c3ba8da|0", "default_student_access"=>"locked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"3184c8d0-a51e-444e-8135-f7585c9d8c23|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2156", "assessment"=>nil}, {"id"=>2157, "name"=>"Initialize and authorize KeleClient", "summary"=>"Initialize and authorize KeleClient with Bloc username and password", "body"=>"<!-- { ids:[2157], name:'Initialize and authorize KeleClient', summary:'Initialize and authorize KeleClient with Bloc username and password' } -->\n>As a user, I want to initialize and authorize `Kele` with a Bloc username and password<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n## Creating the `Kele` Gem\n\nCreate an empty repository on GitHub named `Kele` and clone it locally.\n\n> You should do this from memory, but see [Git Checkpoint Workflow](https://www.bloc.io/resources/git-checkpoint-workflow) if you need a refresher.\n\nCreating this project as a [RubyGem](http://guides.rubygems.org/) allows us to integrate `Kele` with other software.\n\nAt a minimum, a RubyGem needs a `.gemspec` file (typically `project_name.gemspec`) and one Ruby file (typically `lib/project_name.rb`).\n\nA gemspec defines metadata about your RubyGem like its name, version, and author.\n\nCreate `kele.gemspec`:\n\n```ruby\n+Gem::Specification.new do |s|\n+  s.name          = 'kele'\n+  s.version       = '0.0.1'\n+  s.date          = '2015-12-02'\n+  s.summary       = 'Kele API Client'\n+  s.description   = 'A client for the Bloc API'\n+  s.authors       = ['Hannah McExample']\n+  s.email         = 'hannah@example.com'\n+  s.files         = ['lib/kele.rb']\n+  s.require_paths = [\"lib\"]\n+  s.homepage      =\n+    'http://rubygems.org/gems/kele'\n+  s.license       = 'MIT'\n+  s.add_runtime_dependency 'httparty', '~> 0.13'\n+end\n```\n\nReplace `date`, `authors`, and `email` with your own information.\n\n`files` is an array of files included in the gem. You could list them individually (like `s.files = ['lib/kele.rb']`) but we're using [`git ls-files`](https://git-scm.com/docs/git-ls-files), which prints a list of files in your Git repository.\n\n> A gemspec is called from a Ruby method — anything you can do in Ruby you can do in a gemspec.\n\nWe added a `httparty` dependency using `add_runtime_dependency`. This instructs `bundle` to install [httparty](https://github.com/jnunemaker/httparty), which provides a programmatic Ruby interface to make HTTP requests.\n\n> The string `'~> 0.13'` indicates we want the latest possible version in the 0.13 minor range. That is, if we have version 0.13.6 and version 0.13.7 comes out, we want to use that, but we don't want version 0.14. This is called [semantic versioning](http://guides.rubygems.org/patterns/#semantic-versioning).\n\nCreate `kele.rb`:\n\n```bash\n$ md lib\n$ touch lib/kele.rb\n```\n\nWe place the code for a gem within the `lib` directory. Gem conventions are to have one Ruby file with the same name as the gem (in this case `kele.rb`), which gets loaded when we call `require 'kele'`.\n\n## Initialization\n\nWith the skeleton of `Kele` created, add an initialize method that creates a new `Kele` client authorized with a username and password. The client can be used as follows:\n\n```bash\n$ irb\n>> require 'kele'\n=> true\n>> Kele.new(\"jane@gmail.com\", \"abc123\")\n```\n\nIn `initialize`, populate two instance variables:\n  * Bloc's base API URL: `https://www.bloc.io/api/v1`\n  * The user's authentication token, which can be retrieved from [the sessions endpoint](http://docs.blocapi.apiary.io/#reference/0/sessions/retreive-auth-token).\n\nTo retrieve the authentication token `include HTTParty` in `Kele`, use `self.class.post`, and pass in the sessions URL along with username and password. See the [HTTParty repository](https://github.com/jnunemaker/httparty/tree/master/examples) for examples.\n\n### Test Your Code\nTest initializing `Kele` in IRB to ensure that:\n\n- You retrieve and store the authentication token when passing valid credentials\n- An appropriate error is raised when passing invalid credentials", "assignment"=>"Complete the user story.", "roadmap_section_id"=>189, "roadmap_section_ref"=>"ac3cd179-afac-4bf9-9f68-28bd9c3ba8da|0", "default_student_access"=>"locked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"480c2c4c-0e5b-48f6-ae1a-7568086f0ff2|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2157", "assessment"=>nil}, {"id"=>2158, "name"=>"Retrieve Users", "summary"=>"Retrieve the current user as a JSON blob", "body"=>"<!-- { ids:[2158], name:'Retrieve Users', summary:'Retrieve the current user as a JSON blob' } -->\n>As a user, I want to retrieve the current user as a JSON blob<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n## Retrieving the Current User\n\nRetrieve the [current user](http://docs.blocapi.apiary.io/#reference/0/credentials/current-user) from the Bloc API by defining `get_me` which can be used as follows:\n\n```bash\n$ irb\n>> require 'kele'\n=> true\n>> kele_client = Kele.new(\"jane@gmail.com\", \"abc123\")\n>> kele_client.get_me\n```\n\nPass `auth_token` to the request to properly authenticate against the Bloc API. Pass the `auth_token` via HTTParty's `headers` option:\n\n```ruby\nresponse = self.class.get(url, headers: { \"authorization\" => @auth_token })\n```\n\nHTTParty requests return a [response object](http://www.rubydoc.info/github/jnunemaker/httparty/HTTParty/Response) with the data accessible via the [#body method](http://www.rubydoc.info/github/jnunemaker/httparty/HTTParty/Response#body-instance_method). This information is a JSON String. Add the [json gem](https://rubygems.org/gems/json/versions/1.8.3) as a runtime dependency and use the [#parse method](http://flori.github.io/json/doc/index.html) to convert the user data to a Ruby hash.\n\n### Test Your Code\nTest `Kele` in IRB to ensure that:\n\n- You retrieve your own user data\n- You convert your user data to a Ruby hash", "assignment"=>"Complete the user story.", "roadmap_section_id"=>189, "roadmap_section_ref"=>"ac3cd179-afac-4bf9-9f68-28bd9c3ba8da|0", "default_student_access"=>"locked", "active_index"=>3, "checkpoint_type"=>"normal", "position"=>3, "points"=>1, "ref"=>"aa67f5dd-acb7-4429-96d5-4fdc2ea514a5|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2158", "assessment"=>nil}, {"id"=>2159, "name"=>"Mentor Availability", "summary"=>"Retrieve mentor availability", "body"=>"<!-- { ids:[2159], name:'Mentor Availability', summary:'Retrieve mentor availability' } -->\n>As a user, I want to retrieve a list of my mentor's availability\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n## Body\nRetrieve a list of [a mentor's available time slots](http://docs.blocapi.apiary.io/#reference/0/mentors/student-availability) for the current user from the Bloc API by defining `get_mentor_availability` which can be used as follows:\n\n```bash\n$ irb\n>> require 'kele'\n=> true\n>> kele_client = Kele.new(\"jane@gmail.com\", \"abc123\")\n>> mentor_id = 99\n>> kele_client.get_mentor_availability(mentor_id)\n```\n\nYou will need to include the mentor id in the URL. Find your mentor's id in the user data returned by `get_me`. Pass `auth_token` to the request to properly authenticate against the Bloc API.\n\nConvert the JSON response to a Ruby array.\n\n### Test Your Code\nTest `Kele` in IRB to ensure that:\n\n- You retrieve a list of your mentor's available time slots\n- You convert your mentor's available time slots data to a Ruby array", "assignment"=>"Complete the user story.", "roadmap_section_id"=>189, "roadmap_section_ref"=>"ac3cd179-afac-4bf9-9f68-28bd9c3ba8da|0", "default_student_access"=>"locked", "active_index"=>4, "checkpoint_type"=>"normal", "position"=>4, "points"=>1, "ref"=>"886f78c0-5876-4051-bd7e-15cab12e6ea4|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2159", "assessment"=>nil}, {"id"=>2160, "name"=>"Roadmaps and Checkpoints", "summary"=>"Retrieve roadmaps and checkpoints", "body"=>"<!-- { ids:[2160], name:'Roadmaps and Checkpoints', summary:'Retrieve roadmaps and checkpoints' } -->\n>As a user, I want to retrieve roadmaps and checkpoints\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n## Retrieving Roadmaps\n\nRetrieve [roadmaps](http://docs.blocapi.apiary.io/#reference/0/roadmaps/show-roadmap) with their associated sections and checkpoints by defining `get_roadmap` to be used as follows:\n\n```bash\n$ irb\n>> require 'kele'\n=> true\n>> kele_client = Kele.new(\"jane@gmail.com\", \"abc123\")\n>> roadmap_id = 99\n>> kele_client.get_roadmap(roadmap_id)\n```\n\nThe id for the Rails roadmaps is 31.\n\nConvert the JSON response to Ruby.\n\n## Retrieving Checkpoints\n\nRetrieve [checkpoints](http://docs.blocapi.apiary.io/#reference/0/checkpoints/show-checkpoint) with their associated body and assignment by defining `get_checkpoint` to be used as follows:\n\n```bash\n$ irb\n>> require 'kele'\n=> true\n>> kele_client = Kele.new(\"jane@gmail.com\", \"abc123\")\n>> checkpoint_id = 99\n>> kele_client.get_checkpoint(checkpoint_id)\n```\n\nRetrieve checkpoint ids from the `get_roadmap` response.\n\n## Refactor Roadmaps and Checkpoints\n\n`lib/kele.rb` is starting to get cluttered. Clean it up by moving `get_roadmap` and `get_checkpoint` into a separate `lib/roadmap` module. `require` the file in `lib/kele.rb` and `include` the module.\n\n### Test Your Code\nTest `Kele` in IRB to ensure that you can:\n\n- Retrieve a roadmap and its associated sections and checkpoints\n- Retrieve a checkpoint and its associated body and assignment\n- Continue to use `get_roadmap` and `get_checkpoint` after moving them into a module", "assignment"=>"Complete the user story.", "roadmap_section_id"=>189, "roadmap_section_ref"=>"ac3cd179-afac-4bf9-9f68-28bd9c3ba8da|0", "default_student_access"=>"locked", "active_index"=>5, "checkpoint_type"=>"normal", "position"=>5, "points"=>1, "ref"=>"b3e8c6c5-2540-4f52-b97b-c5e622c3205c|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2160", "assessment"=>nil}, {"id"=>2161, "name"=>"Messaging", "summary"=>"Retrieve and send messages", "body"=>"<!-- { ids:[2161], name:'Messaging', summary:'Retrieve and send messages' } -->\n>As a user, I want to retrieve a list of my messages, respond to an existing message, and create a new message thread<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 4\n\n## Retrieving Messages\n\nOn the Bloc platform all messages belong to a message thread. Retrieve [all message threads](http://docs.blocapi.apiary.io/#reference/0/message-threads/all-messages) for the current user by defining `get_messages`. The all message threads endpoint returns message threads paginated with 10 threads per page and a total count of all threads. Either return a specified page or retrieve all message threads through multiple calls to the endpoint.\n\n```bash\n$ irb\n>> require 'kele'\n=> true\n>> kele_client = Kele.new(\"Hannah.McExample@gmail.com\", \"abc123\")\n>> kele_client.get_messages(1) # returns the first page of message threads\n>> kele_client.get_messages # returns all message threads\n```\n\nConvert the JSON responses to native Ruby objects.\n\n## Creating Messages\n\nAdd a `create_message` method that creates a new message on the Bloc platform. Use the [create message endpoint](http://docs.blocapi.apiary.io/#reference/0/messages/create-message) to create a new message and thread.\n\n### Test Your Code\nTest `Kele` in IRB to ensure that you can:\n\n- Retrieve all messages for the current user\n- Create a new message and thread", "assignment"=>"Complete the user story.", "roadmap_section_id"=>189, "roadmap_section_ref"=>"ac3cd179-afac-4bf9-9f68-28bd9c3ba8da|0", "default_student_access"=>"locked", "active_index"=>6, "checkpoint_type"=>"normal", "position"=>6, "points"=>1, "ref"=>"77458c8b-c552-43c8-9621-2d88b9b41635|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2161", "assessment"=>nil}, {"id"=>2162, "name"=>"Checkpoint Submission", "summary"=>"Submit Checkpoint Assignments", "body"=>"<!-- { ids:[2162], name:'Checkpoint Submission', summary:'Submit Checkpoint Assignments' } -->\n>As a user, I want to submit checkpoint assignments\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n## Checkpoint Submissions\n\nAdd a `create_submission` method that creates a new Bloc checkpoint submission on the Bloc platform. Use the [create checkpoint submission endpoint](http://docs.blocapi.apiary.io/#reference/0/checkpoint-submissions/create) to create a new submission. Checkpoint submissions are tied to your account via an `enrollment_id`, which is included in your user information. Implement `create_submission` so that it can be used as follows:\n\n```bash\n$ irb\n>> require 'kele'\n=> true\n>> kele_client = Kele.new(\"Hannah.McExample@gmail.com\", \"abc123\")\n>> kele_client.create_submission(checkpoint_id, assignment_branch, assignment_commit_link, comment)\n```\n\n### Test Your Code\nTest `Kele` in IRB to ensure that you can:\n\n- Create a new checkpoint submission", "assignment"=>"Complete the user story.", "roadmap_section_id"=>189, "roadmap_section_ref"=>"ac3cd179-afac-4bf9-9f68-28bd9c3ba8da|0", "default_student_access"=>"locked", "active_index"=>7, "checkpoint_type"=>"normal", "position"=>7, "points"=>1, "ref"=>"60ed4e34-cf0b-41b0-8498-dac1cf409eb3|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2162", "assessment"=>nil}, {"id"=>2163, "name"=>"Extra Credit User Stories", "summary"=>"Kele Client extra credit user stories", "body"=>"<!-- { ids:[2163], name:'Extra Credit User Stories', summary:'Kele Client extra credit user stories' } -->\nThe goal of extra credit is to push you towards self-reliance, so outside of a brief description, we don't provide additional resources. If you finish your project early, challenge yourself to complete these additional user stories:\n\n| **User Story** | **Difficulty Rating** |\n| :-- | :-- |\n| As a developer, I want to test `Kele` using the [VCR gem](https://github.com/vcr/vcr) | 3 |\n| As a user, I want to [update existing checkpoint assignments](http://docs.blocapi.apiary.io/#reference/0/checkpoint-submissions/update) | 3 |", "assignment"=>"Optional: Complete one or more of the extra credit user stories.", "roadmap_section_id"=>189, "roadmap_section_ref"=>"ac3cd179-afac-4bf9-9f68-28bd9c3ba8da|0", "default_student_access"=>"locked", "active_index"=>nil, "checkpoint_type"=>"extra_credit", "position"=>nil, "points"=>0, "ref"=>"3f714133-24a9-4920-a567-cff0019e94cb|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2163", "assessment"=>nil}]}, {"id"=>190, "roadmap_id"=>38, "name"=>"Project: Backend Web Development Blocipedia", "time_estimate"=>"40 Hours", "point_ratio"=>0.0, "description"=>"", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"locked", "ref"=>"8fabf4c4-5ce4-4931-a59f-5d76c40ca460|0", "section_type"=>"project", "checkpoints"=>[{"id"=>2164, "name"=>"Introduction", "summary"=>"Introduction", "body"=>"<!-- { ids:[2164], name:\"Introduction\", summary:\"Introduction\" } -->\nBuild an application that allows users to create public and private Markdown-based wikis.\n\n## Overview and Purpose\n\nIn this project you'll create a CRUD application using Ruby on Rails.\n\n## Objectives\n\nAfter this project, you should be able to:\n\n- Create a basic user scheme for a Ruby on Rails application.\n- Give the users of a Ruby on Rails application the ability to sign up for your application using the Devise gem.\n- Understand how to create CRUD routes and resources in a Rails Application.\n- Explain the difference between authentication and authorization.\n- Integrate Stripe third party API callouts.\n- Integrate Redcarpet Markdown rendering gem.\n\n## Use Case\n\n[Wikis](http://en.wikipedia.org/wiki/Wiki) are a great way to collaborate on community-sourced content. Whether the wiki is for a hobby or work-related project, you will build an app that lets users create their own wikis and share them publicly or privately with other collaborators.\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As a user, I want to **sign up** for a free account by providing a user name, password and email | 2 |\n| As a user, I want to **sign in and out** of Blocipedia | 2 |\n| As a user with a standard account, I want to **create, read, update, and delete** public wikis | 3 |\n| As a developer, I want to offer three user roles: admin, standard, or premium | 4 |\n| As a developer, I want to **seed** the development database automatically with users and wikis | 1 |\n| As a user, I want to **upgrade** my account from a free to a paid plan | 4 |\n| As a premium user, I want to **create** private wikis | 3 |\n| As a user, I want to **edit** wikis using Markdown syntax | 2 |\n| As a premium user, I want to **add** and **remove** collaborators for my private wikis | 3 |\n\nBefore you begin working on user stories, complete this project's [Getting Started guide](https://www.bloc.io/resources/getting-started-with-rails-web-development-projects). Later user stories often rely on the completion of the former, therefore, work on them in the order prescribed.\n\n## Wireframe Examples\n\nThese wireframes are meant to suggest a design, not dictate one.\n\n| **Wireframe** | **Description** |\n| :-- | :-- |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_signup_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_signup.png) | A sign up page. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_index_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_index.png) | An index. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_edit_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_edit.png) | Edit the Wiki page. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_show_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_show.png) | Show the Wiki. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_collaborators_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_collaborators.png) | Add collaborators. |", "assignment"=>"Acquaint yourself with the user stories for this project.\n\nOptional: Sketch your own wireframes.\n\nMessage your mentor, letting him/her know that you’ve chosen to work on this project.", "roadmap_section_id"=>190, "roadmap_section_ref"=>"8fabf4c4-5ce4-4931-a59f-5d76c40ca460|0", "default_student_access"=>"locked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"dc9f88b4-218b-433d-bb3e-4a2c34a7d277|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2164", "assessment"=>nil}, {"id"=>2165, "name"=>"User Sign Up", "summary"=>"User Sign Up", "body"=>"<!-- { ids:[2165], name:\"User Sign Up\", summary:\"User Sign Up\" } -->\n>As a user, I want to **sign up** for a free account by providing a user name, password and email<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Incorporate Devise\n\nUse the [Devise](https://github.com/plataformatec/devise) gem for authentication. Blocipedia's authentication system should allow users to sign up and send emails for account confirmation. Refer to the [Devise Resource](https://www.bloc.io/resources/devise) and the [Devise Getting Started Guide](https://github.com/plataformatec/devise#getting-started) for examples on implementing user sign up.\n\n### Test Your Code\n\n- Sign a new user up. Do you receive a confirmation email?\n- What happens if you attempt to sign up with an invalid email?\n- What happens if you attempt to sign up with a duplicate email?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>190, "roadmap_section_ref"=>"8fabf4c4-5ce4-4931-a59f-5d76c40ca460|0", "default_student_access"=>"locked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"32f1001f-62a8-44f6-bc50-c06d42747868|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2165", "assessment"=>nil}, {"id"=>2166, "name"=>"User Sign in and Out", "summary"=>"User Sign in and Out", "body"=>"<!-- { ids:[2166], name:\"User Sign in and Out\", summary:\"User Sign in and Out\" } -->\n>As a user, I want to **sign in and out** of Blocipedia<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\nNow that users can sign up for Blocipedia, you want to give them a way to sign in and out of the app. Refer to our [Devise Resource](https://www.bloc.io/resources/devise) and the [ Devise Getting Started Guide](https://github.com/plataformatec/devise#getting-started) for examples on implementing user sign in/out with Devise.\n\n### Test Your Code\n\n- Sign into Blocipedia, does the top navigation change to indicate you are signed in?\n- Sign out of Blocipedia, does the top navigation change to indicate you are signed out?\n- What happens if you attempt to reset your password?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>190, "roadmap_section_ref"=>"8fabf4c4-5ce4-4931-a59f-5d76c40ca460|0", "default_student_access"=>"locked", "active_index"=>3, "checkpoint_type"=>"normal", "position"=>3, "points"=>1, "ref"=>"3617acee-3aa3-4aba-a27a-e51f73fbf00d|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2166", "assessment"=>nil}, {"id"=>2167, "name"=>"Wiki CRUD", "summary"=>"Wiki CRUD", "body"=>"<!-- { ids:[2167], name:\"Wiki CRUD\", summary:\"Wiki CRUD\" } -->\n>As a user with a standard account, I want to **create, read, update, and delete** public wikis<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Create the Model\n\nCreate the wiki model. For guidance, you can refer to the [Models Checkpoint](https://bloc.io/checkpoints/1635). Start by generating the Wiki model:\n\n```bash(Terminal)\n$ rails g model Wiki title:string body:text private:boolean user:references:index\n```\n\nRefer to the [CRUD](https://bloc.io/checkpoints/1639) and [More Crud](https://bloc.io/checkpoints/1640) Checkpoints for an example that implements CRUD. The `wikis_controller` will replace the `posts_controller` in Blocipedia.\n\n### Test Your Code\n\n- Are you able to create new public wikis?\n- Are you able to update public wikis?\n- Are you able to delete public wikis?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>190, "roadmap_section_ref"=>"8fabf4c4-5ce4-4931-a59f-5d76c40ca460|0", "default_student_access"=>"locked", "active_index"=>4, "checkpoint_type"=>"normal", "position"=>4, "points"=>1, "ref"=>"f78d3530-bf29-4ed3-906b-4b912fc146e9|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2167", "assessment"=>nil}, {"id"=>2168, "name"=>"User Roles", "summary"=>"User Roles", "body"=>"<!-- { ids:[2168], name:\"User Roles\", summary:\"User Roles\" } -->\n>As a developer, I want to offer three user roles: admin, standard, or premium<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 4\n\n### Incorporate Pundit\n\nUse the [Pundit](https://github.com/elabs/pundit) gem for authorization. Users should have one of three roles: standard (free), premium, or admin. Refer to the [Pundit Readme](https://github.com/elabs/pundit/blob/master/README.md#policies) checkpoint for examples of using Pundit policies.\n\n### Default to Standard\n\nUsers should default to the standard role when they are first created. There are [several ways](http://stackoverflow.com/questions/328525/how-can-i-set-default-values-in-activerecord) to implement default values. Use the `after_initialize` callback approach to implement default values for roles.\n\nIn Bloccit, a user either needed to be an admin, or the post creator to edit a post. In Blocipedia, users should be able to edit any public wiki. To allow this behavior, change the `update?` method in `application_policy.rb`:\n\n```ruby(app/policies/application_policy)\n  def update?\n    user.present?\n  end\n```\n\nFor an extra challenge, implement user authorization from scratch. This [blog post](http://janeeats.github.io/blog/2013/03/23/authorization-basics-in-rails/) provides a great starting point.\n\n### Test Your Code\n\n- Use the Rails console to create a new user. Are they given the default role?\n- Are you able to edit wikis created by another user?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>190, "roadmap_section_ref"=>"8fabf4c4-5ce4-4931-a59f-5d76c40ca460|0", "default_student_access"=>"locked", "active_index"=>5, "checkpoint_type"=>"normal", "position"=>5, "points"=>1, "ref"=>"e0e6e850-da4a-4996-a4ab-fc7cc84b4320|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2168", "assessment"=>nil}, {"id"=>2169, "name"=>"Seeding Data", "summary"=>"Seeding Data", "body"=>"<!-- { ids:[2169], name:\"Seeding Data\", summary:\"Seeding Data\" } -->\n>As a developer, I want to **seed** the development database automatically with users and wikis<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\n### Seed With Faker\n\nNow that user and wiki models are established, you can seed data into the development database. Use the [Faker](https://github.com/stympy/faker) gem to generate fake 1 data for __users and wikis__. Refer to the <C>1637|Seeding Data</C> checkpoint for examples on setting up the `seeds.rb` file.\n\nReturn to this user story as you continue to build Blocipedia, updating `seeds.rb` to reflect the changes you make in the app.\n\n### Test Your Code\n\n- Rebuild your database, is it seeded with the data you specified?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>190, "roadmap_section_ref"=>"8fabf4c4-5ce4-4931-a59f-5d76c40ca460|0", "default_student_access"=>"locked", "active_index"=>6, "checkpoint_type"=>"normal", "position"=>6, "points"=>1, "ref"=>"b8a89afd-2fa5-4dfc-ba99-8cae37cef530|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2169", "assessment"=>nil}, {"id"=>2170, "name"=>"Upgrading an Account", "summary"=>"Upgrading an Account", "body"=>"<!-- { ids:[2170], name:\"Upgrading an Account\", summary:\"Upgrading an Account\" } -->\n>As a user, I want to **upgrade** my account from a free to a paid plan<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 4\n\n### Determine a User Flow\n\n>A _user flow_ is the path a user follows to complete a task in the app.\n\nHere is a hypothetical user flow for Blocipedia:\n\n1. The user signs up for a free plan.\n2. The user upgrades their free plan and is prompted to pay with Stripe.\n3. The user's role is changed from standard to premium.\n4. The user is able to create private wikis.\n\nCan you think of alternative flows that result in the user's role changing from standard to premium?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\n### Incorporate Stripe\n\nUse [Stripe](https://stripe.com/) to charge users before switching their account role from standard to premium. Make the price of the premium user upgrade 15 dollars. Implement Stripe using the [Stripe Integration Resource](https://www.bloc.io/resources/stripe-integration).\n\nYou could also upgrade a user before you charge them via Stripe. Why would you want to charge users before you upgrade them?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup> Review the [Happy Path](http://en.wikipedia.org/wiki/Happy_path) article on Wikipedia.\n\n### Downgrade Back to Standard\n\nYou should also allow a user to downgrade their premium account to a standard account. What complications does this add to your application?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup> Design and implement a user flow for this scenario.\n\n### Test Your Code\n\n- Upgrade an existing user account. Was your Stripe account charged? Was the user role changed?\n- Downgrade a premium user. Was your Stripe account charged? Was their role changed?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>190, "roadmap_section_ref"=>"8fabf4c4-5ce4-4931-a59f-5d76c40ca460|0", "default_student_access"=>"locked", "active_index"=>7, "checkpoint_type"=>"normal", "position"=>7, "points"=>1, "ref"=>"4cac9bcc-1bd6-495b-ab2e-e398faaaf0a8|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2170", "assessment"=>nil}, {"id"=>2171, "name"=>"Private Wikis", "summary"=>"Private Wikis", "body"=>"<!-- { ids:[2171], name:\"Private Wikis\", summary:\"Private Wikis\" } -->\n>As a premium user, I want to **create** private wikis<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Implement Privacy Controls\n\nRefer to the <C>1657|Private Topics</C> checkpoint when implementing private wikis. Premium and admin users should be able to create new private wikis and make public wikis private. Check the user's role before allowing them to edit a wiki's private attribute:\n\n```ruby(app/views/wikis/_form.html.erb)\n<% if current_user.admin? || current_user.premium? %>\n  <div class=\"form-group\">\n    <%= f.label :private, class: 'checkbox' do %>\n      <%= f.check_box :private %> Private wiki\n    <% end %>\n  </div>\n<% end %>\n```\n\n### Downgrade Private Wikis\n\nSince Blocipedia allows premium users to downgrade their accounts, what should happen to their private wikis?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup> Build a user flow for this scenario which prompts the user with a reminder that their private wikis will become public if they downgrade their account.\n\n### Test Your Code\n\n- As a premium user, create a private wiki. Sign in with a standard user. Do you see the private wiki in the wikis index?\n- As a premium user, create a private wiki. Downgrade your account to standard. Verify that their private wikis are made public.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>190, "roadmap_section_ref"=>"8fabf4c4-5ce4-4931-a59f-5d76c40ca460|0", "default_student_access"=>"locked", "active_index"=>8, "checkpoint_type"=>"normal", "position"=>8, "points"=>1, "ref"=>"bbf43f52-5aae-48a4-8240-a08bbe124ecb|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2171", "assessment"=>nil}, {"id"=>2172, "name"=>"Markdown", "summary"=>"Markdown", "body"=>"<!-- { ids:[2172], name:\"Markdown\", summary:\"Markdown\" } -->\n>As a user, I want to **edit** wikis using Markdown syntax<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Incorporate Redcarpet\n\nUse the [Redcarpet](https://github.com/vmg/redcarpet) gem to parse Markdown syntax.\n\n### Test Your Code\n\n- View a wiki page built with Markdown, does it render the Markdown properly?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>190, "roadmap_section_ref"=>"8fabf4c4-5ce4-4931-a59f-5d76c40ca460|0", "default_student_access"=>"locked", "active_index"=>9, "checkpoint_type"=>"normal", "position"=>9, "points"=>1, "ref"=>"61b334d4-468a-46e2-8ce2-702b29488efa|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2172", "assessment"=>nil}, {"id"=>2173, "name"=>"Wiki Collaborators", "summary"=>"Wiki Collaborators", "body"=>"<!-- { ids:[2173], name:\"Wiki Collaborators\", summary:\"Wiki Collaborators\" } -->\n>As a premium user, I want to **add** and **remove** collaborators for my private wikis<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Modify the Edit Page\n\nUsers will add and remove collaborators from a private wiki via its edit page.\n\n### Create a Collaborator Model\n\nModel this new relationship between wikis and users by creating a collaborator model. Read through our resource on [Has Many Through](https://www.bloc.io/resources/has-many-through) relationships to get a sense for how you might want to relate private wikis with users through collaborators.\n\nPrivate wikis should only be visible to admins, the wiki creator, or wiki collaborators. Use Pundit's `scope` to restrict which wikis appear on the index page. To do so, add an inner `Scope` class to `wiki_policy.rb`:\n\n```ruby(app/policies/wiki_policy.rb)\n class WikiPolicy < ApplicationPolicy\n\n ...\n\n+  class Scope\n+    attr_reader :user, :scope\n+\n+    def initialize(user, scope)\n+      @user = user\n+      @scope = scope\n+    end\n+\n+    def resolve\n+      wikis = []\n+      if user.role == 'admin'\n+        wikis = scope.all # if the user is an admin, show them all the wikis\n+      elsif user.role == 'premium'\n+        all_wikis = scope.all\n+        all_wikis.each do |wiki|\n+          if wiki.public? || wiki.owner == user || wiki.collaborators.include?(user)\n+            wikis << wiki # if the user is premium, only show them public wikis, or that private wikis they created, or private wikis they are a collaborator on\n+          end\n+        end\n+      else # this is the lowly standard user\n+        all_wikis = scope.all\n+        wikis = []\n+        all_wikis.each do |wiki|\n+          if wiki.public? || wiki.collaborators.include?(user)\n+            wikis << wiki # only show standard users public wikis and private wikis they are a collaborator on\n+          end\n+        end\n+      end\n+      wikis # return the wikis array we've built up\n+    end\n+  end\n end\n```\n\nUse the scope in the `wikis_controller.rb` to display only the appropriate wikis:\n\n```ruby(app/controllers/wikis_controller)\n-  def index\n-    @wikis = Wiki.all\n-  end\n\n+  def index\n+    @wikis = policy_scope(Wiki)\n+  end\n```\n\n### Test Your Code\n\n- As a premium user, add a standard user as the collaborator to a private wiki. Can you add the user multiple times? Sign in as the standard user. Do you see the private wiki in the wikis index? Can you edit the private wiki?\n- As a premium user, remove a collaborator from a private wiki. Sign in as the ex-collaborator. Do you see the private wiki in the wikis index? Can you edit the private wiki?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>190, "roadmap_section_ref"=>"8fabf4c4-5ce4-4931-a59f-5d76c40ca460|0", "default_student_access"=>"locked", "active_index"=>10, "checkpoint_type"=>"normal", "position"=>10, "points"=>1, "ref"=>"101453f7-995f-4c2b-85d5-8d302185435b|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2173", "assessment"=>nil}, {"id"=>2174, "name"=>"Extra Credit", "summary"=>"If you finish early, attempt these extra credit user stories", "body"=>"<!-- { ids:[2174], name:\"Extra Credit\", summary:\"If you finish early, attempt these extra credit user stories\" } -->\nThe goal of extra credit is to push you towards self-reliance, so outside of a brief description, we don't provide additional resources. If you finish your project early, challenge yourself to complete these additional user stories:\n\n| **User Story** | **Difficulty Rating** |\n| :-- | :-- |\n| As a developer, I want to generate Blocipedia's views using [HAML](https://www.bloc.io/resources/using-haml) instead of ERB | 3 |\n| As a user, I want my wiki to have [readable URLs](https://github.com/norman/friendly_id) | 3 |\n| As a user, I want to see a [preview](https://github.com/OscarGodson/EpicEditor) of my Markdown as I edit it | 4 |", "assignment"=>"Optional: Complete one or more of the extra credit user stories.", "roadmap_section_id"=>190, "roadmap_section_ref"=>"8fabf4c4-5ce4-4931-a59f-5d76c40ca460|0", "default_student_access"=>"locked", "active_index"=>nil, "checkpoint_type"=>"extra_credit", "position"=>nil, "points"=>0, "ref"=>"231bc170-b4cd-4cc3-80a2-349e52ba6ce3|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2174", "assessment"=>nil}]}, {"id"=>191, "roadmap_id"=>38, "name"=>"Module 4: Specialization Introduction", "time_estimate"=>"1 Hour", "point_ratio"=>0.0, "description"=>"", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"unlocked", "ref"=>"29f226d6-f68d-4ead-9b62-dc1d46bb69ad|0", "section_type"=>"foundation", "checkpoints"=>[{"id"=>2297, "name"=>"Progress Assessment", "summary"=>"Before you continue, have an expert assess your skills!", "body"=>"<!-- { ids:[2297], name:'Progress Assessment', summary:'Before you continue, have an expert assess your skills!' } -->\n\n<mentor-checkpoint-note>\n###Suggested Student Resources\nThis is a list of resources to send to your students if they need extra content/explanation for the checkpoint’s topics.\n* [Frontend Practice Exercise ](https://github.com/Bloc/bloc-frontend-exercise)\n</mentor-checkpoint-note>\n\n## Overview and Purpose\n\nTo maximize your chances of success, we will assess your skills before you move onto the next phase.\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Confidently proceed to the next Phase of the program.\n- Understand their strengths and weaknesses.\n- Answer technical interview questions.\n\n## Process\n\nEach assessment is an interview composed of personal, technical, and coding questions. We perform the assessments remotely over teleconference, much like mentor meetings. Your mentor is not responsible for your assessments, we've delegated that task to other Bloc representatives. Receiving an assessment from a stranger better replicates the job interview environment.\n\nWhich brings us to the next point: **treat each assessment with utmost seriousness**. The more you commit to the experience, the more you will take out of it. Technical interviews are high-pressure situations and your future employers won't give you a practice round.\n\n### Pass / Fail\n\nIf you score below the minimum acceptance level, you will schedule a retake with your mentor and make adjustments to improve your score, which may include dropping pace. Consecutive unsuccessful assessments will result in more impactful actions to ensure that you master early concepts.\n\n## Topics\n\nThe assessment can cover anything learned in the previous Phase of your track, that includes: everything taught in Phase 1, HTML & CSS, DOM Scripting, jQuery, AngularJS, Firebase, Ruby Applications, and Rails. **Pay special attention** to the objectives listed in each checkpoint of the previous Phase, including Career Preparation checkpoints.\n\nReview the exercises where you struggled most, as well as quiz questions you missed because those are more-than-likely to appear in the assessment.", "assignment"=>nil, "roadmap_section_id"=>191, "roadmap_section_ref"=>"29f226d6-f68d-4ead-9b62-dc1d46bb69ad|0", "default_student_access"=>"unlocked", "active_index"=>1, "checkpoint_type"=>"assessment", "position"=>1, "points"=>1, "ref"=>"76866c9e-7986-4589-8f5d-7860c0e2ef18|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2297", "assessment"=>{"title"=>"WDT Phase 2 assessment", "scheduling_url"=>"https://calendly.com/bloc-assessments/wdt-phase-2-assessment/"}}, {"id"=>2264, "name"=>"Welcome to Module 4", "summary"=>"Introduction to Module 4: Specialization", "body"=>"<!-- { ids:[2264], name:'Welcome to Phase 3', summary:'Introduction to Phase 3: Specialization' } -->\r\n\r\n> We've repeated some information in this checkpoint because it serves as a reminder of how to be successful in Bloc. Make sure you complete the assignment before moving on. This checkpoints marks the start of **Phase 3: Specialization**. During this phase you'll work with your mentor and our Outcomes team to select at least two more projects based on your outcome goal. These projects will stand out in your portfolio and position you for interviews with companies.\r\n\r\n### Your Time Commitment\r\n\r\n<center>![time](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-2.jpg)</center>\r\n\r\n<br>\r\n\r\nBloc is an immersive experience, and requires a serious time commitment. Students spend approximately 540 hours in Bloc before graduating. You'll achieve the best results with disciplined time management; review the following time commitments, based on your pace:\r\n\r\n| Weekly Appointments | Weekly Time Commitment |\r\n|---------------------|------------------------|\r\n| 2 | 20 hours |\r\n| 1 | 12 hours |\r\n\r\nWe can't stress enough the importance of a disciplined schedule. Committing 12 or 20 hours a week is no easy task. You'll need to sacrifice TV, parties, video games, or even vacations. Remember that you'll maximize your results if you stay truly immersed throughout Bloc. You _must_ put in the time, or you will not achieve your desired results; there's too much to learn and build. We recommend that you schedule regular study times on your calendar, and diligently follow that schedule. Share this schedule with your mentor so they know when you'll be working.\r\n\r\n### Curriculum\r\n\r\nOur curriculum is built specifically for students and mentors to promote effective learning and collaboration. The curriculum is your roadmap through the Bloc experience; it defines the direction, topics, and sequence you'll need to learn and achieve your goals.\r\n\r\nThe curriculum consists of three phases. Each phase contains checkpoints with explicit assignments that you must complete to move on:\r\n\r\n- **Phase 1: Programming Fundamentals** – learn HTML, CSS, the command line, Git, GitHub, Ruby, and JavaScript. You'll use all of these tools extensively throughout Bloc as you build projects. Your mentor will be with you every step of the way, and will help you master these fundamental concepts.\r\n- **Phase 2: Web Development Foundation** – apply your fundamental programming skills to web development as we guide you through two projects and help you build four others. We wrote this curriculum specifically for Bloc students.\r\n- **Phase 3: Specialization** – you'll work with your mentor and our Outcomes team to select at least two more projects based on your outcome goal. These projects will stand out in your portfolio and position you for interviews with companies.\r\n\r\nEach of the phases consists of checkpoints, assignments, and quizzes. You should discuss each checkpoint with your mentor and resolve any questions you have before progressing. After submitting a checkpoint assignment, your mentor will review your work and provide you with feedback. Quizzes will help us understand your strengths and weaknesses, and we may adjust your program based on your quiz results.\r\n\r\nThe curriculum is constantly assessed and improved. The technologies you're learning move fast, and thus, we must keep the curriculum current. We update the curriculum frequently, and will notify you when there are major changes.\r\n\r\nWe illustrate some tips for successful learning in the following video. We recommend that you come back to read this checkpoint and watch this video throughout Bloc:\r\n\r\n<center>\r\n  <iframe src=\"https://fast.wistia.net/embed/iframe/u53k9sb8uy\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\r\n</center>\r\n\r\n### Mentor Appointments\r\n\r\n<center>![appointment](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-4.jpg)</center>\r\n\r\n<br>\r\n\r\nAppointments are live, one-on-one meetings with your mentor. Each appointment is usually 30 minutes in length, though the actual duration will depend on the topic and your mentor's judgement.\r\n\r\nAppointments are virtual, and have software requirements:\r\n\r\n- [Google Chrome Web Browser](https://www.google.com/intl/en/chrome/browser/) - We think Chrome is the best browser for developers and designers, and we recommend using it in general.\r\n- __A screensharing application__ like Screenhero. Message your mentor to determine their preference, and download the software.\r\n- [Google Hangouts](https://www.google.com/hangouts/) or [Skype](https://www.skype.com) for video chat.\r\n\r\nIf you and your mentor prepare, have an agenda, and arrive on time, an appointment will be a high-leverage learning experience. Do not lose respect for your appointments; productive appointments are essential for a great experience. An appointment's agenda is not limited, but often includes:\r\n\r\n- checkpoint review\r\n- assignment review\r\n- project review\r\n- pair programming\r\n- code review\r\n- design critique\r\n- debugging and troubleshooting\r\n- best practice technique sharing\r\n\r\nYour mentor will often lead the appointment, but you should come with a list of questions and issues.\r\n\r\n### Communication\r\n\r\n<center>![communication](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-5.jpg)</center>\r\n\r\nMuch of your communication in Bloc will be asynchronous. You'll write a message, submit an assignment, or ask a question, and your mentor will respond. The recommended way to communicate asynchronously is to use our [messages feature](https://www.bloc.io/message_threads). You'll also have the ability to submit checkpoint-specific messages at the bottom of each checkpoint. (You'll see this in action below, in this checkpoint.)\r\n\r\nTo speak with someone at Bloc who is not your mentor, you can email [Bloc Help](mailto:help@bloc.io) anytime. You will **always** have someone to speak with at Bloc, no matter what the issue is.\r\n\r\nYou will establish other means of communication with your mentor, based on your mutual preferences. We encourage you to use the Bloc messages feature as much as possible, but realize that other communication tools may sometimes be necessary. The following section lists some alternative communication tools.\r\n\r\n### Ecosystem\r\n\r\nBloc's ecosystem includes tools that make it easier to collaborate and get help when you need it. The ecosystem is always evolving, and you should explore its tools. Review the [Ecosystem resource](https://www.bloc.io/resources/ecosystem) and ask your mentor which tools they use.\r\n\r\n### Expectations\r\n\r\n<center>![mentor-apprentice](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-6.jpg)</center>\r\n\r\n<br>\r\n\r\nYour expectations must align with your mentor's to be successful in Bloc. It's important to understand what's expected of you, and what you should expect of your mentor.\r\n\r\n### Mentor Expectations\r\n\r\nMentors will:\r\n\r\n* Inspire and lead students.\r\n* Prepare for appointments and arrive on time.\r\n* Hold students accountable.\r\n* Respond to all questions and issues.\r\n* Provide feedback on submitted checkpoints and assignments.\r\n\r\n### Student Expectations\r\n\r\nStudents will:\r\n\r\n* Commit the requisite time to Bloc.\r\n* Trust their mentor.\r\n* Accept the assignments and projects provided by Bloc.\r\n* Prepare for appointments and arrive on time.\r\n* Communicate openly with their mentor.\r\n\r\n### Succeeding in Bloc and Beyond\r\n\r\n<center>![success](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-7.jpg)</center>\r\n\r\n<br>\r\n\r\nMaintaining a healthy perspective on yourself and your work is crucial for getting a job, starting a company, building a product, or winning client work. Students who excel portray the following traits:\r\n\r\n* I am responsible for my own learning.\r\n* I embrace challenges.\r\n* I am focused and disciplined.\r\n* I share what I learn with the Bloc community.\r\n* I celebrate accomplishments.", "assignment"=>"Send a message to your mentor explaining what you think your strengths and weaknesses are, regarding the programming fundamentals you learned in Phase 1 and the web development skills you learned in Phase 2. Be verbose, the more insight the mentor has into your self-assessment, the better they will be to help you grow.", "roadmap_section_id"=>191, "roadmap_section_ref"=>"29f226d6-f68d-4ead-9b62-dc1d46bb69ad|0", "default_student_access"=>"unlocked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"05a33689-1912-4307-bc31-16281fb18317|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2264", "assessment"=>nil}]}, {"id"=>202, "roadmap_id"=>38, "name"=>"Career Preparation", "time_estimate"=>"2 weeks", "point_ratio"=>0.0, "description"=>"Complete this project to begin searching for work opportunities", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"unlocked", "ref"=>"c454fa1c-f195-467b-b824-a7f61ad13be9|0", "section_type"=>"foundation", "checkpoints"=>[{"id"=>2270, "name"=>"Career Marketing Documents", "summary"=>"Showcase your skills on LinkedIn, GitHub, and your résumé", "body"=>"<!-- { ids:[1925,1933,2270], name:\"Career Marketing Documents\", summary:\"Showcase your skills on LinkedIn, GitHub, and your résumé\" } -->\n\n_This checkpoint should be started once you are 75% of the way through your track. This and the following checkpoints should be worked on concurrently with your final project. It's important to start on your LinkedIn profile and resume early so that you can have plenty of time to review them with your mentor._\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Leverage their LinkedIn profile, resume, and GitHub profile when applying for jobs.\n\n## Career Marketing Documents\n\nEveryone looking for a job in the technology industry should have:\n\n- a LinkedIn profile\n- a résumé\n- a polished GitHub profile\n\nYou should also create a portfolio site (see the Portfolio project, which is located in a separate section from Career Prep).\n\nIn this checkpoint, we'll show you how to build a great LinkedIn profile, leverage it for your résumé, and showcase your GitHub projects.\n\n- [LinkedIn](#linkedin)\n- [Résumé](#r-sum-)\n- [GitHub](#github)\n- [Assignment](#assignment)\n\n## LinkedIn\n\nWhy is LinkedIn so important?\n\n- LinkedIn has hundreds of millions of users\n- It's how most professional networking in the technology industry works\n- It's a relatively low-effort way to get noticed.\n- It's easy to search.\n- It's easy to update.\n\nThinking and writing about your experience will be a lot of work. Don't try to do it all in one sitting.\n\n### General Questions\n\n- [What should my LinkedIn profile accomplish?](#what-should-my-linkedin-profile-accomplish-)\n- [What *shouldn't* my LinkedIn profile accomplish?](#what-shouldn-t-my-linkedin-profile-accomplish-)\n- [Should I include caveats or qualifiers?](#should-i-include-caveats-or-qualifiers-)\n- [What if the caveats/qualifications are important?](#what-if-the-caveats-qualifications-are-important-)\n- [How closely should my résumé mirror my LinkedIn profile?](#how-closely-should-my-r-sum-mirror-my-linkedin-profile-)\n- [How can I find remote work on LinkedIn?](#how-can-i-find-remote-work-on-linkedin-)\n\n### Work Experience\n\n- [Should I include informal work experience?](#should-i-include-informal-work-experience-)\n- [Should I include unrelated work experience?](#should-i-include-unrelated-work-experience-)\n- [Should I tailor my profile to different jobs?](#should-i-tailor-my-profile-to-different-jobs-)\n\n### Designing Your Profile\n\n- [What about extracurriculars and languages?](#what-about-extracurriculars-and-languages-)\n- [How should I order the sections?](#how-should-i-order-the-sections-)\n- [What should I include in each section?](#what-should-i-include-in-each-section-)\n\t- [Headline](#headline)\n\t- [Summary](#summary)\n\t- [Projects](#projects)\n\t- [Experience](#experience)\n\t- [Skills](#skills)\n\t- [Education](#education)\n\n### What should my LinkedIn profile accomplish?\n\nJust as you would use Yelp, Rotten Tomatoes, or IMDB to review a restaurant, movie, or celebrity, so will potential employers use LinkedIn to review your professional accomplishments. When someone considers you professionally, they're likely to review your LinkedIn profile.\n\nThe #1 goal of your LinkedIn profile is to entice recruiters and hiring managers to contact you. To this end, it should only show your positive attributes.\n\n### What *shouldn't* my LinkedIn profile accomplish?\n\nYour profile's job is to encourage contact — not to get you the job. It should be simple, brief, and easy to skim. Every word should sell your ability. If you find a word that doesn't, delete it.\n\nAs a consequence of this brevity, your LinkedIn profile will not include every detail. See *Should I include caveats or qualifiers?* for some examples of what to leave out.\n\n### Should I include caveats or qualifiers?\n\nNo. For example, imagine a team of ten engineers built a new product over three years, and you helped them for six months. You should still list accomplishments briefly, like:\n\n> - Created a full-stack web application using Ruby on Rails & AngularJS\n> - Scaled application to thousands of users using database sharding\n\nLeave out caveats and qualifiers. Even if they make the statement more accurate, they complicate things and make your profile hard to read. So avoid:\n\n> - Worked as part of a a team of 10 people during a 6-month internship to create a full-stack application using Rails 4 and Angular\n> - Joined a small team of engineers focused on performance and implemented database sharding after the lead architect suggested it\n\nYou must be completely honest. That said, it is very easy to make your bullet points *too* accurate. If your bullet points are more than about 10 words, they probably have too much detail.\n\n### What if the caveats/qualifications are important?\n\nYou can expand on them in an interview. Remember, the goal of your LinkedIn profile is to encourage contact with interviewers, not get you a job.\n\n### How closely should my résumé mirror my LinkedIn profile?\n\nIt’s okay to have differences between the two, but they shouldn't be so different that they confuse hiring managers or employers.\n\n### How can I find remote work on LinkedIn?\n\nYour profile should show that you're an expert at remote work. Add recommendations for each of the remote experiences you have, and ask those writing these recommendations to highlight your ability to work remotely.\n\n### Should I include informal work experience?\n\nDefinitely. Make sure *any* work experience is represented. Work experience is the most valuable thing you can add to your profile.\n\nInclude projects for family members, friends, and colleagues that required the skills you learned at Bloc. Also include freelance work.\n\n### Should I include unrelated work experience?\n\nYes, but minimize detail. For example, if you worked as a dentist's office for 18 months, include that in your work history. Here's why:\n\n- Employers want to know your general professional experience.\n- You can demonstrate [transferable skills](http://www.ceswoodstock.org/job_search/resumeskillstransf.shtml) like project management, communication, data analysis, etc.\n- Your experience in a specific [vertical market](http://www.investopedia.com/terms/v/verticalmarket.asp) (like dentistry) might be valuable to certain employers (like a medical billing software company).\n\nThat said, unrelated work is not the most important part of your profile, so only list 1–2 bullet points about these experiences.\n\n### Should I tailor my profile to different jobs?\n\nCraft your profile to fit the job you want most. Focus on that. Don’t adjust your profile for one-off positions.\n\n### What about extracurriculars and languages?\n\nInclude extracurriculars and languages at the bottom and after all of the career-related sections.\n\nFun tidbits like being fluent in Arabic or Spanish, having 9 years of laser dentistry experience, or being involved in philanthropy makes you more human and paints a better picture of who you are.\n\n### How should I order the sections?\n\nLinkedIn lets you customize your profile by placing your sections in any order.\n\nIf, like most students, you're new to the field, use this order:\n\n- Headline\n- Summary\n- Projects\n- Experience\n- Skills\n- Education\n\nIf you have some directly related work experience, move \"Experience\" above \"Projects\":\n\n<center>![](https://bloc-global-assets.s3.amazonaws.com/images-job-prep/some-work-experience.jpg)</center>\n\n### What should I include in each section?\n\n<center>![](https://bloc-global-assets.s3.amazonaws.com/images-job-prep/ideal-linkedin-profile.jpg)</center>\n\nHere's a checklist for each section.\n\n> Review [Hannah McExample's LinkedIn profile](https://www.linkedin.com/in/hannah-mcexample-43b249114) to see these tips in action.\n\n#### Headline\n\n- Include a professional-looking, well-lit photograph. It should be high resolution and you should be the only person in it.\n- Change your subtitle to \"Software Engineer,\" \"UX Designer,\" or whichever fits the position you want.\n- Remove Bloc from the \"Education\" line to keep employers focused on your experience. Show your most advanced degree here instead.\n- Avoid job titles like \"ninja,\" \"rockstar,\" \"wizard,\"s etc.\n- [Customize your LinkedIn URL](https://help.linkedin.com/app/answers/detail/a_id/87/~/customizing-your-public-profile-url), ideally to use your full name.\n\n#### Summary\n\n- Write two to four sentences summarizing your knowledge and experience.\n- List areas of expertise.\n- Include your desired position.\n- Recruiters search this text, so include buzzwords like \"JavaScript\" and \"Rails.\"\n- Pictures say more than words. Add at least two screenshots of your best project(s).\n- Make it clear what you want and what you can offer.\n- Remove red flags, qualifications, caveats, and anything confusing.\n\n#### Projects\n\n> Reminder: if you have related work experience, put \"Experience\" before \"Projects.\"\n\n- Briefly explain each project, focusing on the skills and technologies you used to make it.\n- Include your Bloc projects.\n- List the most difficult projects first.\n\n  > This generally means projects are in reverse-chronological order, assuming you worked on simpler projects earlier.\n\n- Link to the GitHub repository for each project.\n\n#### Experience\n\n- List all work experience.\n- For unrelated work, minimize detail.\n- For related work…\n\t- Include websites you made for a friend.\n\t- Include any freelance work you've done.\n\t- List all technologies used.\n\n- Be honest. Be succinct. Don't over-explain.\n\n#### Skills\n\n- Add all related skills you have.\n- Sort the skills so those you want employers to focus on are at the top.\n- Ask mentors and other Bloc students to endorse the skills you’re most proud of.\n\n> Add unrelated skills if they're strengths of yours, but minimize them. Make sure nothing looks weird or irrelevant. For example, having 43 endorsements for “laser dentistry” when you’re looking for web developer roles could be confusing.\n\n#### Education\n\n- Include your Bloc education.\n- If you have a degree, put it above your Bloc education.\n- Don't use the word “bootcamp” in your description for Bloc. (This can distract employers.)\n\n----\n\n## Résumé\n\nYour résumé is a brief (usually one-page) document that highlights your skills, education, and accomplishments. Its goal is to convince the reader that you're worthy of an interview. Most people who review résumés are tasked with picking a small number from a pile, so consider that your résumé might only get read for 5–10 seconds.\n\nTo that end, your résumé should be professional and more concise than your LinkedIn profile. You can write your résumé using a word processor. There are also sites like [Creddle](http://creddle.io/) and [Represent](https://represent.io/) that will render a document using a professionally-designed theme.\n\nBecause most people have seen and written résumés, we're assuming you know the basics, but we've provided a few important résumé guidelines below. As you read them, compare these two examples:\n\n- [Bowen Yang](https://drive.google.com/file/d/0B3pzxInE0r63NHRDSE8zMlQ2RWM)\n- [Adam Ellsworth](https://drive.google.com/file/d/0B3pzxInE0r63c1Iyd0VCOGJQbEE/view)\n\n### Length\n\nIf you have fewer than 10 years of experience, your résumé should be less than one page.\n\nIf you have more, your résumé should usually be less than two pages.\n\n### Writing Style\n\nRemove unnecessary words. Use the shortest version of a word that conveys your idea. For example, say \"used\" instead of \"utilized,\" or \"I want to code\" instead of \"I'm looking for a job where I can code.\"\n\nAlthough brevity is important, don't sacrifice specificity. Generic phrases like can get your résumé discarded for being too vague. Be specific about the technologies involved.\n\n| Too Vague                    | Specific Enough                                                                        |   |\n|------------------------------|----------------------------------------------------------------------------------------|---|\n| Designed mobile UI           | ­ Designed responsive and engaging mobile UI using Angular, Ionic, and CSS animations­ |   |\n| Added continuous integration | Introduced continuous integration and deployment using Docker, TravisCI and AWS­       |   |\n| Added database               | Defined relational schemas using PostgreSQL to decrease layered query time             |   |\n| Managed tasks                | Set product vision and assigned tasks to a team of 4 engineers using Git issues        |   |\n\nA bullet point should be roughly ten words. Too short, and you might be too vague. Too long, and you might be too specific.\n\n### Summary\n\nInclude a one-line summary at the top with important phrases bolded. Describe what you're good at and what you want to do.\n\n### Education\n\nIn your education section, make sure Bloc follows any degrees you have.\n\n### Experience\n\nFocus on your next job, not less-relevant jobs.\n\nIf you referenced a job in your summary, include it in “experience\".\n\nFor each job, focus on accomplishments instead of responsibilities. If you can quantify an accomplishment, do so.\n\nAsk your mentor to review your skills they meet industry minimums.\n\n----\n\n## GitHub\n\nEvery Bloc student creates a GitHub account, so you're way ahead on this one. Technically-savvy recruiters use public GitHub profiles to determine the breadth and quality of a developer's work.\n\n### Avatar\n\nAn eye-catching GitHub profile begins with an appropriate avatar. If you fail to provide one, GitHub generates one for you, like so:\n\n<center>![](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/job-prep-virtual-resume/bad-avatar.png)</center>\n\nThe default avatar gives the impression that its owner does not treat their profile seriously. If you don't have a professional headshot, use an appropriate head & shoulders photograph:\n\n<center>[![](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/job-prep-virtual-resume/good-avatar.png)](https://github.com/madebymunsters)</center>\n\n### Public Contributions\n\nYour histogram of public contributions can help showcase your work ethic. In this example profile, the histogram is sparse and may reflect poorly on its owner:\n\n<center>![](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/job-prep-virtual-resume/bad-histogram.png)</center>\n\nA dense histogram is a flashy quantitative benchmark that does *not* reflect the quality of your work. However, it endows your profile with superiority over those who lack it:\n\n<center>![](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/job-prep-virtual-resume/good-histogram.png)</center>\n\nHere are several ways to enhance the appearance of your histogram:\n\n- Place all of your projects on GitHub.\n- Make sure that every repository you own is *Public*.\n- Contribute frequently to open-source projects as well as your own.\n\n### README Files\n\nProvide a high-quality README document with each of your projects. A README should include, at minimum:\n\n- a synopsis of your project\n- screenshots\n- setup / installation instructions\n\nThe number of projects you have will certainly impress recruiters, but if readers discover empty READMEs within, they will replace their feelings of respect with feelings of uncertainty. Try to make your README polished and descriptive:\n\n<center>![](https://bloc-global-assets.s3.amazonaws.com/images-job-prep/swiftris-readme.gif)</center>\n\nFor README examples, refer to [Bloc's Swiftris Tutorial](https://github.com/Bloc/swiftris-checkpoints) and [Bloc's Swiftris Source Code](https://github.com/Bloc/swiftris).\n\nRemember, GitHub doesn't offer much in the way of curation, so there's no way to control which repositories potential employers might look at. Therefore, make all of your repositories look great.", "assignment"=>"- Create or update your LinkedIn profile using the guidelines in this checkpoint.\n- Create or update your résumé.\n- Polish your GitHub profile.\n- Put links to your LinkedIn profile, résumé and GitHub profile in your submission for this checkpoint.\n- The Outcomes Team will be able to help you more effectively if you provide us feedback. In your assignment submission, note one thing you like about this checkpoint, and one thing you wish was different.", "roadmap_section_id"=>202, "roadmap_section_ref"=>"c454fa1c-f195-467b-b824-a7f61ad13be9|0", "default_student_access"=>"unlocked", "active_index"=>1, "checkpoint_type"=>"career_prep", "position"=>1, "points"=>1, "ref"=>"4ddc85c3-76df-4cd1-ab9c-5d3b29971054|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2270", "assessment"=>nil}, {"id"=>2271, "name"=>"Start Your Search", "summary"=>"Prepare your cover letter and start reaching out to employers", "body"=>"<!-- { ids:[1926,1934,2271], name:\"Start Your Search\", summary:\"Prepare your cover letter and start reaching out to employers\" } -->\n\n_This checkpoint should be started once you are 75% of the way through your track. This and the following checkpoints should be worked on concurrently with your final project. Although it is ok to wait until you are 90% of the way through your track to start applying for jobs, setting a goal of when to start applying is very important. The most common frustration that many students have is that they don't apply for any jobs - don't let this happen to you!_\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Understand the daily habits of a successful job hunt.\n- Have a date that they'll start applying to jobs.\n- Be able to write a cover letter and understand its purpose.\n\n## The Search\n\n> “You pass up 100% of the jobs you don’t apply for.”\n>\n> – Wayne Jobgetzky\n\nThe wait is over, it’s time to put your research to good use. Beginning with this checkpoint, you will heed Wayne Jobgetzky’s advice by applying for work every day. Remember, this is why you've pushed yourself so hard to learn a new trade. This process will change the course of your life, and for the better.\n\n- [Your First Application](#your-first-application)\n- [Reach Out](#reach-out)\n  - [Request an Introduction](#request-an-introduction)\n  - [Write a Cover Letter](#write-a-cover-letter)\n  - [Samples](#samples)\n- [Where to Find Jobs](#where-to-find-jobs)\n- [Track Your Progress](#track-your-progress)\n  - [Track E-mails](#track-e-mails)\n- [Adjust Your Pace](#adjust-your-pace)\n- [Assignment](#assignment)\n\n<a name=\"your-first-application\"></a>\n## Your First Application\n\nAs with any new skill, performing it the first time tends to be the most challenging. But after you complete the first one, each application thereafter consumes less time and triggers less stress.\n\nFor your first application, we suggest you aim for the stars. Choose a dream role or a dream company, and submit your application there. This is like applying for college, you have your dream schools and you should apply to them anyway – the results can surprise you.\n\n<a name=\"reach-out\"></a>\n## Reach Out\n\nMost organizations have a ready-made submission process that requires a résumé and little else. When you submit to them, the server plops your résumé onto a big virtual pile and from there, there’s no telling where it will end up. We recommend instead that you find a decision-maker at this company, and contact them directly.\n\n<a name=\"request-an-introduction\"></a>\n### Request an Introduction\n\nA warm introduction from a peer serves as the best introduction. If a peer introduces you, they add credibility to your application. If your peer likes you a lot, they will highlight your qualities to your prospective contact, thus giving you an even bigger boost.\n\nLinkedIn shows you the connections you share with anyone on the site. These connections are perfect for making introduction requests. Ideally, the point person is someone you’ve worked with who can speak to the quality of your work and your character.\n\nMore importantly, they should hold sway over the person you wish to meet. Verify this beforehand by determining the nature of the relationship between your peer and your target contact. Let your peer know what your goal is and how they can make all the difference by introducing you. Most people will say yes, but if you’re evil and bent on world domination, they will probably say no.\n\nIf you can't find a valuable mutual contact, then introduce yourself through e-mail.\n\n<a name=\"write-a-cover-letter\"></a>\n### Write a Cover Letter\n\nOne way to apply directly through a person is by sending a cold outreach e-mail. Let this e-mail serve as a cover letter. It must grab attention and convince people that among the massive pile of résumés, yours is worth reading. A great cover letter satisfies the following criteria: it’s unique, it showcases you, and it’s brief.\n\n---\n\nIt’s tempting to change the recipient’s name on your cover letter, hit send, and then take a nap. But if you received a Christmas card from your lifelong best friend with nothing but, “Happy Holidays!” written on it, you would feel unappreciated. Recruiters want to feel special, too. They want to believe you wrote the cover letter specifically for them, which you did, because you _will_.\n\nThe cover letter must highlight one to three past experiences that make you an outstanding candidate for the position. This requires research to discover the company’s needs. With that information, you can tailor your cover letter to address their needs with your background. Doing so proves that you’re good for the job, that you’ve done your homework, and that you care.\n\nWhen applying via email, the cover letter should be the body of the email. The purpose of the email body is to make sure that they look at your resume or LinkedIn profile which is the same purpose as your cover letter. As a hiring manager, if the email body convinced me to read the resume, why would I read a cover letter with the same purpose? A common mistake is to attach the cover letter as a second document; don't do this!\n\nLastly, a great cover letter is brief. Everyone’s time is precious, and with hundreds of applications to consider, you don’t want to give the recruiter any reason to shuffle your application to the bottom. Use [the economy of words](http://www.maryrosemaguire.com/2013/09/24/want-master-economy-words/) and limit your letter to the two paragraphs featuring your most convincing attributes.\n\n<a name=\"samples\"></a>\n### Samples\n\nRead these fictional cover letters and pay special attention to how each applicant uses their traits and background to best serve the organization hiring them (or doesn’t).\n\n| Sample                                                                                         | Type       | Pros                                                                                     | Cons                                                                                                                                                                                                                           |\n|:-----------------------------------------------------------------------------------------------|:-----------|:-----------------------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Andy Dwyer](https://docs.google.com/document/d/1bjB_k1vsss56IOFF3PMYBBmLtCzLJ5botw1xo-idU-s/) | **Bad**    | - None                                                                                   | - It’s long<br>- The applicant focuses on himself and his own needs<br>- Andy never mentions how his experience makes him an ideal candidate<br>- The candidate did not do any research about the position or the organization |\n| [Elle Woods](https://docs.google.com/document/d/1Sbx6iiPAotG4lPAfrffk3RbQylY3mI36-P822pDIIFU/) | **Better** | - Short<br>- Highlights the candidates positive traits<br>- It flatters the recipient    | - Does not associate traits to the employer’s needs<br>- Flattery sounds generic and betrays the letter’s lack of uniqueness                                                                                                   |\n| [Peter Parker](https://drive.google.com/open?id=1-nUFiG54pLntOopqorLVBTrEcaT2Pgdy-i-47T_iX_c)  | **Best**   | - Short<br>- Focuses on the employer<br>- Uses past experiences to promote the candidate | - None!                                                                                                                                                                                                                        |\n<a name=\"where-to-find-jobs\"></a>\n## Where to Find Jobs\n\nWe've created a [Job Hunting Sites resource](https://www.bloc.io/resources/job-hunting-sites) to help distill the best sites to use for finding a job.\n\n<a name=\"track-your-progress\"></a>\n## Track Your Progress\n\nA spreadsheet is a great tool to keep track of your job hunt progress. [Copy this one](https://docs.google.com/spreadsheets/d/12WvdOVOyebEY4fyMSrp1ypunE_W8quml9h6KENeVceQ/copy) into your Google Drive and share it with your mentor.\n\nAt each point of contact, whether it’s an introduction, e-mail, phone call, or interview, update the spreadsheet. Record communication dates and look to your spreadsheet every day; check whether to send a follow-up e-mail or phone call.\n\nThe goal is to keep you motivated and on top of your schedule. If you find the spreadsheet does not serve that purpose, consider another project management tool instead.\n\n>Instead of using a spreadsheet directly, you can create a [Google Form](https://www.google.com/forms/about/), and submit progress updates through it. Share the linked spreadsheet with your mentor.\n\n<a name=\"track-e-mails\"></a>\n### Track E-mails\n\nYou can use a free service like [Bananatag](https://www.bananatag.com/) to track the efficacy of your cover letters and cold outreach e-mails. Bananatag allows you to create templates, and you can send them in three clicks using Bananatag’s Chrome extension.\n\nThey also report metrics such as how often and when your recipients open your e-mails, and whether they click any links you include. This data can give you a better idea of when to follow-up, or whether to move on to another prospect.\n\n<a name=\"adjust-your-pace\"></a>\n## Adjust Your Pace\n\nThe last, and most important thing for you to do is to adjust your pace. We **highly** recommend that you drop your current pace to one appointment per week, if possible. This extends the length of your program, and gives you more breathing room to focus on career efforts.\n\nAs soon as you lower your commitment to the material, increase your commitment to your search. Ask your mentor to help you fill in the blanks in the following statement:\n\n<center><p style=\"text-align:justify\">**“Beginning on {MM/DD}, I commit to apply to {X} companies per day and reach out to {Y} people per day.”**</p></center>\n\nOnce you commit to this, **stick with it**. Apply every day and reach out every day. We cannot stress this enough.\n\n> We recommend applying for jobs and slowing your Bloc program pace when you have 10% of your program remaining.\n\n<a name=\"what-response-to-expect\"></a>\n## What Response to Expect\n\nIt is frustrating to apply for jobs without knowing how many you should apply to and when you should expect a response. Our research has shown that 10% of job applications turn into a phone screen of some sort. Of these phone screens, 10-20% turn into offers. This means that you should expect to apply for 50-100 jobs before you receive an offer!\n\n<a name=\"assignment\"></a>", "assignment"=>"- If you're more than 90% through your program time, adjust your program’s pace to one appointment per week. Contact [help@bloc.io](mailto:help@bloc.io) to request the change.\n- If you haven't done so, create and update your profile on at least five of the [career-finding services](#where-to-find-jobs) we listed.\n- Add yourself to our [Job-Seeking Student List](https://bloc.typeform.com/to/t7cDRZ).\n- Write a [cover letter](#write-a-cover-letter) for a job listing you find interesting.\n  - Submit the letter to your mentor for review.\n  - Re-write the cover letter to get more practice.\n- [Copy this spreadsheet](https://docs.google.com/spreadsheets/d/12WvdOVOyebEY4fyMSrp1ypunE_W8quml9h6KENeVceQ/copy) to track your progress.\n  - Share the spreadsheet with your mentor.\n- The Outcomes Team will be able to help you more effectively if you provide us feedback. In your assignment submission, note one thing you like about this checkpoint, and one thing you wish was different.", "roadmap_section_id"=>202, "roadmap_section_ref"=>"c454fa1c-f195-467b-b824-a7f61ad13be9|0", "default_student_access"=>"unlocked", "active_index"=>1, "checkpoint_type"=>"career_prep", "position"=>1, "points"=>1, "ref"=>"e8245a3f-2af1-4f47-9c03-da5a89f8d8d2|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2271", "assessment"=>nil}, {"id"=>2272, "name"=>"Interview Skills: Discussing Technical Topics", "summary"=>"How to shine in a technical interview", "body"=>"<!-- { ids:[1927,1935,2272], name:\"Interview Skills: Discussing Technical Topics\", summary:\"How to shine in a technical interview\" } -->\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Understand the different types of technical questions that are common in phone screens and technical interviews.\n- Understand the basics of what a successful response is for these question types.\n\n## Technical Interviews\n\nDuring your application process you’re likely to have at least one *technical interview*. You can encounter technical questions during any phase of your application. We’ve known interviewers to ask students technical questions during phone screens and in-person interviews at any round.\n\nUnlike code challenges, these questions don’t test your ability to implement a specific algorithm or feature. Instead, employers ask them to assess your familiarity with different technologies.\n\n- [Types of Interview Questions](#types-of-interview-questions)\n  - [Technical Questions](#technical-questions)\n  - [Situational Questions](#situational-questions)\n  - [Hypothetical Questions](#hypothetical-questions)\n- [Common Technical Interview Questions](#common-technical-interview-questions)\n- [Advice](#advice)\n- [Assignment](#assignment)\n\n## Types of Interview Questions\n\nIn all job interviews, even those unrelated to software, there are three types of interview questions:\n\n1. **Technical** questions which have an objectively correct answer\n2. **Situational** questions about your past experience\n3. **Hypothetical** questions about how you would handle a specific situation\n\nFor each interview question, you should identify the type, and respond with the appropriate technique.\n\n### Technical Questions\n\nA technical interview question has a correct answer.\n\nOne example is, “What are the differences between an array and a hash?”\n\n- If you know the answer, respond with it.\n- If you’re not sure…\n\t- …and you know a _part_ of the answer, be honest about what you know, and ask for a hint.\n\n\t  > “I know an array is an ordered collection of elements, but I forget what a hash is. Can you remind me and I’ll highlight the differences?”\n\n\t- …but the concepts sound familiar, try asking a clarifying question; the interviewer’s response may help you remember.\n\n\t  > “Which arrays and hashes do you mean?”\n\n\t- …and you’re drawing a complete blank, be honest; don’t guess.\n\n\t  > “I don’t remember what those are. Could you ask the question another way or give me a hint in the right direction?”\n\nThe worst thing you can do is say, “I don’t know,” and have the interviewer move on to the next question. If that happens, you’ll get no credit. Instead, try to collaborate with the interviewer on an answer. Some interviewers won’t go for it, but most will help you.\n\n> Don’t confuse the “technical” interview question (has a correct answer) with “technical” (related to technology) subject matter. For example, imagine applying for a poetry reviewing job. “What is a limerick?” is a “technical” interview question, but has nothing to do with technology.\n\n#### Technical Memorization\n\nSome interviewers ask technical questions that strictly test your memory. For example, “name six sorting algorithms.” It feels uncomfortable to ask for a hint: you either know six algorithms or you don’t. If you don’t, that’s okay! Do your best to answer the question and if you can’t remember the name of something, try describing it to get some credit.\n\nWhen describing something, use phrasing like this:\n\n>\"I forget the name, but you iterate through a list over and over, swapping items that are out of order, until you can do a full iteration with no swaps.\"\n\nIf you don't have an answer, explain how you would find it. For example:\n\n>\"I can't think of any sorting algorithms off the top of my head, but here's how I'd research and select a sorting algorithm given a specific problem...\"\n\n### Situational Questions\n\nA situational interview question asks about something you’ve accomplished in the past. One example is, “Tell me about an interesting bug you fixed.” These questions are popular: your past behavior is the best predictor of your future behavior, so employers want to know a lot about your past behavior.\n\nYou should answer situational questions using the SARI interview technique:\n\n| Initial | Purpose                                                                     | Example                                                                                                                                                                                                                                                                                                                                                     |\n|---------|-----------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| S       | The **situation** you’re describing.                                        | “We got a bug report that one user couldn’t log in, even though they were entering their password correctly.”                                                                                                                                                                                                                                               |\n| A       | The actual **action** you took.                                             | “After using pry to debug the issue, I determined that ‘devise’, the Ruby gem we use for user authentication, was treating the email addresses as case-sensitive, and the user had entered an uppercase letter during registration. I researched the devise documentation, and configured the case_insensitive_keys option to remove the case sensitivity.” |\n| R       | The **result** of your work.                                                | “As a result, the user can now login, and the bug is resolved.”                                                                                                                                                                                                                                                                                             |\n| I       | An **interesting fact** about the situation, usually something you learned. | “I learned that it’s worth reading the documentation of related third-party libraries while fixing bugs. It ended up saving us lots of time compared to implementing a solution ourself.”                                                                                                                                                                   |\n\nTo use the SARI technique, remember how you handled a situation, and say one or two sentences for each letter. This means your resulting answer should be four to eight sentences total. If you don’t use this technique, _you’ll be SARI_.\n\nIf you can’t remember a situation, you should segue to a similar one:\n\n> “I don’t have a great example of fixing a bug, but let me tell you about a challenge I faced integrating a new library.”\n\nIn your assignment, you’ll come up with a handful of your best accomplishments, and write and practice SARI-formatted answers ahead of time.\n\n### Hypothetical Questions\n\nA hypothetical interview question asks how you *would* handle a given situation, which you may experience if hired. One example is, “It’s tough to join our senior-heavy engineering team as a new developer. How would you handle the team dynamic?”\n\nIn the best-case scenario, you’ve actually done what they’re asking about before. In this case, you should segue the question to situational, and answer using the SARI technique:\n\n> “I’ve actually experienced something similar when pair-programming with my mentor who’s a senior software engineer.”\n\nIf you can’t do that, you must answer by describing what you *would* do. This question type is broad, and employers are often hoping for a specific answer. The good news is that for hypothetical questions, it’s natural for you to ask for clarification. For example:\n\n> “So I can best answer your question, can you tell me about the current makeup and experience of your team?”\n\nAsking clarifying questions in response to a hypothetical question is a good strategy for two reasons: first, it can give you more insight into what the interviewer is looking for, and second, it can give you more time to prepare a response.\n\n## Common Technical Interview Questions\n\nThese questions ask you to explain technical concepts. Here are common examples:\n\n**Technical**\n\n- What does it mean when we describe a program as *object-oriented*?\n- What’s your favorite programming language and why?\n- When would you use a recursive vs. iterative algorithm?\n- Which Ruby gems are you familiar with?\n\n**Situational**\n\n- Tell me about a recent project of yours.\n- Tell me about a recent technical challenge you’ve overcome.\n- Tell me about a time you disagreed with a developer or engineer on a code decision.\n- Tell me about a feature you’re proud of and why.\n\n**Hypothetical**\n\n- You’re assigned a bug: a certain part of a webpage doesn’t appear in Safari. How would you resolve it?\n- One page on your site takes a long time to load. How would you improve it?\n- Our website heavily relies on a library or framework you’ve never seen. How would you learn it?\n- The designs for a new page include an animation that you have no idea how to generate. What do you do?\n\n## Advice\n\nEvery question about technology is an attempt to learn more about your technological experience. No matter how you respond, ensure that the interviewer learns more about the technologies you’re familiar with.", "assignment"=>"- Write a list of five programming technologies or tools you’re comfortable discussing.\n- Come up with four technological accomplishments you’re proud of.\n  - Write SARI-style descriptions for these accomplishments.\n  - Record yourself presenting each accomplishment using the SARI technique.\n  - Send each video to your mentor for review.\n- Record yourself answering, “You’re assigned a bug: a certain part of a webpage doesn’t appear in Safari. How would you resolve it?”\n  - Do not prepare the answer in advance.\n  - Answer the question in one take – no retries.\n  - Send the video to your mentor for review.\n- The Outcomes Team will be able to help you more effectively if you provide us feedback. In your assignment submission, note one thing you like about this checkpoint, and one thing you wish was different.", "roadmap_section_id"=>202, "roadmap_section_ref"=>"c454fa1c-f195-467b-b824-a7f61ad13be9|0", "default_student_access"=>"unlocked", "active_index"=>1, "checkpoint_type"=>"career_prep", "position"=>1, "points"=>1, "ref"=>"c3b0514a-8925-44e8-8024-f2847f5763d1|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2272", "assessment"=>nil}, {"id"=>2273, "name"=>"Interview Skills: Coding on a Whiteboard", "summary"=>"Tips and tricks to code like a master when all you have is a marker", "body"=>"<!-- { ids:[1928,1936,2273], name:\"Interview Skills: Coding on a Whiteboard\", summary:\"Tips and tricks to code like a master when all you have is a marker\" } -->\n> “According to research, developers believe death is less frightening than ‘coding at a whiteboard.’”\n>\n> – Reza Earcher\n\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Understand what whiteboard questions are and how to successfully answer them.\n\n## Whiteboard Interviews\n\nArguably the most stressful aspect of the software interview process happens at the whiteboard. They liked your résumé, they liked your experience, and they liked _you_, but now they want to see you work. The quickest and dirtiest way for them to test your aptitude is via coding challenge.\n\nThis method is archaic and favors applicants with superior memories who fare well under pressure. You will encounter it throughout your career so we will prepare you for it.\n\n- [A 5-Step Process](#a-5-step-process)\n  - [Step 1: Resolving Ambiguity](#resolve-ambiguity)\n  - [Step 2: Design an Algorithm](#design-an-algorithm)\n  - [Step 3: Write pseudo code](#write-pseudo-code)\n  - [Step 4: Code the Solution](#code-the-solution)\n  - [Step 5: Test Your Code](#test-your-code)\n- [The Refactor](#the-refactor)\n- [Programming Reinforcement](#programming-reinforcement)\n- [Assignment](#assignment)\n\n<a name=\"a-5-step-process\"></a>\n## A 5-Step Process\n\nThese challenges come in the form of programmatic riddles. For example, “given an array of 10,000 numbers with possible duplicates, how would you find those duplicates?” If you consider yourself an average human, when first asked, this question would elevate your heart rate and make you nervous. Follow this five-step process to keep your head cool.\n\nWe'll continue to refer to this sample question:\n\n> “Given an array of 10,000 numbers with possible duplicates, how would you find those duplicates?”\n\n<a name=\"resolve-ambiguity\"></a>\n### Step 1: Resolve Ambiguity\n\nBefore you do anything, clear up assumptions with your interviewer. Ask questions to help narrow the scope of the problem. The benefits are threefold. First, by removing any uncertainty, you avoid wasting time solving the wrong problem. Second, during this Q&A, the interviewer can inadvertently reveal critical hints. And third, your questions reveal that you are thorough, you pay attention to detail, and can show off your technical knowledge.\n\nFor example, ask questions like these:\n\n> “Can the array have zero duplicates?”\n>\n> “Do duplicates come in pairs (7, 7) or an arbitrary number of copies (7, 7, 7, 7, ...)?”\n>\n> “Are numbers stored as integers or floating point values?”\n>\n> “Can I manipulate the array?”\n>\n> “Are the numbers ordered? And if so, how?”\n>\n> “Is this a primitive array or a Ruby array?”\n\nAsk every question you need to clarify the problem. All whiteboard questions fall under that category of “technical” so the same strategies apply. When you’re satisfied, move to [Step 2](#design-an-algorithm).\n\n<center><h4>Step 1 Recap</h4></center>\n\n1. Ask clarifying questions.\n\n<a name=\"design-an-algorithm\"></a>\n### Step 2: Design an Algorithm\n\nSpend up to three minutes creating an algorithm. Use the whiteboard to help you visualize the data. During this portion, talk through your thinking process. This reveals how you think and process information to your interviewer. More importantly, this is yet *another* opportunity for them to drop a hint.\n\nIf you cannot come up with a solution, feel free to ask for a hint. Asking will dock you a few points, but not nearly as many as giving up. **Don't give up**. Here's an example of an out-loud thought process solving this problem:\n\n> “If the array isn’t sorted, I can order it first and then loop over the whole thing looking for two consecutive numbers…\n>\n> Or I can create a hash, and insert each number into the hash. When I find an existing key, I can mark that number as a duplicate…\n>\n> I think that’s the best solution.”\n\nGreat! You’ve got a solution. If you needed a hint to get there, that’s okay: half the battle is coding it well. If you still don’t have a solution at this point, let the reviewer know (honesty pays), and continue with the next step.\n\n<center><h4>Step 2 Recap</h4></center>\n\n1. Use three minutes to create an algorithm.\n2. Think out loud.\n3. Ask for a hint if you’re stuck.\n4. If you’ve got nothing, inform your interviewer but move on to the next step.\n\n<a name=\"write-pseudo-code\"></a>\n### Step 3: Write pseudo code\n\nIf you have an algorithm in mind, begin to write [pseudo code](http://users.csc.calpoly.edu/~jdalbey/SWE/pdl_std.html) that implements it; leaving plenty of space on the whiteboard for your actual solution. We suggest pseudo code because it’s a clean way to move the algorithm from your mind to the whiteboard. Using a real language can bog you down with syntactical details and derail your thought process.\n\nInform the interviewer that this is what you intend to do, because they may dock you points for not using a “real” language. Tell them that you will write out your full solution after you complete the pseudo code.\n\nOnce again, think out loud as you work. There’s a chance your thoughts will not translate directly to the whiteboard. If your interviewer is nice, they will point out any discrepancies between what you’re saying, and what you’re *writing*.\n\n> If you reach this point *without* an algorithm in mind, go back to basic control flow. Continue to think out loud and begin by writing something that resembles an answer: loop over the array, or sort it, or another operation that make sense given the input type. Solutions can reveal themselves.\n\n<center><h4>Step 3 Recap</h4></center>\n\n1. Inform interviewer of your intention to use pseudo code first.\n2. Write out the pseudo code and leave space for the final answer.\n3. Think out loud as you write.\n4. If you’re stuck, write *something* and a solution may reveal itself.\n\n<a name=\"code-the-solution\"></a>\n### Step 4: Code the Solution\n\nBefore you code the first line, ask the interviewer if they require accurate syntax. This varies by organization, so it’s not an *obvious* question. If they require it, no sweat; pay extra attention to indentation, brackets, parenthesis, and qualifiers like `end`.\n\nWithout erasing your pseudo code, write the coded solution. Avoid writing frantically; rushing can result in mistakes. Look at your pseudo code line by line, and convert it to its programmatic equivalent. Verbose languages like Ruby have hundreds of classes and thousands of methods, making them difficult to remember. If you forget the name of something, ask your interviewer if you can take a guess; they allow it in most cases.\n\nAs with previous sections, think out loud as you write. Going from pseudo to real code is a deceptively simple step. Given the amount of anxiety introduced by the interview process, mistakes can happen at any time. If that same interviewer continues to act nicely, they will identify your mistakes and call them out.\n\nIf you’ve built a good rapport with the interviewer, encourage them to call out your mistakes: this shows your receptiveness to criticism.\n\n<center><h4>Step 4 Recap</h4></center>\n\n1. Ask if they require accurate syntax.\n2. Diligently convert pseudo code to code line-by-line.\n3. Write out loud.\n\n<a name=\"test-your-code\"></a>\n### Step 5: Test Your Code\n\nEvery cell in your body will scream for mercy after you write the last line. You’ll want to turn to your interviewer, thrust the marker in their face and exclaim, “ah hah!” But please don’t. Instead, take a deep breath, step back from the whiteboard and look at your code line by line.\n\nRun the algorithm out loud using some sample data. In our case, jot down an array with duplicates and imagine your function acting upon it. At each step, update the sample data by hand to keep track of what’s happened. If everything works, you’re *still* not done.\n\nAs people, our bias can express itself in different ways. For example, during a coding interview, we will test using data that favors our algorithm; data that we *know* will work. For the next series of tests, use data that will *break* your algorithm: corner cases, empty input, invalid input, oddball data, etc. Interviewers want to see complete implementations, not ones that would fail a basic unit test.\n\nIf you find that your code fails certain cases, refactor it and run the same tests again.\n\n<center><h4>Step 5 Recap</h4></center>\n\n1. Using sample data, test your algorithm.\n2. Use the whiteboard to track your variables.\n3. Test your algorithm using corner cases.\n4. If you change the algorithm, repeat Step 5.\n\n<a name=\"the-refactor\"></a>\n## The Refactor\n\nIn all likelihood, your interviewer has administered this coding challenge more than once. They’ve seen dozens, possibly hundreds of answers, which means they’ve seen yours, too. After presenting your first solution, they may challenge you to improve it. This can come in the form of questions, some examples include:\n\n> “What if you weren’t allowed to modify the array?”\n>\n> “What if the input size was zero?”\n>\n> “What if you’re not allowed to allocate objects?”\n>\n> “This runs in big-O of n-squared, can we make it faster?”\n\nThe interviewer knows there’s a better solution, and they’re challenging you to come up with it. Embrace the challenge; try to improve your algorithm to serve the interviewer’s specifications. If you have limited time left, *discuss* the alternative solution instead of implementing it; the interviewer doesn’t need to see your coding skills again.\n\n<center><h4>Refactor Recap</h4></center>\n\n1. The interviewer will ask you to improve your solution.\n2. If you have time, refactor your solution.\n3. If you don’t have time, discuss the refactor.\n4. If you don’t know what to do, be up-front about that.\n\n<a name=\"programming-reinforcement\"></a>\n## Programming Reinforcement\n\nThroughout your program, we challenged you to complete Programming Reinforcement checkpoints. These checkpoints included challenges from [Codewars](http://codewars.com) that required you to solve unique coding puzzles. These exercises kept your programming skills fresh and improved your problem solving skills.\n\nTo prepare for coding interviews, we recommend you complete additional challenges on Codewars or similar platforms, like [HackerRank](https://www.hackerrank.com/) and [Pramp](https://www.pramp.com). If you didn’t complete the Programming Reinforcement checkpoints, now is a great time to go back and finish them.\n\n<a name=\"assignment\"></a>", "assignment"=>"- Revisit the Programming Reinforcement checkpoints if you have not completed them.\n- Attempt a new challenge every day on Codewars.\n  - Restrict challenges to Kyu levels of six or lower.\n  - After completing each challenge:\n    - Share your solution with your mentor.\n    - [Refactor](#the-refactor) your own solution to improve it.\n- Optionally, read [Cracking the Coding Interview](http://www.amazon.com/Cracking-Coding-Interview-6th-Edition/dp/0984782850) by Gayle Laakmann McDowell.\n- The Outcomes Team will be able to help you more effectively if you provide us feedback. In your assignment submission, note one thing you like about this checkpoint, and one thing you wish was different.", "roadmap_section_id"=>202, "roadmap_section_ref"=>"c454fa1c-f195-467b-b824-a7f61ad13be9|0", "default_student_access"=>"unlocked", "active_index"=>1, "checkpoint_type"=>"career_prep", "position"=>1, "points"=>1, "ref"=>"88b044d0-5eb7-4746-aa8c-db362e30f775|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2273", "assessment"=>nil}, {"id"=>2274, "name"=>"Interview Skills: Modern Interview Methods", "summary"=>"Prepare for a handful of non-traditional interviews", "body"=>"<!-- { ids:[1929,1937,2274], name:\"Interview Skills: Modern Interview Methods\", summary:\"Prepare for a handful of non-traditional interviews\" } -->\n\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Understand how interviewers use pair programming, take home assignments, contract work, and personality evaluations.\n- Understand how to successfully accomplish these tasks.\n\n## Other Interview Types\n\nThe standard process for most organizations includes an initial phone screen followed by an onsite interview. While most companies follow this path, others choose to diversify their hiring process with modern qualitative techniques.\n\n- [Pair Programming](#pair-programming)\n- [Take Home Assignments](#take-home-assignments)\n- [Contract Work](#contract-work)\n- [Personality Evaluation](#personality-evaluation)\n- [Assignment](#assignment)\n\n<a name=\"pair-programming\"></a>\n## Pair Programming\n\nThis interview mimics your experience with your Bloc mentor: two programmers working together simultaneously. Interviewers can conduct this pair programming interview remotely or in person, and require you to share your screen with them. The interviewer will give you a project to complete within the hour; so don't expect an enormous task. For example, \"build a Rails app to track teachers, students, and classes.\" Alternatively, they can ask you to clone an existing repository and add a feature to the source code.\n\nThe interviewer wants to see how you work and interact with your peers. This pair programming session will reveal your best qualities: disciplined workflow, your expressive communication, your Rails knowledge, and more. Here's a list of tips that will help you do your best during a pair programming interview:\n\n- **Treat your interviewer like a teammate**<br>Consult with them on design choices, layout, anything and everything.\n- **Refer to the book**<br>Use the Internet if you forget something but feel free to ask your interviewer first.\n- **Take your time**<br>Completing the assignment on time is important but not nearly as much as showing off what you can do.\n- **Be your own narrator**<br>Let the interviewer know what you're going to do before you do it, and take every opportunity to explain why.\n\n<a name=\"take-home-assignments\"></a>\n## Take Home Assignments\n\nLike pair programming interviews, the take home assignment measures how well you work. These assignments are more involved than pair programming sessions, so they will give you anywhere from one hour to two weeks to complete them. The assignments will resemble Bloc projects. They may provide assets, wireframes, and a full set of illustrated user stories to fulfill. For example, \"build an online text editor that allows live collaboration between two users.\"\n\nDue to the complexity of these assignments, you should drop everything you're doing to focus on them. Here are some tips to help you knock these take home assignments out of the park:\n\n- **Do your research**<br>Unless you possess intimate knowledge of the project's tech requirements, don't rush to coding. Research existing solutions and limitations. If the assignment permits the use of any library, look into open-source tools as well.\n- **Document everything**<br>Reading a *rushed* codebase with no comments is grueling work, don't make your interviewers do it. Document your classes and functions by standard practices. As you write your code, look at each line. If you feel the line requires a comment, add one.\n- **Keep your code clean**<br>Stick to DRY principles (*don't repeat yourself*), avoid using global variables if possible, and use proper indentation and whitespace to keep your code legible.\n- **Include a README**<br>As you did with your Bloc projects, include a README in the repository. This README should detail the project and give the reader an overview of its architecture.\n- **Architect a real solution**<br>Due to the time constraint, you may feel that settling with a hacky solution is warranted: you're *wrong*. Interviewers want to see a solid codebase that they can extend immediately, not a product with heaps of [technical debt](https://en.wikipedia.org/wiki/Technical_debt).\n- **Be original**<br>Copying code from a StackOverflow answer is fine, but if you fork a solution from GitHub and make modifications to suit your needs, that's hardly original work. Tools can check for plagiarism in source code and they will run them on your submission.\n- **Be proud**<br>If they ask you open-ended questions about your work, discuss specifics that you're proud of. For example, a complex algorithm you created, a design pattern you chose, or a performance optimization you discovered along the way.\n\n<a name=\"contract-work\"></a>\n## Contract Work\n\nCompanies willing to take the time and spend a little bit of money will pay you for your interview. When compared to other interview types, this one provides the best sample of your work, communication skills, and aptitude. The organization will assign real work to you and pay you for it. Much like the take home assignment, you should dedicate all of your efforts towards this work.\n\nContract work interviews usually end with a follow-up interview where they review your work and ask you new questions. A lot of the same tips from take home assignments apply, but with some modifications:\n\n- **Communicate a lot**<br>They will give you a point of contact within the team, communicate well and often with this person. Ask them questions and follow-up every day with progress updates.\n- **Learn the codebase**<br>You won't learn everything there is to know, but prepare yourself to discuss the codebase from a bird's-eye view.\n- **Follow the team's best practices**<br>If they have documents regarding their workflow, read them and adhere to them. If they have a consistent style to their source code, comments, or commit messages, mimic their style.\n- **Get with the program**<br>This type of interview gives you a glimpse into the company's culture. If they're fun-loving gif blasters like the Bloc team, use gifs too. This helps the team feel like you're part of the company already.\n\n<a name=\"personality-evaluation\"></a>\n## Personality Evaluation\n\nThis interview, otherwise known as [the beer test](https://www.themuse.com/advice/how-to-decide-between-2-awesome-job-candidates), is an attempt to measure cultural fit. Interviewers want to know what kind of person you are and whether they would \"get a beer with you.\" You can substitute beer with any one-on-one social activity, but the gist of the question remains: would I hang out with this person?\n\nInterviewers take this opportunity to ask you personal questions and get to know you. This is a difficult interview to prepare for, because any sign of preparedness can give off the wrong vibe. But you can use these tactics to bring out the best version of you:\n\n- **Smile**<br>This one's simple, but people overlook it. Unless you're applying for Lead Complainer at Oscar the Grouch & Co., your interviewer wants to meet a happy person. We're not happy all the time, but a natural smile warms the room and puts your interviewer at ease.\n- **Show confidence**<br>Keep strong eye contact, reduce the number of \"umms\" in your sentences, apply matching pressure during handshakes, sit up straight, and in general, believe in yourself and what you're doing. Consider giving yourself a [pep talk beforehand](https://www.ted.com/talks/amy_cuddy_your_body_language_shapes_who_you_are?language=en).\n- **Be an open book**<br>Imagine the interviewer asks you, \"what's your favorite memory?\" You can answer this in one sentence with, \"the time I won $8k in Vegas.\" Or, you can paint a vibrant story that captivates your interviewer's attention. You get no bonus points for speed, so treat this interview like a date and give them every reason to like you.\n- **Reveal your passion**<br>When you speak with passion, people can tell; your words permeate the air and leave an impact on the listener. So when you get an opportunity to talk about something you have immense passion toward, take it. The interviewer wants to see a human with a beating, fiery heart.\n- **Ask them questions, too**<br>As you answer these personal questions, you'll feel pretty good. That's because someone is making you the center of attention and they're actively listening to everything you say. Your interview loves that feeling, too. If you reciprocate and make them feel like the center of attention, they won't forget that.\n\n<a name=\"assignment\"></a>", "assignment"=>"> Begin this assignment after blocking off an entire day (24 hours) to work on it.\n\n- Complete one of these Take-Home Assignments:\n\t1. Build a command line calculator that accepts text input, e.g. \"1+4*3-4,\" and prints out the numeric answer. The calculator must support addition, subtraction, multiplication, and division of whole numbers.\n\t2. Build a [Connect Four](https://en.wikipedia.org/wiki/Connect_Four) multiplayer game. The game must print the board after each turn and support two local players.\n\t3. Write a [Slack plugin](https://api.slack.com/community) that tracks how much time each user spends on Slack. Let the user see their usage by typing a keyword, e.g. \"/slacktrack.\"\n- Mark the start time. After 24 hours elapses, stop working on the project regardless of what state it's in.\n\t- Submit the project to your mentor for review.\n\t- Discuss the project during your next meeting.\n- The Outcomes Team will be able to help you more effectively if you provide us feedback. In your assignment submission, note one thing you like about this checkpoint, and one thing you wish was different.\n\nUse your imagination! We left the requirements purposely vague to test your creativity. And as you may have guessed, bonus features earn bonus points.", "roadmap_section_id"=>202, "roadmap_section_ref"=>"c454fa1c-f195-467b-b824-a7f61ad13be9|0", "default_student_access"=>"unlocked", "active_index"=>1, "checkpoint_type"=>"career_prep", "position"=>1, "points"=>1, "ref"=>"a1c66133-88e4-43a6-b0a7-58f2b24f083e|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2274", "assessment"=>nil}, {"id"=>2275, "name"=>"The Offer", "summary"=>"Tips to secure the right role for you", "body"=>"<!-- { ids:[1930,1938,2275], name:\"The Offer\", summary:\"Tips to secure the right role for you\" } -->\n\n\n## Objectives\n\nAfter this checkpoint, students should be able to:\n\n- Understand how to evaluate an offer from a company.\n- Understand how to negotiate an offer.\n\n## The Offer\n\nWhen you receive your first offer, you reel with excitement. You celebrate that moment and feel pride for everything you've accomplished. But keeping a cool head is just as important as going nuts with celebratory fist-pumps. All job offers come with pros and cons. This checkpoint will help you hang onto your limbs as you navigate the offer minefield.\n\n- [Evaluate the Offer](#evaluate-the-offer)\n\t- [Salary](#variable-salary)\n\t- [Location](#variable-location)\n\t- [Benefits](#variable-benefits)\n\t- [Career Path](#variable-path)\n\t- [Culture](#variable-culture)\n\t- [Calculate the Offer Quality Quotient](#offer-q-q)\n- [Negotiate](#negotiate)\n\t- [Prepare](#prepare)\n\t- [They Present a Contract](#they-present-a-contract)\n\t- [They Make the First Move](#they-make-the-first-move)\n\t- [They Ask You for a Figure](#they-ask-for-a-figure)\n\t- [They Don't Budge](#they-dont-budge)\n\t- [Assignment](#assignment)\n\n<a name=\"evaluate-the-offer\"></a>\n## Evaluate the Offer\n\nEach offer has variables that you must consider before accepting. These variables affect your wealth, career longevity, happiness, and other aspects of your life. As with any big decision, combine all factors to determine the value of each offer. Let's cover the critical factors and [calculate an offer's value](#offer-q-q).\n\n<a name=\"variable-salary\"></a>\n### Salary\n\nPeople usually prioritize salary when evaluating an offer, but we advise you to take everything into consideration. If the position requires relocation, consider how both local and state taxes will affect your take-home pay. And if the offer seems low, it's not always a reflection of you. Compare the offer to the average; research salaries on [JobStar](http://jobstar.org/tools/salary/index.php), [Salary.com](http://salary.com), the [Bureau of Labor Statistics](http://www.bls.gov/ooh/a-z-index.htm), and others.\n\nCompanies also compensate through other means: bonuses, stock options, and more. Factor all of these into the lifetime value of your employment. For example, if you expect to work there for at least one year, calculate your potential bonuses and granted shares and incorporate that into your take home.\n\n<a name=\"variable-location\"></a>\n### Location\n\nIf you love where you live, then the quality of the offer must justify a relocation. Research the cost of living in or around the destination city. If you're willing to commute, look for housing in suburban areas and research the cost of living there as well. Most companies offer a relocation bonus, compare it to your expected rent and security deposit.\n\n<a name=\"variable-benefits\"></a>\n### Benefits\n\nA lower salary with a host of perks fares well against a high salary with no benefits. For example, 401k matching, health insurance, free food, commute compensation, open vacation policy, working from home, and more should factor into your decision. Factor any benefit that reduces your expenses into your take-home pay.\n\n<a name=\"variable-path\"></a>\n### Career Path\n\nIf you like the company and imagine working there for several years, ask about growth potential. If they have a clear path to senior positions and salary increases, factor that into your decision. Some organizations are so small that moving up the ladder is tricky, but larger ones streamline this process.\n\n<a name=\"variable-culture\"></a>\n### Culture\n\nYour compatibility with the company's culture will play a huge role in your satisfaction. The best way to verify a good match is to speak with the people you will work with and ask them specific questions regarding their workplace. Ask how they feel about their managers, and if their managers welcome honest and open communication.\n\nAsk about diversity and whether minorities hold leadership positions. A monoculture can lead to corporate environments unaware of their own bias. Also ask about company gatherings and how executives treat employees.\n\nThere's no limit to the questions you can ask, but keep them open-ended to give the employees an opportunity to go on tangents and offer anecdotes.\n\n<a name=\"offer-q-q\"></a>\n### Calculate the Offer Quality Quotient\n\nTo quantify and compare the value of every opportunity, calculate the OQQ, or Offer Quality Quotient — something we made up. To calculate the OQQ, give each factor a score from 1 to 10, 10 being the best possible. Give each factor a level of importance: 0 being the least important, 10 being the most — these must add up to 10. For example:\n\n| Factor | Score | Importance |\n| :-- | :-- | :-- |\n| Salary | 8 | 6 |\n| Location | 3 | 2 |\n| Benefits | 6 | 0 |\n| Career Path | 8 | 1 |\n| Culture | 10 | 1 |\n\nMultiply each factor's score with its importance, as a percentage, and add the results together. To calculate the OQQ of this offer, we do the following:\n\n> (8 x .6) + (3 x .2) + (6 x 0) + (8 x .1) + (10 x .1) = **7.2**\n\nBy this math, you know that the highest possible score is 10. Use the OQQ to do quick comparisons when choosing between offers. Ultimately, if the numbers don't seem to line up with your gut, trust your instincts instead.\n\n<a name=\"negotiate\"></a>\n## Negotiate\n\nIn all cases besides internships, an element of negotiation can come into play. In this scenario and in most cases, the employer acts as the salesperson. They offer something of limited quantity, job opportunities, to a swathe of customers, applicants. Before entering any negotiation, prepare yourself for it.\n\n<a name=\"prepare\"></a>\n### Prepare\n\nResearch the position you are applying for. Specifically, find the average starting salary for that role in your destination city. If the job is remote, look for the national average. This number gives you an idea of what's fair and the approximate maximum you should reach for.\n\nIf compensation is your primary concern, bring another offer with you to each negotiation; aim to receive multiple offers at once. With an offer in your back pocket, you walk in with concrete leverage that you can use during negotiations.\n\nSpeaking of negotiations, they can start in a number of ways. Let's look at some.\n\n<a name=\"they-present-a-contract\"></a>\n### They Present a Contract\n\nSome employers plop down a big stack of papers right in front of you as if to say, \"this is the one and only deal we offer, take it or leave it.\" They may deliver this contract casually (in email) to brush past the fact that it dictates your salary and benefits. The contract may even have a cute title like, \"Welcome to the Family!\"\n\nAsk to discuss the terms of the contract and follow the [steps below](#they-make-the-first-move). If that's their only offer, keep pressing to speak with someone. If they continue to deny you, consider the offer as-is and again, ask for a few days to think about it and contact Student Outcomes.\n\n<a name=\"they-make-the-first-move\"></a>\n### They Make the First Move\n\nThe first move is the first figure, and if they present one then they've made the first move. In your excitement, you may err toward caution and accept this instantly: that is unnecessary. Evaluate this number and whether it reflects your experience and your needs. Statistically speaking, the final deal will resemble the first figure, but don't let that deter you.\n\nIf the number is insulting or just shy of what you expect, remain calm. The person that loses their cool also loses control of the negotiation. Let this first figure linger in the air and avoid saying anything. A moment spent here will feel like an eternity, but hold on tight. One of two things is likely to occur:\n\n1. You break and present a counter-offer.\n2. They break and ask you a question or present a new offer.\n\nIn the first case, the negotiator will likely rebuff you and stick with their initial offer. They gained the higher ground when you spoke first. And in the second case, if you hear an offer you're willing to accept, ask for a few days to think it over and contact Student Outcomes.\n\nOtherwise, hold out again or present a counter-offer with the exact amount you want, e.g. $73,000, then wait patiently. If they refuse to acquiesce, proceed to [the next step](#they-dont-budge).\n\n<a name=\"they-ask-for-a-figure\"></a>\n### They Ask You for a Figure\n\nIf you agree with statistics, the initial figure will resemble the final offer. When they give you this opportunity, aim slightly above your target, e.g. $70,000. Don't give them a ballpark figure or a range: they will focus toward the bottom of it. Once you've presented the number you want, buckle down and say nothing.\n\nIf the negotiator dismisses the number in any way, just sit there and remain calm. Don't say anything, don't flinch, don't laugh, merely live in that moment and wait for them to speak. Continue to hold out until they offer you a number you approve of. If they don't reach that number, move to [the next step](#they-dont-budge).\n\n<a name=\"they-dont-budge\"></a>\n### They Don't Budge\n\nIf negotiations stall at a salary that you find less-than-satisfactory, try one of the following tactics.\n\n- **Hold firm**<br>One option, and the simplest, is to do nothing. Thank them for their time and go home. Given the right circumstances, they may reconsider your offer overnight and continue negotiations the next day. Always send a follow-up email thanking them for their time and consideration.\n- **Discuss benefits**<br>They can't offer you the salary you want, but what about benefits? They are not likely to come up with these, so you must surface them as possibilities. Ask about working from home, extra vacation, free food, commute reimbursements, and anything else that may sway you.\n- **Reduce benefits**<br>If salary is critical, discuss a reduction or complete withdrawal of benefits to beef up the figure.\n\n<a name=\"assignment\"></a>", "assignment"=>"**Do not accept a job offer before speaking with Student Outcomes.**\n\n- Determine what salary range you want and discuss it with your mentor.\n- Figure out which fringe benefits matter the most to you: health insurance, free food, travel compensation, working from home, etc.\n- [Practice negotiating](http://www.johncurtis.ca/negotiation/4-ways-to-practice-your-negotiating-skills/).\n\t- Negotiate prices at flea markets.\n\t- Role play and negotiate with friends or your spouse.\n\t- Play board games that require negotiation like Risk, Diplomacy, and Settlers of Catan.\n- The Outcomes Team will be able to help you more effectively if you provide us feedback. In your assignment submission, note one thing you like about this checkpoint, and one thing you wish was different.", "roadmap_section_id"=>202, "roadmap_section_ref"=>"c454fa1c-f195-467b-b824-a7f61ad13be9|0", "default_student_access"=>"unlocked", "active_index"=>1, "checkpoint_type"=>"career_prep", "position"=>1, "points"=>1, "ref"=>"7f44a3e5-1a07-4439-bf43-510d557a6fb1|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2275", "assessment"=>nil}]}, {"id"=>192, "roadmap_id"=>38, "name"=>"FE Specialization: Blocitoff", "time_estimate"=>"80 Hours", "point_ratio"=>0.0, "description"=>"Blocitoff uses the Firebase API and AngularJS to create tasks with an expiration date.", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"locked", "ref"=>"67010069-a8cc-40a6-9f84-366c60cccde5|0", "section_type"=>"project", "checkpoints"=>[{"id"=>2200, "name"=>"Intro", "summary"=>"Intro", "body"=>"<!-- { ids:[2200], name:\"Intro\", summary:\"Intro\" } -->\nBlocitoff uses the Firebase API and AngularJS to create tasks with an expiration date.\n\n## Use case\n\nTo-do lists are notorious for collecting junk - tasks that you want to remember but constantly reprioritize. To solve the problem of to-do list clutter, you will build Blocitoff. Blocitoff is a web application that will manage your to-do lists by automatically deleting tasks that have not been completed after seven days.\n\nOur hypothesis is that if the task is not important enough to be completed within seven days, it does not belong on your to-do list.\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As a user, I want my tasks **synced** with a persistent backend | 1 |\n| As a user, I want to **see** my active tasks in a list as my default view | 3 |\n| As a user, I want completed tasks and tasks older than seven days **hidden** from my main task views automatically | 3 |\n| As a user, I want **expired and completed** tasks presented in a separate view | 3 |\n| As a user, I want to **submit new tasks** with a description, priority level and three states: expired, completed or active | 3 |\n| As a user, I want to mark tasks as **complete** | 2 |\n\nBefore you begin working on user stories, complete this project's [Getting Started guide](https://www.bloc.io/resources/getting-started-with-frontend-projects). Later user stories often rely on the completion of the former, therefore, work on them in the order prescribed.\n\n## Wireframes\n\nThese wireframes are meant to suggest a design, not dictate one.\n\n| **Wireframe** | **Description** |\n| :-- | :-- |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/blocitoff/blocitoff-active-tasks-empty-tn.jpg)](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/blocitoff/blocitoff-active-tasks-empty.jpg) | Empty active tasks view. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/blocitoff/blocitoff-active-tasks-filled-tn.jpg)](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/blocitoff/blocitoff-active-tasks-filled.jpg) | Active tasks view with tasks. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/blocitoff/blocitoff-task-history-tn.jpg)](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/blocitoff/blocitoff-task-history.jpg) | Completed tasks in a separate view. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/blocitoff/blocitoff-active-tasks-with-field-tn.jpg)](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/blocitoff/blocitoff-active-tasks-with-field.jpg) | Active tasks with task entry field. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/blocitoff/blocitoff-active-tasks-with-completion-tn.jpg)](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/blocitoff/blocitoff-active-tasks-with-completion.jpg) | Active tasks with completion check marks. |", "assignment"=>"Acquaint yourself with the user stories for this project.\n\nOptional: Sketch your own wireframes.\n\nMessage your mentor, letting him/her know that you’ve chosen to work on this project.", "roadmap_section_id"=>192, "roadmap_section_ref"=>"67010069-a8cc-40a6-9f84-366c60cccde5|0", "default_student_access"=>"locked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"53d6a87f-13cb-42ac-8394-dc062d18f450|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2200", "assessment"=>nil}, {"id"=>2201, "name"=>"Configure Firebase", "summary"=>"As a user, I want my tasks synced with a persistent backend", "body"=>"<!-- { ids:[2201], name:\"Configure Firebase\", summary:\"As a user, I want my tasks synced with a persistent backend\" } -->\n>As a user, I want my tasks **synced** with a persistent backend<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\nThis story assumes you have completed this project's [Getting Started Guide](https://www.bloc.io/resources/getting-started-with-frontend-projects).\n\n### Synchronize Data With Firebase\n\n>How can I ensure my data is always synced with Firebase?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\n[Instantiate the Firebase service with the `new` operator]https://github.com/firebase/angularfire/blob/master/docs/quickstart.md#user-content-4-inject-the-angularfire-services). You can do this in your controller, or abstract it into an additional service or factory that handles all of your model's data management, Firebase or otherwise.\n\nFirebase has a service called `$firebaseArray()` that can be used to [sync a Firebase database with an Angular model](https://github.com/firebase/angularfire/blob/master/docs/reference.md#firebasearray) like an array of tasks. Set the `$scope` array holding your tasks to a Firebase object that calls `$firebaseArray()`.\n\n### Test Your Code\n\n- Generate and save tasks. Verify that they appear on Firebase's dashboard.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>192, "roadmap_section_ref"=>"67010069-a8cc-40a6-9f84-366c60cccde5|0", "default_student_access"=>"locked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"812fb4a4-4bfc-4f29-92ea-f41252a5804d|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2201", "assessment"=>nil}, {"id"=>2202, "name"=>"View Active Tasks", "summary"=>"As a user, I want to see my active tasks in a list as my default view", "body"=>"<!-- { ids:[2202], name:\"View Active Tasks\", summary:\"As a user, I want to see my active tasks in a list as my default view\" } -->\n\n> As a user, I want to **see** my active tasks in a list as my default view<br>\n> [Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n<center>![default task view](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/blocitoff/blocitoff-active-tasks-empty.jpg)</center>\n\n### Configure `ui-router`\n\n> How should I handle routing my views?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nAs in Bloc Jams, set up `ui-router` and define a `home` or `index` state. Associate the state with a template that holds the view of the list, and add a controller either as an option on the `ui-router` state or as an attribute-based directive on the HTML element that contains the view.\n\n[`ui-routers`'s GitHub Page](https://github.com/angular-ui/ui-router) has examples using `ui-router` in other contexts, along with an [API Reference](http://angular-ui.github.io/ui-router/site/#/api/ui.router), [resources](https://github.com/angular-ui/ui-router#resources), and a [proprietary guide](https://github.com/angular-ui/ui-router/wiki) for additional exposure.\n\n### Display Tasks in a List\n\n<center>![current tasks in list](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/blocitoff/blocitoff-active-tasks-filled.jpg)</center>\n\n> How can I create an HTML element for each item in my task list?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nUse `ngRepeat` to iterate over your array of tasks and create an element for each.\n\n### Test Your Code\n\n- Generate some tasks. Verify that each task appears in the active tasks list.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>192, "roadmap_section_ref"=>"67010069-a8cc-40a6-9f84-366c60cccde5|0", "default_student_access"=>"locked", "active_index"=>3, "checkpoint_type"=>"normal", "position"=>3, "points"=>1, "ref"=>"859530ea-b78f-4cbf-a6dd-c7f54fb3ac7f|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2202", "assessment"=>nil}, {"id"=>2203, "name"=>"Hide Old Tasks", "summary"=>"As a user, I want completed tasks and tasks older than seven days hidden from my main task views automatically", "body"=>"<!-- { ids:[2203], name:\"Hide Old Tasks\", summary:\"As a user, I want completed tasks and tasks older than seven days hidden from my main task views automatically\" } -->\n\n> As a user, I want completed tasks and tasks older than seven days **hidden** from my main task views automatically<br>\n> [Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Use Directives\n\n> How can I hide tasks that are no longer relevant?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nThere are two ways to use directives to hide tasks. You can write a `$scope` method and pass it into an [`ngHide`](https://docs.angularjs.org/api/ng/directive/ngHide), or you can write a directive that hides the element based on a conditional in the `link` function so you can keep the hide logic out of your controller.\n\nRefer to this [Angular documentation example](https://docs.angularjs.org/api/ng/directive/ngShow#example) on how to use `ngHide` and `ngShow`.\n\n### Test Your Code\n\n> To accelerate your testing process, temporarily reduce the seven day expiration time to several seconds.\n\n- Generate a variety of tasks, some older than seven days. Verify that tasks older than seven days do not appear in your active tasks list.\n- Generate a variety of tasks, some completed, some otherwise. Verify that completed tasks do not appear in your active tasks list.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>192, "roadmap_section_ref"=>"67010069-a8cc-40a6-9f84-366c60cccde5|0", "default_student_access"=>"locked", "active_index"=>4, "checkpoint_type"=>"normal", "position"=>4, "points"=>1, "ref"=>"54f4f831-1a04-47c3-8e30-a1e2d98ff589|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2203", "assessment"=>nil}, {"id"=>2204, "name"=>"View Past Tasks", "summary"=>"As a user, I want expired and completed tasks presented in a separate view", "body"=>"<!-- { ids:[2204], name:\"View Past Tasks\", summary:\"As a user, I want expired and completed tasks presented in a separate view\" } -->\n\n> As a user, I want **expired and completed** tasks presented in a separate view<br>\n> [Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Add Another State\n\n<center>![task history with another link](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/blocitoff/blocitoff-task-history.jpg)</center>\n\n> How can I display a view with my task history?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nCreate a separate state, template, controller and register them with your `ui-router`-driven routes. Add a link at the top of your default view that has a `ui-sref` pointing to the state of your expired and completed tasks.\n\nIt's not imperative that you distinguish between expired and completed. You can create a single, separate view that has all past tasks.\n\n### Test Your Code\n\n- Generate tasks both older than seven days and completed.\n  - Verify these tasks do not appear in the main view.\n  - Verify these tasks appear in your task history view.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>192, "roadmap_section_ref"=>"67010069-a8cc-40a6-9f84-366c60cccde5|0", "default_student_access"=>"locked", "active_index"=>5, "checkpoint_type"=>"normal", "position"=>5, "points"=>1, "ref"=>"db36ea98-dd4c-4e48-8ea4-390db9776529|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2204", "assessment"=>nil}, {"id"=>2205, "name"=>"Create New Tasks", "summary"=>"As a user, I want to submit new tasks with a description, priority level, and three states: expired, completed or active", "body"=>"<!-- { ids:[2205], name:\"Create New Tasks\", summary:\"As a user, I want to submit new tasks with a description, priority level, and three states: expired, completed or active\" } -->\n\n> As a user, I want to **submit new tasks** with a description, priority level and three states: expired, completed or active<br>\n> [Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n<center>![creating tasks mockup](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/blocitoff/blocitoff-active-tasks-with-field.jpg)</center>\n\n### Add a Field\n\n> Where should I put the input for submitting my new tasks?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nThere are many ways to provide an input or form for you to create a task. However, we suggest you solve the problem by [creating an input](https://docs.angularjs.org/api/ng/directive/input) with an [`ngModel`](https://docs.angularjs.org/api/ng/directive/ngModel) tied to a `$scope` model at the top of the list. Allow the user to save the task by clicking a button or link. By default, create all tasks with the `active` state.\n\n### Allow Priority Selection\n\n> How should I choose a priority level when I create the task?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nDistinguish tasks as \"high\", \"medium\", or \"low\" priority. Use a `<select>` dropdown to hold all of the priority levels and choose one before submitting the task. However, it is not imperative that you determine priority while creating the task. You could, for example, automatically push new tasks to the end of the array and use up and down arrows to determine the importance of each task.\n\n### Save Tasks to Firebase\n\n> How can I save the task to Firebase?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nCreate a `$scope` method to pass into an `ngClick` in your HTML. The `$scope` method must call the `$add()` method on the array to sync the task with Firebase.\n\n### Refresh the List\n\n> How can I update my list of tasks on save?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nThere's no need. When you set the task array equal to a `Firebase` object instance with a `$firebaseArray()` call, your data will automatically keep up with your changes.\n\n### Test Your Code\n\n- Create tasks with your field.\n  - Verify that tasks are automatically inserted into your active tasks list.\n  - Verify that tasks are organized by priority.\n  - Verify that tasks are synced to Firebase.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>192, "roadmap_section_ref"=>"67010069-a8cc-40a6-9f84-366c60cccde5|0", "default_student_access"=>"locked", "active_index"=>6, "checkpoint_type"=>"normal", "position"=>6, "points"=>1, "ref"=>"07ced007-dddd-45c9-a8a3-2ad0a2df6387|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2205", "assessment"=>nil}, {"id"=>2206, "name"=>"Mark Tasks Complete", "summary"=>"As a user, I want to mark tasks as complete", "body"=>"<!-- { ids:[2206], name:\"Mark Tasks Complete\", summary:\"As a user, I want to mark tasks as complete\" } -->\n\n> As a user, I want to mark tasks as **complete**<br>\n> [Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n<center>![marking tasks complete button](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/blocitoff/blocitoff-active-tasks-with-completion.jpg)</center>\n\n### Add a Button\n\n> How can I use Angular events to toggle the task's state from active to complete?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nAdd a button or link inline with your task item. Include the trigger within the `ngRepeat` block so it will be scoped to the clicked item.\n\n> How can I update the backend to register task completion?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nWrite a directive specifically for handling the state change from `active` to `complete`. You will need to inject the Firebase service into the directive's definition (in the same way you did with the controller or service) so that the directive can signal to Firebase that the state of the task has changed. Attach a callback to a click event that communicates with Firebase when the user completes a task.\n\nFirebase should register it in your database and sync it to the frontend using the `$save()` method, which updates the object. When the state has changed, the task should disappear from your active list and appear in your task history.\n\n### Test Your Code\n\n- Create several tasks and invoke their completion action.\n  - Verify that the tasks are marked as complete.\n  - Verify that the tasks disappear from the active tasks list.\n  - Verify that the tasks appear in your task history.\n  - Verify that each task's completion state is synchronized with Firebase.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>192, "roadmap_section_ref"=>"67010069-a8cc-40a6-9f84-366c60cccde5|0", "default_student_access"=>"locked", "active_index"=>7, "checkpoint_type"=>"normal", "position"=>7, "points"=>1, "ref"=>"e769d51f-79a4-46f3-bbf0-a83fd92b4f39|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2206", "assessment"=>nil}, {"id"=>2207, "name"=>"Extra Credit", "summary"=>"If you finish early, attempt these extra credit user stories", "body"=>"<!-- { ids:[2207], name:\"Extra Credit\", summary:\"If you finish early, attempt these extra credit user stories\" } -->\nThe goal of extra credit is to push you towards self-reliance, so outside of a brief description, we don't provide additional resources. If you finish your project early, challenge yourself to complete these additional user stories:\n\n| **User Story** | **Difficulty Rating** |\n| :-- | :-- |\n| As a user, I want a **mobile-friendly** interface | 3 |\n| As a user, I want to add **touch gestures** | 3 |\n| As a user, I want to **require authentication** to access my task list | 2 |\n| As a user, I want to have **multiple lists** for different types of tasks | 3 |", "assignment"=>"Optional: Complete one or more of the extra credit user stories.", "roadmap_section_id"=>192, "roadmap_section_ref"=>"67010069-a8cc-40a6-9f84-366c60cccde5|0", "default_student_access"=>"locked", "active_index"=>nil, "checkpoint_type"=>"extra_credit", "position"=>nil, "points"=>0, "ref"=>"ba514fc3-02cc-4b1c-a6e5-197c54480916|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2207", "assessment"=>nil}]}, {"id"=>193, "roadmap_id"=>38, "name"=>"BE Specialization: Blocmetrics", "time_estimate"=>"80 Hours", "point_ratio"=>0.0, "description"=>"", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"locked", "ref"=>"972d51d7-e9e7-4400-9b3d-26deb7d18da2|0", "section_type"=>"project", "checkpoints"=>[{"id"=>2208, "name"=>"Introduction", "summary"=>"Introduction", "body"=>"<!-- { ids:[2208], name:\"Introduction\", summary:\"Introduction\" } -->\nBuild an analytics service to track events on websites.\n\n## Use Case\n\nThere are plenty of good analytic services, but that doesn't mean you can't build a better one. Your analytics service will offer a few key features:\n\n* A client-side JavaScript snippet that allows a user to track events on their website.\n* A server-side API that captures and saves those events to a database.\n* A Rails application that displays the captured event data for a user.\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As a user, I want to **sign up** for a free account by providing a name, password, and email | 2 |\n| As a user, I want to **sign in and out** of Blocmetrics | 2 |\n| As a user, I want to **register** an application with Blocmetrics for tracking | 3 |\n| As a user, I want events **associated** with registered applications | 3 |\n| As a developer, I want to receive incoming events in an API controller | 2 |\n| As a user, I want to **use** JavaScript to capture client-side events in my application | 2 |\n| As a user, I want to **see** a graph of events for each registered application | 3 |\n\nBefore you begin working on user stories, complete this project's [Getting Started guide](https://www.bloc.io/resources/getting-started-with-rails-web-development-projects). Later user stories often rely on the completion of the former, therefore, work on them in the order prescribed.", "assignment"=>"Acquaint yourself with the user stories for this project.\n\nOptional: Sketch your own wireframes.\n\nMessage your mentor, letting him/her know that you’ve chosen to work on this project.", "roadmap_section_id"=>193, "roadmap_section_ref"=>"972d51d7-e9e7-4400-9b3d-26deb7d18da2|0", "default_student_access"=>"locked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"7ef545a8-2cd1-4af9-abd7-c7c277d42fc0|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2208", "assessment"=>nil}, {"id"=>2209, "name"=>"User Sign Up", "summary"=>"User Sign Up", "body"=>"<!-- { ids:[2209], name:\"User Sign Up\", summary:\"User Sign Up\" } -->\n>As a user, I want to **sign up** for a free account by providing a user name, password and email<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Incorporate Devise\n\nUse the [Devise](https://github.com/plataformatec/devise) gem for authentication. Blocmetric's authentication system should allow users to sign up and send emails for account confirmation. Refer to the [Devise Resource](https://www.bloc.io/resources/devise) and the [Devise Getting Started Guide](https://github.com/plataformatec/devise#getting-started) for examples on implementing user sign up.\n\n### Test Your Code\n\n- Sign a new user up. Do you receive a confirmation email?\n- What happens if you attempt to sign up with an invalid email?\n- What happens if you attempt to sign up with a duplicate email?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>193, "roadmap_section_ref"=>"972d51d7-e9e7-4400-9b3d-26deb7d18da2|0", "default_student_access"=>"locked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"2905c7c0-7733-4e0b-9352-ea8654064626|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2209", "assessment"=>nil}, {"id"=>2210, "name"=>"User Sign in and Out", "summary"=>"User Sign in and Out", "body"=>"<!-- { ids:[2210], name:\"User Sign in and Out\", summary:\"User Sign in and Out\" } -->\n>As a user, I want to **sign in and out** of Blocmetrics<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\nNow that users can sign up for Blocmetrics, you want to give them a way to sign in and out of the app. Refer to our [Devise Resource](https://www.bloc.io/resources/devise) and the [ Devise Getting Started Guide](https://github.com/plataformatec/devise#getting-started) for examples on implementing user sign in/out with Devise.\n\n### Test Your Code\n\n- Sign into Blocmetrics, does the top navigation change to indicate you are signed in?\n- Sign out of Blocmetrics, does the top navigation change to indicate you are signed out?\n- What happens if you attempt to reset your password?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>193, "roadmap_section_ref"=>"972d51d7-e9e7-4400-9b3d-26deb7d18da2|0", "default_student_access"=>"locked", "active_index"=>3, "checkpoint_type"=>"normal", "position"=>3, "points"=>1, "ref"=>"9af8b04d-7722-4ff0-94d7-6740c8c26517|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2210", "assessment"=>nil}, {"id"=>2211, "name"=>"Register an Application", "summary"=>"Register an Application", "body"=>"<!-- { ids:[2211], name:\"Register an Application\", summary:\"Register an Application\" } -->\n>As a user, I want to **register** an application with Blocmetrics for tracking<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\nBlocmetrics must track events from multiple applications. As such, you will need to register applications with a unique attribute so that when Blocmetrics receives an event, it knows which application to associate the event. Thankfully, each application already has a unique attribute: its URL.\n\n### Generate an Application Model\n\nWhen a user registers a new application, you will need to save that registration and associate it with the user. Generate a registered application model that is associated with the user. The model should have a name and URL attribute.\n\n### Generate an Applications Controller\n\nWith the registration model created, generate `RegisteredApplicationsController` with the appropriate CRUD actions.\n\n### Build the Views\n\nA user should see an index of all their registered applications. Complete the index action and views. Fill out the create action and views. The create action and views should create a new registration associated with a user.\n\nBuild out the read action and views as well. The read view should display the registered application's name and URL. Lastly, construct the delete action to de-register and destroy an existing application registration.\n\n### Test your code\n\n- Are you able to register multiple applications?\n- Are the registered applications displayed after creation?\n- Are you able to de-register and then re-register an application by the same name?\n- Are you able to view an index of registered applications?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>193, "roadmap_section_ref"=>"972d51d7-e9e7-4400-9b3d-26deb7d18da2|0", "default_student_access"=>"locked", "active_index"=>4, "checkpoint_type"=>"normal", "position"=>4, "points"=>1, "ref"=>"819d0bde-1171-4b55-b9c0-e947c98b5736|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2211", "assessment"=>nil}, {"id"=>2212, "name"=>"Associate Events", "summary"=>"Associate Events", "body"=>"<!-- { ids:[2212], name:\"Associate Events\", summary:\"Associate Events\" } -->\n>As a user, I want events **associated** with registered applications<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\nNow that Blocmetrics can register applications to track, it needs to be able to store events that it will receive from those applications.\n\n### Generate an Event Model\n\nWhen Blocmetrics receives an event, it should store the name of the event. Generate an event model that is associated with a registered application with an event name attribute.\n\n### Seed the Database\n\nUse `seeds.rb` to populate Blocmetrics with some registered applications and associated events. Vary the name of events using [Faker](https://github.com/stympy/faker) to simulate a variety of tracked events.\n\n### Modify the Application Show Page\n\nOn the registered application show page, Blocmetrics will eventually display graphs of the different events. For now, show the name and count of each type of event associated with the application. Use Ruby's [`group_by` method](http://ruby-doc.org/core-2.2.1/Enumerable.html#method-i-group_by) method to sort events by name:\n\n```ruby(app/controllers/registered_applications_controller.rb)\n   def show\n   ...\n+    @events = @registered_application.events.group_by(&:name)\n   end\n```\n\n### Test your code\n\n- Are applications and events seeded into the development database?\n- Does the registered application show page display the count of associated events?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>193, "roadmap_section_ref"=>"972d51d7-e9e7-4400-9b3d-26deb7d18da2|0", "default_student_access"=>"locked", "active_index"=>5, "checkpoint_type"=>"normal", "position"=>5, "points"=>1, "ref"=>"1e25de0b-acab-47ed-be28-8b7ca5a27ea8|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2212", "assessment"=>nil}, {"id"=>2213, "name"=>"API Controller", "summary"=>"API Controller", "body"=>"<!-- { ids:[2213], name:\"API Controller\", summary:\"API Controller\" } -->\n>As a developer, I want to receive incoming events in an API controller<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\nTo give Blocmetrics the ability to receive incoming events from registered applications, it will need an API controller and routes.\n\n### Edit Routes\n\nEdit `routes.rb` to provide the requisite API routes:\n\n```ruby(app/config/routes.rb)\n# #1\n+  namespace :api, defaults: { format: :json } do\n# #2\n+    resources :events, only: [:create]\n+  end\n```\n\n**#1**: `namespace` keeps the API routes separated from the rest of the app routes. `defaults: { format: :json}` tells your route to expect to receive requests in JSON form.\n**#2**: Blocmetrics' API only needs to support one route to record new events.\n\nOpen `config/initializers/inflections.rb` and add the following:\n\n```ruby(config/initializers/inflections.rb)\n+ActiveSupport::Inflector.inflections(:en) do |inflect|\n+  inflect.acronym 'API'\n+end\n```\n\nThis allows you to use `API` as the namespace, instead of the non-acronymed `Api` namespace.\n\n### Create a Controller\n\nCreate `EventsController` to match the API route. First, make a new directory in `app/controllers` named `api`. Within that directory, create the new controller:\n\n```ruby(app/controllers/api/events_controller.rb)\n+class API::EventsController < ApplicationController\n # #3\n+  skip_before_action :verify_authenticity_token\n+\n+  def create\n+\n+  end\n+end\n```\n\n**#3**: In Production, you would make the application more secure by first giving a CSRF token to the client code before submitting the event. For the purpose of this project, you will need to disable the [CSRF](https://www.bloc.io/resources/csrf) protection, skip the `verify_authenticity_token` filter.\n\nIn the create action, you need to find the registered application that matches the source of the API request. Use the `request.env['HTTP_ORIGIN']` value to find the correct application:\n\n```ruby(app/controllers/api/events_controller.rb)\n class API::EventsController < ApplicationController\n   def create\n+    registered_application = RegisteredApplication.find_by(url: request.env['HTTP_ORIGIN'])\n   end\n```\n\nCheck that the `find_by` call does not return `nil`. If it does, then you've received an API request from an unregistered application. In this case, return an error to the requestor:\n\n```ruby\nrender json: \"Unregistered application\", status: :unprocessable_entity\n```\n\nDefine a private `event_params` method for `EventsController`. `:name` is the only attribute that needs to be permitted:\n\n```ruby(app/controllers/api/events_controller.rb)\n ...\n+  private\n+  def event_params\n+    params.require(:event).permit(:name)\n+  end\n```\n\nCreate a new event associated with the `registered_application` (the event creation code will need to call the `event_params` method).\n\nIf the event saves successfully in `API::EventsController#create`, return a success message:\n\n```ruby\n  render json: @event, status: :created\n```\n\nOtherwise, return a failure message:\n\n```ruby\n  render json: {errors: @event.errors}, status: :unprocessable_entity\n```\n\n### CORS\n\nOur client-side JavaScript code will need to send an AJAX request to the Blocmetrics API so that we can store events. Browsers normally do not allow such cross-origin requests to occur. This is to prevent security vulnerabilities such as [cross-site scripting](https://en.wikipedia.org/wiki/Cross-site_scripting). Various hacks exist to work around this problem, but there is a well-supported standard called cross-origin resource sharing (CORS). CORS allows us to allow cross-origin requests in a controlled manner without opening up security vulnerabilities.  We will need to implement CORS in `EventsController`.\n\nCORS works by making a preliminary request to the target server, asking if the cross-domain request will be permitted. This uses the HTTP `OPTION` verb, which is not part of Rails' restful routes. An `OPTION` request precedes a GET or POST request and checks whether the route accepts a cross-origin request. Add it to your routes manually:\n\n```ruby(config/routes.rb)\n+    match '/events', to: 'events#preflight', via: [:options]\n     resources :events, only: [:create]\n```\n\nThe browser expects the OPTIONS request to return a 200. With that said, our `preflight` action doesn't need to render anything apart from a 200 status code:\n\n```ruby(app/controllers/api/events_controller.rb)\n+ def preflight\n+   head 200\n+ end\n```\n\nWe must set CORS response headers so our controller actions will allow `POST` requests across domains:\n\n```ruby(app/controllers/api/events_controller.rb)\n class API::EventsController < ApplicationController\n\n+  before_filter :set_access_control_headers\n\n+  def set_access_control_headers\n # #1\n+    headers['Access-Control-Allow-Origin'] = '*'\n # #2\n+    headers['Access-Control-Allow-Methods'] = 'POST, GET, OPTIONS'\n # #3\n+    headers['Access-Control-Allow-Headers'] = 'Content-Type'\n+  end\n\n ...\n end\n```\n\nAt __#1__, we allow requests from any origin.\n\nAt __#2__, we permit the `POST, GET, OPTIONS` request methods.\n\nAt __#3__, we allow the header `Content-Type`, which is used in HTTP requests to declare the type of the data being sent.\n\n### Test your code\n\n- Test the API using [curl](http://curl.haxx.se/):\n\n  ```bash(Terminal)\n  $ curl -v -H \"Accept: application/json\" -H \"Origin: http://registered_application.com\" -H \"Content-Type: application/json\" -X POST -d '{\"name\":\"foobar\"}'  http://localhost:3000/api/events\n  ```\n- Confirm that a new event was created with the event name \"foobar\" and successfully associated with the registered application.\n- Send another curl request, this time from an unregistered URL. Confirm that a new event is not created.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>193, "roadmap_section_ref"=>"972d51d7-e9e7-4400-9b3d-26deb7d18da2|0", "default_student_access"=>"locked", "active_index"=>6, "checkpoint_type"=>"normal", "position"=>6, "points"=>1, "ref"=>"2f24b58e-d031-4281-88e3-230f584dfc3a|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2213", "assessment"=>nil}, {"id"=>2214, "name"=>"Client-Side Javascript", "summary"=>"Client-Side Javascript", "body"=>"<!-- { ids:[2214], name:\"Client-Side Javascript\", summary:\"Client-Side Javascript\" } -->\n>As a user, I want to **use** JavaScript to capture client-side events in my application<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Create a JavaScript Snippet\n\nBlocmetrics users must be able to track events using JavaScript snippets. There's only one function your snippet needs to support:\n\n```javascript\nblocmetrics.report();\n```\n\nWhen a browser executes the `blocmetrics.report` function, make an Ajax request to the server-side API to create the event on your server.\n\nIn order to keep your Blocmetrics code from colliding with other JavaScript code, you should create a namespace for it. The simplest way to do this is to declare an empty object. Open one of your previous projects and add this to its `application.js` file:\n\n```javascript(app/assets/javascripts/application.js)\n+ var blocmetrics = {};\n```\n\nThen create the `report` function as a property on that object:\n\n```javascript(app/assets/javascripts/application.js)\nvar blocmetrics = {};\n+ blocmetrics.report = function(eventName){\n+   // your code here\n+ };\n```\n\nInside the `report` function, use a POST request to create the event. Assume that jQuery is **not** present, and use the Ajax functions that are native to web browsers instead ([the XMLHttpRequest API](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)).\n\nCreate an event with the name `sale`:\n\n```javascript\nblocmetrics.report = function(eventName) {\n+  // #1\n+  var event = {event: { name: eventName }};\n+\n+  // #2\n+  var request = new XMLHttpRequest();\n+  // #3\n+  request.open(\"POST\", \"http://localhost:3000/api/events\", true);\n+  // #4\n+  request.setRequestHeader('Content-Type', 'application/json');\n+  // #5\n+  request.send(JSON.stringify(event));\n}\n```\n\nAt **#1**, we create an event JSON object to send to the Blocmetrics analytics service.\n\nAt **#2**, we initialize a new XMLHttpRequest() (AJAX request)\n\nAt **#3**, we set the HTTP method to POST, the url of our events endpoint, and allow the request to run asynchronously.\n\nAt **#4**, we set the request Content-Type header to 'application/json'. Without that, our API::EventsController would not know to process the request as JSON.\n\nAt **#5**, we finally send the request.\n\nDocument this JavaScript snippet in the Blocmetrics `README.md` for future reference.\n\n### Test Your code\n\n- Add your JavaScript code to the application you want to track. Trigger the tracked event in your browser, and confirm that Blocmetrics creates a new event.\n  > Run two Rails apps at the same time by varying their port numbers. To do so, use the `-p <port_number>` option.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>193, "roadmap_section_ref"=>"972d51d7-e9e7-4400-9b3d-26deb7d18da2|0", "default_student_access"=>"locked", "active_index"=>7, "checkpoint_type"=>"normal", "position"=>7, "points"=>1, "ref"=>"ff26074b-111d-4e6a-8afd-e3dedb4882c1|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2214", "assessment"=>nil}, {"id"=>2215, "name"=>"Event Graphs", "summary"=>"Event Graphs", "body"=>"<!-- { ids:[2215], name:\"Event Graphs\", summary:\"Event Graphs\" } -->\n>As a user, I want to **see** a graph of events for each registered application<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Incorporate Chartkick\n\nUse the JavaScript charting library, [Chartkick library](https://github.com/ankane/chartkick#installation). Add it to your `Gemfile` to install it.\n\n### Update the Show Page\n\nReplace the counts of events with graphs. Chartkick can generate an events pie chart in one line of code:\n\n```erb(app/views/registered_applications/show.html.erb)\n+<%= pie_chart @registered_application.events.group(:name).count %>\n```\n\nTo create a line chart of events over time, install the [Groupdate](https://github.com/ankane/groupdate) gem. Using Groupdate, Chartkick allows you to create a line chart of events over time with:\n\n```erb(app/views/registered_applications/show.html.erb)\n+<%= line_chart @registered_application.events.group_by_day(:created_at).count %>\n```\n\nGroupdate does not support SQLite databases, so you'll need to install PostgreSQL. Follow the appropriate installation instructions below:\n\n| Operating System | Installation Instructions |\n| ---------------- | ------------------------- |\n| OSX | [Postgres.app](http://postgresapp.com/) |\n| Linux | [Digital Ocean: How To Install and Use PostgreSQL on Ubuntu ](https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-14-04) |\n| Windows | [PostgreSQL.org: Graphical installer](http://www.postgresql.org/download/windows/) |\n\n### Test your code\n\n- View the show page of a registered application and confirm a pie chart of all events is displayed.\n- View the show page of a registered application and confirm a line graph of all events over time is displayed.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>193, "roadmap_section_ref"=>"972d51d7-e9e7-4400-9b3d-26deb7d18da2|0", "default_student_access"=>"locked", "active_index"=>8, "checkpoint_type"=>"normal", "position"=>8, "points"=>1, "ref"=>"357c138e-674b-4d2a-b994-00955ca4e3b2|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2215", "assessment"=>nil}]}, {"id"=>194, "roadmap_id"=>38, "name"=>"FE Specialization: Bloc Pong", "time_estimate"=>"80 Hours", "point_ratio"=>0.0, "description"=>"", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"locked", "ref"=>"08a10f26-b91b-42ab-8643-f258ef5cf3a4|0", "section_type"=>"project", "checkpoints"=>[{"id"=>2216, "name"=>"Introduction", "summary"=>"Introduction", "body"=>"<!-- { ids:[2216], name:\"Introduction\", summary:\"Introduction\" } -->\nBlong uses pure JavaScript and the HTML5 canvas element to create a [Pong](http://en.wikipedia.org/wiki/Pong) replica.\n\n<center>![Classic Pong](https://s.yimg.com/os/publish-images/games/2014-07-24/2dbcc300-1359-11e4-9d16-0759e16cb1a6_pong-game-screenshot.jpg)</center>\n\n## Use Case\n\nJavaScript is used for serious business all over the Internet, but it can also be used for pure fun. JavaScript can be used to develop all types of games, including our own [Ruby Warrior](https://www.bloc.io/ruby-warrior). It's important to solve problems as a web developer, but it's also OK to have a good time. This project is strictly about creating fun.\n\nPong is one of the earliest computer games ever created. It simulates a table-tennis or ping-pong match. A player earns a point when the ball gets past the opponent's paddle. The first player to earn eleven points wins.\n\nIn a throwback to 1972, test your JavaScript skills by recreating this arcade classic.\n\n> If you're unfamiliar with Pong, visit [PongGame.org](http://www.ponggame.org/) and play a few rounds.\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As a player, I want to __see__ a Pong table, two paddles, and a ball. | 2 |\n| As a player, I want to __control the position__ of a paddle with arrow keys. | 3 |\n| As a player, I want the ball to __bounce__ off the paddles and two sides of the table. | 3 |\n| As a player, I want to __play against__ a computer opponent. | 3 |\n| As a player, I want to see the score __update live__. | 1 |\n| As a player, I want the __game to end__ when a player scores 11 points. | 1 |", "assignment"=>"Acquaint yourself with the user stories for this project.\n\nOptional: Sketch your own wireframes.\n\nMessage your mentor, letting him/her know that you’ve chosen to work on this project.", "roadmap_section_id"=>194, "roadmap_section_ref"=>"08a10f26-b91b-42ab-8643-f258ef5cf3a4|0", "default_student_access"=>"locked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"5993cd07-fde7-4c43-84d4-0a7eb59a9a2c|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2216", "assessment"=>nil}, {"id"=>2217, "name"=>"Create Visuals", "summary"=>"As a player, I want to see a Pong table, two paddles, and a ball", "body"=>"<!-- { ids:[2217], name:\"Create Visuals\", summary:\"As a player, I want to see a Pong table, two paddles, and a ball\" } -->\n> As a player, I want to __see__ a Pong table, two paddles, and a ball<br>\n> [Difficult Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Create the Pong Table\n\n> How can I generate a ping-pong-like table?[*](https://www.bloc.io/resources/learning-by-writing)\n\nUse the HTML5 `<canvas>` element to create a table in the view. It will need a designated height and width. In the spirit of classic Pong, display the table horizontally with players on the left and right.\n\nRefer to Dive into HTML5's [overview of the `<canvas>` element](http://diveintohtml5.info/canvas.html). Also, check out [HTML5 Canvas Tutorials](http://www.html5canvastutorials.com/tutorials/html5-canvas-element/) for more practice with the `<canvas>` element.\n\nThink of the table as a coordinate plane in which other elements, such as the paddles and ball, will position themselves. The elements should be contained within the width (maximum _x_ value) and height (maximum _y_ value) of the table:\n\n| __Table Corner__ | __Coordinates (_x_, _y_)__ |\n| :-- | :-- |\n| &boxdr; Top left | (0, 0) |\n| &boxdl; Top right | (_x_, 0) |\n| &boxul; Bottom right | (_x_, _y_) |\n| &boxur; Bottom left | (0, _y_) |\n\nStyle the table in some way to distinguish it from the page's background. This will help you to position other elements. Feel free to change the style of the table later.\n\n### Create the Paddles\n\n> How can I generate paddles?[*](https://www.bloc.io/resources/learning-by-writing)\n\nUse an object constructor to create paddles. The game's initial requirements are to have one human player and one computer player, but the game could later expand to have a second human player. An object constructor simplifies the task of creating multiple paddles, which all have the same basic information:\n\n* an _x_-position\n* a _y_-position\n* a width\n* a height\n\nDecide the positions of the player and computer paddles. If the table is horizontal, who is on the left and who is on the right? If the table is vertical, who is on the top and who is on the bottom? Once decided, write two object constructors: `Player` and `Computer`. Each of these functions should create new `Paddle` objects with specified positions and sizes.\n\n### Create the Ball\n\n> How can I generate a ball?[*](https://www.bloc.io/resources/learning-by-writing)\n\nUse an object constructor to create the ball. Like the paddles, the ball should have a position. You can choose to make the ball round by giving it a radius, or make the ball square like classic Pong.\n\nRefer to the [tutorial on arcs](http://www.html5canvastutorials.com/tutorials/html5-canvas-arcs/) to learn how to use a radius and make circles.\n\n### Render the Visuals\n\n> How can I render the objects?[*](https://www.bloc.io/resources/learning-by-writing)\n\nAppend a method named `render` to each of the four constructor's prototypes, for example: `Paddle.prototype.render`. The `render()` method should fill in, or render, the elements.\n\nRefer to the [tutorial on rectangles](http://www.html5canvastutorials.com/tutorials/html5-canvas-rectangles/) for the paddles. Refer to the [tutorial on arcs](http://www.html5canvastutorials.com/tutorials/html5-canvas-arcs/) for the ball.\n\nConstruct the three elements by creating new objects from the constructors: `player`, `computer`, and `ball`.\n\nWrite a function named `render`. This function should call the `render` methods of each of the three objects that were just created.\n\nWrite a `window.onload` function that calls the `render` function.\n\n### Test Your Code\n\n- Load the HTML file in the browser. A table, two paddles, and a ball should be viewable.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>194, "roadmap_section_ref"=>"08a10f26-b91b-42ab-8643-f258ef5cf3a4|0", "default_student_access"=>"locked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"97c798bb-741e-4a7e-ad0a-74a8839c0dbd|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2217", "assessment"=>nil}, {"id"=>2218, "name"=>"Control the Paddle", "summary"=>"As a player, I want to control the position of a paddle with arrow keys", "body"=>"<!-- { ids:[2218], name:\"Control the Paddle\", summary:\"As a player, I want to control the position of a paddle with arrow keys\" } -->\n> As a player, I want to __control the position__ of a paddle with arrow keys<br>\n> [Difficult Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Prepare for Animation\n\n> How do I animate the game?[*](https://www.bloc.io/resources/learning-by-writing)\n\nTo make Bloc Pong work, you need to prepare the game for animation. The game view will need to continuously render during gameplay. To make this possible, write a function named `animate`. This function will call [`requestAnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) on the `window` object. `requestAnimationFrame` will call a callback about 60 times per second. That is, the `animate` function will \"repaint\" the game view every 60 seconds and provide a seamless animation:\n\n```javascript\nvar animate = window.requestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        window.mozRequestAnimationFrame    ||\n        window.oRequestAnimationFrame      ||\n        window.msRequestAnimationFrame     ||\n        function(callback) { window.setTimeout(callback, 1000/60) };\n```\n\nRefer to Mozilla's [article on efficient animation for web games](https://developer.mozilla.org/en-US/docs/Games/Techniques/Efficient_animation_for_web_games) to learn more about game animation in the browser.\n\nThe various vendor versions of `requestAnimationFrame` aim to make the gameplay experience the same in various browsers. The final anonymous function is a catch-all that will run if a browser doesn't support any of the instances of `requestAnimationFrame`.\n\n### Repaint the Game\n\n> What needs to happen each time the game is repainted?[*](https://www.bloc.io/resources/learning-by-writing)\n\nThe callback that you pass to `animate()` will perform the actions that need to occur for each repaint. Write a new function that will act as `animate`'s callback. This function is commonly named `step`.\n\nRemove the `render` function's call from `window.onload` and move it to the `step` function. With each repaint, the program should render the player's paddle, the computer's paddle, and the ball.\n\nKeep in mind this important from the Mozilla Developer Network documentation:\n\n> Your callback routine must itself call `requestAnimationFrame()` if you want to animate another frame at the next repaint.\n\nThe callback, `step`, must call `requestAnimationFrame()`, or `animate()` in this case, to continuously repaint the view, and vice versa.\n\nLastly, the animation needs an initial trigger, such as when the window first loads.\n\n### Prepare the Paddle for Movement\n\n> How do I move a paddle?[*](https://www.bloc.io/resources/learning-by-writing)\n\nMovement always has a speed and a direction. With a hortizontal table, the paddles move up and down (along the y-axis). The paddles also need to be assigned a speed. Unlike cars moving at a number of miles per hour, the paddle the player controls will move a number of pixels per key press.\n\nAdd a property to the `Paddle` constructor to account for speed.\n\nAppend a `move` method to the `Paddle` constructor's prototype. The method should update the current position of a paddle based on how many pixels the paddle should move in a single key press. Additionally, the method should take into account edge cases, such as if the paddle moves all the way to either edge of the table:\n\n> If the paddle reaches either edge of the table, what should happen?[*](https://www.bloc.io/resources/learning-by-writing)\n\n### Move the Paddle\n\n> How can I control the paddle with key presses?[*](https://www.bloc.io/resources/learning-by-writing)\n\nCall `.addEventListener()` on the `window` object to listen for the player's key presses. Refer to [Mozilla's event reference](https://developer.mozilla.org/en-US/docs/Web/Events) to identify the event name to use for the listener. To check for the down and up arrow keys, refer to [JavaScript key codes](http://keycode.info/).\n\nBloc Pong may receive key presses at any time, even in-between step callbacks.\n\n> How should you handle asynchronous key input from the user?[*](https://www.bloc.io/resources/learning-by-writing)\n\n### Test Your Code\n\n- Load the HTML file in the browser. You should be able to move the designated paddle using up and down arrow keys.\n- Verify that paddles are constrained to the boundaries of the board.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>194, "roadmap_section_ref"=>"08a10f26-b91b-42ab-8643-f258ef5cf3a4|0", "default_student_access"=>"locked", "active_index"=>3, "checkpoint_type"=>"normal", "position"=>3, "points"=>1, "ref"=>"6e0b3e98-de43-4fc6-ae24-73fe8b1a192c|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2218", "assessment"=>nil}, {"id"=>2219, "name"=>"Animate the Ball", "summary"=>"As a player, I want the ball to bounce off the paddles and two sides of the table", "body"=>"<!-- { ids:[2219], name:\"Animate the Ball\", summary:\"As a player, I want the ball to bounce off the paddles and two sides of the table\" } -->\n> As a player, I want the ball to __bounce__ off the paddles and two sides of the table<br>\n> [Difficult Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Animate the Ball\n\n> How do I put the ball in motion?[*](https://www.bloc.io/resources/learning-by-writing)\n\nLike the paddles, the ball has a speed and a direction when it moves. Update the `Ball` constructor to account for the ball's speed. Keep in mind that the ball can move in both the _x_ and _y_ directions. The ball's speed is based on the number of pixels it should move per callback (or roughly the number of pixels per second).\n\nWhen the ball is first constructed (prepared for a \"serve\"), it should rely on the `Ball` constructor to provide its initial speed and direction. Set up the ball so that it is served in a random direction with a random speed.\n\nMake sure to render to ball during each callback.\n\n### Detect Collisions\n\n> How can I detect when the ball collides with a paddle?[*](https://www.bloc.io/resources/learning-by-writing)\n\nWhen tracking the position of the ball, the _x_ and _y_ coordinates represent its _center_. But the ball should bounce when its outermost edge strikes a \"surface,\" such as a paddle or one of the table's sides. For example, if the ball has a radius of five pixels, then the edges of the ball are actually five pixels away from the ball's tracked position.\n\nRefer to Mozilla's documentation on [2D collision detection](https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection).\n\nTo detect when the ball collides with a table side, check if the outer edge of the ball is equal to the table side's coordinate. For example, if the table is horizontal, the ball will collide with the top of the table when the edge of the ball is equal to zero on the y-axis. Do a similar check for the other side of the table.\n\nWhen the ball collides with the wall, reverse the direction of the ball:\n\n<center>![collision](https://bloc-global-assets.s3.amazonaws.com/images-frontend/unitypong-reflected-direction.png)</center>\n\nYou can use the _x_ and _y_ speed of the ball to determine its new direction.\n\n### Test Your Code\n\n- Load the HTML file in the browser. The ball should bounce off the paddles and table sides.\n- Verify that the ball bounces reflectively off each surface.\n- Verify that the ball passes through the scoring sides of the table.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>194, "roadmap_section_ref"=>"08a10f26-b91b-42ab-8643-f258ef5cf3a4|0", "default_student_access"=>"locked", "active_index"=>4, "checkpoint_type"=>"normal", "position"=>4, "points"=>1, "ref"=>"1aabe689-b00a-4b40-900a-bcc55b9504f3|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2219", "assessment"=>nil}, {"id"=>2220, "name"=>"Create the Computer AI", "summary"=>"As a player, I want to play against a computer opponent", "body"=>"<!-- { ids:[2220], name:\"Create the Computer AI\", summary:\"As a player, I want to play against a computer opponent\" } -->\n> As a player, I want to __play against__ a computer opponent<br>\n> [Difficult Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Animate the Computer's Paddle\n\n> How can I make the computer's paddle move?[*](https://www.bloc.io/resources/learning-by-writing)\n\nThe AI you implement determines how the computer's paddle moves. The AI can range from very simple to very complex. Aim for creating a fairly simple AI that moves based on the ball's position.\n\nAppend a method named `update` to the `Computer` constructor's prototype. This function should take the `ball` object into account.\n\nCreate an algorithm that positions the computer's paddle based on the position of the ball. Set a max speed in both directions on the computer's paddle. This will make it possible for the human player to score a point against the mildly \"smart\" computer AI.\n\nUse the `paddle` object's `move` method to move the position of the computer's paddle.\n\nLastly, update the global `update` function to include the `computer` object's `update()` method.\n\n### When a Player Scores\n\n> How can I re-serve the ball when a player scores?[*](https://www.bloc.io/resources/learning-by-writing)\n\nA player earns a point when the ball gets past the opponent's paddle. When a point is earned, the ball should be served again. The serving of the ball can be simple, where it's always served in the same direction, or it can be complex, where it's served in a random direction at a random speed each time. Aim for a simple serve and add complexity to it later if you want.\n\nAdd to the method on `Ball.prototype` that you've created to detect collisions and update the ball's position and velocity. Write one statement for each: to check when a player scores a point and when the computer scores a point. The ball's speed, direction, and position should reset in each.\n\n> How fast should the ball travel during a serve?<br>\n> In what direction should the ball travel?<br>\n> From what coordinates should the ball originate?\n\n### Test Your Code\n\n- Load the HTML file in the browser. The computer's paddle should move based on the implemented AI.\n- Verify that the ball is able to get past the computer's paddle.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>194, "roadmap_section_ref"=>"08a10f26-b91b-42ab-8643-f258ef5cf3a4|0", "default_student_access"=>"locked", "active_index"=>5, "checkpoint_type"=>"normal", "position"=>5, "points"=>1, "ref"=>"271da5b4-09ad-4b61-b8cb-7aa94c1b3f87|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2220", "assessment"=>nil}, {"id"=>2221, "name"=>"Display the Live Score", "summary"=>"As a player, I want to see the score update live", "body"=>"<!-- { ids:[2221], name:\"Display the Live Score\", summary:\"As a player, I want to see the score update live\" } -->\n> As a player, I want to see the score __update live__<br>\n> [Difficult Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\n### Track the Score\n\n> How can I keep track of the score?[*](https://www.bloc.io/resources/learning-by-writing)\n\nCreate two variables to hold the values of the players' scores. Each player's score should be zero at the start of a new game.\n\nWhen a player scores a point, the variable holding their score value should increase by one.\n\n### Display the Score\n\n> How can I display the score?[*](https://www.bloc.io/resources/learning-by-writing)\n\nCreate HTML elements to house the score values. Use DOM selectors to select the elements. Use the [`innerHTML` property](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML) to assign the players' scores to the designated elements.\n\nRefer to the [DOM Selectors and Methods](https://www.bloc.io/resources/dom-selectors-and-methods) resource to review how to select DOM elements.\n\n### Test Your Code\n\n- Load the HTML file in the browser. The score should update each time a player scores a point.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>194, "roadmap_section_ref"=>"08a10f26-b91b-42ab-8643-f258ef5cf3a4|0", "default_student_access"=>"locked", "active_index"=>6, "checkpoint_type"=>"normal", "position"=>6, "points"=>1, "ref"=>"00d97e05-7bc4-451b-9d70-f75ddcb5146d|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2221", "assessment"=>nil}, {"id"=>2222, "name"=>"End the Game", "summary"=>"As a player, I want the game to end when a player scores 11 points", "body"=>"<!-- { ids:[2222], name:\"End the Game\", summary:\"As a player, I want the game to end when a player scores 11 points\" } -->\n> I want the __game to end__ when a player scores 11 points<br>\n> [Difficult Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### End the Game When a Player Reaches Eleven Points\n\n> How can I stop the game when a player reaches eleven points?[*](https://www.bloc.io/resources/learning-by-writing)\n\nEach time a player scores a point, check the total number of points against the number of points needed to win the game, which is eleven. Once a player reaches eleven points, both players' scores should reset back to zero.\n\n### Display a \"Game Over\" Message to the User\n\n> How can I display a message to the user when the game is over?[*](https://www.bloc.io/resources/learning-by-writing)\n\nCreate an HTML element that is hidden by default. When one of the players scores eleven points, make the element visible and update the content of the message. If the user wins, print \"You won!\" If the user loses, print \"You lost!\"\n\nInstruct the user to refresh the page to play again.\n\n### Test Your Code\n\n> Hint: Set the score limit to `1` to speed up testing.\n\n- Load the HTML file in the browser. A message should display once a player earns 11 points.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>194, "roadmap_section_ref"=>"08a10f26-b91b-42ab-8643-f258ef5cf3a4|0", "default_student_access"=>"locked", "active_index"=>7, "checkpoint_type"=>"normal", "position"=>7, "points"=>1, "ref"=>"d587cd5a-9d23-4906-b487-098600a45186|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2222", "assessment"=>nil}, {"id"=>2223, "name"=>"Extra Credit", "summary"=>"If you finish early, attempt these extra credit user stories", "body"=>"<!-- { ids:[2223], name:\"Extra Credit\", summary:\"If you finish early, attempt these extra credit user stories\" } -->\n\nThe goal of extra credit is to push you towards self-reliance, so outside of a brief description, we don't provide additional resources. If you finish your project early, challenge yourself to complete these additional user stories:\n\n| **User Story** | **Difficulty Rating** |\n| :-- | :-- |\n| As a player, I want to control the position of the paddles with a mouse. | 3 |\n| As a player, I want the choice to use the keyboard or mouse for paddle control. | 2 |\n| As a player, I want the choice between three difficulty levels: beginner, intermediate, expert. | 2 |\n| As a player, I want to play against a human player. | 3 |\n| As a player, I want to hear a sound when the ball hits a paddle. | 2 |", "assignment"=>"Optional: Complete one or more of the extra credit user stories.", "roadmap_section_id"=>194, "roadmap_section_ref"=>"08a10f26-b91b-42ab-8643-f258ef5cf3a4|0", "default_student_access"=>"locked", "active_index"=>nil, "checkpoint_type"=>"extra_credit", "position"=>nil, "points"=>0, "ref"=>"87ca611f-a2e1-4cb8-8196-c7ad6b846f9c|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2223", "assessment"=>nil}]}, {"id"=>195, "roadmap_id"=>38, "name"=>"BE Specialization: Blocitoff", "time_estimate"=>"80 Hours", "point_ratio"=>0.0, "description"=>"Build an application that allows users to create self-destructing to-do lists.", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"locked", "ref"=>"5762bb73-f29d-4168-89b7-01370dc29a5f|0", "section_type"=>"project", "checkpoints"=>[{"id"=>2224, "name"=>"Introduction", "summary"=>"Introduction", "body"=>"<!-- { ids:[2224], name:\"Introduction\", summary:\"Introduction\" } -->\nBuild an application that allows users to create self-destructing to-do lists.\n\n## Use Case\n\nTo-do lists are notorious for collecting junk: to-do items that you want to remember, but are not very important and thus get consistently put off. To address the problem of to-do list clutter, you will create Blocitoff.\n\nBlocitoff will aim to keep to-do lists manageable by automatically deleting to-do items that have not been completed after seven days. The hypothesis is that if the to-do item is not important enough to be completed in seven days, it doesn't belong on your to-do list.\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As a user, I want to **sign up** for a free account by providing a user name, password and email | 2 |\n| As a user, I want to **sign in and out** of Blocitoff | 2 |\n| As a user, I want to **see** my profile page | 2 |\n| As a user, I want to **create** multiple to-do items | 3 |\n| As a developer, I want to **seed** the development database automatically with users and to-do items | 1 |\n| As a user, I want to **mark** to-do items as complete and have them deleted | 3 |\n| As a user, I want to **see** how old a to-do item is | 1 |\n| As a user, my to-dos should be **automatically deleted** seven days after their creation date | 2 |\n\n## Wireframe Examples\n\nThese wireframes are meant to suggest a design, not dictate one.\n\n| **Wireframe** | **Description** |\n| :-- | :-- |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocitoff/blocitoff_home_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocitoff/blocitoff_home.png) | Home Page. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocitoff/blocitoff_index_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocitoff/blocitoff_index.png) | Index of Tasks. |", "assignment"=>"Acquaint yourself with the user stories for this project.\n\nOptional: Sketch your own wireframes.\n\nMessage your mentor, letting him/her know that you’ve chosen to work on this project.", "roadmap_section_id"=>195, "roadmap_section_ref"=>"5762bb73-f29d-4168-89b7-01370dc29a5f|0", "default_student_access"=>"locked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"f1fc2eec-45e7-48ae-832a-c55ae2c81863|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2224", "assessment"=>nil}, {"id"=>2225, "name"=>"User Sign Up", "summary"=>"User Sign Up", "body"=>"<!-- { ids:[2225], name:\"User Sign Up\", summary:\"User Sign Up\" } -->\n> As a user, I want to **sign up** for a free account by providing a user name, password and email<br>\n> [Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Incorporate Devise\n\nUse the [Devise](https://github.com/plataformatec/devise) gem for authentication. Blocitoff's authentication system should allow users to sign up and send emails for account confirmation. Refer to the [Devise Resource](https://www.bloc.io/resources/devise) and the [Devise Getting Started Guide](https://github.com/plataformatec/devise#getting-started) for examples on implementing user sign up.\n\n> We recommend using Bootstrap to make styling your application easier.\n\n### Test Your Code\n\n- Sign a new user up. Do you receive a confirmation email?\n- What happens if you attempt to sign up with an invalid email?\n- What happens if you attempt to sign up with a duplicate email?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>195, "roadmap_section_ref"=>"5762bb73-f29d-4168-89b7-01370dc29a5f|0", "default_student_access"=>"locked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"0209e329-00d3-4572-9588-1120c8591907|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2225", "assessment"=>nil}, {"id"=>2226, "name"=>"User Sign in and Out", "summary"=>"User Sign in and Out", "body"=>"<!-- { ids:[2226], name:\"User Sign in and Out\", summary:\"User Sign in and Out\" } -->\n>As a user, I want to **sign in and out** of Blocitoff<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\nNow that users can sign up for Blocitoff, you want to give them a way to sign in and out of the app. Refer to our [Devise Resource](https://www.bloc.io/resources/devise) and the [ Devise Getting Started Guide](https://github.com/plataformatec/devise#getting-started) for examples on implementing user sign in/out with Devise.\n\n### Test Your Code\n\n- Sign into Blocitoff, does the top navigation change to indicate you are signed in?\n- Sign out of Blocitoff, does the top navigation change to indicate you are signed out?\n- What happens if you attempt to reset your password?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>195, "roadmap_section_ref"=>"5762bb73-f29d-4168-89b7-01370dc29a5f|0", "default_student_access"=>"locked", "active_index"=>3, "checkpoint_type"=>"normal", "position"=>3, "points"=>1, "ref"=>"29437cb7-b5d3-4f3b-9d70-70195c68cb1d|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2226", "assessment"=>nil}, {"id"=>2227, "name"=>"User Profile", "summary"=>"User Profile", "body"=>"<!-- { ids:[2227], name:\"User Profile\", summary:\"User Profile\" } -->\n>As a user, I want to **see** my profile page<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Generate a Controller\n\nGenerate a `UsersController` with the `show` action. Write the required code in the `show` action to populate users __show__ view. Write the necessary code in users __show__ view to display the information of the signed-in user. After a user signs in, they should be redirected to their users __show__ view. Update the `root` path in `routes.rb` so that it maps to the users __show__ view.\n\n### Test Your Code\n\n- Sign into Blocitoff, are you redirected to your user show page?\n- Does your user show page have the appropriate user details?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>195, "roadmap_section_ref"=>"5762bb73-f29d-4168-89b7-01370dc29a5f|0", "default_student_access"=>"locked", "active_index"=>4, "checkpoint_type"=>"normal", "position"=>4, "points"=>1, "ref"=>"7ceb372d-d2d6-4eeb-ac91-d697f21336ba|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2227", "assessment"=>nil}, {"id"=>2228, "name"=>"Create To-Do Items", "summary"=>"Create To-Do Items", "body"=>"<!-- { ids:[2228], name:\"Create To-Do Items\", summary:\"Create To-Do Items\" } -->\n>As a user, I want to **create** multiple to-do items<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Create a Model\n\nCreate an `Item` model. For guidance, you can refer to the <C>1635|Models</C> checkpoint:\n\n```bash(Terminal)\n$ rails g model Item name:string user:references\n```\n\nA user `has_many :items` and an item `belongs_to :user`. Update `user.rb` and `item.rb` to reflect this association. Nest the items resource under resources `:users` in `routes.rb`. You only have one **item** action for now (`:create`), setup only the routes that you need.\n\n>Hint: Use `only:` instead of `except:`\n\n### Create a Controller\n\nUsers may only create items for now, so generate `items_controller.rb` with the appropriate action then complete it. The action should create a new item associated with a user. Modify `UsersController` to provide the requisite instance variable to `users#show`.\n\n### Build Partials\n\nCreate an `items/_form.html.erb` partial in a new `items` view directory so users can submit new items. Create a partial named `_item.html.erb` in the `items` directory. Use it in the users __show__ view to show the body of each item already associated with the user. This will be public to other users, with the hopes that peer pressure will help motivate users to complete their tasks.\n\nThe form partial above should render the form for submitting a new item, but this item partial should render the relevant information for an item associated with `@user`. This partial renders a single item, therefore you need to call it multiple times, rendering a partial for each item in `@items`. This is a good candidate for an `each` loop.\n\n### Test Your Code\n\n- Are you able to create multiple to-do items?\n- Are to-do items displayed after creation?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>195, "roadmap_section_ref"=>"5762bb73-f29d-4168-89b7-01370dc29a5f|0", "default_student_access"=>"locked", "active_index"=>5, "checkpoint_type"=>"normal", "position"=>5, "points"=>1, "ref"=>"2c93a858-0476-41a2-9ea8-12ffdcf26696|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2228", "assessment"=>nil}, {"id"=>2229, "name"=>"Seeding Data", "summary"=>"Seeding Data", "body"=>"<!-- { ids:[2229], name:\"Seeding Data\", summary:\"Seeding Data\" } -->\n>As a developer, I want to **seed** the development database automatically with users and to-do items<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\n### Seed With Faker\n\nNow that user and wiki models are established, you can seed data into the development database. Use the [Faker](https://github.com/stympy/faker) gem to generate fake data for __users and items__. Refer to the <C>1637|Seeding Data</C> checkpoint for examples on setting up the `seeds.rb` file.\n\nReturn to this user story as you continue to build Blocitoff, updating `seeds.rb` to reflect the changes you make in the app.\n\n### Test Your Code\n\n- Rebuild your database, is it seeded with the data you specified?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>195, "roadmap_section_ref"=>"5762bb73-f29d-4168-89b7-01370dc29a5f|0", "default_student_access"=>"locked", "active_index"=>6, "checkpoint_type"=>"normal", "position"=>6, "points"=>1, "ref"=>"0d7ed66c-5fc5-40f7-95ba-7c474a77eef5|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2229", "assessment"=>nil}, {"id"=>2230, "name"=>"Mark To-Do Items as Complete", "summary"=>"Mark To-Do Items as Complete", "body"=>"<!-- { ids:[2230], name:\"Mark To-Do Items as Complete\", summary:\"Mark To-Do Items as Complete\" } -->\n>As a user, I want to **mark** to-do items as complete and have them deleted<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Use a Delete Link\n\nWhen a user marks a to-do item as complete, you want it deleted immediately, so use a `:delete` link to \"complete\" a to-do item. Add the following to `items/_item`:\n\n```ruby(app/views/items/_item.html.erb)\n<%= link_to \"\", item, method: :delete, class: 'glyphicon glyphicon-ok' %>\n```\n\n> The use of the `glyphicon` class assumes your application uses Bootstrap.\n\nThe **glyphicon glyphicon-ok** classes create a check mark which links to the delete action.\n\nTest to make sure you can mark a to-do item as complete and delete it. Use Ajax to delete to-do items without reloading the page. Refer to the <C>1658|Ajax</C> checkpoint for a refresher on how to implement Ajax within Rails.\n\n### Test Your Code\n\n- Are you able to delete multiple to-do items?\n- Can to-do items be deleted using Ajax?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>195, "roadmap_section_ref"=>"5762bb73-f29d-4168-89b7-01370dc29a5f|0", "default_student_access"=>"locked", "active_index"=>7, "checkpoint_type"=>"normal", "position"=>7, "points"=>1, "ref"=>"c2c7e4cd-dcef-4c36-86b7-961da40e19bb|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2230", "assessment"=>nil}, {"id"=>2231, "name"=>"Displaying Time Remaining", "summary"=>"Displaying Time Remaining", "body"=>"<!-- { ids:[2231], name:\"Displaying Time Remaining\", summary:\"Displaying Time Remaining\" } -->\n>As a user, I want to **see** how old a to-do item is<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\n### Modify Item\n\nUsers have seven days to complete a to-do item before it is automatically deleted. Use the [distance_of_time_in_words](http://apidock.com/rails/ActionView/Helpers/DateHelper/distance_of_time_in_words) helper method to display the number of days since a to-do item was created.\n\n### Test Your Code\n\n- Use the Rails console and the `update_attribute` method to update the `created_at` attribute on several to-do items. Do your views correctly display the number of days left to complete these to-do items?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>195, "roadmap_section_ref"=>"5762bb73-f29d-4168-89b7-01370dc29a5f|0", "default_student_access"=>"locked", "active_index"=>8, "checkpoint_type"=>"normal", "position"=>8, "points"=>1, "ref"=>"b74fb91c-e474-4636-a3c9-3031452c9d36|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2231", "assessment"=>nil}, {"id"=>2232, "name"=>"Delete Expired To-Do Items", "summary"=>"Delete Expired To-Do Items", "body"=>"<!-- { ids:[2232], name:\"Delete Expired To-Do Items\", summary:\"Delete Expired To-Do Items\" } -->\n>As a user, my to-dos should be **automatically deleted** seven days after their creation date<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Incorporate Rake\n\n[Rake](http://guides.rubyonrails.org/command_line.html#rake) is a utility that can be used to automate administrative tasks in a Rails application. You should be familiar with rake tasks like `rake db:migrate`. Now you must [create custom rake tasks](http://railscasts.com/episodes/66-custom-rake-tasks) to delete expired to-do items. Generate a new task by using the rails task generator:\n\n```bash(Terminal)\nrails g task todo delete_items\n```\n\nThis generates a new file, `lib/tasks/todo.rake` with the following contents:\n\n```ruby(lib/tasks/todo.rake)\nnamespace :todo do\n  desc \"TODO\"\n  task delete_items: :environment do\n  end\n\nend\n```\n\n- `namespace :todo` organizes your new task under the **todo** namespace.\n- `task delete_items:` defines your new task, the **delete_items** task.\n- `desc \"TODO\"` provides documentation for your task. You should change it to something more informative.\n\nModify the created task so that it deletes items older than seven days.\n\n```ruby(lib/tasks/todo.rake)\n namespace :todo do\n-  desc \"TODO\"\n+  desc \"Delete items older than seven days\"\n   task delete_items: :environment do\n+    Item.where(\"created_at <= ?\", Time.now - 7.days).destroy_all\n   end\n\n end\n```\n\nType: `rake todo:delete_items` in the terminal to run the Rake task. To see a list of all rake tasks (both those provided by Rails and the one you just created), type `bundle exec rake -T` in the terminal. The last entry is your newly created task:\n\n```bash(Terminal)\nrake todo:delete_items                  # Delete items older than seven days\n```\n\n### Test Your Code\n\n- Generate todos and set their creation dates to a time in the past, then execute your Rake task. Verify that todos older than seven days are deleted, all others should remain.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>195, "roadmap_section_ref"=>"5762bb73-f29d-4168-89b7-01370dc29a5f|0", "default_student_access"=>"locked", "active_index"=>9, "checkpoint_type"=>"normal", "position"=>9, "points"=>1, "ref"=>"d21bb012-d13e-4a0c-bb23-717cd0b52517|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2232", "assessment"=>nil}, {"id"=>2233, "name"=>"Extra Credit", "summary"=>"If you finish early, attempt these extra credit user stories", "body"=>"<!-- { ids:[2233], name:\"Extra Credit\", summary:\"If you finish early, attempt these extra credit user stories\" } -->\nThe goal of extra credit is to push you towards self-reliance, so outside of a brief description, we don't provide additional resources. If you finish your project early, challenge yourself to complete these additional user stories:\n\n| **User Story** | **Difficulty Rating** |\n| :-- | :-- |\n| As a user, I want my users __show__ page to be private. | 3 |\n| As a developer, I want to rebuild Blocitoff using [test-driven development](https://www.bloc.io/resources/tdd-introduction) | 3 |\n| As a developer, I want to implement user [authentication from scratch](http://railscasts.com/episodes/250-authentication-from-scratch) | 3 |\n| As a developer, I want to [automate](https://github.com/javan/whenever) my delete Rake task to run each day | 2 |", "assignment"=>"Optional: Complete one or more of the extra credit user stories.", "roadmap_section_id"=>195, "roadmap_section_ref"=>"5762bb73-f29d-4168-89b7-01370dc29a5f|0", "default_student_access"=>"locked", "active_index"=>nil, "checkpoint_type"=>"extra_credit", "position"=>nil, "points"=>0, "ref"=>"f723486b-4420-4005-8194-edca248c4fbd|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2233", "assessment"=>nil}]}, {"id"=>196, "roadmap_id"=>38, "name"=>"FE Specialization: Blocmetrics", "time_estimate"=>"80 Hours", "point_ratio"=>0.0, "description"=>"Build an analytics tracker for Bloc Jams that can track various metrics.", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"locked", "ref"=>"468c04c1-d887-4fec-9004-b6fcb348337d|0", "section_type"=>"project", "checkpoints"=>[{"id"=>2234, "name"=>"Introduction", "summary"=>"Introduction", "body"=>"<!-- { ids:[2234], name:\"Introduction\", summary:\"Introduction\" } -->\nBuild an analytics tracker for Bloc Jams that can track metrics such as song play count, a list of songs played, number of visits to each page, etc.\n\n## Use Case\n\nInternal analytics are important with an application that has as much measurable activity as a music player. Blocmetrics focuses on these important components:\n\n- A client-side event handler that executes a callback when an arbitrary metric is recorded\n- An Angular model to captures displayable events\n- A new state accessible from the navigation that handles all of the operations on the analytics service\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As an administrator, I want to __capture events__ from any page in Bloc Jams | 3 |\n| As an administrator, I want to view a __dashboard of events__ captured from an application where I included the event handler | 3 |\n\nLater user stories often rely on the completion of the former, therefore, work on them in the order prescribed.\n\n## Wireframes\n\nThis wireframe is meant to suggest a design, not dictate one.\n\n| **Wireframe** | **Description** |\n| :-- | :-- |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/blocmetrics/blocmetrics-show-tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/blocmetrics/blocmetrics-show.png) | Blocmetrics show page. |", "assignment"=>"Acquaint yourself with the user stories for this project.\n\nOptional: Sketch your own wireframes.\n\nMessage your mentor, letting him/her know that you’ve chosen to work on this project.", "roadmap_section_id"=>196, "roadmap_section_ref"=>"468c04c1-d887-4fec-9004-b6fcb348337d|0", "default_student_access"=>"locked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"cdf069df-e8e2-4d3b-924e-6435b7cc0b31|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2234", "assessment"=>nil}, {"id"=>2235, "name"=>"Capture Events", "summary"=>"As an administrator, I want to capture events from any page in Bloc Jams", "body"=>"<!-- { ids:[2235], name:\"Capture Events\", summary:\"As an administrator, I want to capture events from any page in Bloc Jams\" } -->\n\n> As an administrator, I want to __capture events__ from any page in Bloc Jams<br>\n> [Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n## Record Metrics\n\nDecide what metrics you'd like to track. Some ideas are:\n\n- Page (song, album, artist) views\n- Song plays\n  - _Is a song play tracked by pressing the 'play' button or by listening to the entire song?_\n- Most played artist(s) and/or album(s)\n\nYou want to hold all the data you track in a model (recall the [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) and [MVVM](http://en.wikipedia.org/wiki/Model_View_ViewModel) patterns). There is no server-side code to capture these events. Instead, you should use a [`$rootScope`](https://docs.angularjs.org/api/ng/service/$rootScope) array variable to hold your metrics. This way, the captured metrics will persist when you navigate between pages. Wrap the metrics in a service so that you can add methods to it and inject it across components. For example:\n\n```js\n(function() {\n  function Metric($rootScope) {\n    $rootScope.songPlays = [];\n\n    return {\n      // Function that records a metric object by pushing it to the $rootScope array\n      registerSongPlay: function(songObj) {\n        // Add time to event register\n        songObj['playedAt'] = new Date();\n        $rootScope.songPlays.push(songObj);\n      },\n      listSongsPlayed: function() {\n        var songs = [];\n        angular.forEach($rootScope.songPlays, function(song) {\n            songs.push(song.title);\n        });\n        return songs;\n      }\n    };\n  }\n\n  angular\n    .module('blocJams')\n    .service('Metric', ['$rootScope', Metric]);\n})();\n```\n\n> Consider using [momentjs](http://momentjs.com) to format dates.\n\nYou need a component that records a metric and keeps track of the type of metric. To capture the metric, you will need something in the view that registers the event you are trying to capture. There are several ways to implement the capture. Here are some ideas to start:\n\n- Create a directive that can be used as an attribute on every element where you want to track a given metric.\n- Create a controller action that registers the event using an existing directive like `ngClick`.\n\n### Test Your Code\n\n- Embed event tracking in several interface elements.\n  - Verify that Bloc Jams records events to your `$rootScope` variable.\n- Verify that your tracked events persist during page navigation.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>196, "roadmap_section_ref"=>"468c04c1-d887-4fec-9004-b6fcb348337d|0", "default_student_access"=>"locked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"874c1374-1713-4e6b-b514-a0675c768890|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2235", "assessment"=>nil}, {"id"=>2236, "name"=>"Display Events", "summary"=>"As an administrator, I want to view a dashboard of events captured from an application", "body"=>"<!-- { ids:[2236], name:\"Display Events\", summary:\"As an administrator, I want to view a dashboard of events captured from an application\" } -->\n\n> As an administrator, I want to view a __dashboard of events__ captured from an application where I included the event handler<br>\n> [Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n## Create a New View\n\n<center>![img](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/blocmetrics/blocmetrics-show.png)</center>\n\n> How should I arrange metrics for display?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nYou will need a separate view for displaying all of the captured metrics. The metrics should be organized and readable. To display the events aesthetically, use a library like [Angular-nvD3](http://krispo.github.io/angular-nvd3/#/), a charting library based on [D3.js](http://d3js.org). Angular-nvD3 provides an AngularJS directive for displaying data. Create a graph of events over time or a visualization of the distribution of events.\n\nHere's an example of a bar chart using Angular-nvD3:\n\n<iframe style=\"border: 1px solid #999;width: 100%; height: 300px\"\n        src=\"https://embed.plnkr.co/zGc5Wp/preview\" frameborder=\"0\"\n        allowfullscreen=\"allowfullscreen\">\n  Loading plunk...\n</iframe>\n\n\"D3\" stands for Data-Driven Documents, and is one of the most popular JavaScript libraries for displaying data. For developers who want to learn more about data visualization, learning D3 is highly advised. Since Angular-nvD3 is based on D3.js, we recommend reading the documentation for both.\n\n### Test Your Code\n\n- Perform several actions to trigger metric capturing.\n  - Navigate to the analytics show page.\n  - Verify that the show page displays the recorded metrics.\n  - Verify that the show page functions well on older browsers.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>196, "roadmap_section_ref"=>"468c04c1-d887-4fec-9004-b6fcb348337d|0", "default_student_access"=>"locked", "active_index"=>3, "checkpoint_type"=>"normal", "position"=>3, "points"=>1, "ref"=>"efe992c1-02d6-4b21-9118-e657d9c2539c|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2236", "assessment"=>nil}, {"id"=>2237, "name"=>"Extra Credit", "summary"=>"If you finish early, attempt these extra credit user stories", "body"=>"<!-- { ids:[2237], name:\"Extra Credit\", summary:\"If you finish early, attempt these extra credit user stories\" } -->\nThe goal of extra credit is to push you towards self-reliance, so outside of a brief description, we don't provide additional resources. If you finish your project early, challenge yourself to complete these additional user stories:\n\n| **User Story** | **Difficulty Rating** |\n| :-- | :-- |\n| As an application owner, I want the analytics dashboard to be __interactive__ | 3 |\n| As an application owner, I want to __authenticate__ users to view the events dashboard | 3 |\n| As a user, I want to view a __dashboard__ of my song plays | 2 |", "assignment"=>"Optional: Complete one or more of the extra credit user stories.", "roadmap_section_id"=>196, "roadmap_section_ref"=>"468c04c1-d887-4fec-9004-b6fcb348337d|0", "default_student_access"=>"locked", "active_index"=>nil, "checkpoint_type"=>"extra_credit", "position"=>nil, "points"=>0, "ref"=>"827acd58-5984-4c03-a294-163f4ecee80a|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2237", "assessment"=>nil}]}, {"id"=>197, "roadmap_id"=>38, "name"=>"BE Specialization: Blocmarks", "time_estimate"=>"80 Hours", "point_ratio"=>0.0, "description"=>"Build an app that allows a users to send, manage, and share bookmarks.", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"locked", "ref"=>"d90dea94-5d48-4c9e-9077-596d37c53863|0", "section_type"=>"project", "checkpoints"=>[{"id"=>2238, "name"=>"Introduction", "summary"=>"Introduction", "body"=>"<!-- { ids:[2238], name:\"Introduction\", summary:\"Introduction\" } -->\nBuild an application that allows a user to bookmark URLs via email, peruse other user's bookmarks and maintain a personal index of categorized bookmarks.\n\n## Use Case\n\nIt's easy enough to bookmark a URL in your browser, but eventually your bookmark library may get cluttered and it may require effort to manage bookmarks. Wouldn't you also like the ability to share bookmarks with friends? That is not something you can do easily from your native browser.\n\nBlocmarks will solve these problems by organizing bookmarks by topic and making them public so that other users can find them and add bookmarks to their own Blocmarks profile.\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As a user, I want to **sign up** for a free account by providing a user name, password and email | 2 |\n| As a user, I want to **sign in and out** of Blocmarks | 2 |\n| As a user, I want to **email** a URL to Blocmarks and have it saved in the Blocmarks database | 3 |\n| As a user, I want to **see** an index of all topics and their bookmarks | 3 |\n| As a user, I want to **create, read, update, and delete** bookmarks | 2 |\n| As a user, I want to be the **only one allowed** to delete and update my bookmarks | 3 |\n| As a user, I want to **\"like and unlike\"** bookmarks created by other users | 2 |\n| As a user, I want to **see** a list of bookmarks on my personal profile that I've added or liked | 3 |\n\nBefore you begin working on user stories, complete this project's [Getting Started guide](https://www.bloc.io/resources/getting-started-with-rails-web-development-projects). Later user stories often rely on the completion of the former, therefore, work on them in the order prescribed.\n\n## Wireframes\n\nThese wireframes are meant to suggest a design, not dictate one.\n\n| **Wireframe** | **Description** |\n| :-- | :-- |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocmarks/blocmarks_index_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocmarks/blocmarks_index.png) | Index page. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocmarks/blocmarks_show_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocmarks/blocmarks_show.png) | Topic show page. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocmarks/blocmarks_my_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocmarks/blocmarks_my.png) | User's profile page. |", "assignment"=>"Acquaint yourself with the user stories for this project.\n\nOptional: Sketch your own wireframes.\n\nMessage your mentor, letting him/her know that you’ve chosen to work on this project.", "roadmap_section_id"=>197, "roadmap_section_ref"=>"d90dea94-5d48-4c9e-9077-596d37c53863|0", "default_student_access"=>"locked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"9f8972f9-cc0d-4567-8367-a76c091a1fab|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2238", "assessment"=>nil}, {"id"=>2239, "name"=>"User Sign Up", "summary"=>"User Sign Up", "body"=>"<!-- { ids:[2239], name:\"User Sign Up\", summary:\"User Sign Up\" } -->\n>As a user, I want to **sign up** for a free account by providing a user name, password and email<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Incorporate Devise\n\nUse the [Devise](https://github.com/plataformatec/devise) gem for authentication. Blocmark's authentication system should allow users to sign up and send emails for account confirmation. Refer to the [Devise Resource](https://www.bloc.io/resources/devise) and the [Devise Getting Started Guide](https://github.com/plataformatec/devise#getting-started) for examples on implementing user sign up.\n\n### Test Your Code\n\n- Sign a new user up. Do you receive a confirmation email?\n- What happens if you attempt to sign up with an invalid email?\n- What happens if you attempt to sign up with a duplicate email?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>197, "roadmap_section_ref"=>"d90dea94-5d48-4c9e-9077-596d37c53863|0", "default_student_access"=>"locked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"433ac258-9124-4a35-a667-8dc105836228|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2239", "assessment"=>nil}, {"id"=>2240, "name"=>"User Sign in and Out", "summary"=>"User Sign in and Out", "body"=>"<!-- { ids:[2240], name:\"User Sign in and Out\", summary:\"User Sign in and Out\" } -->\n>As a user, I want to **sign in and out** of Blocmarks<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\nNow that users can sign up for Blocmarks, you want to give them a way to sign in and out of the app. Refer to our [Devise Resource](https://www.bloc.io/resources/devise) and the [ Devise Getting Started Guide](https://github.com/plataformatec/devise#getting-started) for examples on implementing user sign in/out with Devise.\n\n### Test Your Code\n\n- Sign into Blocmarks, does the top navigation change to indicate you are signed in?\n- Sign out of Blocmarks, does the top navigation change to indicate you are signed out?\n- What happens if you attempt to reset your password?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>197, "roadmap_section_ref"=>"d90dea94-5d48-4c9e-9077-596d37c53863|0", "default_student_access"=>"locked", "active_index"=>3, "checkpoint_type"=>"normal", "position"=>3, "points"=>1, "ref"=>"1bb8dbca-a9cb-4c7f-96cf-9055b1f5e543|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2240", "assessment"=>nil}, {"id"=>2241, "name"=>"Topics CRUD", "summary"=>"Topics CRUD", "body"=>"<!-- { ids:[2241], name:\"Topics CRUD\", summary:\"Topics CRUD\" } -->\n>As a user, I want to **see** an index of all topics and their bookmarks<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Generate Models\n\nGenerate a topic model. Topics should be associated with users:\n\n```bash(Terminal)\n$ rails g model Topic title:string user:references:index\n```\n\nAssociate topics with users:\n\n```ruby(app/models/user.rb)\nclass User < ActiveRecord::Base\n...\n\n+  has_many :topics\nend\n```\nGenerate a bookmark model and bookmarks:\n\n```bash(Terminal)\n$ rails g model Bookmark url:string topic:references:index\n```\n\nAssociate bookmarks with topics:\n\n```ruby(app/models/topic.rb)\nclass Topic < ActiveRecord::Base\n  belongs_to :user\n+  has_many :bookmarks\nend\n```\n### Generate a Topics Controller\n\nGenerate `topics_controller.rb`:\n\n```bash(Terminal)\n$ rails g controller Topics index show new edit\n```\n\n### Implement CRUD For Topics\n\nDisplay each topic and the bookmarks that belong to it. Use this wireframe as a guideline:\n\n![img](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocmarks/blocmarks_index.png)\n\nAllow users to create and destroy topics from the topics __index__ view. Clicking on a topic should take the user to that topic's __show__ view and display only those bookmarks which belong to it:\n\n![img](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocmarks/blocmarks_show.png)\n\nImplement the show action in `topics_controller.rb` and display the bookmarks in `app/views/topics/show.html.erb`.\n\n### Test Your Code\n\n- Are you able to create a topic?\n- Are you able to delete a topic?\n- Are associated bookmarks displayed for each topic?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>197, "roadmap_section_ref"=>"d90dea94-5d48-4c9e-9077-596d37c53863|0", "default_student_access"=>"locked", "active_index"=>4, "checkpoint_type"=>"normal", "position"=>4, "points"=>1, "ref"=>"1781d5a0-10af-43ab-ae87-9d7af4f97e65|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2241", "assessment"=>nil}, {"id"=>2242, "name"=>"Bookmarks CRUD", "summary"=>"Bookmarks CRUD", "body"=>"<!-- { ids:[2242], name:\"Bookmarks CRUD\", summary:\"Bookmarks CRUD\" } -->\n>As a user, I want to **create, read, update, and delete** bookmarks<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Generate a Bookmarks Controller\n\nGenerate `BookmarksController`:\n\n```bash(Terminal)\n$ rails g controller Bookmarks show new edit\n```\n\nYou don't generate an index action for `BookmarksController` because the topics __show__  view fulfills this need. Nest the bookmarks resource under the topics resources in `routes.rb`. Only create the routes that your application needs.\n\n### Implement CRUD For Bookmarks\n\nAllow users to create, destroy and update bookmarks. Refer to the <C>1639>|CRUD</C> and <C>1640|More CRUD</C> checkpoints for an example of implementing CRUD.\n\n### Test your code\n\n- Are you able to create new bookmarks?\n- Are you able to update bookmarks?\n- Are you able to delete bookmarks?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>197, "roadmap_section_ref"=>"d90dea94-5d48-4c9e-9077-596d37c53863|0", "default_student_access"=>"locked", "active_index"=>5, "checkpoint_type"=>"normal", "position"=>5, "points"=>1, "ref"=>"36ecccb3-bda9-44fd-a550-accf5cc8b1cd|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2242", "assessment"=>nil}, {"id"=>2243, "name"=>"Receive Incoming Emails", "summary"=>"Receive Incoming Emails", "body"=>"<!-- { ids:[2243], name:\"Receive Incoming Emails\", summary:\"Receive Incoming Emails\" } -->\n>As a user, I want to **email** a URL to Blocmarks and have it saved in the Blocmarks database<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Incorporate Mailgun\n\nUse [Mailgun](http://www.mailgun.com/) to configure Blocmarks to receive an email containing a bookmark URL. For help configuring it, refer to the [Mailgun Integration](https://www.bloc.io/resources/mailgun-integration) tutorial. You'll need to parse and convert incoming emails into bookmark objects that belong to a topic.\n\nWith Mailgun configured and your models created, add code to the create action in `IncomingController` to process incoming emails and turn them into bookmarks:\n\n```ruby(app/controllers/incoming_controller.rb)\nclass IncomingController < ApplicationController\n\n  # http://stackoverflow.com/questions/1177863/how-do-i-ignore-the-authenticity-token-for-specific-actions-in-rails\n  skip_before_action :verify_authenticity_token, only: [:create]\n\n  def create\n-    # Take a look at these in your server logs\n-    # to get a sense of what you're dealing with.\n-    puts \"INCOMING PARAMS HERE: \#{params}\"\n\n    # You put the message-splitting and business\n    # magic here.\n+    # Find the user by using params[:sender]\n+    # Find the topic by using params[:subject]\n+    # Assign the url to a variable after retreiving it from params[\"body-plain\"]\n\n+    # Check if user is nil, if so, create and save a new user\n\n+    # Check if the topic is nil, if so, create and save a new topic\n\n+    # Now that you're sure you have a valid user and topic, build and save a new bookmark\n\n    # Assuming all went well.\n    head 200\n  end\nend\n```\n\n### Test Your Code\n\n- Send an email to your app. Is a new bookmark created?\n- Send an email to your app using an email that does not belong to an existing user. Is a new user and new bookmark created?\n- Send an email to your app using a topic that does not already exist. Is a new topic and new bookmark created?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>197, "roadmap_section_ref"=>"d90dea94-5d48-4c9e-9077-596d37c53863|0", "default_student_access"=>"locked", "active_index"=>6, "checkpoint_type"=>"normal", "position"=>6, "points"=>1, "ref"=>"6a828154-84f5-4e97-8f22-c2b189a850ce|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2243", "assessment"=>nil}, {"id"=>2244, "name"=>"User Authorization", "summary"=>"User Authorization", "body"=>"<!-- { ids:[2244], name:\"User Authorization\", summary:\"User Authorization\" } -->\n>As a user, I want to be the **only one allowed** to delete and update my bookmarks<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Incorporate Pundit\n\nUse the [Pundit](https://github.com/elabs/pundit) gem for authorization. Refer to the [Pundit Readme](https://github.com/elabs/pundit/blob/master/README.md#policies) for examples of using Pundit policies.\n\nAdd Pundit to your `Gemfile`:\n\n```ruby(Gemfile)\n+gem 'pundit'\n```\n\nInstall Pundit with the `bundle` shortcut:\n\n```bash(Terminal)\n$ bundle\n```\n\nOpen `ApplicationController` and `include Pundit`:\n\n```ruby(app/controllers/application_controller.rb)\nclass ApplicationController < ActionController::Base\n+  include Pundit\n  protect_from_forgery with: :exception\n  before_action :configure_permitted_parameters, if: :devise_controller?\n\n  protected\n\n  def configure_permitted_parameters\n    devise_parameter_sanitizer.for(:sign_up) << :name\n  end\nend\n```\n\nGenerate a default policy file for your application with the `pundit:install` generator:\n\n```bash(Terminal)\n$ rails g pundit:install\n      create  app/policies/application_policy.rb\n```\n\nDefine rules for the `create`, `update`, and `destroy` resource actions:\n\n```ruby(app/policies/application_policy.rb)\n   def create?\n-    false\n+    user.present?\n   end\n\n   def update?\n-    false\n+    user.present? && (record.user == user)\n   end\n\n   def destroy?\n-    false\n+    user.present? && (record.user == user)\n   end\n```\n\nCreate a policy file for bookmarks. The `ApplicationPolicy` defaults will work for bookmarks, so the file can be empty apart from the class definition and inheritance declaration. Add authorization to `BookmarksController` and the bookmark and topic views.\n\n### Test Your Code\n\n- Are you able to update and or delete bookmarks created by another user?\n- Are you able to update and or delete bookmarks that you created?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>197, "roadmap_section_ref"=>"d90dea94-5d48-4c9e-9077-596d37c53863|0", "default_student_access"=>"locked", "active_index"=>7, "checkpoint_type"=>"normal", "position"=>7, "points"=>1, "ref"=>"de8767e5-9120-4afe-b362-b7457b2d793e|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2244", "assessment"=>nil}, {"id"=>2245, "name"=>"Like and Unlike Bookmarks", "summary"=>"Like and Unlike Bookmarks", "body"=>"<!-- { ids:[2245], name:\"Like and Unlike Bookmarks\", summary:\"Like and Unlike Bookmarks\" } -->\n>As a user, I want to **\"like and unlike\"** bookmarks created by other users<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Create a Like Model\n\n\"Liked\" flags need to be associated with the user who flagged the bookmark as \"liked\", and the bookmark that was flagged as a \"like\". This functionality merits a separate model. Create a `Like` model with `bookmark` and `user` references - no other attributes are necessary - and migrate the changes.\n\nThe `likes` table does not have any special data of its own (just its associations), so it can be considered a simple **join table**. A join table represents a relationship between two objects - in this case, a user and a bookmark.\n\n### Associate Likes with Users and Bookmarks\n\nAssociate likes by adding `has_many` to `user.rb` and `bookmark.rb`. Remember that an instance of the `Like` model cannot exist without an associated user or bookmark, so add the `dependent: :destroy` option for both models.\n\n### Check “Like” Status\n\nThe UI implementation for likes should be simple. You want to display a link next to each bookmark so that the user can \"like\" that bookmark. You will also display a link for users to \"unlike\" a bookmark. To toggle between liked and un-liked states, create a `liked` method which will let you know if a given user has liked a bookmark. Create the method in `User`:\n\n```ruby(app/models/user.rb)\n+  def liked(bookmark)\n+    likes.where(bookmark_id: bookmark.id).first\n+  end\n```\n\nThe `liked` method takes a `bookmark` object and returns a `like` object if one exists - if there is an entry in the likes table with the appropriate `user_id` and `bookmark_id`. If there is no `like` for the given `bookmark` and `user`, the method will return `nil`. This method will allow you to toggle like/unlike links in the views.\n\n### Create a Controller\n\nBefore you add the link to the view, create a controller for likes:\n\n```bash(Terminal)\n$ rails g controller Likes index\n```\n\nAdd the required routes to `routes.rb`:\n\n```ruby(config/routes.rb)\n   resources :bookmarks, except: [:index] do\n+    resources :likes, only: [:index, :create, :destroy]\n```\n\nCreate a likes `index` to display list of all liked bookmarks with an associated controller action to populate the view.\n\nNow that you have a method for detecting whether a user has liked a post, a `LikesController`, and the required routes, build a link for liking a bookmark. Create a **_like.html.erb** partial in the `app/views/likes/` directory and add the following code:\n\n```erb(app/views/likes/_like.html.erb)\n<div>\n  <% if like = current_user.liked(bookmark) %>\n    <%= link_to [bookmark, like], class: 'btn btn-danger', method: :delete do %>\n      <i class=\"glyphicon glyphicon-star-empty\"> </i>&nbsp; Unlike\n    <% end %>\n  <% else %>\n    <%= link_to [bookmark, Like.new], class: 'btn btn-primary', method: :post do %>\n      <i class=\"glyphicon glyphicon-star\"> </i>&nbsp; Like\n    <% end %>\n  <% end %>\n</div>\n```\n\nTo render this partial in a view, add the following to your views:\n\n```erb(erb)\n+    <%= render partial: 'likes/like', locals: { bookmark: @bookmark } %>\n```\n\nAdd create and destroy methods to `LikesController`:\n\n```ruby(app/controllers/likes_controller.rb)\n+  def create\n+    @bookmark = Bookmark.find(params[:bookmark_id])\n+    like = current_user.likes.build(bookmark: @bookmark)\n+\n+    if like.save\n+      # Add code to generate a success flash and redirect to @bookmark\n+    else\n+      # Add code to generate a failure flash and redirect to @bookmark\n+    end\n+  end\n\n+  def destroy\n+    # Get the bookmark from the params\n+    # Find the current user's like with the ID in the params\n+\n+    if like.destroy\n+      # Flash success and redirect to @bookmark\n+    else\n+      # Flash error and redirect to @bookmark\n+    end\n+  end\n```\n\nCreate a policy file for likes. The `ApplicationPolicy` defaults will work for likes, so `LikesPolicy` can be empty apart from the class definition and inheritance declaration. Add authorization to `LikesController` then add `authorize like` before the `if` statements in the `create` and `destroy` methods.\n\nAdd the proper authorization to the partial:\n\n```erb(app/views/likes/_like.html.erb)\n+<% if policy(Like.new).create? %>\n   <div>\n     <% if like = current_user.liked(bookmark) %>\n       <%= link_to [bookmark, like], class: 'btn btn-danger', method: :delete do %>\n         <i class=\"glyphicon glyphicon-star-empty\"> </i>&nbsp; Unlike\n       <% end %>\n     <% else %>\n       <%= link_to [bookmark, Like.new], class: 'btn btn-primary', method: :post do %>\n         <i class=\"glyphicon glyphicon-star\"> </i>&nbsp; like\n       <% end %>\n     <% end %>\n   </div>\n+<% end %>\n```\n\n### Test Your Code\n\n- Are you able to like bookmarks created by other users?\n- Are you able to like bookmarks created by you?\n- Are you able to unlike a previously liked bookmarks?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>197, "roadmap_section_ref"=>"d90dea94-5d48-4c9e-9077-596d37c53863|0", "default_student_access"=>"locked", "active_index"=>8, "checkpoint_type"=>"normal", "position"=>8, "points"=>1, "ref"=>"2f62489a-cbcf-477c-8f97-3d3d82339216|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2245", "assessment"=>nil}, {"id"=>2246, "name"=>"User Profiles", "summary"=>"User Profiles", "body"=>"<!-- { ids:[2246], name:\"User Profiles\", summary:\"User Profiles\" } -->\n>As a user, I want to **see** a list of bookmarks on my personal profile that I've added or liked<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Generate a Users Controller\n\nGenerate `UsersController` with the show action:\n\n```bash(Terminal)\n$ rails g controller Users show\n```\n\nAdd the necessary routes to `config/routes.rb`:\n\n```ruby(config/routes.rb)\n devise_for :users\n+resources :users, only: [:show]\n```\n\nAdd a `show` action to `UsersController` and populate instance variables with the bookmarks the user has created and liked:\n\n```ruby(app/controllers/users_controller.rb)\n+def show\n+  # populate @user_bookmarks with the user's bookmarks\n+  # populate @liked_bookmarks with liked bookmarks\n+end\n```\n\nModify the users __show__ to display the bookmarks the user has added and liked:\n\n![img](https://bloc-global-assets.s3.amazonaws.com/screencaps/blocmarks_my.png)\n\nIn the **_like** partial give users the ability to unlike bookmarks on their profile page.\n\n### Test your code\n\n- Does the user profile display all bookmarks a user has created or liked?\n- Is a user able to unlike a liked bookmark from their profile page?", "assignment"=>"Complete the user story.", "roadmap_section_id"=>197, "roadmap_section_ref"=>"d90dea94-5d48-4c9e-9077-596d37c53863|0", "default_student_access"=>"locked", "active_index"=>9, "checkpoint_type"=>"normal", "position"=>9, "points"=>1, "ref"=>"3c00a3b5-da96-4d96-b13b-5cd594068fc9|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2246", "assessment"=>nil}, {"id"=>2247, "name"=>"Extra Credit", "summary"=>"If you finish early, attempt these extra credit user stories", "body"=>"<!-- { ids:[2247], name:\"Extra Credit\", summary:\"If you finish early, attempt these extra credit user stories\" } -->\nThe goal of extra credit is to push you towards self-reliance, so outside of a brief description, we don't provide additional resources. If you finish your project early, challenge yourself to complete these additional user stories:\n\n| **User Story** | **Difficulty Rating** |\n| :-- | :-- |\n| As a user, I want to see [URL previews](https://github.com/embedly/embedly-ruby) for each bookmark | 3 |\n| As a developer, I want to write views using [HAML](https://www.bloc.io/resources/using-haml) instead of ERB | 3 |\n| As a developer, I want Blocmarks to have [readable URLs](http://railscasts.com/episodes/314-pretty-urls-with-friendlyid) | 3 |", "assignment"=>"Optional: Complete one or more of the extra credit user stories.", "roadmap_section_id"=>197, "roadmap_section_ref"=>"d90dea94-5d48-4c9e-9077-596d37c53863|0", "default_student_access"=>"locked", "active_index"=>nil, "checkpoint_type"=>"extra_credit", "position"=>nil, "points"=>0, "ref"=>"62e87dd0-bef7-4443-8e2b-befcf5f90590|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2247", "assessment"=>nil}]}, {"id"=>198, "roadmap_id"=>38, "name"=>"FE Specialization: Bloctime", "time_estimate"=>"80 Hours", "point_ratio"=>0.0, "description"=>"Bloctime uses Firebase and AngularJS to provide a Podomoro time management application.", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"locked", "ref"=>"090c0aee-8782-4545-aa53-adbf6ea73985|0", "section_type"=>"project", "checkpoints"=>[{"id"=>2248, "name"=>"Introduction", "summary"=>"Introduction", "body"=>"<!-- { ids:[2248], name:\"Introduction\", summary:\"Introduction\" } -->\nBloctime uses Firebase and AngularJS to provide a [Pomodoro](http://pomodorotechnique.com/) time management application.\n\n## Use case\n\nThe Pomodoro Technique aims to increase your work productivity and quality. In its simplest form, you time your work in 25-minute intervals, with five-minute breaks in between.\n\nDuring a 25-minute session, you focus on a task. Checking email, answering the phone, or browsing your [favorite forum](https://news.ycombinator.com/) is not allowed. During a break, you do not do anything related to work. You can meditate, do push ups and play with your dog, but you can't think about work.\n\nWhen implemented with discipline, the Pomodoro Technique can be a powerful tool to increase your productivity. You will build an application to manage your Pomodoro sessions.\n\nTo learn more about the specifics of the Pomodoro Technique, read the [detailed guide](http://caps.ucsd.edu/Downloads/tx_forms/koch/pomodoro_handouts/ThePomodoroTechnique_v1-3.pdf).\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As a user, I want to start and reset a **25-minute work** session | 3 |\n| As a user, I want to start and reset a **five-minute break** after each completed work session | 3 |\n| As a user, I want to start and reset a longer, **30-minute break** after every four completed work sessions |   1 |\n| As a user, I want to see a **live timer** during work sessions and breaks | 2 |\n| As a user, I want to **hear a sound** at the end of work sessions and breaks | 2 |\n| As a user, I want to **record completed tasks** | 2 |\n| As a user, I want to view a history of my tasks in **reverse chronological** order | 2 |\n\nBefore you begin working on user stories, complete this project's [Getting Started guide](https://www.bloc.io/resources/getting-started-with-frontend-projects). Later user stories often rely on the completion of the former, therefore, work on them in the order prescribed.\n\n## Wireframes\n\nThese wireframes are meant to suggest a design, not dictate one.\n\n| **Wireframe** | **Description** |\n| :-- | :-- |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloctime/bloctime-task-timer-tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloctime/bloctime-task-timer.png) | 25-minute task timer. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloctime/bloctime-break-timer-tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloctime/bloctime-break-timer.png) | Five-minute break timer. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloctime/bloctime-tasks-tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloctime/bloctime-tasks.png) | Empty task history. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloctime/bloctime-task-history-full-tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloctime/bloctime-task-history-full.png) | Task history. |", "assignment"=>"Acquaint yourself with the user stories for this project.\n\nOptional: Sketch your own wireframes.\n\nMessage your mentor, letting him/her know that you’ve chosen to work on this project.", "roadmap_section_id"=>198, "roadmap_section_ref"=>"090c0aee-8782-4545-aa53-adbf6ea73985|0", "default_student_access"=>"locked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"b97f5d32-75ab-400a-89f8-68547d49a16b|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2248", "assessment"=>nil}, {"id"=>2249, "name"=>"Start and Reset a Work Session", "summary"=>"As a user, I want to start and reset a 25-minute work session", "body"=>"<!-- { ids:[2249], name:\"Start and Reset a Work Session\", summary:\"As a user, I want to start and reset a 25-minute work session\" } -->\n\n> As a user, I want to start and reset a **25-minute work** session<br>\n> [Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Create a Button\n\n> How can I start or reset the timer from the view?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nUse a button with the [`ngClick`](https://docs.angularjs.org/api/ng/directive/ngClick) directive to trigger a custom function that starts or resets the timer. Create one button to handle work sessions and another to handle breaks. Use `{{ }}` markup or the [`ngBind`](https://docs.angularjs.org/api/ng/directive/ngBind) directive to handle the button text, i.e., \"Start a Work Session\", \"Reset\", \"Take a Break\", etc.\n\n<center>![Bloctime Task Timer](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloctime/bloctime-task-timer.png)</center>\n\n### Track Time\n\n> How can I keep track of time?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nWhen the user triggers the timer to start, use Angular's [`$interval` service](https://docs.angularjs.org/api/ng/service/$interval) to execute a function that updates the remaining time every second. In this example, `myFunction()` is called every three-seconds:\n\n```js\n$interval(myFunction, 3000);\n// interval is in milliseconds\n```\n\nCreate a custom directive to handle the timer's functionality and inject the `$interval` service.\n\n> What if the user doesn't finish a session?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nIf a user does not complete an entire 25-minute work session, they cannot pause the session and resume it later. Instead, the user must begin a new 25-minute session.\n\n### Test Your Code\n\n- Start a new work session.\n  - Click the reset button. Verify that Bloctime resets the timer, the text and the button.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>198, "roadmap_section_ref"=>"090c0aee-8782-4545-aa53-adbf6ea73985|0", "default_student_access"=>"locked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"262108fe-af6e-4907-961e-fb793c3bec68|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2249", "assessment"=>nil}, {"id"=>2250, "name"=>"Take a Break", "summary"=>"As a user, I want to start and reset a five-minute break after each completed work session", "body"=>"<!-- { ids:[2250], name:\"Take a Break\", summary:\"As a user, I want to start and reset a five-minute break after each completed work session\" } -->\n\n## Take a Break\n\n> As a user, I want to start and reset a **five-minute break** after each completed work session<br>\n> [Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Track Completion State\n\n> How can I make sure the user can't begin a five-minute break before completing a work session?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nThe user should only see one state at a time. The user can either:\n\n1. Start or reset a work session, or\n2. Start or reset a break\n\n<center>![Bloctime Break Timer](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloctime/bloctime-break-timer.png)</center>\n\nCreate a boolean variable, such as `onBreak`, that initially has a value of `false`. Use this boolean to control the state of the timer. When the timer reaches the end of a work session or break, the value of this boolean should change. Use the `ngShow` or [`ngHide`](https://docs.angularjs.org/api/ng/directive/ngHide) directive to determine what the user sees in the view: either the button that controls work sessions or the button that controls breaks.\n\nRefer to this [scotch.io tutorial](http://scotch.io/tutorials/javascript/how-to-use-ngshow-and-nghide) on how to use `ngHide` and `ngShow`.\n\n### Modify the Timer\n\n> How can I change the timer from a 25-minute work session to a five-minute break?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nWhen the timer reaches the end of a work session, assign the timer the length value associated with a five-minute break. The user will see this new time in the timer, and the `ngShow` or `ngHide` directive used on the buttons will pair the correct button to the timer's state.\n\nIt is [good practice to use constants](http://twofuckingdevelopers.com/2014/06/angularjs-best-practices-001-constants/) when the value of a variable is known and set. They make projects easier to manager. Create a constant for the static intervals associated with each work session and break, and inject them as a dependency. The common convention in JavaScript is for constants to be in all capital letters and snake-cased (with underscores), such as `MY_CONSTANT`, rather than `camelCaseNames`.\n\n[This GitHub Gist](https://gist.github.com/demisx/9605099) provides an example of Angular constants.\n\n### Test Your Code\n\n- Start and complete a 25-minute work session.\n  - Verify that Bloctime presents the option to go on break.\n- Take a break.\n  - Verify that the timer is reset to five minutes.\n  - Verify that at the end of the break, Bloctime is reset to begin another work session.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>198, "roadmap_section_ref"=>"090c0aee-8782-4545-aa53-adbf6ea73985|0", "default_student_access"=>"locked", "active_index"=>3, "checkpoint_type"=>"normal", "position"=>3, "points"=>1, "ref"=>"8505b38f-9b75-42d2-a95d-bed54315d468|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2250", "assessment"=>nil}, {"id"=>2251, "name"=>"Take a 30-Minute Break", "summary"=>"As a user, I want to start and reset a longer, 30-minute break after every four completed work sessions", "body"=>"<!-- { ids:[2251], name:\"Take a 30-Minute Break\", summary:\"As a user, I want to start and reset a longer, 30-minute break after every four completed work sessions\" } -->\n\n## Take a 30-Minute Break\n\n> As a user, I want to start and reset a longer, **30-minute break** after every four completed work sessions<br>\n> [Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\n### Track Completed Work Sessions\n\n> How can I update the timer to display a long break instead of a regular break?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nCreate a variable that holds the number of completed work sessions. Increment the count after each completed work session. When the timer reaches the end of a work session, update the time remaining, but instead of directly assigning the new timer length, use a conditional statement to check whether the number of completed work sessions is equal to four.\n\nIf it is, then update the timer to show thirty minutes. If the count does not equal four, then update the timer to show a regular, five-minute break. Once the count of the number of completed work sessions reaches four, reset it back to zero.\n\n### Test Your Code\n\n> To accelerate your testing process, temporarily reduce the 25-minute and five-minute time constants.\n\n- Complete four consecutive work sessions.\n  - Verify that Bloctime offers a 30-minute break.\n- Complete five consecutive work sessions.\n  - Verify that Bloctime offers a five-minute break.\n- Complete eight consecutive work sessions.\n  - Verify that Bloctime offers a 30-minute break.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>198, "roadmap_section_ref"=>"090c0aee-8782-4545-aa53-adbf6ea73985|0", "default_student_access"=>"locked", "active_index"=>4, "checkpoint_type"=>"normal", "position"=>4, "points"=>1, "ref"=>"0a005726-7127-4798-9acf-e39975b1854f|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2251", "assessment"=>nil}, {"id"=>2252, "name"=>"Update the Timer Live", "summary"=>"As a user, I want to see a live timer during work sessions and breaks", "body"=>"<!-- { ids:[2252], name:\"Update the Timer Live\", summary:\"As a user, I want to see a live timer during work sessions and breaks\" } -->\n\n## Update the Timer Live\n\n> As a user, I want to see a **live timer** during work sessions and breaks<br>\n> [Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Create a Directive\n\n> How can I ensure the view displays the live countdown?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nAssign the time remaining to a variable and use `{{ }}` markup or the [`ngBind`](https://docs.angularjs.org/api/ng/directive/ngBind) directive to render the time remaining in the view.\n\n> How can I convert the remaining time to minutes and seconds?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nFor the Bloc Jams application, we used a [filter](https://docs.angularjs.org/guide/filter) to convert the song length from seconds to minutes and seconds. Create a filter to handle the conversion of the time remaining.\n\n### Test Your Code\n\n- Start a work session.\n  - Verify that the timer counts down.\n  - Verify that the timer displays the remaining time accurately.\n- Start a five-minute break session.\n  - Verify that the timer counts down.\n  - Verify that the timer displays the remaining time accurately.\n- Start a thirty-minute break session.\n  - Verify that the timer counts down.\n  - Verify that the timer displays the remaining time accurately.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>198, "roadmap_section_ref"=>"090c0aee-8782-4545-aa53-adbf6ea73985|0", "default_student_access"=>"locked", "active_index"=>5, "checkpoint_type"=>"normal", "position"=>5, "points"=>1, "ref"=>"7ce361cb-905b-4bed-998e-5a4541675148|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2252", "assessment"=>nil}, {"id"=>2253, "name"=>"Play a \"Ding\"", "summary"=>"As a user, I want to hear a sound at the end of work sessions and breaks", "body"=>"<!-- { ids:[2253], name:'Play a \"Ding\"', summary:\"As a user, I want to hear a sound at the end of work sessions and breaks\" } -->\n\n## Play a \"Ding\"\n\n> As a user, I want to **hear a sound** at the end of work sessions and breaks<br>\n> [Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Add Sound With Buzz\n\n> How can I add sound to my application?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nWe used the [Buzz](http://buzz.jaysalvat.com/documentation/buzz/) JavaScript library to integrate sounds into the Bloc Jams application. The same library can be used in Bloctime to generate a \"ding\" at the end of work and break sessions.\n\nDownload the sound effect from one of these sources: [\"ding\" sound effects](http://soundjax.com/ding-1.html), [elevator ding](http://soundbible.com/1441-Elevator-Ding.html), or Google for your own.\n\nInclude Buzz in the head of your HTML file:\n\n```js\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/buzz/1.1.0/buzz.min.js\"></script>\n```\n\nIn your JavaScript file, create a new sound instance and ensure the file is preloaded before the user triggers it:\n\n```js\nvar mySound = new buzz.sound( \"/sounds/myfile.mp3\", {\n  preload: true\n});\n```\n\n### Trigger Playback\n\n> How can I trigger the sound to play when the timer reaches zero?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\n[Angular's `$watch`](https://docs.angularjs.org/api/ng/type/$rootScope.Scope) method registers a `listener` callback to execute whenever the `watchExpression` changes. In this example, `'watchThis'` is the `watchExpression` and `function()` is the `listener` function. That is, when `'watchThis'` changes, Angular executes `doThis()`:\n\n```js\n// sometimes referred to as a \"watcher\"\n$scope.$watch('watchThis', function() {\n doThis(); // logic for what happens when 'watchThis' changes\n});\n```\n\nIn Bloctime's case, watch the time remaining and call the `.play()` method on the variable that holds the sound file when the time remaining equals zero. Include this watcher in the directive that handles the timer's countdown. Refer to Egghead.io's video tutorial on [the basics of `$scope.$watch`](https://egghead.io/lessons/angularjs-the-basics-of-scope-watch).\n\n### Test Your Code\n\n- Complete a work session.\n  - Verify that Bloctime plays your sound effect.\n- Complete a five-minute break session.\n  - Verify that Bloctime plays your sound effect.\n- Complete a 30-minute break session.\n  - Verify that Bloctime plays your sound effect.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>198, "roadmap_section_ref"=>"090c0aee-8782-4545-aa53-adbf6ea73985|0", "default_student_access"=>"locked", "active_index"=>6, "checkpoint_type"=>"normal", "position"=>6, "points"=>1, "ref"=>"53c3d901-8f18-4f7e-b664-a19efd4b0321|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2253", "assessment"=>nil}, {"id"=>2254, "name"=>"Record Completed Tasks", "summary"=>"As a user, I want to record completed tasks", "body"=>"<!-- { ids:[2254], name:\"Record Completed Tasks\", summary:\"As a user, I want to record completed tasks\" } -->\n\n## Record Completed Tasks\n\n> As a user, I want to **record completed tasks**<br>\n> [Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Sync With Firebase\n\n> How can I sync my completed tasks with Firebase?\n\nInstantiate the Firebase service with the `new` operator. [This AngularFire example](https://github.com/firebase/angularfire/blob/master/docs/quickstart.md#user-content-4-inject-the-angularfire-services) shows instantiation in a controller, but for this project, abstract it into a factory that handles all of the model's data management. By doing so, it becomes reusable throughout the application.\n\n```js\n(function() {\n  function Tasks($firebaseArray) {\n    var ref = firebase.database().ref();\n  }\n\n  angular\n    .module('blocTime')\n    .factory('Tasks', ['$firebaseArray', Tasks]);\n})();\n```\n\nFirebase has a service for syncing data as an array called [$firebaseArray](https://github.com/firebase/angularfire/blob/master/docs/reference.md#firebasearray). Set the array holding the tasks to a Firebase object queried using `$firebaseArray`.\n\n```js\n(function() {\n  function Tasks($firebaseArray) {\n    var ref = firebase.database().ref();\n    \n    // download tasks into a synchronized array\n    var tasks = $firebaseArray(ref);\n\n    return {\n      all: tasks\n      // remaining logic for tasks\n    };\n  }\n\n  angular\n    .module('blocTime')\n    .factory('Tasks', ['$firebaseArray', Tasks]);\n})();\n```\n\nThe Tasks service can be injected into your controllers and directives so that you can assign the array of objects retrieved by the `all` method to a `$scope` variable. Refer to the \"Factory Recipe\" section from Angular's [documentation on Providers](https://docs.angularjs.org/guide/providers).\n\n### Add Completed Tasks\n\n> How do I add an entry to my history of completed tasks?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\n<center>![Bloctime Task Timer with Add Task](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloctime/bloctime-tasks.png)</center>\n\nThere are many ways to provide an input or form to add an entry to the list of completed tasks, one of which is to put an input with an `ngModel` directive tied to a `$scope` model at the top of the list. Allow the user to save the task by clicking a button or link.\n\n> How will I update the view of the history of tasks completed?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nThere's no need. When the task array is set equal to a `Firebase` object instance with an `$firebaseArray()` call, the data will automatically sync with the changes. The beauty of data binding!\n\n### Test Your Code\n\n- Add tasks to your history.\n  - Verify Bloctime syncs them with Firebase.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>198, "roadmap_section_ref"=>"090c0aee-8782-4545-aa53-adbf6ea73985|0", "default_student_access"=>"locked", "active_index"=>7, "checkpoint_type"=>"normal", "position"=>7, "points"=>1, "ref"=>"e751c9ad-84dd-42c0-a04c-dfd878616e29|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2254", "assessment"=>nil}, {"id"=>2255, "name"=>"Present Tasks in Reverse Chronological Order", "summary"=>"As a user, I want to view a history of my tasks in reverse chronological order", "body"=>"<!-- { ids:[2255], name:\"Present Tasks in Reverse Chronological Order\", summary:\"As a user, I want to view a history of my tasks in reverse chronological order\" } -->\n\n## Present Tasks in Reverse Chronological Order\n\n> As a user, I want to view a history of my tasks in **reverse chronological** order<br>\n> [Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Create a View for Each Task\n\n> How can I create an HTML element for each item in my history of tasks completed?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\n<center>![Bloctime Task Timer with Task History](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/bloctime/bloctime-task-history-full.png)</center>\n\nUse the `ngRepeat` directive to iterate over the array of tasks and create an element for each.\n\n### Arrange Tasks Chronologically\n\n> How can I change the order in which the tasks are displayed?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\nUse [Angular's `orderBy`](https://docs.angularjs.org/api/ng/filter/orderBy) filter to control the order in which the completed tasks are displayed.\n\n### Test Your Code\n\n- Add tasks to Bloctime's task history.\n  - Verify that each task appears in the view.\n  - Verify that tasks are organized in reverse chronological order (oldest at the bottom).", "assignment"=>"Complete the user story.", "roadmap_section_id"=>198, "roadmap_section_ref"=>"090c0aee-8782-4545-aa53-adbf6ea73985|0", "default_student_access"=>"locked", "active_index"=>8, "checkpoint_type"=>"normal", "position"=>8, "points"=>1, "ref"=>"c23ef9a4-e796-4811-87a1-d4efa4ec09ab|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2255", "assessment"=>nil}, {"id"=>2256, "name"=>"Extra Credit", "summary"=>"If you finish early, attempt these extra credit user stories", "body"=>"<!-- { ids:[2256], name:\"Extra Credit\", summary:\"If you finish early, attempt these extra credit user stories\" } -->\nThe goal of extra credit is to push you towards self-reliance, so outside of a brief description, we don't provide additional resources. If you finish your project early, challenge yourself to complete these additional user stories:\n\n| **User Story** | **Difficulty Rating** |\n| :-- | :-- |\n| As a user, I want my remaining time displayed as an **analog clock** | 3 |\n| As a user, I want to **pause** and **resume** a work session or break | 1 |\n| As a user, I want to **record** the number of interruptions experienced during a work session | 2 |\n| As a user, I want to **record** the number of work sessions required to complete a task | 2 |", "assignment"=>"Optional: Complete one or more of the extra credit user stories.", "roadmap_section_id"=>198, "roadmap_section_ref"=>"090c0aee-8782-4545-aa53-adbf6ea73985|0", "default_student_access"=>"locked", "active_index"=>9, "checkpoint_type"=>"normal", "position"=>9, "points"=>1, "ref"=>"60c59323-2810-4846-a3ae-6e5fc30acd44|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2256", "assessment"=>nil}]}, {"id"=>199, "roadmap_id"=>38, "name"=>"BE Specialization: Open To Do", "time_estimate"=>"80 Hours", "point_ratio"=>0.0, "description"=>"Build an externally usable API for a basic to-do list application.", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"locked", "ref"=>"eaf46738-df2e-4bd9-a6e8-7a51adbe9bc3|0", "section_type"=>"project", "checkpoints"=>[{"id"=>2257, "name"=>"Introduction", "summary"=>"Introduction to the Open To-Do Project", "body"=>"<!-- { ids:[2257], name:'Introduction', summary:'Introduction to the Open To-Do Project' } -->\nBuild an externally usable API for a basic to-do list application. This API will allow users to modify user accounts and to-do items from the command line.\n\n## Use Case\n\nTo-do lists should be simple, while remaining flexible to use. It's one thing to have a physically limited stack of papers in your pocket. It's quite another to have a list that works easily on your Android, and your spouse's iPad, and your Windows computer (and any command line, worldwide).\n\nApps like [Todo.txt](http://todotxt.com/) go a long way towards solving this problem by creating a simple API that any programmer can easily navigate and extend. Like Todo.txt, this app will be easy to control from the command line.\n\nYour API should allow you to change the same data from the command line or the browser. This API can support other platforms and allow programmers to build on your tool in new and exciting ways.\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As the Open To-do API, I want to **return** JSON representations of users, lists, and items | 2 |\n| As a user, I want to **authenticate** myself from the command line, using a username and password | 2 |\n| As a user, I want to **create** new users, lists, and items from the command line | 2 |\n| As a user, I want to **remove** users and lists from the command line | 1 |\n| As a user, I want to **update** list and item attributes from the command line | 3 |\n\nBefore you begin working on user stories, complete this project's [Getting Started guide](https://www.bloc.io/resources/getting-started-with-rails-web-development-projects). Later user stories often rely on the completion of the former, therefore, work on them in the order prescribed.", "assignment"=>"Acquaint yourself with the user stories for this project.\n\nMessage your mentor, letting him/her know that you’ve chosen to work on this project.", "roadmap_section_id"=>199, "roadmap_section_ref"=>"eaf46738-df2e-4bd9-a6e8-7a51adbe9bc3|0", "default_student_access"=>"locked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"6b8ef9cb-9f6d-4cab-b23a-5c031fe5ed7d|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2257", "assessment"=>nil}, {"id"=>2258, "name"=>"Rails Serializers", "summary"=>"Serialize objects to JSON using Rails", "body"=>"<!-- { ids:[2258], name:'Rails Serializers', summary:'Serialize objects to JSON using Rails' } -->\n>As the Open To-do API, I want to **return** JSON representations of users, lists, and items<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Generate Models\n\nOpen To-do API requires three models: a `User`, a `List` and an `Item`. A user model represents a user, an item is a single to-do item, and a list belongs to a user and refers to several items. Generate these three models with basic attributes.\n\n### Generate Serializers\n\nThe Open To-do API must return formatted responses that users can read, and machines can generate and parse. The standard for most modern web APIs is [JSON](http://en.wikipedia.org/wiki/JSON), which stands for JavaScript Object Notation. JSON is a lightweight data-interchange format.\n\nConverting a Rails object into a JSON representation is called serializing. Open To-do API will need to serialize users, lists, and items. Read our guide to [Rails Serializers](https://www.bloc.io/resources/serializers) to turn your Rails objects into JSON.\n\nGenerate `UserSerializer`, `ListSerializer`, and `ItemSerializer` using the Rails Serializers guide.\n\n### Test your code\n\n- From the Rails console, confirm that `puts JSON.pretty_generate(UserSerializer.new(User.first).as_json)` outputs the JSON representation of a `User`.\n- From the Rails console, confirm that `puts JSON.pretty_generate(ListSerializer.new(List.first).as_json)` outputs the JSON representation of a `List`.\n- From the Rails console, confirm that `puts JSON.pretty_generate(ItemSerializer.new(Item.first).as_json)` outputs the JSON representation of an `Item`.\n- Validate the JSON output for each Serializer using [JSONLint](http://jsonlint.com/).", "assignment"=>"Complete the user story.", "roadmap_section_id"=>199, "roadmap_section_ref"=>"eaf46738-df2e-4bd9-a6e8-7a51adbe9bc3|0", "default_student_access"=>"locked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"3e56a0d8-ae6c-446b-ade9-5b9970427332|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2258", "assessment"=>nil}, {"id"=>2259, "name"=>"User Authentication", "summary"=>"Authenticate users from the command line", "body"=>"<!-- { ids:[2259], name:'User Authentication', summary:'Authenticate users from the command line' } -->\n>As a user, I want to **authenticate** myself from the command line, using a username and password<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Generate a Base Controller\n\nCreate an `ApiController` from which the user, list, and items API controllers will inherent:\n\n```ruby(app/controllers/api_controller.rb)\n+class ApiController < ApplicationController\n # #1\n+  skip_before_action :verify_authenticity_token\n+\n+end\n```\n**#1**: Refer to the [CSRF resource](https://www.bloc.io/resources/csrf) to see why you need to skip the `verify_authentication_token`.\n\nCreate a private method named `authenticated?`. Other API controllers will use `authenticated?` to ensure users are authorized:\n\n```ruby(app/controllers/api_controller.rb)\n class ApiController < ApplicationController\n   skip_before_action :verify_authenticity_token\n+  private\n+  def authenticated?\n # #2\n+    authenticate_or_request_with_http_basic {|username, password| User.where( username: username, password: password).present? }\n+  end\n end\n```\n\n**#2**: `authenticate_or_request_with_http_basic` implements basic HTTP authentication, which ensures HTTP requests are accompanied by a valid username and password.\n\nTo test `authenticated?`, you will need an API route that requires authentication.\n\nEdit `routes.rb` to provide API routes:\n\n```ruby(app/config/routes.rb)\n # #3\n+  namespace :api, defaults: { format: :json } do\n+    resources :users\n+  end\n```\n\n**#3**: `namespace` separates the API routes from the rest of the application routes. `defaults: { format: :json}` tells the route to support requests in JSON form.\n\n### Generate a Users Controller\n\nCreate `UsersController` to match the API routes. Make a new directory in `app/controllers` named `api`. Create the new controller in that directory:\n\n```ruby(app/controllers/api/users_controller.rb)\n+class Api::UsersController < ApiController\n # #4\n+  before_action :authenticated?\n+\n+  def index\n+  end\n\n+end\n```\n\n**#4**: The `before` filter calls `authenticated?` before the request is processed.\n\nWrite `index` to return a `UserSerializer`-generated JSON representation of all users. The final line of the `index` method will look like:\n\n```ruby(app/controllers/api/users_controller.rb)\n   def index\n     ...\n+    render json: users, each_serializer: UserSerializer\n   end\n```\n\n### Test Your Code\n\n- Create users via the Rails console.\n- From the command line, retrieve all the users via a `curl` request. Replace `username` and `password` with a valid username and password:\n\n  ```bash(Terminal)\n  $ curl -u username:password http://localhost:3000/api/users/\n  ```\n- Try to retrieve all users using an invalid username and password combination, verify the request fails.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>199, "roadmap_section_ref"=>"eaf46738-df2e-4bd9-a6e8-7a51adbe9bc3|0", "default_student_access"=>"locked", "active_index"=>3, "checkpoint_type"=>"normal", "position"=>3, "points"=>1, "ref"=>"ee28e7dd-f91d-42cf-b5e1-f134337f917f|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2259", "assessment"=>nil}, {"id"=>2260, "name"=>"Create From the Command Line", "summary"=>"Create new users, lists, and items from the command line", "body"=>"<!-- { ids:[2260], name:'Create From the Command Line', summary:'Create new users, lists, and items from the command line' } -->\n>As a user, I want to **create** new users, lists, and items from the command line<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Edit Routes\n\nEdit `routes.rb` to provide the API routes for `List`s and `Item`s:\n\n```ruby(app/config/routes.rb)\n   namespace :api, defaults: { format: :json } do\n-    resources :users\n+    resources :users do\n+      resources :lists\n+    end\n\n+    resources :lists, only: [] do\n+      resources :items, only: [:create]\n+    end\n\n+    resources :items, only: [:destroy]\n   end\n```\n\n### Create List and Item Controllers\n\nCreate `ListsController` and `ItemsController` to match the API routes:\n\n```ruby(app/controllers/api/lists_controller.rb)\n+class Api::ListsController < ApiController\n+  before_action :authenticated?\n+\n+  def create\n+  end\n+\n+end\n```\n\n```ruby(app/controllers/api/items_controller.rb)\n+class Api::ItemsController < ApiController\n+  before_action :authenticated?\n+\n+  def create\n+  end\n\n+end\n```\n\nIn `UsersController`, add a `create` method and a private `users_params` method. `User` only requires username and password parameters:\n\n```ruby(app/controllers/api/users_controller.rb)\n class Api::UsersController < ApiController\n   ...\n+  def create\n+  end\n\n+  private\n+  def user_params\n+    params.require(:user).permit(:username, :password)\n+  end\n end\n```\n\nUse `user_params` in `create` to create and save a new `User`:\n\n```ruby(app/controllers/api/users_controller.rb)\n class Api::UsersController < ApiController\n ...\n   def create\n+    user = User.new(user_params)\n+    if user.save\n # # 5\n+      render json: user\n+    else\n # # 6\n+      render json: { errors: user.errors.full_messages }, status: :unprocessable_entity\n+    end\n   end\n\n```\n\n**5**: When you use `render :json`, Rails searches for a serializer for the object and use it if it is available. In this case, Rails will look for a serializer named `UserSerializer` and use it to serialize `user`.\n\n**6**: If saving the user fails (due to a missing user name or password), return the error messages and a [422 status code](http://www.restpatterns.org/HTTP_Status_Codes/422_-_Unprocessable_Entity) indicating that the data sent was un-processable.\n\n### Test From Command Line\n\nTest `create` from the command line:\n\n```bash(Terminal)\n$ curl -u username:password -d \"user[username]=Sterling\" -d \"user[password]=Archer\" http://localhost:3000/api/users/\n```\n\nOnce user creation is working, implement list creation. To test list creation, use `curl` from the command line to create a new list for the first user:\n\n```bash(Terminal)\n$ curl -u username:password -d \"list[name]=Things to do today\" -d \"list[permissions]=private\" http://localhost:3000/api/users/1/lists\n```\n\nOnce list creation is working, implement item creation. To test item creation, use curl from the command line to create a new item for the first list:\n\n```bash(Terminal)\n$ curl -u username:password -d \"item[description]=Dance if you want to\" http://localhost:3000/api/lists/1/items\n```\n\n### Test Your Code\n\n- Modify the curl request for creating users to send a request without a **password**. Confirm an error message is returned, and a user is not created.\n- Modify the curl request for creating users to send a request without a **username**. Confirm an error message is returned, and a user is not created.\n- Modify the curl request for creating lists to send a request without a **name**. Confirm an error message is returned, and a list is not created.\n- Modify the curl request for creating items to send a request without a **description**. Confirm an error message is returned, and an item is not created.", "assignment"=>"Complete the user story.", "roadmap_section_id"=>199, "roadmap_section_ref"=>"eaf46738-df2e-4bd9-a6e8-7a51adbe9bc3|0", "default_student_access"=>"locked", "active_index"=>4, "checkpoint_type"=>"normal", "position"=>4, "points"=>1, "ref"=>"90213d78-4c5f-415a-bee3-73a6a20568f0|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2260", "assessment"=>nil}, {"id"=>2261, "name"=>"Destroy Lists", "summary"=>"Remove users and lists from the command line", "body"=>"<!-- { ids:[2261], name:'Destroy Lists', summary:'Remove users and lists from the command line' } -->\n>As a user, I want to **remove** users and lists from the command line<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\n### Modify the Users Controller\n\nAdd a `destroy` method to `UsersController`:\n\n```ruby(app/controllers/api/users_controller.rb)\n class Api::UsersController < ApiController\n   ...\n+  def destroy\n+    begin\n+      user = User.find(params[:id])\n+      user.destroy\n# #1\n+      render json: {}, status: :no_content\n+    rescue ActiveRecord::RecordNotFound\n+      render :json => {}, :status => :not_found\n+    end\n+  end\n   ...\n end\n```\n\n**1**: Return HTTP 204 No Content to indicate the server successfully processed the request but is not returning any content.\n\nImplement list deletion as well.\n\n### Test Your Code\n\n- Test `User` deletion from the command line:\n\n  ```bash(Terminal)\n  $ curl -u username:password -X DELETE http://localhost:3000/api/users/1/\n  ```\n\n- Test `List` deletion from the command line:\n\n  ```bash(Terminal)\n  $ curl -u username:password -X DELETE http://localhost:3000/api/users/1/lists/1\n  ```", "assignment"=>"Complete the user story.", "roadmap_section_id"=>199, "roadmap_section_ref"=>"eaf46738-df2e-4bd9-a6e8-7a51adbe9bc3|0", "default_student_access"=>"locked", "active_index"=>5, "checkpoint_type"=>"normal", "position"=>5, "points"=>1, "ref"=>"6d92e1a5-7b8e-4747-af55-872649fe9975|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2261", "assessment"=>nil}, {"id"=>2262, "name"=>"Update Lists and Items", "summary"=>"Update list and item attributes from the command line", "body"=>"<!-- { ids:[2262], name:'Update Lists and Items', summary:'Update list and item attributes from the command line' } -->\n>As a user, I want to **update** list and item attributes from the command line<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Controllers\n\nAllow users to change a list's `permissions` attribute from the command line. Return an error if users try to set unsupported permissions. Add an `update` method to `ListsController`:\n\n```ruby(app/controllers/api/lists_controller.rb)\n class Api::ListsController < ApiController\n ...\n+def update\n+  list = List.find(params[:id])\n+  if list.update(list_params)\n+    render json: list\n+  else\n+    render json: { errors: list.errors.full_messages }, status: :unprocessable_entity\n+  end\n+end\n```\n\nAdd a validation for list permissions to reject updates with permissions that are not private, viewable, or open. Add the ability to update items and mark them as complete to `ItemsController`.\n\n### Test Your Code\n\n- Test list permission updates from the command line:\n\n  ```bash(Terminal)\n  $ curl -X PUT -u username:password -d \"list[permissions]=private\" http://localhost:3000/api/lists/1\n  ```\n\n- Test item completion from the command line:\n\n  ```bash(Terminal)\n  $ curl -X PUT -u username:password -d \"item[completed]=true\" http://localhost:3000/api/items/1\n  ```", "assignment"=>"Complete the user story.", "roadmap_section_id"=>199, "roadmap_section_ref"=>"eaf46738-df2e-4bd9-a6e8-7a51adbe9bc3|0", "default_student_access"=>"locked", "active_index"=>6, "checkpoint_type"=>"normal", "position"=>6, "points"=>1, "ref"=>"8fc809e2-c869-4a51-b351-a964327cc324|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2262", "assessment"=>nil}, {"id"=>2263, "name"=>"Extra Credit User Stories", "summary"=>"Open To-Do extra credit user stories", "body"=>"<!-- { ids:[2263], name:'Extra Credit User Stories', summary:'Open To-Do extra credit user stories' } -->\nThe goal of extra credit is to push you towards self-reliance, so outside of a brief description, we don't provide additional resources. If you finish your project early, challenge yourself to complete these additional user stories:\n\n| **User Story** | **Difficulty Rating** |\n| :-- | :-- |\n| As a developer, I want to add more robust authentication to the `authenticated?` method to prevent a user from modifying other users' lists or items | 2 |\n| As a developer, I want to add index methods to the API for lists and items | 2 |", "assignment"=>"Optional: Complete one or more of the extra credit user stories.", "roadmap_section_id"=>199, "roadmap_section_ref"=>"eaf46738-df2e-4bd9-a6e8-7a51adbe9bc3|0", "default_student_access"=>"locked", "active_index"=>nil, "checkpoint_type"=>"extra_credit", "position"=>nil, "points"=>0, "ref"=>"a9aaa576-3f25-4c74-93c2-14bf66c98c57|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2263", "assessment"=>nil}]}, {"id"=>200, "roadmap_id"=>38, "name"=>"Specialization: The Alexa Project", "time_estimate"=>"40-160 Hours", "point_ratio"=>0.0, "description"=>"Build and publish voice-enabled skills for Amazon's Alexa platform.", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"locked", "ref"=>"fd23123d-0e3d-4c30-adb8-d9b6a34021c5|0", "section_type"=>"project", "checkpoints"=>[{"id"=>2277, "name"=>"Introduction", "summary"=>"Provide requirements and details for the Amazon Alexa project", "body"=>"<!-- { ids:[1909,1916, 2277], name:\"Introduction\", summary:\"Provide requirements and details for the Amazon Alexa project\" } -->\n\nBuild voice-enabled software for Amazon's Alexa platform.  \n\n## Overview\n\nThe Alexa Project incorporates the [Alexa Skills Kit](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit) (ASK), [Alexa Voice Service](https://developer.amazon.com/public/solutions/alexa/alexa-voice-service) (AVS), Amazon Web Services, and Node to create three voice-enabled applications.\n\nAmazon devices that implement AVS include the Amazon Echo, Echo Dot, and Amazon Tap. Any device with a mic, a speaker, and an Internet connection can be AVS-enabled. This is the most exciting thing about Alexa.\n\nA \"Skill\" is Amazon's term for voice-based software which uses the ASK, which is a collection of APIs, tools, and documentation for giving Alexa capabilities. Once certified by Amazon, Skills are available in the [Alexa app](http://alexa.amazon.com), where a user can enable them.\n\n[Watch this Superbowl Ad for Amazon's Echo](https://www.youtube.com/watch?v=qTz5jAn-XX8) to see Alexa in action.\n\nThe universe of AVS enabled devices is growing and includes:\n\n- [Amazon Echo](http://www.amazon.com/gp/product/B00X4WHP5E?ref_=ods_gw_d_h1_ha_dplr_JA2_wp)\n- [Amazon Dot](http://www.amazon.com/b/?node=14047587011)\n- [Amazon Tap](http://www.amazon.com/dp/B00VXS8E8S/ref=fs_ods_fs_aucc_fx)\n- [Amazon Fire TV](http://www.amazon.com/gp/product/B00U3FPN4U?keywords=fire%20tv&qid=1457447313&ref_=sr_1_1&sr=8-1)\n- [Invoxia Triby](http://invoxia.com/en/triby)\n\n## Project Checkpoints\n\n| **Checkpoint** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| Build a Trivia Skill | 2 |\n| Build a Fact Skill | 2 |\n| Design a Skill | 3 |\n| Develop a Skill | 4 |\n| Enhance your Skill with analytics and user testing | 3 |\n| Promote your Skill and Get Rewarded | 1 |", "assignment"=>"1. Read about the devices that leverage the Alexa Skills Kit. Write about a few use cases in a message to your mentor, and state your intent for starting this project. Discuss this project with your mentor to ensure you're aligned on your goals for completing it.\n\n2. [Watch Amazon's Introduction to Voice Design (free course)](https://www.udemy.com/amazonalexa/learn/) on Udemy. It provides an introduction to many terms and concepts that you'll encounter in the next few checkpoints.", "roadmap_section_id"=>200, "roadmap_section_ref"=>"fd23123d-0e3d-4c30-adb8-d9b6a34021c5|0", "default_student_access"=>"locked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"127bd0a3-4d64-4684-92ad-8aaaf5087af1|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2277", "assessment"=>nil}, {"id"=>2286, "name"=>"Build a Trivia Skill", "summary"=>"Use a template to build and submit a Trivia Skill for certification", "body"=>"<!-- { ids:[1910,1917,2286], name:\"Build a Trivia Skill\", summary:\"Use a template to build and submit a Trivia Skill for certification\" } -->\n\n## Goals\n\nConfigure your Alexa Skills Kit development and publishing environments, and publish your first Alexa Skill.\n\n## Configuration\n\nAlexa Skills development requires two accounts:\n\n1. [Create a free Amazon developer account (no credit card required)](https://developer.amazon.com/). Your developer name or company name will be displayed for your published Skills, so choose wisely!\n\n2. [Create an Amazon Web Services (AWS) account](https://aws.amazon.com/). AWS has a [free tier](https://aws.amazon.com/free/), and for the purposes of this project you should not exceed the resources that the free tier provides. To create an AWS account you will need to provide your credit card information, but as long as your software doesn't surpass the free tier's resources you will not be charged.\n\n    > [The AWS Free Tier](https://aws.amazon.com/lambda/pricing/) includes 1 million free requests and up to 3.2 million seconds of compute time per month with AWS Lambda.\n\n## Customize the Trivia Skill Sample\n[Read the guide for modifying the Trivia Skill](https://developer.amazon.com/appsandservices/community/post/TxDJWS16KUPVKO/New-Alexa-Skills-Kit-Template-Build-a-Trivia-Skill-in-under-an-Hour).\n\n1. [Clone the GitHub repository containing the sample code for this checkpoint](https://github.com/amzn/alexa-skills-kit-js/tree/master/samples/reindeerGames).\n\n2. Choose your trivia topic and modify `index.js` accordingly.\n\n3. Find and replace all strings to match your trivia topic and Skill name.\n\n    > Amazon enforces trademark and copyright ownerships laws. Consider this when you name your Skill, when you choose your invocation words, and in any place a user will interact with your Skill.\n\n4. Test your Skill using the testing tools/tab for the Skill in the Amazon Developer Portal.\n\n5. After testing your Skill, verify that it's spelled correctly.\n\n    > If your answers include dates, consider spelling them out like nineteen ninety-six. 1996 is spoken as one-thousand nine-hundred ninety-six. Numbers should not be assumed to be spoken as proper numbers. In other words, disambiguate numbers and always read them in context.\n\n## Additional Resources\n\nYou will need an icon for your Skills, and [Flat Icon](http://www.flaticon.com/) provides thousands of free icons that may be acceptable.\n\nSubscribe to the [ASK Developer Weekly](http://askdevweekly.com/) newsletter to discover new developments in the Alexa community. The newsletter is curated by [Mark Carpenter](https://www.bloc.io/mentors/mark-carpenter), a Bloc mentor.\n\nHere are a few published Alexa Skills that will help you develop context for new ideas:\n\n- [1 Minute Mindfulness Alexa Skill](https://github.com/unitygirl/1minuteMindfullnessSkill)\n- [Airport Status Skill](https://github.com/bignerdranch/alexa-airportinfo)\n- [An Alexa Skill to lookup FCC license information](https://github.com/maihde/alexa-qrz)", "assignment"=>"1. Create a new GitHub repo for this Trivia Skill and commit your work. Send your GitHub repo link to your mentor.\n\n2. Submit your completed Trivia Skill to the Amazon Developer Portal for certification.\n\n3. After submitting your Skill, you will receive an email from Amazon that indicates your Skill has been successfully submitted. Forward it to your mentor or copy and paste the message contents into a Bloc message to send to your mentor.\n\n4. Publish a blog post about your experience with the Alexa Trivia Skill sample and share it with your mentor. Write about what you found interesting, challenging, and questions you have about Alexa in general. (If you don't already have a blog, create one now or use a service like [Medium](https://medium.com/) to publish posts for this project.)", "roadmap_section_id"=>200, "roadmap_section_ref"=>"fd23123d-0e3d-4c30-adb8-d9b6a34021c5|0", "default_student_access"=>"locked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"8bd388fc-c973-41a6-a504-89b2a054ae9f|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2286", "assessment"=>nil}, {"id"=>2287, "name"=>"Build a Fact Skill", "summary"=>"Use a template to build and submit a Fact Skill for certification", "body"=>"<!-- { ids:[1911,1918,2287], name:\"Build a Fact Skill\", summary:\"Use a template to build and submit a Fact Skill for certification\" } -->\n\n## Goals\n\nPublish your second Alexa Skill.\n\n## Customize the Fact Skill Sample and Submit it for Certification\n\n1. [Download the sample code for this checkpoint](https://github.com/amzn/alexa-skills-kit-js/tree/master/samples/spaceGeek).\n\n2. Choose your fact topic – such as elephants, gun safety, or milkshakes – and modify `index.js` accordingly.\n\n3. Find and replace all strings to match your fact topic and Skill name.\n\n4. Add dozens of facts to make your Skill more compelling for users.\n\n5. Compress the source files into a zip file and upload the zip file to AWS Lambda.\n\n6. Test your Skill using the testing tools/tab for the Skill in the Amazon Developer Portal.\n\n7. After testing your Skill, verify that it's spelled correctly and submit it to the Amazon Developer Portal for certification.", "assignment"=>"1. Create a new GitHub repo for this Fact Skill and commit your work. Send your GitHub repo link to your mentor.\n\n2. Submit your completed Fact Skill to Amazon for certification.\n\n3. After submitting your Skill, you will receive an email from Amazon that indicates your Skill has been successfully submitted. Forward it to your mentor.\n\n4. Publish a blog post about your experience with the Alexa Fact Skill sample and share it with your mentor. Write about what you found interesting, challenging, and questions you have about Alexa in general.", "roadmap_section_id"=>200, "roadmap_section_ref"=>"fd23123d-0e3d-4c30-adb8-d9b6a34021c5|0", "default_student_access"=>"locked", "active_index"=>3, "checkpoint_type"=>"normal", "position"=>3, "points"=>1, "ref"=>"4b2e9092-9da8-4017-8f22-fc8fc7794570|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2287", "assessment"=>nil}, {"id"=>2288, "name"=>"Design a Skill", "summary"=>"Design a Skill of your own and create the voice interaction model", "body"=>"<!-- { ids:[1912,1919,2288], name:\"Design a Skill\", summary:\"Design a Skill of your own and create the voice interaction model\" } -->\n\n## Goals\n\nDesign your third Alexa Skill and create its voice interaction plan.\n\n## Design Your Skill\n\nThe following resources will help you develop an Alexa Skill idea of your own.\n\n1. Review the [Getting Started with the Alexa Skills Kit](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/getting-started-guide) guide.\n\n2. Review the Alexa Skill Community's [current Skill listing](https://github.com/dale3h/alexa-skills-list) to learn the breadth and categories of Skills. _Per4mnce Software_, _Six Voices_, _Mine_ are just three of the 50 plus Alexa developers who are also in the Bloc community. Think about the Skill that you'd like to develop.\n\n  > If you have an Echo, Dot, or Tap device and have set it up, you can view the current Skill listing [on Amazon](http://alexa.amazon.com/#skills).\n\n3. Review each of the [samples from Amazon](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/using-the-alexa-skills-kit-samples). Install and test them to learn about the Alexa user experience.\n\n4. Browse the following ASK Developer resources to get a feel for the Alexa community:\n\n\t- [Ask Dev Weekly](http://askdevweekly.com/) archives\n\t- [DevPost's Alexa](http://devpost.com/software/built-with/amazon-alexa) gallery\n\t- [Love My Echo](http://lovemyecho.com/love-my-echo-skills/) skills listing\n\t- [Amazon Developer Forum](http://forums.developer.amazon.com/forums/forum.jspa?forumID=130) showcase section\n\t- [Hackster's Alexa community hub](https://www.hackster.io/amazon-alexa)\n\n5. Consider these free services to add features to your Skill:\n\t- [SSML](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/speech-synthesis-markup-language-ssml-reference) for playing sound files and synthesizing spoken language\n\n\t- [AWS Services](http://aws.amazon.com/) such as [S3](https://aws.amazon.com/s3/) for storing sounds, [DynamoDB](https://aws.amazon.com/dynamodb/) for data storage, and [SES](https://aws.amazon.com/ses/) for sending emails. Use of these AWS should fall within the [free-tier](https://aws.amazon.com/free/).\n\n\t- [MailGun](https://www.mailgun.com/) for sending emails via Alexa. MailGun has a free tier which will be sufficient for this project.\n\n6. You may choose to research paid API services based on your Skill's requirements. Should you choose to use a paid service, speak with your mentor about creating a donation site for your Skill. Amazon makes Skills free to all users so you will have to cover API costs, should you decide to purchase services to enhance your Skill. This is not a sustainable model, so you'll need to consider an option that makes your Skill financially viable. Two paid API services that may be interesting for Alexa are:\n\n\t- [Twilio](http://www.twilio.com/) for sending SMS and MMS messages.\n\t- [FlightStats flight tracker](https://developer.flightstats.com/api-docs/flightstatus/v2) for reporting details on flight arrivals, departures, and other flight information.\n\n7. Interact with current and former Bloc students on the [Alexa channel in Slack](https://students-bloc.slack.com/messages/alexa/). Contact your mentor if you need access. \n\n> You can post questions for the Alexa Engineering Team via the [Amazon Developer Forum](http://forums.developer.amazon.com/forums/forum.jspa?forumID=130).", "assignment"=>"1. Design the voice interaction menu of your Skill, including:\n\n    - Intent Schema\n\n    - Custom Slot Types\n\n    - Built-In Slots\n\n    - Sample Utterances\n\n    - A Visual Representation of The Menu/Model\n\n    - Companion App Cards\n\n    The following resources will help you design the voice interaction menu:\n\n\t- [Understanding How Users Invoke Custom Skills](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/supported-phrases-to-begin-a-conversation)\n\n\t- [ASK Voice Design Handbook](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-voice-design-handbook)\n\n\t- [Defining the Voice Interface](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/defining-the-voice-interface)\n\n\t- [Voice Design Best Practices](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-voice-design-best-practices)\n\n\t- [Voice Design 101 On-Demand Webinar](https://goto.webcasts.com/starthere.jsp?ei=1087592)\n\n\t- [Amazon's Udemy Course on Voice Design](https://www.udemy.com/amazonalexa/)\n\n\t- [Use Vocal Apps' Alexa Designer tool to Design Your Visual Representation](https://www.alexa-designer.com/)\n\n2. Publish a blog post about your Alexa Skill idea.", "roadmap_section_id"=>200, "roadmap_section_ref"=>"fd23123d-0e3d-4c30-adb8-d9b6a34021c5|0", "default_student_access"=>"locked", "active_index"=>4, "checkpoint_type"=>"normal", "position"=>4, "points"=>1, "ref"=>"d8eb31b4-4461-498d-a097-b70f06b3468b|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2288", "assessment"=>nil}, {"id"=>2289, "name"=>"Develop a Skill", "summary"=>"Learn Node, develop a Skill, and test its behavior", "body"=>"<!-- { ids:[1913,1920,2289], name:\"Develop a Skill\", summary:\"Learn Node, develop a Skill, and test its behavior\" } -->\n\n## Goals\n\nLearn Node, develop your third Alexa Skill, and test its behavior.\n\n## Develop your Skill\n\n1. Alexa Skills are developed with Node. Node is a JavaScript runtime environment, and you need to [download and install it](https://nodejs.org/en/).\n\n2. After you have successfully downloaded and installed your Node environment, [learn the basics with this tutorial](https://github.com/workshopper/learnyounode).\n\n3. Configure and test these [ASK samples](https://github.com/amzn/alexa-skills-kit-js) to practice with Node.\n\n4. Review Alexa open-source projects to learn how other developers built their Skills. Here are a couple places to find Alexa open-source projects:\n\n    - [ASK Dev Weekly](http://askdevweekly.com/issues) contains links to repos of live skills.\n\n    - [git:logs](http://www.gitlogs.com/most_popular?topic=alexa%20skill) surfaces GitHub repos containing Alexa Skills.\n\n5. Review [ASK testing and debugging tips](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/testing-an-alexa-skill). Here are a couple specific tips that will help you debug your Skill:\n\n    - Use `console.log()`. The output of Lambda console.log statements are sent to the [AWS CloudWatch service](http://aws.amazon.com/documentation/cloudwatch/).\n\n    - The `event` object contains information that will help you understand what your Skill is doing. Print out event information using `console.log(JSON.parse(event));`.", "assignment"=>"1. Create a GitHub repo for your Skill and push your code to it. Send the repo link to your mentor.\n\n2. Develop and test your Skill.", "roadmap_section_id"=>200, "roadmap_section_ref"=>"fd23123d-0e3d-4c30-adb8-d9b6a34021c5|0", "default_student_access"=>"locked", "active_index"=>5, "checkpoint_type"=>"normal", "position"=>5, "points"=>1, "ref"=>"a04a0cdd-7312-42ff-a8d3-3e261086d1fd|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2289", "assessment"=>nil}, {"id"=>2290, "name"=>"Enhance Your Skill", "summary"=>"Add analytics to your Skill and test it thoroughly before submitting for certification", "body"=>"<!-- { ids:[1914,1921,2290], name:\"Enhance Your Skill\", summary:\"Add analytics to your Skill and test it thoroughly before submitting for certification\" } -->\n\n## Goals\n\nAdd analytics to your Skill and test it thoroughly before submitting for certification.\n\n## Setup Analytics\n\n1. The Amazon Developer portal's tracking features provide basic Skill usage information. To understand the user's interaction with your Skill you will need to use Google Analytics, or some other tracking service.\n\n2. Add [Google Analytics](https://support.google.com/analytics/answer/1008015?hl=en) (GA) tracking to your Skill. Track each request, passing the details of the request to GA.\n\nHere is some code to get you started. `trackEvent` takes some Google Analytics arguments and posts them to the collect endpoint for storage and analysis. Below, you can see how this method might be called in the `AMAZON.NoIntent` function.\n\n```js(index.js)\nvar express = require('express');\nvar request = require('request');\n\nvar app = express();\n\nvar GA_TRACKING_ID = 'UA-YOUR-CODE-HERE';\n\nfunction trackEvent(category, action, label, value, callbback) {\n  var data = {\n    v: '1', // API Version.\n    tid: GA_TRACKING_ID, // Tracking ID / Property ID.\n    // Anonymous Client Identifier. Ideally, this should be a UUID that\n    // is associated with particular user, device, or browser instance.\n    cid: '555',\n    t: 'event', // Event hit type.\n    ec: category, // Event category.\n    ea: action, // Event action.\n    el: label, // Event label.\n    ev: value, // Event value.\n  };\n\n  request.post(\n    'http://www.google-analytics.com/collect', {\n      form: data\n    },\n    function(err, response) {\n      if (err) { return callbback(err); }\n      if (response.statusCode !== 200) {\n        return callbback(new Error('Tracking failed'));\n      }\n      callbback();\n    }\n  );\n}\n\n...\n\n//example usage in an intent handler\n\"AMAZON.NoIntent\": function (intent, session, response) {\n    trackEvent(\n      'Intent',\n      'AMAZON.NoIntent',\n      'na',\n      '100', // Event value must be numeric.\n      function(err) {\n        if (err) {\n        \treturn next(err);\n        }\n        var speechOutput = \"Okay.\";\n        response.tell(speechOutput);\n      });\n}\n\n```\n\n## Conduct User Testing\n\n> NOTE: Testing your skills as described herein requires an Alexa enabled device, such as an Echo, Dot, Tap, Triby or [Raspberry Pi](https://github.com/amzn/alexa-avs-raspberry-pi).\n\n1. To improve the quality of your Skill, ask users to test it. Find at least three individuals who will let you monitor their Skill usage as they test your Skill.\n\n2. Leverage “settings” and “user permissions” in the Amazon Developer Portal to add test users to your Skill. Practice adding email addresses, assigning the developer role, and switching accounts. Add your mentor as a user.\n\n3. Tell your users what your Skill does and how to launch it, but do not explain how to use it. Observe their natural interaction with your Skill and note their reactions. Use the results to improve your Skill.\n\n4. The following resources will introduce you to user testing:\n\n    - [User Experience Testing Do's and Don'ts](http://blog.oboxthemes.com/the-dos-and-donts-of-user-experience-testing/)\n\n    - [13 ways to master UX testing for your startup](http://thenextweb.com/dd/2013/08/10/13-ways-to-master-ux-testing-for-your-startup/#gref)\n\n    - [UX Recipe - checklist and links](http://uxrecipe.github.io/)\n\n    - [UX checklist](http://uxchecklist.github.io/)\n\n    - [Usability 101: Introduction to Usability](https://www.nngroup.com/articles/usability-101-introduction-to-usability/)\n\n    - [Guide to Planning and Conducting Usability Tests](http://www.lib.washington.edu/usability/resources/guides/tests)\n\n## Resources\n\n- [Echosim](http://echosim.com/) for online testing of your skills\n\n- [Skill submission checklist](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-submission-checklist)\n\n- [Alexa Skills Kit Voice Interface and User Experience Testing](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-voice-interface-and-user-experience-testing)", "assignment"=>"1. Push the latest changes for your Skill to your GitHub repo.\n\n2. Submit your completed Skill to Amazon for certification.\n\n3. After submitting your Skill, you will receive an email from Amazon that indicates your Skill has been successfully submitted. Forward it to your mentor.\n\n4. Send your mentor a message that describes your user testing experience and how it changed your Skill. Include a screenshot of a report from your GA account that shows your Skill usage during user testing.", "roadmap_section_id"=>200, "roadmap_section_ref"=>"fd23123d-0e3d-4c30-adb8-d9b6a34021c5|0", "default_student_access"=>"locked", "active_index"=>6, "checkpoint_type"=>"normal", "position"=>6, "points"=>1, "ref"=>"92d6bdfd-29da-441e-a911-f931b140302b|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2290", "assessment"=>nil}, {"id"=>2291, "name"=>"Final Steps", "summary"=>"Submit information about your Skill and receive a free Amazon Echo", "body"=>"<!-- { ids:[1915,1922,2291], name:\"Final Steps\", summary:\"Submit information about your Skill and receive a free Amazon Echo\" } -->\n\n## Goals\n\nClaim your Echo, share your success, and request an interview with the Alexa team at Amazon.\n\n## Claim Your Echo\n\nAmazon is offering a free Amazon Echo device to the first 100 members of the Bloc.io community who complete the Alexa Project on Bloc.io and publish three Alexa skills between March 18, 2016 and July 31, 2016. To be eligible for this promotion, get your Alexa skills certified and fill out [this form](http://www.amazon.com/gp/html-forms-controller/Bloc_Echo_Promotion).\n\nIf you comply with the terms, the Alexa team will ship you an Echo device within 6 weeks of the submission of your form. See the complete terms and conditions of this offer [here](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/content/alexa-developer-skill-promotion-bloc).\n\n## Share Your Experience\n\nBlog about your experience with Alexa Skill development, and share it in the following channels:\n\n- Mention it in the [Showcase section of the Amazon Developer Forums](http://forums.developer.amazon.com/forums/forum.jspa?forumID=130).\n\n- Ask [@lovemyecho](https://twitter.com/lovemyecho) for a feature in her daily blog\n\n- Mention it to [@AlexaDevs](https://twitter.com/alexadevs).\n\n- Share it with the [Alexa team](mailto:alexa-dev-communications@amazon.com) for a potential Skill spotlight in their developer newsletter.\n\n- Send your Skill to the [ASK Dev Weekly](mailto:marktc+askdev@gmail.com) and request a  mention in their newsletter.", "assignment"=>"If you enjoyed your experience developing Alexa Skills, speak with your mentor about interviewing for the [Alexa team at Amazon](https://www.amazon.jobs/en/search?base_query=alexa). Your mentor and the Career Support team will help you with the application process.\n\n<mentor-checkpoint-note>\n### Helping your student apply for the Alexa Team at Amazon:\n1. Make sure your student has gone through Career Prep, and has had a Mock Interview.\n2. Review the jobs and their descriptions your student found interesting.\n3. Choose the job openings that fit your student. For example, a Senior Engineer might not be the best job to apply for.\n4. Have your student customize their resume and cover letter for the job listing.\n5. Send the job ID(s), resume and cover letter to [Marion at Amazon](mardes@amazon.com)\n</mentor-checkpoint-note>", "roadmap_section_id"=>200, "roadmap_section_ref"=>"fd23123d-0e3d-4c30-adb8-d9b6a34021c5|0", "default_student_access"=>"locked", "active_index"=>7, "checkpoint_type"=>"normal", "position"=>7, "points"=>1, "ref"=>"8e9a4265-8df5-498f-976b-aa52cf253e34|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2291", "assessment"=>nil}]}, {"id"=>201, "roadmap_id"=>38, "name"=>"Specialization: Capstone", "time_estimate"=>"80 Hours", "point_ratio"=>0.0, "description"=>"A new application of your choice that encourages you to invent, use new technologies, think critically, and solve challenging problems.", "icon"=>nil, "visible_to_students"=>true, "default_student_access"=>"locked", "ref"=>"91891abe-6cc8-47f4-81b8-5ba2f7c7b299|0", "section_type"=>"project", "checkpoints"=>[{"id"=>2276, "name"=>"Introduction", "summary"=>"Introduction", "body"=>"", "assignment"=>"", "roadmap_section_id"=>201, "roadmap_section_ref"=>"91891abe-6cc8-47f4-81b8-5ba2f7c7b299|0", "default_student_access"=>"locked", "active_index"=>1, "checkpoint_type"=>"normal", "position"=>1, "points"=>1, "ref"=>"dd3d6848-a422-4e86-b65b-f0ea5171bbf7|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2276", "assessment"=>nil}, {"id"=>2292, "name"=>"Define Requirements and Write User Stories", "summary"=>"Write your own user stories", "body"=>"", "assignment"=>"", "roadmap_section_id"=>201, "roadmap_section_ref"=>"91891abe-6cc8-47f4-81b8-5ba2f7c7b299|0", "default_student_access"=>"locked", "active_index"=>2, "checkpoint_type"=>"normal", "position"=>2, "points"=>1, "ref"=>"b1297aed-9d3c-40f4-b6c4-12c8245a24a7|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2292", "assessment"=>nil}, {"id"=>2293, "name"=>"Create Wireframes and Mockups", "summary"=>"Design your Capstone's user interface", "body"=>"", "assignment"=>"", "roadmap_section_id"=>201, "roadmap_section_ref"=>"91891abe-6cc8-47f4-81b8-5ba2f7c7b299|0", "default_student_access"=>"locked", "active_index"=>3, "checkpoint_type"=>"normal", "position"=>3, "points"=>1, "ref"=>"3913bab7-5fc1-4b50-b2c7-cb9ec49ffae8|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2293", "assessment"=>nil}, {"id"=>2294, "name"=>"Implement Each User Story", "summary"=>"Build your Capstone project", "body"=>"", "assignment"=>"", "roadmap_section_id"=>201, "roadmap_section_ref"=>"91891abe-6cc8-47f4-81b8-5ba2f7c7b299|0", "default_student_access"=>"locked", "active_index"=>4, "checkpoint_type"=>"normal", "position"=>4, "points"=>1, "ref"=>"b66dbc5a-8744-403d-87de-050239adc6ce|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2294", "assessment"=>nil}, {"id"=>2295, "name"=>"Publish", "summary"=>"Deploy and Publish your application", "body"=>"", "assignment"=>"", "roadmap_section_id"=>201, "roadmap_section_ref"=>"91891abe-6cc8-47f4-81b8-5ba2f7c7b299|0", "default_student_access"=>"locked", "active_index"=>5, "checkpoint_type"=>"normal", "position"=>5, "points"=>1, "ref"=>"c505f286-e0a6-4f1e-b0a0-0d12d7cdb76c|0", "exercises"=>false, "quiz_id"=>nil, "path"=>"/checkpoints/2295", "assessment"=>nil}]}]}